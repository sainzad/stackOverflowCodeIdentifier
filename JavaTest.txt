Charset charset = Charset.forName("US-ASCII");
String s = ...;
BufferedWriter writer = null;
try {
    writer = Files.newBufferedWriter(file, charset);
    writer.write(s, 0, s.length());
} catch (IOException x) {
    System.err.format("IOException: %s%n", x);
} finally {
    if (writer != null) writer.close();
}
TwitterAuthException; import com twitter sdk android core TwitterAuthToken; import com twitter sdk android core TwitterSession; public abstract class AuthHandler { static final String EXTRA_TOKEN = "tk"; static final String EXTRA_TOKEN_SECRET = "ts"; static final String EXTRA_SCREEN_NAME = "screen_name"; static final String EXTRA_USER_ID = "user_id"; static final String EXTRA_AUTH_ERROR = "auth_error"; static final int RESULT_CODE_ERROR = Activity RESULT_FIRST_USER; protected final int requestCode; private final TwitterAuthConfig config; private final Callback<TwitterSession> callback; AuthHandler(TwitterAuthConfig authConfig, Callback<TwitterSession> callback, int requestCode) { config = authConfig; this callback = callback; this requestCode = requestCode; } TwitterAuthConfig getAuthConfig() { return config; } Callback<TwitterSession> getCallback() { return callback; } public abstract boolean authorize(Activity activity); public boolean handleOnActivityResult(int requestCode, int resultCode, Intent data) { if (this requestCode != requestCode) { return false; } final Callback<TwitterSession> callback = getCallback(); if (callback != null) { if (resultCode == Activity RESULT_OK) { final String token = data getStringExtra(EXTRA_TOKEN); final String tokenSecret = data getStringExtra(EXTRA_TOKEN_SECRET); final String screenName = data getStringExtra(EXTRA_SCREEN_NAME); final long userId = data getLongExtra(EXTRA_USER_ID, 0L); callback success(new Result<>(new TwitterSession( new TwitterAuthToken(token, tokenSecret), userId, screenName), null)); } else if (data != null && data hasExtra(EXTRA_AUTH_ERROR)) { callback failure( (TwitterAuthException) data getSerializableExtra(EXTRA_AUTH_ERROR)); } else { callback failure(new TwitterAuthException("Authorize failed ")); } } return true; } }package com twitter sdk android core identity; import android app Activity; import com twitter sdk android core TwitterCore; import java util concurrent atomic AtomicReference; import io fabric sdk android Fabric; class AuthState { final AtomicReference<AuthHandler> authHandlerRef = new AtomicReference<>(null); public boolean beginAuthorize(Activity activity, AuthHandler authHandler) { boolean result = false; if (isAuthorizeInProgress()) { Fabric getLogger() w(TwitterCore TAG, "Authorize already in progress"); } else if (authHandler authorize(activity)) { result = authHandlerRef compareAndSet(null, authHandler); if (!result) { Fabric getLogger() w(TwitterCore TAG, "Failed to update authHandler, authorize" + " already in progress "); } } return result; } public void endAuthorize() { authHandlerRef set(null); } public boolean isAuthorizeInProgress() { return authHandlerRef get() != null; } public AuthHandler getAuthHandler() { return authHandlerRef get(); } }package com twitter sdk android core; import com google gson annotations SerializedName; public abstract class AuthToken { @SerializedName("created_at") protected final long createdAt; public AuthToken() { createdAt = System currentTimeMillis(); } protected AuthToken(long createdAt) { this createdAt = createdAt; } public abstract boolean isExpired(); }package com twitter sdk android core; import com google gson Gson; import com google gson JsonDeserializationContext; import com google gson JsonDeserializer; import com google gson JsonElement; import com google gson JsonObject; import com google gson JsonParseException; import com google gson JsonPrimitive; import com google gson JsonSerializationContext; import com google gson JsonSerializer; import com twitter sdk android core internal oauth GuestAuthToken; import com twitter sdk android core internal oauth OAuth2Token; import java lang reflect Type; import java util HashMap; import java util Map; public class AuthTokenAdapter implements JsonSerializer<AuthToken>, JsonDeserializer<AuthToken> { private static final String AUTH_TYPE = "auth_type"; private static final String AUTH_TOKEN = "auth_token"; static final Map<String, Class<? extends AuthToken>> authTypeRegistry = new HashMap<>(); static { authTypeRegistry put("oauth1a", TwitterAuthToken class); authTypeRegistry put("oauth2", OAuth2Token class); authTypeRegistry put("guest", GuestAuthToken class); } private final Gson gson; public AuthTokenAdapter() { this gson = new Gson(); } @Override public JsonElement serialize(AuthToken src, Type typeOfSrc, JsonSerializationContext context) { final JsonObject jsonObject = new JsonObject(); jsonObject addProperty(AUTH_TYPE, getAuthTypeString(src getClass())); jsonObject add(AUTH_TOKEN, gson toJsonTree(src)); return jsonObject; } @Override public AuthToken deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context) throws JsonParseException { final JsonObject jsonObject = json getAsJsonObject(); final JsonPrimitive jsonAuthType = jsonObject getAsJsonPrimitive(AUTH_TYPE); final String authType = jsonAuthType getAsString(); final JsonElement jsonAuthToken = jsonObject get(AUTH_TOKEN); return gson fromJson(jsonAuthToken, authTypeRegistry get(authType)); } static String getAuthTypeString(Class<? extends AuthToken> authTokenClass) { for (Map Entry<String, Class<? extends AuthToken>> entry : authTypeRegistry entrySet()) { if (entry getValue() equals(authTokenClass)) { return entry getKey(); } } return ""; } }package com zxy recovery test; import android os