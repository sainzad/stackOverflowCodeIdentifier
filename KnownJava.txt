package com.twitter.sdk.android.core.identity;class WebViewException extends Exception { private static final long serialVersionUID = -7397331487240298819L; private final int errorCode; private final String failingUrl; public WebViewException(int errorCode, String description, String failingUrl) { super(description); this.errorCode = errorCode; this.failingUrl = failingUrl; } public int getErrorCode() { return errorCode; } public String getDescription() { return getMessage(); } public String getFailingUrl() { return failingUrl; }}); } private static boolean isVineUser(Card card) { final UserValue user = card.bindingValues.get("site"); try { if (user != null && Long.parseLong(user.idStr) == VINE_USER_ID) { return true; } } catch (NumberFormatException ex) { return false; } return false; } public static String getPublisherId(Card card) { final UserValue user_value = card.bindingValues.get("site"); return user_value.idStr; } public static String getStreamUrl(Card card) { return card.bindingValues.get("player_stream_url"); } public static String getCallToActionUrl(Card card) { return card.bindingValues.get("card_url"); } public static ImageValue getImageValue(Card card) { return card.bindingValues.get("player_image"); }}package com.twitter.sdk.android.core.services;import com.twitter.sdk.android.core.models.User;import retrofit2.Call;import retrofit2.http.GET;import retrofit2.http.Query;public interface AccountService {  @GET("/1.1/account/verify_credentials.json") Call<User> verifyCredentials(@Query("include_entities") Boolean includeEntities, @Query("skip_status") Boolean skipStatus);}package com.twitter.sdk.android.tweetui.internal;import android.animation.Animator;import android.animation.AnimatorListenerAdapter;import android.view.View;import android.view.ViewPropertyAnimator;class AnimationUtils { public static ViewPropertyAnimator fadeOut(final View from, int duration) { if (from.getVisibility() == View.VISIBLE) { from.clearAnimation(); final ViewPropertyAnimator animator = from.animate(); animator.alpha(0f) .setDuration(duration) .setListener(new AnimatorListenerAdapter() { @Override public void onAnimationEnd(Animator animation) { from.setVisibility(View.INVISIBLE); from.setAlpha(1f); } }); return animator; } return null; } public static ViewPropertyAnimator fadeIn(View to, int duration) { if (to.getVisibility() != View.VISIBLE) { to.setAlpha(0f); to.setVisibility(View.VISIBLE); } to.clearAnimation(); final ViewPropertyAnimator animator = to.animate(); animator.alpha(1f) .setDuration(duration) .setListener(null); return animator; }}package com.twitter.sdk.android.core.models;import com.google.gson.annotations.SerializedName;public class ApiError { @SerializedName("message") public final String message; @SerializedName("code") public final int code; public ApiError(String message, int code) { this.message = message; this.code = code; }}package com.twitter.sdk.android.core.models;import com.google.gson.annotations.SerializedName;import java.util.List;public class ApiErrors { @SerializedName("errors") public final List<ApiError> errors; public ApiErrors(List<ApiError> errors) { this.errors = errors; }}package com.twitter.sdk.android.tweetcomposer;import android.content.Context;import android.net.Uri;import android.util.AttributeSet;import android.view.ViewGroup;import android.widget.ImageView;import android.widget.LinearLayout;import android.widget.TextView;import com.squareup.picasso.Picasso;import com.squareup.picasso.Transformation;public class AppCardView extends LinearLayout { ImageView appImageView; ViewGroup appInfoLayout; TextView appInstallButton; TextView appNameView; TextView appStoreNameView; public AppCardView(Context context) { this(context, null); } public AppCardView(Context context, AttributeSet attrs) { super(context, attrs); init(context); } public AppCardView(Context context, AttributeSet attrs, int defStyle) { super(context, attrs, defStyle); init(context); } void init(Context context) { setOrientation(LinearLayout.VERTICAL); inflate(context, R.layout.tw__app_card, this); findSubviews(); setButtonColor(); } void findSubviews() { appImageView = (ImageView) findViewById(R.id.tw__app_image); appNameView = (TextView) findViewById(R.id.tw__app_name); appStoreNameView = (TextView) findViewById(R.id.tw__app_store_name); appInstallButton = (TextView) findViewById(R.id.tw__app_install_button); appInfoLayout = (ViewGroup) findViewById(R.id.tw__app_info_layout); } void setCard(Card card) { setImage(Uri.parse(card.imageUri)); setAppName(card.appName); } void setImage(Uri uri) { final int radius = getResources().getDimensionPixelSize(R.dimen.tw__card_radius_medium); final Transformation transformation = new RoundedCornerTransformation.Builder() .setRadii(radius, radius, 0, 0) .build(); Picasso.with(getContext()) .load(uri) .transform(transformation) .fit() .centerCrop() .into(appImageView); } void setAppName(String name) { appNameView.setText(name); } @Override protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) { final int maxWidth = getResources().getDimensionPixelSize(R.dimen.tw__card_maximum_width); // Adjust width if required final int measuredWidth = MeasureSpec.getSize(widthMeasureSpec); if (maxWidth > 0 && maxWidth < measuredWidth) { final int measureMode = MeasureSpec.getMode(widthMeasureSpec); widthMeasureSpec = MeasureSpec.makeMeasureSpec(maxWidth, measureMode); } super.onMeasure(widthMeasureSpec, heightMeasureSpec); } void setButtonColor() { final int buttonTextColor = getResources().getColor(R.color.tw__composer_blue_text); appInstallButton.setTextColor(buttonTextColor); }}package com.twitter.sdk.android.core.internal.util;import android.content.Context;import android.content.res.TypedArray;import android.util.AttributeSet;import android.widget.ImageView;import com.twitter.sdk.android.core.R;public class AspectRatioImageView extends ImageView { private static final float DEFAULT_ASPECT_RATIO = 1.0f; private static final int DEFAULT_ADJUST_DIMENSION = 0; // defined by attrs.xml enum static final int ADJUST_DIMENSION_HEIGHT = 0; static final int ADJUST_DIMENSION_WIDTH = 1; private double aspectRatio; // width to height ratio private int dimensionToAdjust; // ADJUST_DIMENSION_HEIGHT or ADJUST_DIMENSION_WIDTH public AspectRatioImageView(Context context) { this(context, null); } public AspectRatioImageView(Context context, AttributeSet attrs) { super(context, attrs); final TypedArray a = context.obtainStyledAttributes(attrs, R.styleable.tw__AspectRatioImageView); try { aspectRatio = a.getFloat(R.styleable.tw__AspectRatioImageView_tw__image_aspect_ratio, DEFAULT_ASPECT_RATIO); dimensionToAdjust = a.getInt(R.styleable.tw__AspectRatioImageView_tw__image_dimension_to_adjust, DEFAULT_ADJUST_DIMENSION); } finally { a.recycle(); } } public double getAspectRatio() { return aspectRatio; } public int getDimensionToAdjust() { return dimensionToAdjust; }  public void setAspectRatio(final double aspectRatio) { this.aspectRatio = aspectRatio; }  public void resetSize() { if (getMeasuredWidth() == 0 && getMeasuredHeight() == 0) { return; } measure(MeasureSpec.makeMeasureSpec(0, MeasureSpec.EXACTLY), MeasureSpec.makeMeasureSpec(0, MeasureSpec.EXACTLY)); layout(0, 0, 0, 0); } @Override protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) { super.onMeasure(widthMeasureSpec, heightMeasureSpec); int width = getMeasuredWidth(); int height = getMeasuredHeight(); if (dimensionToAdjust == ADJUST_DIMENSION_HEIGHT) { height = calculateHeight(width, aspectRatio); } else { width = calculateWidth(height, aspectRatio); } setMeasuredDimension(width, height); }  int calculateHeight(int width, double ratio) { if (ratio == 0) { return 0; } return (int) Math.round(width / ratio); }  int calculateWidth(int height, double ratio) { return (int) Math.round(height * ratio); }}package com.twitter.sdk.android.core.internal.util;import android.test.AndroidTestCase;import android.view.LayoutInflater;import android.view.View;import android.view.ViewGroup;import android.widget.LinearLayout;import com.twitter.sdk.android.core.R;public class AspectRatioImageViewTest extends AndroidTestCase { private static final double TEST_ASPECT_RATIO = 2.0; private static final float DELTA = 0.001f; private AspectRatioImageView getHeightAdjustedView() { return (AspectRatioImageView) getInflatedLayout().findViewById(R.id.height_adjusted_view); } private AspectRatioImageView getWidthAdjustedView() { return (AspectRatioImageView) getInflatedLayout().findViewById(R.id.width_adjusted_view); } public void testHeightAdjusted() { final AspectRatioImageView imageView = getHeightAdjustedView(); assertEquals(1.6, imageView.getAspectRatio(), DELTA); assertEquals(AspectRatioImageView.ADJUST_DIMENSION_HEIGHT, imageView.getDimensionToAdjust()); } public void testWidthAdjusted() { final AspectRatioImageView imageView = getWidthAdjustedView(); assertEquals(1.2, imageView.getAspectRatio(), DELTA); assertEquals(AspectRatioImageView.ADJUST_DIMENSION_WIDTH, imageView.getDimensionToAdjust()); } private View getInflatedLayout() { final ViewGroup group = new LinearLayout(getContext()); return LayoutInflater.from(getContext()).inflate( R.layout.activity_aspect_ratio_image_view_test, group, true); } public void testSetAspectRatio() { final AspectRatioImageView av = new AspectRatioImageView(getContext()); av.setAspectRatio(TEST_ASPECT_RATIO); assertEquals(TEST_ASPECT_RATIO, av.getAspectRatio()); } public void testSetAspectRatio_xml() { final AspectRatioImageView av = getHeightAdjustedView(); av.setAspectRatio(TEST_ASPECT_RATIO); assertEquals(TEST_ASPECT_RATIO, av.getAspectRatio()); } public void testCalculateHeight() { final AspectRatioImageView av = new AspectRatioImageView(getContext()); assertEquals(400, av.calculateHeight(600, 1.5)); assertEquals(600, av.calculateHeight(300, 0.5)); assertEquals(300, av.calculateHeight(300, 1.0)); assertEquals(0, av.calculateHeight(0, 1.3)); assertEquals(0, av.calculateHeight(100, 0)); // sub-pixel space for images mean aspect ratios cannot be respected assertEquals(1, av.calculateHeight(10, 15.0)); } public void testCalculateWidth() { final AspectRatioImageView av = new AspectRatioImageView(getContext()); assertEquals(300, av.calculateWidth(200, 1.5)); assertEquals(201, av.calculateWidth(401, 0.5)); assertEquals(200, av.calculateWidth(200, 1.0)); assertEquals(0, av.calculateWidth(0, 1.3)); assertEquals(0, av.calculateWidth(100, 0)); // sub-pixel space for images mean aspect ratios cannot be respected assertEquals(1, av.calculateWidth(10, 0.05)); }}package com.twitter.sdk.android.core.identity;import android.app.Activity;import android.content.Intent;import com.twitter.sdk.android.core.Callback;import com.twitter.sdk.android.core.Result;import com.twitter.sdk.android.core.TwitterAuthConfig;import com.twitter.sdk.android.core.TwitterAuthException;import com.twitter.sdk.android.core.TwitterAuthToken;import com.twitter.sdk.android.core.TwitterSession;public abstract class AuthHandler { static final String EXTRA_TOKEN = "tk"; static final String EXTRA_TOKEN_SECRET = "ts"; static final String EXTRA_SCREEN_NAME = "screen_name"; static final String EXTRA_USER_ID = "user_id"; static final String EXTRA_AUTH_ERROR = "auth_error"; static final int RESULT_CODE_ERROR = Activity.RESULT_FIRST_USER; protected final int requestCode; private final TwitterAuthConfig config; private final Callback<TwitterSession> callback;  AuthHandler(TwitterAuthConfig authConfig, Callback<TwitterSession> callback, int requestCode) { config = authConfig; this.callback = callback; this.requestCode = requestCode; } TwitterAuthConfig getAuthConfig() { return config; } Callback<TwitterSession> getCallback() { return callback; }  public abstract boolean authorize(Activity activity);  public boolean handleOnActivityResult(int requestCode, int resultCode, Intent data) { if (this.requestCode != requestCode) { return false; } final Callback<TwitterSession> callback = getCallback(); if (callback != null) { if (resultCode == Activity.RESULT_OK) { final String token = data.getStringExtra(EXTRA_TOKEN); final String tokenSecret = data.getStringExtra(EXTRA_TOKEN_SECRET); final String screenName = data.getStringExtra(EXTRA_SCREEN_NAME); final long userId = data.getLongExtra(EXTRA_USER_ID, 0L); callback.success(new Result<>(new TwitterSession( new TwitterAuthToken(token, tokenSecret), userId, screenName), null)); } else if (data != null && data.hasExtra(EXTRA_AUTH_ERROR)) { callback.failure( (TwitterAuthException) data.getSerializableExtra(EXTRA_AUTH_ERROR)); } else { callback.failure(new TwitterAuthException("Authorize failed.")); } } return true; }}package com.twitter.sdk.android.core.identity;import android.app.Activity;import com.twitter.sdk.android.core.TwitterCore;import java.util.concurrent.atomic.AtomicReference;import io.fabric.sdk.android.Fabric;class AuthState { final AtomicReference<AuthHandler> authHandlerRef = new AtomicReference<>(null); public boolean beginAuthorize(Activity activity, AuthHandler authHandler) { boolean result = false; if (isAuthorizeInProgress()) { Fabric.getLogger().w(TwitterCore.TAG, "Authorize already in progress"); } else if (authHandler.authorize(activity)) { result = authHandlerRef.compareAndSet(null, authHandler); if (!result) { Fabric.getLogger().w(TwitterCore.TAG, "Failed to update authHandler, authorize" + " already in progress."); } } return result; } public void endAuthorize() { authHandlerRef.set(null); } public boolean isAuthorizeInProgress() { return authHandlerRef.get() != null; } public AuthHandler getAuthHandler() { return authHandlerRef.get(); }}package com.twitter.sdk.android.core;import com.google.gson.annotations.SerializedName;public abstract class AuthToken {  @SerializedName("created_at") protected final long createdAt; public AuthToken() { createdAt = System.currentTimeMillis(); } protected AuthToken(long createdAt) { this.createdAt = createdAt; }  public abstract boolean isExpired();}package com.twitter.sdk.android.core;import com.google.gson.Gson;import com.google.gson.JsonDeserializationContext;import com.google.gson.JsonDeserializer;import com.google.gson.JsonElement;import com.google.gson.JsonObject;import com.google.gson.JsonParseException;import com.google.gson.JsonPrimitive;import com.google.gson.JsonSerializationContext;import com.google.gson.JsonSerializer;import com.twitter.sdk.android.core.internal.oauth.GuestAuthToken;import com.twitter.sdk.android.core.internal.oauth.OAuth2Token;import java.lang.reflect.Type;import java.util.HashMap;import java.util.Map;public class AuthTokenAdapter implements JsonSerializer<AuthToken>, JsonDeserializer<AuthToken> { private static final String AUTH_TYPE = "auth_type"; private static final String AUTH_TOKEN = "auth_token"; static final Map<String, Class<? extends AuthToken>> authTypeRegistry = new HashMap<>(); static { authTypeRegistry.put("oauth1a", TwitterAuthToken.class); authTypeRegistry.put("oauth2", OAuth2Token.class); authTypeRegistry.put("guest", GuestAuthToken.class); } private final Gson gson; public AuthTokenAdapter() { this.gson = new Gson(); } @Override public JsonElement serialize(AuthToken src, Type typeOfSrc, JsonSerializationContext context) { final JsonObject jsonObject = new JsonObject(); jsonObject.addProperty(AUTH_TYPE, getAuthTypeString(src.getClass())); jsonObject.add(AUTH_TOKEN, gson.toJsonTree(src)); return jsonObject; } @Override public AuthToken deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context) throws JsonParseException { final JsonObject jsonObject = json.getAsJsonObject(); final JsonPrimitive jsonAuthType = jsonObject.getAsJsonPrimitive(AUTH_TYPE); final String authType = jsonAuthType.getAsString(); final JsonElement jsonAuthToken = jsonObject.get(AUTH_TOKEN); return gson.fromJson(jsonAuthToken, authTypeRegistry.get(authType)); } static String getAuthTypeString(Class<? extends AuthToken> authTokenClass) { for (Map.Entry<String, Class<? extends AuthToken>> entry : authTypeRegistry.entrySet()) { if (entry.getValue().equals(authTokenClass)) { return entry.getKey(); } } return ""; }}package com.twitter.sdk.android.tweetui;import com.twitter.sdk.android.core.Callback;import com.twitter.sdk.android.core.Result;import com.twitter.sdk.android.core.TwitterException;import com.twitter.sdk.android.core.models.Tweet;import java.util.List;abstract class BaseTimeline { protected final TweetUi tweetUi; BaseTimeline(TweetUi tweetUi) { if (tweetUi == null) { throw new IllegalArgumentException("TweetUi instance must not be null"); } this.tweetUi = tweetUi; scribeImpression(); } abstract String getTimelineType(); private void scribeImpression() { tweetUi.scribe( ScribeConstants.getSyndicatedSdkTimelineNamespace(getTimelineType()), ScribeConstants.getTfwClientTimelineNamespace(getTimelineType()) ); }  static Long decrementMaxId(Long maxId) { return maxId == null ? null : maxId - 1; }  static class TweetsCallback extends Callback<List<Tweet>> { final Callback<TimelineResult<Tweet>> cb;  TweetsCallback(Callback<TimelineResult<Tweet>> cb) { this.cb = cb; } @Override public void success(Result<List<Tweet>> result) { final List<Tweet> tweets = result.data; final TimelineResult<Tweet> timelineResult = new TimelineResult<>(new TimelineCursor(tweets), tweets); if (cb != null) { cb.success(new Result<>(timelineResult, result.response)); } } @Override public void failure(TwitterException exception) { if (cb != null) { cb.failure(exception); } } }}package com.twitter.sdk.android.tweetui;import com.twitter.sdk.android.core.Callback;import com.twitter.sdk.android.core.models.Tweet;class BaseTweetAction { protected Callback<Tweet> actionCallback; BaseTweetAction(Callback<Tweet> actionCallback) { this.actionCallback = actionCallback; } Callback<Tweet> getActionCallback() { return actionCallback; }}package com.twitter.sdk.android.tweetui;import android.annotation.TargetApi;import android.content.Context;import android.content.Intent;import android.content.res.TypedArray;import android.graphics.Color;import android.graphics.drawable.ColorDrawable;import android.net.Uri;import android.os.Build;import android.text.TextUtils;import android.util.AttributeSet;import android.view.LayoutInflater;import android.view.View;import android.widget.FrameLayout;import android.widget.ImageView;import android.widget.LinearLayout;import android.widget.RelativeLayout;import android.widget.TextView;import com.squareup.picasso.Picasso;import io.fabric.sdk.android.Fabric;import com.twitter.sdk.android.core.Callback;import com.twitter.sdk.android.core.IntentUtils;import com.twitter.sdk.android.core.Result;import com.twitter.sdk.android.core.TwitterException;import com.twitter.sdk.android.core.internal.VineCardUtils;import com.twitter.sdk.android.core.internal.scribe.ScribeItem;import com.twitter.sdk.android.core.models.Card;import com.twitter.sdk.android.core.models.ImageValue;import com.twitter.sdk.android.core.models.MediaEntity;import com.twitter.sdk.android.core.models.Tweet;import com.twitter.sdk.android.core.models.TweetBuilder;import com.twitter.sdk.android.core.internal.UserUtils;import com.twitter.sdk.android.core.models.VideoInfo;import com.twitter.sdk.android.tweetui.internal.MediaBadgeView;import com.twitter.sdk.android.tweetui.internal.SpanClickHandler;import com.twitter.sdk.android.tweetui.internal.TweetMediaUtils;import com.twitter.sdk.android.tweetui.internal.TweetMediaView;import java.text.DateFormat;import java.util.Date;import java.util.Locale;@SuppressWarnings({"TooManyMethods", "TooManyFields"})public abstract class BaseTweetView extends LinearLayout { private static final String TAG = TweetUi.LOGTAG; private static final int DEFAULT_STYLE = R.style.tw__TweetLightStyle; private static final String EMPTY_STRING = ""; static final double DEFAULT_ASPECT_RATIO = 16.0 / 9.0; static final double SECONDARY_TEXT_COLOR_LIGHT_OPACITY = 0.4; static final double SECONDARY_TEXT_COLOR_DARK_OPACITY = 0.35; static final double MEDIA_BG_LIGHT_OPACITY = 0.08; static final double MEDIA_BG_DARK_OPACITY = 0.12; static final long INVALID_ID = -1L; // Dependency Provider final DependencyProvider dependencyProvider; // attributes private LinkClickListener linkClickListener; TweetLinkClickListener tweetLinkClickListener; TweetMediaClickListener tweetMediaClickListener; private Uri permalinkUri; Tweet tweet; // for testing int styleResId; // layout views RelativeLayout containerView; ImageView avatarView; TextView fullNameView; TextView screenNameView; ImageView verifiedCheckView; FrameLayout mediaContainerView; TweetMediaView mediaView; TextView contentView; TextView timestampView; ImageView twitterLogoView; TextView retweetedByView; TweetActionBarView tweetActionBarView; MediaBadgeView mediaBadgeView; View bottomSeparator; // color values int containerBgColor; int primaryTextColor; int secondaryTextColor; int actionColor; int actionHighlightColor; int mediaBgColor; // resource id's int photoErrorResId; int birdLogoResId; int retweetIconResId; boolean tweetActionsEnabled; // styled drawables for images ColorDrawable mediaBg;  BaseTweetView(Context context, Tweet tweet) { this(context, tweet, DEFAULT_STYLE); }  BaseTweetView(Context context, Tweet tweet, int styleResId) { this(context, tweet, styleResId, new DependencyProvider()); }  BaseTweetView(Context context, Tweet tweet, int styleResId, DependencyProvider dependencyProvider) { super(context, null); this.dependencyProvider = dependencyProvider; initAttributes(styleResId); inflateView(context); findSubviews(); applyStyles(); if (!isTweetUiEnabled()) return; initTweetActions(); setTweet(tweet); }   public BaseTweetView(Context context, AttributeSet attrs) { this(context, attrs, new DependencyProvider()); }  BaseTweetView(Context context, AttributeSet attrs, DependencyProvider dependencyProvider) { super(context, attrs); this.dependencyProvider = dependencyProvider; initXmlAttributes(context, attrs); inflateView(context); }  public BaseTweetView(Context context, AttributeSet attrs, int defStyle) { this(context, attrs, defStyle, new DependencyProvider()); }  BaseTweetView(Context context, AttributeSet attrs, int defStyle, DependencyProvider dependencyProvider) { super(context, attrs, defStyle); this.dependencyProvider = dependencyProvider; initXmlAttributes(context, attrs); inflateView(context); }  private void initAttributes(int styleResId) { this.styleResId = styleResId; final TypedArray a = getContext().getTheme().obtainStyledAttributes(styleResId, R.styleable.tw__TweetView); try { setStyleAttributes(a); } finally { a.recycle(); } }  private void initXmlAttributes(Context context, AttributeSet attrs) { if (attrs == null) return; // parse the xml attributes by resolving resource references final TypedArray a = context.getTheme().obtainStyledAttributes(attrs, R.styleable.tw__TweetView, 0, 0); try { setXmlDataAttributes(a); setStyleAttributes(a); } finally { a.recycle(); } }  private void setXmlDataAttributes(TypedArray a) { final long tweetId = Utils.numberOrDefault( a.getString(R.styleable.tw__TweetView_tw__tweet_id), INVALID_ID); if (tweetId <= 0) { throw new IllegalArgumentException("Invalid tw__tweet_id"); } // XML special case. The screen_name is not known yet. A permalink can be constructed and // followed. Permalink should be updated once the loadTweet call receives the Tweet. setPermalinkUri(null, tweetId); this.tweet = new TweetBuilder().setId(tweetId).build(); }  private void setStyleAttributes(TypedArray a) { // Styled via attributes containerBgColor = a.getColor(R.styleable.tw__TweetView_tw__container_bg_color, getResources().getColor(R.color.tw__tweet_light_container_bg_color)); primaryTextColor = a.getColor(R.styleable.tw__TweetView_tw__primary_text_color, getResources().getColor(R.color.tw__tweet_light_primary_text_color)); actionColor = a.getColor( R.styleable.tw__TweetView_tw__action_color, getResources().getColor(R.color.tw__tweet_action_color)); actionHighlightColor = a.getColor( R.styleable.tw__TweetView_tw__action_highlight_color, getResources().getColor(R.color.tw__tweet_action_light_highlight_color)); tweetActionsEnabled = a.getBoolean(R.styleable.tw__TweetView_tw__tweet_actions_enabled, false); // Calculated colors final boolean isLightBg = ColorUtils.isLightColor(containerBgColor); if (isLightBg) { photoErrorResId = R.drawable.tw__ic_tweet_photo_error_light; birdLogoResId = R.drawable.tw__ic_logo_blue; retweetIconResId = R.drawable.tw__ic_retweet_light; } else { photoErrorResId = R.drawable.tw__ic_tweet_photo_error_dark; birdLogoResId = R.drawable.tw__ic_logo_white; retweetIconResId = R.drawable.tw__ic_retweet_dark; } // offset from white when background is light secondaryTextColor = ColorUtils.calculateOpacityTransform( isLightBg ? SECONDARY_TEXT_COLOR_LIGHT_OPACITY : SECONDARY_TEXT_COLOR_DARK_OPACITY, isLightBg ? Color.WHITE : Color.BLACK, primaryTextColor ); // offset from black when background is light mediaBgColor = ColorUtils.calculateOpacityTransform( isLightBg ? MEDIA_BG_LIGHT_OPACITY : MEDIA_BG_DARK_OPACITY, isLightBg ? Color.BLACK : Color.WHITE, containerBgColor ); mediaBg = new ColorDrawable(mediaBgColor); }  private void inflateView(Context context) { final LayoutInflater localInflater = LayoutInflater.from(context); final View v = localInflater.inflate(getLayout(), null, false); // work around a bug(?) in Android that makes it so that our inflated view doesn't // pick up layout params correctly from its style final LayoutParams layoutParams = new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.WRAP_CONTENT); v.setLayoutParams(layoutParams); this.addView(v); }  @Override protected void onFinishInflate() { super.onFinishInflate(); if (!isTweetUiEnabled()) return; findSubviews(); applyStyles(); initTweetActions(); loadTweet(); }  private void initTweetActions() { setTweetActionsEnabled(tweetActionsEnabled); // Tweet actions buttons setTweet and clear cache after successful actions. tweetActionBarView.setOnActionCallback(new ResetTweetCallback(this, dependencyProvider.getTweetUi().getTweetRepository(), null)); }  boolean isTweetUiEnabled() { // in edit mode, halt view creation if (isInEditMode()) return false; try { dependencyProvider.getTweetUi(); } catch (IllegalStateException e) { Fabric.getLogger().e(TAG, e.getMessage()); // TweetUi kit instance not available, halt view creation and disable setEnabled(false); return false; } return true; }  void findSubviews() { // Tweet attribution (avatar, name, screen name, etc.) containerView = (RelativeLayout) findViewById(R.id.tw__tweet_view); avatarView = (ImageView) findViewById(R.id.tw__tweet_author_avatar); fullNameView = (TextView) findViewById(R.id.tw__tweet_author_full_name); screenNameView = (TextView) findViewById(R.id.tw__tweet_author_screen_name); verifiedCheckView = (ImageView) findViewById(R.id.tw__tweet_author_verified); mediaContainerView = (FrameLayout) findViewById(R.id.tw__tweet_media_container); mediaView = (TweetMediaView) findViewById(R.id.tw__tweet_media); contentView = (TextView) findViewById(R.id.tw__tweet_text); timestampView = (TextView) findViewById(R.id.tw__tweet_timestamp); twitterLogoView = (ImageView) findViewById(R.id.tw__twitter_logo); retweetedByView = (TextView) findViewById(R.id.tw__tweet_retweeted_by); tweetActionBarView = (TweetActionBarView) findViewById(R.id.tw__tweet_action_bar); mediaBadgeView = (MediaBadgeView) findViewById(R.id.tw__tweet_media_badge); bottomSeparator = findViewById(R.id.bottom_separator); }  abstract int getLayout();  abstract String getViewTypeName();  public long getTweetId() { if (tweet == null) { return INVALID_ID; } return tweet.id; }  public void setTweet(Tweet tweet) { this.tweet = tweet; render(); }  public Tweet getTweet() { return tweet; }  public void setOnActionCallback(Callback<Tweet> actionCallback) { tweetActionBarView.setOnActionCallback(new ResetTweetCallback(this, dependencyProvider.getTweetUi().getTweetRepository(), actionCallback)); tweetActionBarView.setTweet(tweet); }  public void setTweetMediaClickListener(TweetMediaClickListener tweetMediaClickListener) { this.tweetMediaClickListener = tweetMediaClickListener; }  public void setTweetLinkClickListener(TweetLinkClickListener tweetLinkClickListener) { this.tweetLinkClickListener = tweetLinkClickListener; }  void render() { final Tweet displayTweet = TweetUtils.getDisplayTweet(tweet); setProfilePhotoView(displayTweet); setName(displayTweet); setScreenName(displayTweet); setTimestamp(displayTweet); setTweetMedia(displayTweet); setText(displayTweet); setContentDescription(displayTweet); setTweetActions(tweet); showRetweetedBy(tweet); // set permalink if tweet id and screen name are available if (TweetUtils.isTweetResolvable(tweet)) { setPermalinkUri(tweet.user.screenName, getTweetId()); } else { permalinkUri = null; } // set or update the permalink launcher with the current permalinkUri setPermalinkLauncher(); scribeImpression(); }  private void loadTweet() { final long tweetId = getTweetId(); // create a callback to setTweet on the view or log a failure to load the Tweet final Callback<Tweet> repoCb = new Callback<Tweet>() { @Override public void success(Result<Tweet> result) { setTweet(result.data); } @Override public void failure(TwitterException exception) { Fabric.getLogger().d(TAG, String.format(Locale.ENGLISH, TweetUtils.LOAD_TWEET_DEBUG, tweetId)); } }; dependencyProvider.getTweetUi().getTweetRepository().loadTweet(getTweetId(), repoCb); } Uri getPermalinkUri() { return permalinkUri; } void setPermalinkUri(String screenName, Long tweetId) { if (tweetId <= 0) return; permalinkUri = TweetUtils.getPermalink(screenName, tweetId); } private void setPermalinkLauncher() { final OnClickListener listener = new PermalinkClickListener(); this.setOnClickListener(listener); }  void showRetweetedBy(Tweet tweet) { if (tweet == null || tweet.retweetedStatus == null) { retweetedByView.setVisibility(GONE); } else { retweetedByView.setText( getResources().getString(R.string.tw__retweeted_by_format, tweet.user.name)); retweetedByView.setVisibility(VISIBLE); } } void launchPermalink() { final Intent intent = new Intent(Intent.ACTION_VIEW, getPermalinkUri()); if (!IntentUtils.safeStartActivity(getContext(), intent)) { Fabric.getLogger().e(TweetUi.LOGTAG, "Activity cannot be found to open permalink URI"); } } void scribeImpression() { if (tweet != null) { dependencyProvider.getTweetScribeClient().impression(tweet, getViewTypeName(), tweetActionsEnabled); } } void scribePermalinkClick() { if (tweet != null) { dependencyProvider.getTweetScribeClient().click(tweet, getViewTypeName()); } } void scribeCardImpression(Long tweetId, Card card) { final ScribeItem scribeItem = ScribeItem.fromTweetCard(tweetId, card); dependencyProvider.getVideoScribeClient().impression(scribeItem); } void scribeMediaEntityImpression(long tweetId, MediaEntity mediaEntity) { final ScribeItem scribeItem = ScribeItem.fromMediaEntity(tweetId, mediaEntity); dependencyProvider.getVideoScribeClient().impression(scribeItem); }  protected void applyStyles() { containerView.setBackgroundColor(containerBgColor); avatarView.setImageDrawable(mediaBg); mediaView.setImageDrawable(mediaBg); fullNameView.setTextColor(primaryTextColor); screenNameView.setTextColor(secondaryTextColor); contentView.setTextColor(primaryTextColor); timestampView.setTextColor(secondaryTextColor); twitterLogoView.setImageResource(birdLogoResId); retweetedByView.setTextColor(secondaryTextColor); }  private void setName(Tweet displayTweet) { if (displayTweet != null && displayTweet.user != null) { fullNameView.setText(Utils.stringOrEmpty(displayTweet.user.name)); } else { fullNameView.setText(EMPTY_STRING); } }  private void setScreenName(Tweet displayTweet) { if (displayTweet != null && displayTweet.user != null) { screenNameView.setText(UserUtils.formatScreenName( Utils.stringOrEmpty(displayTweet.user.screenName))); } else { screenNameView.setText(EMPTY_STRING); } }  @TargetApi(Build.VERSION_CODES.JELLY_BEAN) private void setText(Tweet displayTweet) { if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN) { contentView.setImportantForAccessibility(IMPORTANT_FOR_ACCESSIBILITY_NO); } final CharSequence tweetText = Utils.charSeqOrEmpty(getLinkifiedText(displayTweet)); SpanClickHandler.enableClicksOnSpans(contentView); if (!TextUtils.isEmpty(tweetText)) { contentView.setText(tweetText); contentView.setVisibility(VISIBLE); } else { contentView.setText(EMPTY_STRING); contentView.setVisibility(GONE); } }  private void setTimestamp(Tweet displayTweet) { final String formattedTimestamp; if (displayTweet != null && displayTweet.createdAt != null && TweetDateUtils.isValidTimestamp(displayTweet.createdAt)) { final Long createdAtTimestamp = TweetDateUtils.apiTimeToLong(displayTweet.createdAt); final String timestamp = TweetDateUtils.getRelativeTimeString(getResources(), System.currentTimeMillis(), createdAtTimestamp); formattedTimestamp = TweetDateUtils.dotPrefix(timestamp); } else { formattedTimestamp = EMPTY_STRING; } timestampView.setText(formattedTimestamp); }  void setProfilePhotoView(Tweet displayTweet) { final Picasso imageLoader = dependencyProvider.getImageLoader(); if (imageLoader == null) return; final String url; if (displayTweet == null || displayTweet.user == null) { url = null; } else { url = UserUtils.getProfileImageUrlHttps(displayTweet.user, UserUtils.AvatarSize.REASONABLY_SMALL); } imageLoader.load(url).placeholder(mediaBg).into(avatarView); }  final void setTweetMedia(Tweet displayTweet) { clearMediaView(); if (displayTweet == null) { mediaContainerView.setVisibility(ImageView.GONE); return; } if (displayTweet.card != null && VineCardUtils.isVine(displayTweet.card)) { final Card vineCard = displayTweet.card; mediaContainerView.setVisibility(ImageView.VISIBLE); mediaView.setOverlayDrawable(getContext().getResources() .getDrawable(R.drawable.tw__player_overlay)); mediaBadgeView.setCard(vineCard); setVineCardLauncher(displayTweet.id, vineCard); final ImageValue imageValue = VineCardUtils.getImageValue(vineCard); if (imageValue != null) { setMediaImage(imageValue.url, getAspectRatio(imageValue)); } scribeCardImpression(displayTweet.id, vineCard); } else if (TweetMediaUtils.hasSupportedVideo(displayTweet)) { final MediaEntity mediaEntity = TweetMediaUtils.getVideoEntity(displayTweet); // set the image view to visible before setting via picasso placeholders into so // measurements are done correctly, fixes a bug where the placeholder was a small square // in the corner of the view mediaContainerView.setVisibility(ImageView.VISIBLE); mediaView.setOverlayDrawable(getContext().getResources() .getDrawable(R.drawable.tw__player_overlay)); mediaBadgeView.setMediaEntity(mediaEntity); setAltText(mediaEntity.altText); setMediaLauncher(displayTweet, mediaEntity); setMediaImage(mediaEntity.mediaUrlHttps, getAspectRatio(mediaEntity)); scribeMediaEntityImpression(displayTweet.id, mediaEntity); } else if (TweetMediaUtils.hasPhoto(displayTweet)) { final MediaEntity mediaEntity = TweetMediaUtils.getPhotoEntity(displayTweet); // set the image view to visible before setting via picasso placeholders into so // measurements are done correctly, fixes a bug where the placeholder was a small square // in the corner of the view mediaContainerView.setVisibility(ImageView.VISIBLE); mediaBadgeView.setMediaEntity(mediaEntity); setAltText(mediaEntity.altText); setPhotoLauncher(displayTweet, mediaEntity); setMediaImage(mediaEntity.mediaUrlHttps, getAspectRatio(mediaEntity)); } else { mediaContainerView.setVisibility(ImageView.GONE); } } void setAltText(String description) { if (!TextUtils.isEmpty(description)) { mediaView.setContentDescription(description); } } private void setMediaLauncher(final Tweet displayTweet, final MediaEntity entity) { mediaView.setOnClickListener(new OnClickListener() { @Override public void onClick(View view) { if (tweetMediaClickListener != null) { tweetMediaClickListener.onMediaEntityClick(tweet, entity); } else { final VideoInfo.Variant variant = TweetMediaUtils.getSupportedVariant(entity); if (variant != null) { final Intent intent = new Intent(getContext(), PlayerActivity.class); final boolean looping = TweetMediaUtils.isLooping(entity); final String url = TweetMediaUtils.getSupportedVariant(entity).url; final PlayerActivity.PlayerItem item = new PlayerActivity.PlayerItem(url, looping); intent.putExtra(PlayerActivity.PLAYER_ITEM, item); IntentUtils.safeStartActivity(getContext(), intent); } } } }); } private void setPhotoLauncher(final Tweet displayTweet, final MediaEntity entity) { mediaView.setOnClickListener(new OnClickListener() { @Override public void onClick(View view) { if (tweetMediaClickListener != null) { tweetMediaClickListener.onMediaEntityClick(tweet, entity); } else { final Intent intent = new Intent(getContext(), GalleryActivity.class); intent.putExtra(GalleryActivity.MEDIA_ENTITY, entity); intent.putExtra(GalleryActivity.TWEET_ID, displayTweet.id); IntentUtils.safeStartActivity(getContext(), intent); } } }); } private void setVineCardLauncher(final Long tweetId, final Card vineCard) { mediaView.setOnClickListener(new OnClickListener() { @Override public void onClick(View view) { final Intent intent = new Intent(getContext(), PlayerActivity.class); final String playerStreamUrl = VineCardUtils.getStreamUrl(vineCard); final String callToActionUrl = VineCardUtils.getCallToActionUrl(vineCard); final String callToActionText = getContext().getResources().getString(R.string.tw__cta_text); final PlayerActivity.PlayerItem playerItem = new PlayerActivity.PlayerItem(playerStreamUrl, true, callToActionText, callToActionUrl); intent.putExtra(PlayerActivity.PLAYER_ITEM, playerItem); final ScribeItem scribeItem = ScribeItem.fromTweetCard(tweetId, vineCard); intent.putExtra(PlayerActivity.SCRIBE_ITEM, scribeItem); IntentUtils.safeStartActivity(getContext(), intent); } }); } void setMediaImage(String imagePath, double aspectRatio) { final Picasso imageLoader = dependencyProvider.getImageLoader(); if (imageLoader == null) return; // Picasso fit is a deferred call to resize(w,h) which waits until the target has a // non-zero width or height and resizes the bitmap to the target's width and height. // For recycled targets, which already have a width and (stale) height, reset the size // target to zero so Picasso fit works correctly. mediaView.resetSize(); mediaView.setAspectRatio(aspectRatio); imageLoader.load(imagePath) .placeholder(mediaBg) .fit() .centerCrop() .into(mediaView, new PicassoCallback()); } protected double getAspectRatio(MediaEntity photoEntity) { if (photoEntity == null || photoEntity.sizes == null || photoEntity.sizes.medium == null || photoEntity.sizes.medium.w == 0 || photoEntity.sizes.medium.h == 0) { return DEFAULT_ASPECT_RATIO; } return (double) photoEntity.sizes.medium.w / photoEntity.sizes.medium.h; } protected double getAspectRatio(ImageValue imageValue) { if (imageValue == null || imageValue.width == 0 || imageValue.height == 0) { return DEFAULT_ASPECT_RATIO; } return (double) imageValue.width / imageValue.height; } @TargetApi(Build.VERSION_CODES.JELLY_BEAN) protected void clearMediaView() { // Clear out the background behind any potential error images that we had if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN) { mediaView.setBackground(null); } else { mediaView.setBackgroundDrawable(null); } mediaView.setOverlayDrawable(null); mediaView.setOnClickListener(null); mediaView.setClickable(false); mediaView.setContentDescription(getResources().getString(R.string.tw__tweet_media)); }  class PicassoCallback implements com.squareup.picasso.Callback { @Override public void onSuccess() {  } @Override public void onError() { setErrorImage(); } } protected void setErrorImage() { // async load the error image and set the proper background color behind it once it's loaded // this does incur the necessity of clearing the background on each load of an image however final Picasso imageLoader = dependencyProvider.getImageLoader(); if (imageLoader == null) return; imageLoader.load(photoErrorResId) .into(mediaView, new com.squareup.picasso.Callback() { @Override public void onSuccess() { mediaView.setBackgroundColor(mediaBgColor); } @Override public void onError() {  } }); }  protected CharSequence getLinkifiedText(Tweet displayTweet) { final FormattedTweetText formattedText = dependencyProvider.getTweetUi() .getTweetRepository().formatTweetText(displayTweet); if (formattedText == null) return null; final boolean stripPhotoEntity = TweetMediaUtils.hasPhoto(displayTweet); return TweetTextLinkifier.linkifyUrls(formattedText, getLinkClickListener(), stripPhotoEntity, actionColor, actionHighlightColor); } void setContentDescription(Tweet displayTweet) { if (!TweetUtils.isTweetResolvable(displayTweet)) { setContentDescription(getResources().getString(R.string.tw__loading_tweet)); return; } final FormattedTweetText formattedTweetText = dependencyProvider.getTweetUi() .getTweetRepository().formatTweetText(displayTweet); String tweetText = null; if (formattedTweetText != null) tweetText = formattedTweetText.text; final long createdAt = TweetDateUtils.apiTimeToLong(displayTweet.createdAt); String timestamp = null; if (createdAt != TweetDateUtils.INVALID_DATE) { timestamp = DateFormat.getDateInstance().format(new Date(createdAt)); } setContentDescription(getResources().getString(R.string.tw__tweet_content_description, Utils.stringOrEmpty(displayTweet.user.name), Utils.stringOrEmpty(tweetText), Utils.stringOrEmpty(timestamp))); } void setTweetActions(Tweet tweet) { tweetActionBarView.setTweet(tweet); }  public void setTweetActionsEnabled(boolean enabled) { tweetActionsEnabled = enabled; if (tweetActionsEnabled) { tweetActionBarView.setVisibility(View.VISIBLE); bottomSeparator.setVisibility(View.GONE); } else { tweetActionBarView.setVisibility(View.GONE); bottomSeparator.setVisibility(View.VISIBLE); } } protected LinkClickListener getLinkClickListener() { if (linkClickListener == null) { linkClickListener = new LinkClickListener() { @Override public void onUrlClicked(String url) { if (TextUtils.isEmpty(url)) return; if (tweetLinkClickListener != null) { tweetLinkClickListener.onLinkClick(tweet, url); } else { final Intent intent = new Intent(Intent.ACTION_VIEW, Uri.parse(url)); if (!IntentUtils.safeStartActivity(getContext(), intent)) { Fabric.getLogger().e(TweetUi.LOGTAG, "Activity cannot be found to open URL"); } } } @Override public void onPhotoClicked(MediaEntity mediaEntity) { // Does nothing } }; } return linkClickListener; } class PermalinkClickListener implements OnClickListener { @Override public void onClick(View v) { if (getPermalinkUri() == null) return; scribePermalinkClick(); launchPermalink(); } }  static class DependencyProvider { TweetScribeClient tweetScribeClient; VideoScribeClient videoScribeClient;  TweetUi getTweetUi() { return TweetUi.getInstance(); } TweetScribeClient getTweetScribeClient() { if (tweetScribeClient == null) { tweetScribeClient = new TweetScribeClientImpl(getTweetUi()); } return tweetScribeClient; } VideoScribeClient getVideoScribeClient() { if (videoScribeClient == null) { videoScribeClient = new VideoScribeClientImpl(getTweetUi()); } return videoScribeClient; }  Picasso getImageLoader() { return TweetUi.getInstance().getImageLoader(); } }}package com.twitter.sdk.android.core.models;import java.util.Collections;import java.util.Map;public class BindingValues { private final Map<String, Object> bindingValues; public BindingValues() { this(Collections.EMPTY_MAP); } public BindingValues(Map<String, Object> bindingValues) { this.bindingValues = Collections.unmodifiableMap(bindingValues); }  public boolean containsKey(String key) { return bindingValues.containsKey(key); }  public <T> T get(String key) { try { return (T) bindingValues.get(key); } catch (ClassCastException ex){ return null; } }}package com.twitter.sdk.android.core.models;import com.google.gson.JsonDeserializationContext;import com.google.gson.JsonDeserializer;import com.google.gson.JsonElement;import com.google.gson.JsonObject;import com.google.gson.JsonParseException;import com.google.gson.JsonSerializationContext;import com.google.gson.JsonSerializer;import java.lang.reflect.Type;import java.util.HashMap;import java.util.Map;import java.util.Set;public class BindingValuesAdapter implements JsonSerializer<BindingValues>, JsonDeserializer<BindingValues> { private static final String STRING_TYPE = "STRING"; private static final String IMAGE_TYPE = "IMAGE"; private static final String USER_TYPE = "USER"; private static final String BOOLEAN_TYPE = "BOOLEAN"; private static final String TYPE_MEMBER = "type"; private static final String TYPE_VALUE_MEMBER = "string_value"; private static final String IMAGE_VALUE_MEMBER = "image_value"; private static final String USER_VALUE_MEMBER = "user_value"; private static final String BOOLEAN_MEMBER = "boolean_value"; @Override public JsonElement serialize(BindingValues src, Type typeOfSrc, JsonSerializationContext context) { return null; } @Override public BindingValues deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context) throws JsonParseException { if (!json.isJsonObject()) { return new BindingValues(); } final JsonObject obj = json.getAsJsonObject(); final Set<Map.Entry<String, JsonElement>> members = obj.entrySet(); final Map<String, Object> bindingHash = new HashMap<>(32); for (Map.Entry<String, JsonElement> member : members) { final String key = member.getKey(); final JsonObject memberObj = member.getValue().getAsJsonObject(); final Object value = getValue(memberObj, context); bindingHash.put(key, value); } return new BindingValues(bindingHash); } Object getValue(JsonObject obj, JsonDeserializationContext context) { final JsonElement typeObj = obj.get(TYPE_MEMBER); if (typeObj == null || !typeObj.isJsonPrimitive()) { return null; } switch (typeObj.getAsString()) { case STRING_TYPE: return context.deserialize(obj.get(TYPE_VALUE_MEMBER), String.class); case IMAGE_TYPE: return context.deserialize(obj.get(IMAGE_VALUE_MEMBER), ImageValue.class); case USER_TYPE: return context.deserialize(obj.get(USER_VALUE_MEMBER), UserValue.class); case BOOLEAN_TYPE: return context.deserialize(obj.get(BOOLEAN_MEMBER), Boolean.class); default: return null; } }}package com.twitter.sdk.android.core;import retrofit2.Call;import retrofit2.Response;public abstract class Callback<T> implements retrofit2.Callback<T> { @Override public final void onResponse(Call<T> call, Response<T> response){ if (response.isSuccessful()) { success(new Result<>(response.body(), response)); } else { failure(new TwitterApiException(response)); } } @Override public final void onFailure(Call<T> call, Throwable t) { failure(new TwitterException("Request Failure", t)); }  public abstract void success(Result<T> result);  public abstract void failure(TwitterException exception);}package com.twitter.sdk.android.tweetcomposer;import android.content.Context;import android.net.Uri;import java.io.Serializable;public class Card implements Serializable { public static final String APP_CARD_TYPE = "promo_image_app"; final String cardType; final String imageUri; final String appName; final String appIPadId; final String appIPhoneId; final String appGooglePlayId; Card(String cardType, String imageUri, String appName, String appIPhoneId, String appIPadId, String appGooglePlayId) { this.cardType = cardType; this.imageUri = imageUri; this.appName = appName; this.appIPadId = appIPadId; this.appIPhoneId = appIPhoneId; this.appGooglePlayId = appGooglePlayId; }  public String getCardType() { return cardType; }  static boolean isAppCard(Card card) { return card != null && card.getCardType() != null && card.getCardType().equals(APP_CARD_TYPE); }  public static class AppCardBuilder { private String appName; private Uri imageUri; private String appIPhoneId; private String appIPadId; private String appGooglePlayId;  public AppCardBuilder(Context context) { appName = getApplicationName(context); appGooglePlayId = getPackageName(context); }  public AppCardBuilder imageUri(Uri imageUri) { this.imageUri = imageUri; return this; }  public AppCardBuilder iPhoneId(String appIPhoneId) { this.appIPhoneId = appIPhoneId; return this; }  public AppCardBuilder iPadId(String appIPadId) { this.appIPadId = appIPadId; return this; }  public AppCardBuilder googlePlayId(String appGooglePlayId) { this.appGooglePlayId = appGooglePlayId; return this; }  public Card build() { if (imageUri == null) { throw new IllegalStateException("App Card requires a non-null imageUri"); } return new Card(APP_CARD_TYPE, imageUri.toString(), appName, appIPhoneId, appIPadId, appGooglePlayId); } } private static String getApplicationName(Context context) { return context.getApplicationInfo().loadLabel(context.getPackageManager()).toString(); } private static String getPackageName(Context context) { return context.getPackageName(); }}package com.twitter.sdk.android.tweetcomposer.internal;import com.google.gson.annotations.SerializedName;public class CardCreate { @SerializedName("card_uri") public final String cardUri; @SerializedName("status") public final String status; public CardCreate(String cardUri, String status) { this.cardUri = cardUri; this.status = status; }}package com.twitter.sdk.android.tweetcomposer.internal;import com.google.gson.Gson;import com.google.gson.annotations.SerializedName;public class CardData { private static Serializer serializer; private CardData(String card, String image, String site, String description, String cardData, String callToAction, String ctaKey, String deviceId, String appIPhoneId, String appIPadId, String appGooglePlayId, String appCountry) { this.card = card; this.image = image; this.site = site; this.description = description; this.cardData = cardData; this.callToAction = callToAction; this.ctaKey = ctaKey; this.deviceId = deviceId; this.appIPhoneId = appIPhoneId; this.appIPadId = appIPadId; this.appGooglePlayId = appGooglePlayId; this.appCountry = appCountry; } @SerializedName("twitter:card") public final String card; @SerializedName("twitter:image") public final String image; @SerializedName("twitter:site") public final String site; @SerializedName("twitter:description") public final String description; @SerializedName("twitter:card_data") public final String cardData; @SerializedName("twitter:text:cta") public final String callToAction; @SerializedName("twitter:cta_key") public final String ctaKey; @SerializedName("twitter:text:did_value") public final String deviceId; @SerializedName("twitter:app:id:iphone") public final String appIPhoneId; @SerializedName("twitter:app:id:ipad") public final String appIPadId; @SerializedName("twitter:app:id:googleplay") public final String appGooglePlayId; @SerializedName("twitter:app:country") public final String appCountry; Serializer getSerializer() { if (serializer == null) { serializer = new Serializer(); } return serializer; } @Override public String toString() { // Required bc the Cards API accepts form-urlencoded requests with nested CardData JSON // Retrofit converts @Fields to strings, without using registered Converters. // https://github.com/square/retrofit/blob/master/retrofit/src/main/java/retrofit/http/Field.java#L28 return getSerializer().serialize(this); } static class Serializer { private final Gson gson; Serializer() { this.gson = new Gson(); } String serialize(CardData data) { return this.gson.toJson(data); } }  public static class Builder { private String card; private String image; private String site; private String description; private String cardData; private String callToAction; private String ctaKey; private String deviceId; private String appIPhoneId; private String appIPadId; private String appGooglePlayId; private String appCountry; public Builder card(String card) { this.card = card; return this; } public Builder image(String image) { this.image = image; return this; } public Builder site(String site) { this.site = site; return this; } public Builder description(String description) { this.description = description; return this; } public Builder cardData(String data) { this.cardData = data; return this; } public Builder callToAction(String callToAction) { this.callToAction = callToAction; return this; } public Builder ctaKey(String ctaKey) { this.ctaKey = ctaKey; return this; } public Builder deviceId(String deviceId) { this.deviceId = deviceId; return this; } public Builder appIPhoneId(String appIPhoneId) { this.appIPhoneId = appIPhoneId; return this; } public Builder appIPadId(String appIPadId) { this.appIPadId = appIPadId; return this; } public Builder appGooglePlayId(String appGooglePlayId) { this.appGooglePlayId = appGooglePlayId; return this; } public Builder appCountry(String appCountry) { this.appCountry = appCountry; return this; } public CardData build() { return new CardData(card, image, site, description, cardData, callToAction, ctaKey, deviceId, appIPhoneId, appIPadId, appGooglePlayId, appCountry); } }}package com.twitter.sdk.android.tweetcomposer;import com.twitter.sdk.android.tweetcomposer.internal.CardData;class CardDataFactory { static final String APP_CARD_TYPE = "promo_image_app"; static final String APP_CARD_CTA_KEY = "open"; private static final String MEDIA_SCHEME = "media://";  static CardData createAppCardData(Card card, Long mediaId, String advertisingId) { return new CardData.Builder() .card(APP_CARD_TYPE) .image(getCardMedia(mediaId)) .appIPhoneId(card.appIPhoneId) .appIPadId(card.appIPadId) .appGooglePlayId(card.appGooglePlayId) .cardData("{}") .ctaKey(APP_CARD_CTA_KEY) .deviceId(advertisingId) .build(); }  static String getCardMedia(Long mediaId) { return MEDIA_SCHEME + Long.toString(mediaId); }}package com.twitter.sdk.android.tweetcomposer.internal;import retrofit2.Call;import retrofit2.http.Field;import retrofit2.http.FormUrlEncoded;import retrofit2.http.POST;public interface CardService {  @FormUrlEncoded @POST("https://caps.twitter.com/v2/cards/create.json") Call<CardCreate> create(@Field("card_data") CardData data);}package com.twitter.sdk.android.tweetcomposer;import android.content.Context;import android.view.View;class CardViewFactory {  View createCard(Context context, Card card) { if (card.cardType.equals(Card.APP_CARD_TYPE)) { final AppCardView cardView = new AppCardView(context); cardView.setCard(card); return cardView; } return null; }}package com.twitter.sdk.android.tweetui.internal;import android.graphics.Color;import android.text.TextPaint;import android.text.style.ClickableSpan;public abstract class ClickableLinkSpan extends ClickableSpan implements HighlightedClickableSpan { public final int linkColor; private final int selectedColor; private final boolean colored; private final boolean underlined; private boolean selected; public ClickableLinkSpan(int selectedColor) { this(selectedColor, 0, false, false); } public ClickableLinkSpan(int selectedColor, int linkColor, boolean underlined) { this(selectedColor, linkColor, true, underlined); } ClickableLinkSpan(int selectedColor, int linkColor, boolean colored, boolean underlined) { this.selectedColor = selectedColor; this.linkColor = linkColor; this.colored = colored; this.underlined = underlined; } @Override public void updateDrawState(TextPaint ds) { if (colored) { ds.setColor(linkColor); } else { ds.setColor(ds.linkColor); } if (selected) { ds.bgColor = selectedColor; } else { ds.bgColor = Color.TRANSPARENT; } if (underlined) { ds.setUnderlineText(true); } } @Override public void select(boolean selected) { this.selected = selected; } @Override public boolean isSelected() { return selected; }}package com.twitter.sdk.android.core.services;import com.twitter.sdk.android.core.internal.TwitterCollection;import retrofit2.Call;import retrofit2.http.GET;import retrofit2.http.Query;public interface CollectionService {  @GET("/1.1/collections/entries.json?" + "tweet_mode=extended&include_cards=true&cards_platform=TwitterKit-13") Call<TwitterCollection> collection(@Query("id") String id, @Query("count") Integer count, @Query("max_position") Long maxPosition, @Query("min_position") Long minPosition);}package com.twitter.sdk.android.tweetui;import com.twitter.sdk.android.core.Callback;import com.twitter.sdk.android.core.TwitterCore;import com.twitter.sdk.android.core.internal.TwitterCollection;import com.twitter.sdk.android.core.Result;import com.twitter.sdk.android.core.TwitterException;import com.twitter.sdk.android.core.models.Tweet;import com.twitter.sdk.android.core.models.TweetBuilder;import com.twitter.sdk.android.core.models.User;import java.util.ArrayList;import java.util.Collections;import java.util.HashMap;import java.util.List;import java.util.Map;import retrofit2.Call;public class CollectionTimeline extends BaseTimeline implements Timeline<Tweet> { static final String COLLECTION_PREFIX = "custom-"; private static final String SCRIBE_SECTION = "collection"; final String collectionIdentifier; final Integer maxItemsPerRequest; CollectionTimeline(TweetUi tweetUi, Long collectionId, Integer maxItemsPerRequest) { super(tweetUi); // prefix the collection id with the collection prefix if (collectionId == null) { this.collectionIdentifier = null; } else { this.collectionIdentifier = COLLECTION_PREFIX + Long.toString(collectionId); } this.maxItemsPerRequest = maxItemsPerRequest; }  @Override public void next(Long minPosition, Callback<TimelineResult<Tweet>> cb) { createCollectionRequest(minPosition, null).enqueue(new CollectionCallback(cb)); }  @Override public void previous(Long maxPosition, Callback<TimelineResult<Tweet>> cb) { createCollectionRequest(null, maxPosition).enqueue(new CollectionCallback(cb)); } @Override String getTimelineType() { return SCRIBE_SECTION; } Call<TwitterCollection> createCollectionRequest(final Long minPosition, final Long maxPosition) { return TwitterCore.getInstance().getApiClient().getCollectionService() .collection(collectionIdentifier, maxItemsPerRequest, maxPosition, minPosition); }  class CollectionCallback extends Callback<TwitterCollection> { final Callback<TimelineResult<Tweet>> cb;  CollectionCallback(Callback<TimelineResult<Tweet>> cb) { this.cb = cb; } @Override public void success(Result<TwitterCollection> result) { final TimelineCursor timelineCursor = getTimelineCursor(result.data); final List<Tweet> tweets = getOrderedTweets(result.data); final TimelineResult<Tweet> timelineResult; if (timelineCursor != null) { timelineResult = new TimelineResult<>(timelineCursor, tweets); } else { timelineResult = new TimelineResult<>(null, Collections.<Tweet>emptyList()); } if (cb != null) { cb.success(new Result(timelineResult, result.response)); } } @Override public void failure(TwitterException exception) { if (cb != null) { cb.failure(exception); } } } static List<Tweet> getOrderedTweets(TwitterCollection collection) { if (collection == null || collection.contents == null || collection.contents.tweetMap == null || collection.contents.userMap == null || collection.metadata == null || collection.metadata.timelineItems == null || collection.metadata.position == null) { return Collections.emptyList(); } final List<Tweet> tweets = new ArrayList<>(); final Map<Long, Tweet> tweetMap = new HashMap<>(); for (Tweet trimmedTweet: collection.contents.tweetMap.values()) { // read user id from the trimmed Tweet final Long userId = trimmedTweet.user.id; // lookup User in the collection response's UserMap final User user = collection.contents.userMap.get(userId); // build the Tweet with the hydrated User final Tweet tweet = new TweetBuilder().copy(trimmedTweet).setUser(user).build(); tweetMap.put(tweet.id, tweet); } for (TwitterCollection.TimelineItem item: collection.metadata.timelineItems) { final Tweet tweet = tweetMap.get(item.tweetItem.id); tweets.add(tweet); } return tweets; } static TimelineCursor getTimelineCursor(TwitterCollection twitterCollection) { if (twitterCollection == null || twitterCollection.metadata == null || twitterCollection.metadata.position == null) { return null; } final Long minPosition = twitterCollection.metadata.position.minPosition; final Long maxPosition = twitterCollection.metadata.position.maxPosition; return new TimelineCursor(minPosition, maxPosition); }  public static class Builder { private final TweetUi tweetUi; private Long collectionId; private Integer maxItemsPerRequest = 30;  public Builder() { this(TweetUi.getInstance()); }  public Builder(TweetUi tweetUi) { if (tweetUi == null) { throw new IllegalArgumentException("TweetUi instance must not be null"); } this.tweetUi = tweetUi; }  public Builder id(Long collectionId) { this.collectionId = collectionId; return this; }  public Builder maxItemsPerRequest(Integer maxItemsPerRequest) { this.maxItemsPerRequest = maxItemsPerRequest; return this; }  public CollectionTimeline build() { if (collectionId == null) { throw new IllegalStateException("collection id must not be null"); } return new CollectionTimeline(tweetUi, collectionId, maxItemsPerRequest); } }}package com.twitter.sdk.android.tweetui;import android.graphics.Color;final class ColorUtils { private ColorUtils() {}  static int calculateOpacityTransform(final double opacity, final int overlayColor, final int primaryColor) { final int redPrimary = Color.red(primaryColor); final int redOverlay = Color.red(overlayColor); final int greenPrimary = Color.green(primaryColor); final int greenOverlay = Color.green(overlayColor); final int bluePrimary = Color.blue(primaryColor); final int blueOverlay = Color.blue(overlayColor); final int redCalculated = (int) ((1 - opacity) * redPrimary + opacity * redOverlay); final int greenCalculated = (int) ((1 - opacity) * greenPrimary + opacity * greenOverlay); final int blueCalculated = (int) ((1 - opacity) * bluePrimary + opacity * blueOverlay); return Color.rgb(redCalculated, greenCalculated, blueCalculated); }  static boolean isLightColor(final int color) { final int r = Color.red(color); final int g = Color.green(color); final int b = Color.blue(color); final double threshold = 0.21 * r + 0.72 * g + 0.07 * b; return threshold > 128; }}package com.twitter.sdk.android.mopub;import android.graphics.Color;import org.junit.Test;import org.junit.runner.RunWith;import org.robolectric.RobolectricGradleTestRunner;import org.robolectric.annotation.Config;import static org.junit.Assert.assertEquals;import static org.junit.Assert.assertFalse;import static org.junit.Assert.assertTrue;@RunWith(RobolectricGradleTestRunner.class)@Config(constants = BuildConfig.class, sdk = 21)public class ColorUtilsTest { @Test public void testIsLightColor_black() { assertFalse(ColorUtils.isLightColor(Color.BLACK)); } @Test public void testIsLightColor_white() { assertTrue(ColorUtils.isLightColor(Color.WHITE)); } @Test public void testDefaultCtaButtonIsDarkColor() { assertFalse(ColorUtils.isLightColor(R.color.tw__ad_cta_default)); } @Test public void testCtaTextColorIsLightForDarkBgColor() { assertEquals(Color.WHITE, ColorUtils.calculateCtaTextColor(R.color.tw__ad_cta_default)); assertEquals(Color.WHITE, ColorUtils.calculateCtaTextColor(Color.BLACK)); assertEquals(Color.WHITE, ColorUtils.calculateCtaTextColor(Color.DKGRAY)); } @Test public void testCtaTextColorIsDarkForLightBgColor() { assertTrue(Color.WHITE != ColorUtils.calculateCtaTextColor(Color.WHITE)); assertTrue(Color.WHITE != ColorUtils.calculateCtaTextColor(Color.LTGRAY)); } @Test public void testCTAOnTapColorIsLighterForDarkBgColor() { final int darkColor = Color.BLACK; final int originalRed = Color.red(darkColor); final int originalGreen = Color.green(darkColor); final int originalBlue = Color.blue(darkColor); final int lighterColor = ColorUtils.calculateCtaOnTapColor(darkColor); final int lighterRed = Color.red(lighterColor); final int lighterGreen = Color.green(lighterColor); final int lighterBlue = Color.blue(lighterColor); assertTrue(lighterRed > originalRed && lighterGreen > originalGreen && lighterBlue > originalBlue); } @Test public void testCTAOnTapColorIsDarkerForLightBgColor() { final int lightColor = Color.WHITE; final int originalRed = Color.red(lightColor); final int originalGreen = Color.green(lightColor); final int originalBlue = Color.blue(lightColor); final int darkerColor = ColorUtils.calculateCtaOnTapColor(lightColor); final int darkerRed = Color.red(darkerColor); final int darkerGreen = Color.green(darkerColor); final int darkerBlue = Color.blue(darkerColor); assertTrue(originalRed > darkerRed && originalGreen > darkerGreen && originalBlue > darkerBlue); } @Test public void testContrastColorForDarkColor() { final int darkColor = Color.BLACK; final int contrastingLightColor = ColorUtils.calculateContrastingColor(darkColor); assertTrue(ColorUtils.isLightColor(contrastingLightColor)); } @Test public void testContrastColorForLightColor() { final int lightColor = Color.WHITE; final int contrastingDarkColor = ColorUtils.calculateContrastingColor(lightColor); assertFalse(ColorUtils.isLightColor(contrastingDarkColor)); }}package com.twitter.sdk.android.tweetui;import android.content.Context;import android.util.AttributeSet;import com.twitter.sdk.android.core.models.MediaEntity;import com.twitter.sdk.android.core.models.Tweet;public class CompactTweetView extends BaseTweetView { private static final String VIEW_TYPE_NAME = "compact"; private static final double SQUARE_ASPECT_RATIO = 1.0; private static final double MAX_LANDSCAPE_ASPECT_RATIO = 3.0; private static final double MIN_LANDSCAPE_ASPECT_RATIO = 4.0 / 3.0; public CompactTweetView(Context context, Tweet tweet) { super(context, tweet); } public CompactTweetView(Context context, Tweet tweet, int styleResId) { super(context, tweet, styleResId); } CompactTweetView(Context context, Tweet tweet, int styleResId, DependencyProvider dependencyProvider) { super(context, tweet, styleResId, dependencyProvider); } public CompactTweetView(Context context, AttributeSet attrs) { super(context, attrs); } public CompactTweetView(Context context, AttributeSet attrs, int defStyle) { super(context, attrs, defStyle); } @Override protected int getLayout() { return R.layout.tw__tweet_compact; } @Override void render() { super.render(); // Redraw screen name on recycle screenNameView.requestLayout(); }  @Override protected double getAspectRatio(MediaEntity photoEntity) { final double ratio = super.getAspectRatio(photoEntity); if (ratio <= SQUARE_ASPECT_RATIO) { // portrait (tall) photos should be cropped to be square aspect ratio return SQUARE_ASPECT_RATIO; } else if (ratio > MAX_LANDSCAPE_ASPECT_RATIO) { // the widest landscape photos allowed are 3:1 return MAX_LANDSCAPE_ASPECT_RATIO; } else if (ratio < MIN_LANDSCAPE_ASPECT_RATIO) { // the tallest landscape photos allowed are 4:3 return MIN_LANDSCAPE_ASPECT_RATIO; } else { // landscape photos between 3:1 to 4:3 present the original width to height ratio return ratio; } } @Override String getViewTypeName() { return VIEW_TYPE_NAME; }}package com.twitter.sdk.android.tweetcomposer;import android.app.Activity;import android.content.Context;import android.content.Intent;import android.os.Bundle;import com.twitter.Regex;import com.twitter.sdk.android.core.TwitterAuthToken;import com.twitter.sdk.android.core.TwitterSession;public class ComposerActivity extends Activity { static final String EXTRA_USER_TOKEN = "EXTRA_USER_TOKEN"; static final String EXTRA_CARD = "EXTRA_CARD"; static final String EXTRA_THEME = "EXTRA_THEME"; static final String EXTRA_HASHTAGS = "EXTRA_HASHTAGS"; private static final int PLACEHOLDER_ID = -1; private static final String PLACEHOLDER_SCREEN_NAME = ""; @Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); final Intent intent = getIntent(); final TwitterAuthToken token = intent.getParcelableExtra(EXTRA_USER_TOKEN); final TwitterSession session = new TwitterSession(token, PLACEHOLDER_ID, PLACEHOLDER_SCREEN_NAME); final Card card = (Card) intent.getSerializableExtra(EXTRA_CARD); final String hashtags = intent.getStringExtra(EXTRA_HASHTAGS); final int themeResId = intent.getIntExtra(EXTRA_THEME, R.style.ComposerLight); setTheme(themeResId); setContentView(R.layout.tw__activity_composer); final ComposerView composerView = (ComposerView) findViewById(R.id.tw__composer_view); new ComposerController(composerView, session, card, hashtags, new FinisherImpl()); } interface Finisher { void finish(); } // FinisherImpl allows sub-components to finish the host Activity. class FinisherImpl implements Finisher { @Override public void finish() { ComposerActivity.this.finish(); } } public static class Builder { private final Context context; private TwitterAuthToken token; private int themeResId = R.style.ComposerLight; private Card card; private String hashtags; public Builder(Context context) { if (context == null) { throw new IllegalArgumentException("Context must not be null"); } this.context = context; } public Builder session(TwitterSession session) { if (session == null) { throw new IllegalArgumentException("TwitterSession must not be null"); } final TwitterAuthToken token = session.getAuthToken(); if (token == null) { throw new IllegalArgumentException("TwitterSession token must not be null"); } // session passed via the parcelable auth token this.token = token; return this; } public Builder card(Card card) { this.card = card; return this; } public Builder hashtags(String... hashtags) { if (hashtags == null) return this; final StringBuilder sb = new StringBuilder(); for (String hashtag : hashtags) { final boolean isValid = Regex.VALID_HASHTAG.matcher(hashtag).find(); if (isValid) { sb.append(" ").append(hashtag); } } this.hashtags = sb.length() == 0 ? null : sb.toString(); return this; } public Builder darkTheme() { themeResId = R.style.ComposerDark; return this; } public Intent createIntent() { if (token == null) { throw new IllegalStateException("Must set a TwitterSession"); } final Intent intent = new Intent(context, ComposerActivity.class); intent.putExtra(EXTRA_USER_TOKEN, token); intent.putExtra(EXTRA_CARD, card); intent.putExtra(EXTRA_THEME, themeResId); intent.putExtra(EXTRA_HASHTAGS, hashtags); return intent; } }}package com.twitter.sdk.android.tweetcomposer;import com.twitter.sdk.android.core.TwitterApiClient;import com.twitter.sdk.android.core.TwitterSession;import com.twitter.sdk.android.tweetcomposer.internal.CardService;class ComposerApiClient extends TwitterApiClient { ComposerApiClient(TwitterSession session) { super(session); }  StatusesService getComposerStatusesService() { return getService(StatusesService.class); }  CardService getCardService() { return getService(CardService.class); }}package com.twitter.sdk.android.tweetcomposer;import android.content.Intent;import android.text.TextUtils;import android.view.View;import com.twitter.Validator;import com.twitter.sdk.android.core.Callback;import com.twitter.sdk.android.core.Result;import com.twitter.sdk.android.core.TwitterApiClient;import com.twitter.sdk.android.core.TwitterCore;import com.twitter.sdk.android.core.TwitterException;import com.twitter.sdk.android.core.TwitterSession;import com.twitter.sdk.android.core.internal.TwitterApiConstants;import com.twitter.sdk.android.core.models.User;class ComposerController { final ComposerView composerView; final TwitterSession session; final Card card; final ComposerActivity.Finisher finisher; final DependencyProvider dependencyProvider; ComposerController(final ComposerView composerView, TwitterSession session, Card card, String hashtags, ComposerActivity.Finisher finisher) { this(composerView, session, card, hashtags, finisher, new DependencyProvider()); } // testing purposes ComposerController(final ComposerView composerView, TwitterSession session, Card card, String hashtags, ComposerActivity.Finisher finisher, DependencyProvider dependencyProvider) { this.composerView = composerView; this.session = session; this.card = card; this.finisher = finisher; this.dependencyProvider = dependencyProvider; composerView.setCallbacks(new ComposerCallbacksImpl()); composerView.setTweetText(hashtags); setProfilePhoto(); setCardView(card); dependencyProvider.getScribeClient().impression(card); } void setProfilePhoto() { dependencyProvider.getApiClient(session).getAccountService().verifyCredentials(false, true) .enqueue(new Callback<User>() { @Override public void success(Result<User> result) { composerView.setProfilePhotoView(result.data); } @Override public void failure(TwitterException exception) { // show placeholder background color composerView.setProfilePhotoView(null); } }); } void setCardView(Card card) { if (card != null) { final CardViewFactory cardViewFactory = dependencyProvider.getCardViewFactory(); final View view = cardViewFactory.createCard(composerView.getContext(), card); composerView.setCardView(view); } } public interface ComposerCallbacks { void onTextChanged(String text); void onTweetPost(String text); void onCloseClick(); } class ComposerCallbacksImpl implements ComposerCallbacks { @Override public void onTextChanged(String text) { final int charCount = tweetTextLength(text); composerView.setCharCount(remainingCharCount(charCount)); // character count overflow red color if (isTweetTextOverflow(charCount)) { composerView.setCharCountTextStyle(R.style.tw__ComposerCharCountOverflow); } else { composerView.setCharCountTextStyle(R.style.tw__ComposerCharCount); } // Tweet post button enable/disable composerView.postTweetEnabled(isPostEnabled(charCount)); } @Override public void onTweetPost(String text) { dependencyProvider.getScribeClient().click(card, ScribeConstants.SCRIBE_TWEET_ELEMENT); final Intent intent = new Intent(composerView.getContext(), TweetUploadService.class); intent.putExtra(TweetUploadService.EXTRA_USER_TOKEN, session.getAuthToken()); intent.putExtra(TweetUploadService.EXTRA_TWEET_TEXT, text); intent.putExtra(TweetUploadService.EXTRA_TWEET_CARD, card); composerView.getContext().startService(intent); finisher.finish(); } @Override public void onCloseClick() { dependencyProvider.getScribeClient().click(card, ScribeConstants.SCRIBE_CANCEL_ELEMENT); finisher.finish(); } } int tweetTextLength(String text) { if (TextUtils.isEmpty(text)) { return 0; } return dependencyProvider.getTweetValidator().getTweetLength(text); } static int remainingCharCount(int charCount) { return TwitterApiConstants.MAX_TWEET_CHARS - charCount; }  static boolean isPostEnabled(int charCount) { return charCount > 0 && charCount <= TwitterApiConstants.MAX_TWEET_CHARS; }  static boolean isTweetTextOverflow(int charCount) { return charCount > TwitterApiConstants.MAX_TWEET_CHARS; }  static class DependencyProvider { final CardViewFactory cardViewFactory = new CardViewFactory(); final Validator tweetValidator = new Validator(); TwitterApiClient getApiClient(TwitterSession session) { return TwitterCore.getInstance().getApiClient(session); } CardViewFactory getCardViewFactory() { return cardViewFactory; } Validator getTweetValidator() { return tweetValidator; } ComposerScribeClient getScribeClient() { return new ComposerScribeClientImpl(TweetComposer.getInstance().getScribeClient()); } }}package com.twitter.sdk.android.tweetcomposer;interface ComposerScribeClient {  void impression(Card card);  void click(Card card, String element);}package com.twitter.sdk.android.tweetcomposer;import com.twitter.sdk.android.core.internal.scribe.EventNamespace;import com.twitter.sdk.android.core.internal.scribe.ScribeItem;import java.util.ArrayList;import java.util.List;class ComposerScribeClientImpl implements ComposerScribeClient { private final ScribeClient scribeClient; ComposerScribeClientImpl(ScribeClient scribeClient) { if (scribeClient == null) { throw new NullPointerException("scribeClient must not be null"); } this.scribeClient = scribeClient; } @Override public void impression(Card card) { final EventNamespace ns = ScribeConstants.ComposerEventBuilder .setComponent(ScribeConstants.SCRIBE_COMPONENT) .setElement(ScribeConstants.SCRIBE_IMPRESSION_ELEMENT) .setAction(ScribeConstants.SCRIBE_IMPRESSION_ACTION) .builder(); final List<ScribeItem> items = new ArrayList<>(); items.add(ScribeConstants.newCardScribeItem(card)); scribeClient.scribe(ns, items); } @Override public void click(Card card, String element) { final EventNamespace ns = ScribeConstants.ComposerEventBuilder .setComponent(ScribeConstants.SCRIBE_COMPONENT) .setElement(element) .setAction(ScribeConstants.SCRIBE_CLICK_ACTION) .builder(); final List<ScribeItem> items = new ArrayList<>(); items.add(ScribeConstants.newCardScribeItem(card)); scribeClient.scribe(ns, items); }}package com.twitter.sdk.android.tweetcomposer;import android.content.Context;import android.graphics.drawable.ColorDrawable;import android.text.Editable;import android.text.TextWatcher;import android.util.AttributeSet;import android.view.KeyEvent;import android.view.View;import android.view.ViewGroup;import android.widget.Button;import android.widget.EditText;import android.widget.ImageView;import android.widget.LinearLayout;import android.widget.TextView;import com.squareup.picasso.Picasso;import com.twitter.sdk.android.core.internal.UserUtils;import com.twitter.sdk.android.core.internal.util.ObservableScrollView;import com.twitter.sdk.android.core.models.User;import java.util.Locale;public class ComposerView extends LinearLayout { ImageView avatarView; ImageView closeView; EditText tweetEditView; TextView charCountView; Button tweetButton; ObservableScrollView scrollView; View divider; // styled drawables for images ColorDrawable mediaBg; // callbacks ViewGroup cardView; ComposerController.ComposerCallbacks callbacks; private Picasso imageLoader; public ComposerView(Context context) { this(context, null); } public ComposerView(Context context, AttributeSet attrs) { super(context, attrs); init(context); } public ComposerView(Context context, AttributeSet attrs, int defStyle) { super(context, attrs, defStyle); init(context); } private void init(Context context) { imageLoader = Picasso.with(getContext()); // TODO: make color vary depending on the style mediaBg = new ColorDrawable(context.getResources() .getColor(R.color.tw__composer_light_gray)); inflate(context, R.layout.tw__composer_view, this); } @Override protected void onFinishInflate() { super.onFinishInflate(); findSubviews(); closeView.setOnClickListener(new OnClickListener() { @Override public void onClick(View view) { callbacks.onCloseClick(); } }); tweetButton.setOnClickListener(new OnClickListener() { @Override public void onClick(View view) { callbacks.onTweetPost(getTweetText()); } }); tweetEditView.setOnEditorActionListener(new TextView.OnEditorActionListener() { @Override public boolean onEditorAction(TextView textView, int i, KeyEvent keyEvent) { callbacks.onTweetPost(getTweetText()); return true; } }); tweetEditView.addTextChangedListener(new TextWatcher() { @Override public void beforeTextChanged(CharSequence charSequence, int i, int i1, int i2) { } @Override public void onTextChanged(CharSequence charSequence, int i, int i1, int i2) { } @Override public void afterTextChanged(Editable editable) { callbacks.onTextChanged(getTweetText()); } }); scrollView.setScrollViewListener(new ObservableScrollView.ScrollViewListener() { @Override public void onScrollChanged(int scrollY) { if (scrollY > 0) { divider.setVisibility(View.VISIBLE); } else { divider.setVisibility(View.INVISIBLE); } } }); } void findSubviews() { avatarView = (ImageView) findViewById(R.id.tw__author_avatar); closeView = (ImageView) findViewById(R.id.tw__composer_close); tweetEditView = (EditText) findViewById(R.id.tw__edit_tweet); charCountView = (TextView) findViewById(R.id.tw__char_count); tweetButton = (Button) findViewById(R.id.tw__post_tweet); scrollView = (ObservableScrollView) findViewById(R.id.tw__composer_scroll_view); divider = findViewById(R.id.tw__composer_profile_divider); cardView = (ViewGroup) findViewById(R.id.tw__card_view); } void setCallbacks(ComposerController.ComposerCallbacks callbacks) { this.callbacks = callbacks; }  void setProfilePhotoView(User user) { final String url = UserUtils.getProfileImageUrlHttps(user, UserUtils.AvatarSize.REASONABLY_SMALL); if (imageLoader != null) { // Passing null url will not trigger any request, but will set the placeholder bg imageLoader.load(url).placeholder(mediaBg).into(avatarView); } } String getTweetText() { return tweetEditView.getText().toString(); } void setTweetText(String text) { tweetEditView.setText(text); } void setCharCount(int remainingCount) { charCountView.setText(String.format(Locale.getDefault(), "%d", remainingCount)); } void setCharCountTextStyle(int textStyleResId) { charCountView.setTextAppearance(getContext(), textStyleResId); } void postTweetEnabled(boolean enabled) { tweetButton.setEnabled(enabled); } void setCardView(View card) { cardView.addView(card); cardView.setVisibility(View.VISIBLE); }}package com.twitter.sdk.android.core.models;import com.google.gson.annotations.SerializedName;import java.util.List;public class Configuration {  @SerializedName("dm_text_character_limit") public final int dmTextCharacterLimit;  @SerializedName("non_username_paths") public final List<String> nonUsernamePaths;  @SerializedName("photo_size_limit") public final long photoSizeLimit;  @SerializedName("photo_sizes") public final MediaEntity.Sizes photoSizes;  @SerializedName("short_url_length_https") public final int shortUrlLengthHttps; public Configuration(int dmTextCharacterLimit, List<String> nonUsernamePaths, long photoSizeLimit, MediaEntity.Sizes photoSizes, int shortUrlLengthHttps) { this.dmTextCharacterLimit = dmTextCharacterLimit; this.nonUsernamePaths = nonUsernamePaths; this.photoSizeLimit = photoSizeLimit; this.photoSizes = photoSizes; this.shortUrlLengthHttps = shortUrlLengthHttps; }}package com.twitter.sdk.android.core.services;import com.twitter.sdk.android.core.models.Configuration;import retrofit2.Call;import retrofit2.http.GET;public interface ConfigurationService {  @GET("/1.1/help/configuration.json") Call<Configuration> configuration();}package com.twitter.sdk.android.core.models;import com.google.gson.annotations.SerializedName;import java.util.ArrayList;import java.util.List;public class Coordinates { public static final int INDEX_LONGITUDE = 0; public static final int INDEX_LATITUDE = 1;  @SerializedName("coordinates") public final List<Double> coordinates;  @SerializedName("type") public final String type; public Coordinates(Double longitude, Double latitude, String type) { final List<Double> coords = new ArrayList<>(2); coords.add(INDEX_LONGITUDE, longitude); coords.add(INDEX_LATITUDE, latitude); this.coordinates = coords; this.type = type; } public Double getLongitude() { return coordinates.get(INDEX_LONGITUDE); } public Double getLatitude() { return coordinates.get(INDEX_LATITUDE); }}package com.twitter.sdk.android.core.internal.scribe;import android.os.Build;import android.text.TextUtils;import com.google.gson.FieldNamingPolicy;import com.google.gson.Gson;import com.google.gson.GsonBuilder;import com.twitter.sdk.android.core.BuildConfig;import com.twitter.sdk.android.core.GuestSession;import com.twitter.sdk.android.core.GuestSessionProvider;import com.twitter.sdk.android.core.Session;import com.twitter.sdk.android.core.SessionManager;import com.twitter.sdk.android.core.TwitterAuthToken;import com.twitter.sdk.android.core.TwitterCore;import java.util.Collections;import java.util.List;import java.util.concurrent.ScheduledExecutorService;import io.fabric.sdk.android.Kit;import io.fabric.sdk.android.services.common.ExecutorUtils;import io.fabric.sdk.android.services.common.IdManager;import io.fabric.sdk.android.services.settings.Settings;import io.fabric.sdk.android.services.settings.SettingsData;public class DefaultScribeClient extends ScribeClient {  private static final String SCRIBE_URL = "https://syndication.twitter.com"; private static final String SCRIBE_PATH_VERSION = "i"; private static final String SCRIBE_PATH_TYPE = "sdk"; private static final String DEBUG_BUILD = "debug"; private static volatile ScheduledExecutorService executor; private final Kit kit; private final SessionManager<? extends Session<TwitterAuthToken>> sessionManager; private final String advertisingId; public DefaultScribeClient(Kit kit, String kitName, SessionManager<? extends Session<TwitterAuthToken>> sessionManager, GuestSessionProvider guestSessionProvider, IdManager idManager) { this(kit, kitName, getGson(), sessionManager, guestSessionProvider, idManager); } DefaultScribeClient(Kit kit, String kitName, Gson gson, SessionManager<? extends Session<TwitterAuthToken>> sessionManager, GuestSessionProvider guestSessionProvider, IdManager idManager) { super(kit, getExecutor(), getScribeConfig(Settings.getInstance().awaitSettingsData(), getUserAgent(kitName, kit)), new ScribeEvent.Transform(gson), TwitterCore.getInstance().getAuthConfig(), sessionManager, guestSessionProvider, TwitterCore.getInstance().getSSLSocketFactory(), idManager); this.sessionManager = sessionManager; this.kit = kit; this.advertisingId = idManager.getAdvertisingId(); } public void scribe(EventNamespace... namespaces) { for (EventNamespace ns : namespaces) { scribe(ns, Collections.<ScribeItem>emptyList()); } } public void scribe(EventNamespace namespace, List<ScribeItem> items) { final String language = getLanguageFromKit(); final long timestamp = System.currentTimeMillis();  scribe(ScribeEventFactory.newScribeEvent(namespace, "", timestamp, language, advertisingId, items)); } public void scribe(ScribeEvent event) { super.scribe(event, getScribeSessionId(getActiveSession())); } public void scribe(EventNamespace namespace, String eventInfo) { final String language = getLanguageFromKit(); final long timestamp = System.currentTimeMillis();  scribe(ScribeEventFactory.newScribeEvent(namespace, eventInfo, timestamp, language, advertisingId, Collections.<ScribeItem>emptyList())); } // visible for tests Session getActiveSession() { return sessionManager.getActiveSession(); } // visible for tests long getScribeSessionId(Session activeSession) { final long scribeSessionId; if (activeSession != null) { scribeSessionId = activeSession.getId(); } else { // It's possible that we're attempting to load a tweet before we have a valid // session. Store the scribe event locally with the logged out user id so that we can // send it up at a later time with the logged out session. scribeSessionId = GuestSession.LOGGED_OUT_USER_ID; } return scribeSessionId; } private String getLanguageFromKit(){ final String language; if (kit.getContext() != null) { language = kit.getContext().getResources().getConfiguration().locale.getLanguage(); } else { language = ""; } return language; } private static Gson getGson() { return new GsonBuilder() .setFieldNamingPolicy(FieldNamingPolicy.LOWER_CASE_WITH_UNDERSCORES) .create(); } private static ScheduledExecutorService getExecutor() { if (executor == null) { synchronized (DefaultScribeClient.class) { if (executor == null) { executor = ExecutorUtils.buildSingleThreadScheduledExecutorService("scribe"); } } } return executor; } static ScribeConfig getScribeConfig(SettingsData settingsData, String userAgent) { // Get scribe configuration using analytics settings, which is used by crashlytics for // configuring Answers. This is temporary until we have can get our scribe settings from the // backend. If analytics settings are not available, fallback to defaults. final int maxFilesToKeep; final int sendIntervalSeconds; if (settingsData != null && settingsData.analyticsSettingsData != null) { maxFilesToKeep = settingsData.analyticsSettingsData.maxPendingSendFileCount; sendIntervalSeconds = settingsData.analyticsSettingsData.flushIntervalSeconds; } else { maxFilesToKeep = ScribeConfig.DEFAULT_MAX_FILES_TO_KEEP; sendIntervalSeconds = ScribeConfig.DEFAULT_SEND_INTERVAL_SECONDS; } final String scribeUrl = getScribeUrl(SCRIBE_URL, BuildConfig.SCRIBE_ENDPOINT_OVERRIDE); return new ScribeConfig(isEnabled(), scribeUrl, SCRIBE_PATH_VERSION, SCRIBE_PATH_TYPE, BuildConfig.SCRIBE_SEQUENCE, userAgent, maxFilesToKeep, sendIntervalSeconds); }  private static boolean isEnabled() { return !BuildConfig.BUILD_TYPE.equals(DEBUG_BUILD); } static String getUserAgent(String kitName, Kit kit) { return new StringBuilder() .append("Fabric/") .append(kit.getFabric().getVersion()) .append(" (Android ") .append(Build.VERSION.SDK_INT) .append(") ") .append(kitName) .append("/") .append(kit.getVersion()) .toString(); } // visible for tests static String getScribeUrl(String defaultUrl, String overrideUrl) { if (!TextUtils.isEmpty(overrideUrl)) { return overrideUrl; } else { return defaultUrl; } }}package com.twitter.sdk.android.core.internal.scribe;import android.os.Build;import io.fabric.sdk.android.Fabric;import io.fabric.sdk.android.FabricAndroidTestCase;import io.fabric.sdk.android.FabricTestUtils;import io.fabric.sdk.android.Kit;import io.fabric.sdk.android.services.common.IdManager;import io.fabric.sdk.android.services.settings.AnalyticsSettingsData;import io.fabric.sdk.android.services.settings.Settings;import io.fabric.sdk.android.services.settings.SettingsData;import io.fabric.sdk.android.services.settings.TestSettingsController;import com.twitter.sdk.android.core.BuildConfig;import com.twitter.sdk.android.core.GuestSessionProvider;import com.twitter.sdk.android.core.Session;import com.twitter.sdk.android.core.SessionManager;import com.twitter.sdk.android.core.TwitterAuthConfig;import com.twitter.sdk.android.core.TwitterCore;import com.twitter.sdk.android.core.TwitterSession;import java.util.Locale;import static org.mockito.Mockito.mock;import static org.mockito.Mockito.when;public class DefaultScribeClientTest extends FabricAndroidTestCase { private static final int TEST_SEND_INTERVAL_SECONDS = 6000000 * 60; // 6 million minutes private static final int TEST_MAX_FILES_TO_KEEP = 100000; private static final String TEST_USER_AGENT = "user-agent"; private static final String TEST_DEFAULT_SCRIBE_URL = "https://syndication.twitter.com"; private static final String TEST_OVERRIDE_SCRIBE_URL = "http://api.twitter.com"; private static final String TEST_SCRIBE_USER_AGENT_FORMAT = "Fabric/%s (Android %s) ExampleKit/%s"; private static final String TEST_SCRIBE_KIT_NAME = "ExampleKit"; private static final String TEST_KIT_VERSION = "1000"; private static final String ANY_KIT_IDENTIFIER = ":)"; private static final String REQUIRED_SCRIBE_URL_COMPONENT = "https://syndication.twitter.com"; private static final long REQUIRED_LOGGED_OUT_USER_ID = 0L; private static final long TEST_ACTIVE_SESSION_ID = 1L; private static final String DEBUG_BUILD_TYPE = "debug"; private ExampleKit testKit; private DefaultScribeClient scribeClient; private SessionManager<TwitterSession> mockTwitterSessionManager; private GuestSessionProvider mockGuestSessionProvider; @Override public void setUp() throws Exception { super.setUp(); FabricTestUtils.resetFabric(); Settings.getInstance().setSettingsController(new TestSettingsController()); Fabric.with(getContext(), new TwitterCore(new TwitterAuthConfig("", "")), new ExampleKit()); testKit = Fabric.getKit(ExampleKit.class); mockTwitterSessionManager = mock(SessionManager.class); mockGuestSessionProvider = mock(GuestSessionProvider.class); scribeClient = new DefaultScribeClient(testKit, TEST_SCRIBE_KIT_NAME, mockTwitterSessionManager, mockGuestSessionProvider, mock(IdManager.class)); } @Override protected void tearDown() throws Exception { super.tearDown(); FabricTestUtils.resetFabric(); } private class ExampleKit extends Kit { @Override public String getIdentifier() { return ANY_KIT_IDENTIFIER; } @Override public String getVersion() { return TEST_KIT_VERSION; } @Override protected Object doInBackground() { return null; } } public void testGetScribeConfig_settingsDataNull() { final ScribeConfig scribeConfig = DefaultScribeClient.getScribeConfig(null, TEST_USER_AGENT); assertScribeConfig(TEST_USER_AGENT, ScribeConfig.DEFAULT_MAX_FILES_TO_KEEP, ScribeConfig.DEFAULT_SEND_INTERVAL_SECONDS, scribeConfig); } public void testGetScribeConfig_settingsDataAnalyticsSettingsDataNull() { final SettingsData settingsData = new SettingsData(0L, null, null, null, null, null, null, 0, 0); final ScribeConfig scribeConfig = DefaultScribeClient.getScribeConfig(settingsData, TEST_USER_AGENT); assertScribeConfig(TEST_USER_AGENT, ScribeConfig.DEFAULT_MAX_FILES_TO_KEEP, ScribeConfig.DEFAULT_SEND_INTERVAL_SECONDS, scribeConfig); } public void testGetScribeConfig_settingsDataValid() { final AnalyticsSettingsData analyticsSettingsData = new AnalyticsSettingsData(null, TEST_SEND_INTERVAL_SECONDS, 0, 0, TEST_MAX_FILES_TO_KEEP, true); final SettingsData settingsData = new SettingsData(0L, null, null, null, null, analyticsSettingsData, null, 0, 0); final ScribeConfig scribeConfig = DefaultScribeClient.getScribeConfig(settingsData, TEST_USER_AGENT); assertScribeConfig(TEST_USER_AGENT, TEST_MAX_FILES_TO_KEEP, TEST_SEND_INTERVAL_SECONDS, scribeConfig); } public void testGetScribeUrl_nullOverride() { final String scribeUrl = DefaultScribeClient.getScribeUrl(TEST_DEFAULT_SCRIBE_URL, null); assertEquals(TEST_DEFAULT_SCRIBE_URL, scribeUrl); } public void testGetScribeUrl_emptyOverride() { final String scribeUrl = DefaultScribeClient.getScribeUrl(TEST_DEFAULT_SCRIBE_URL, ""); assertEquals(TEST_DEFAULT_SCRIBE_URL, scribeUrl); } public void testGetScribeUrl_override() { final String scribeUrl = DefaultScribeClient.getScribeUrl(TEST_DEFAULT_SCRIBE_URL, TEST_OVERRIDE_SCRIBE_URL); assertEquals(TEST_OVERRIDE_SCRIBE_URL, scribeUrl); } private void assertScribeConfig(String expectedUserAgent, int expectedMaxFilesToKeep, int expectedSendIntervalSeconds, ScribeConfig scribeConfig) { assertEquals(!BuildConfig.BUILD_TYPE.equals(DEBUG_BUILD_TYPE), scribeConfig.isEnabled); assertEquals(REQUIRED_SCRIBE_URL_COMPONENT, scribeConfig.baseUrl); assertEquals(BuildConfig.SCRIBE_SEQUENCE, scribeConfig.sequence); assertEquals(expectedUserAgent, scribeConfig.userAgent); assertEquals(expectedMaxFilesToKeep, scribeConfig.maxFilesToKeep); assertEquals(expectedSendIntervalSeconds, scribeConfig.sendIntervalSeconds); } public void testGetScribeUserAgent() { Fabric.with(getContext(), new ExampleKit()); final Kit kit = Fabric.getKit(ExampleKit.class); final String userAgent = String.format(Locale.ENGLISH, TEST_SCRIBE_USER_AGENT_FORMAT, kit.getFabric().getVersion(), Build.VERSION.SDK_INT, kit.getVersion()); assertEquals(userAgent, DefaultScribeClient.getUserAgent(TEST_SCRIBE_KIT_NAME, kit)); } public void testGetActiveSession_activeSessionDoesNotExist() { assertNull(scribeClient.getActiveSession()); } public void testGetActiveSession_activeSessionFirstManager() { final TwitterSession mockSession = mock(TwitterSession.class); when(mockTwitterSessionManager.getActiveSession()).thenReturn(mockSession); assertSame(mockSession, scribeClient.getActiveSession()); } public void testGetScribeSessionId_nullSession() { assertEquals(REQUIRED_LOGGED_OUT_USER_ID, scribeClient.getScribeSessionId(null)); } public void testGetScribeSessionId_activeSession() { final DefaultScribeClient scribeClient = new DefaultScribeClient(testKit, TEST_SCRIBE_KIT_NAME, mockTwitterSessionManager, mockGuestSessionProvider, mock(IdManager.class)); final Session mockSession = mock(Session.class); when(mockSession.getId()).thenReturn(TEST_ACTIVE_SESSION_ID); assertEquals(TEST_ACTIVE_SESSION_ID, scribeClient.getScribeSessionId(mockSession)); }}package com.twitter.sdk.android.core.internal.scribe;import android.content.Context;import io.fabric.sdk.android.services.events.EnabledEventsStrategy;import io.fabric.sdk.android.services.events.FilesSender;import java.util.concurrent.ScheduledExecutorService;class EnabledScribeStrategy extends EnabledEventsStrategy<ScribeEvent> { private final FilesSender filesSender; public EnabledScribeStrategy(Context context, ScheduledExecutorService executorService, ScribeFilesManager filesManager, ScribeConfig config, ScribeFilesSender filesSender) { super(context, executorService, filesManager); this.filesSender = filesSender; configureRollover(config.sendIntervalSeconds); } @Override public FilesSender getFilesSender() { return filesSender; }}package com.twitter.sdk.android.core.models;import com.google.gson.annotations.SerializedName;import java.io.Serializable;import java.util.ArrayList;import java.util.Collections;import java.util.List;class Entity implements Serializable { private static final int START_INDEX = 0; private static final int END_INDEX = 1;  @SerializedName("indices") public final List<Integer> indices; public Entity(int start, int end) { final List<Integer> temp = new ArrayList<>(2); temp.add(START_INDEX, start); temp.add(END_INDEX, end); indices = Collections.unmodifiableList(temp); } public int getStart() { return indices.get(START_INDEX); } public int getEnd() { return indices.get(END_INDEX); }}package com.twitter.sdk.android.core.internal.scribe;import com.google.gson.annotations.SerializedName;public class EventNamespace { @SerializedName("client") public final String client; @SerializedName("page") public final String page; @SerializedName("section") public final String section; @SerializedName("component") public final String component; @SerializedName("element") public final String element; @SerializedName("action") public final String action; public EventNamespace(String client, String page, String section, String component, String element, String action) { this.client = client; this.page = page; this.section = section; this.component = component; this.element = element; this.action = action; } @Override public String toString() { return new StringBuilder() .append("client=").append(client) .append(", page=").append(page) .append(", section=").append(section) .append(", component=").append(component) .append(", element=").append(element) .append(", action=").append(action) .toString(); } @Override public boolean equals(Object o) { if (this == o) return true; if (o == null || getClass() != o.getClass()) return false; final EventNamespace that = (EventNamespace) o; if (action != null ? !action.equals(that.action) : that.action != null) return false; if (client != null ? !client.equals(that.client) : that.client != null) return false; if (component != null ? !component.equals(that.component) : that.component != null) { return false; } if (element != null ? !element.equals(that.element) : that.element != null) { return false; } if (page != null ? !page.equals(that.page) : that.page != null) return false; if (section != null ? !section.equals(that.section) : that.section != null) { return false; } return true; } @Override public int hashCode() { int result = client != null ? client.hashCode() : 0; result = 31 * result + (page != null ? page.hashCode() : 0); result = 31 * result + (section != null ? section.hashCode() : 0); result = 31 * result + (component != null ? component.hashCode() : 0); result = 31 * result + (element != null ? element.hashCode() : 0); result = 31 * result + (action != null ? action.hashCode() : 0); return result; } public static class Builder { private String client; private String page; private String section; private String component; private String element; private String action; public Builder setClient(String client) { this.client = client; return this; } public Builder setPage(String page) { this.page = page; return this; } public Builder setSection(String section) { this.section = section; return this; } public Builder setComponent(String component) { this.component = component; return this; } public Builder setElement(String element) { this.element = element; return this; } public Builder setAction(String action) { this.action = action; return this; } public EventNamespace builder() { return new EventNamespace(client, page, section, component, element, action); } }}package com.twitter.sdk.android.core.services;import com.twitter.sdk.android.core.models.Tweet;import java.util.List;import retrofit2.Call;import retrofit2.http.Field;import retrofit2.http.FormUrlEncoded;import retrofit2.http.GET;import retrofit2.http.POST;import retrofit2.http.Query;public interface FavoriteService {  @GET("/1.1/favorites/list.json?" + "tweet_mode=extended&include_cards=true&cards_platform=TwitterKit-13") Call<List<Tweet>> list(@Query("user_id") Long userId, @Query("screen_name") String screenName, @Query("count") Integer count, @Query("since_id") String sinceId, @Query("max_id") String maxId, @Query("include_entities") Boolean includeEntities);  @FormUrlEncoded @POST("/1.1/favorites/destroy.json?" + "tweet_mode=extended&include_cards=true&cards_platform=TwitterKit-13") Call<Tweet> destroy(@Field("id") Long id, @Field("include_entities") Boolean includeEntities);  @FormUrlEncoded @POST("/1.1/favorites/create.json?" + "tweet_mode=extended&include_cards=true&cards_platform=TwitterKit-13") Call<Tweet> create(@Field("id") Long id, @Field("include_entities") Boolean includeEntities);}package com.twitter.sdk.android.tweetcomposer;import android.annotation.TargetApi;import android.content.ContentResolver;import android.content.Context;import android.database.Cursor;import android.net.Uri;import android.os.Build;import android.provider.DocumentsContract;import android.provider.MediaStore;import android.text.TextUtils;import android.webkit.MimeTypeMap;import java.io.File;class FileUtils { private static final String MEDIA_SCHEME = "com.android.providers.media.documents"; @TargetApi(Build.VERSION_CODES.KITKAT) static String getPath(final Context context, final Uri uri) { final boolean isKitKat = Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT; if (isKitKat && isMediaDocumentAuthority(uri)) { final String documentId = DocumentsContract.getDocumentId(uri); // e.g. "image:1234" final String[] parts = documentId.split(":"); final String type = parts[0]; Uri contentUri; if ("image".equals(type)) { contentUri = MediaStore.Images.Media.EXTERNAL_CONTENT_URI; } else { // reject video or audio documents return null; } // query content resolver for MediaStore id column final String selection = "_id=?"; final String[] args = new String[] { parts[1] }; return resolveFilePath(context, contentUri, selection, args); } else if (isContentScheme(uri)) { return resolveFilePath(context, uri, null, null); } else if (isFileScheme(uri)) { return uri.getPath(); } return null; } public static boolean isMediaDocumentAuthority(Uri uri) { return MEDIA_SCHEME.equalsIgnoreCase(uri.getAuthority()); } public static boolean isContentScheme(Uri uri) { return ContentResolver.SCHEME_CONTENT.equalsIgnoreCase(uri.getScheme()); } public static boolean isFileScheme(Uri uri) { return ContentResolver.SCHEME_FILE.equalsIgnoreCase(uri.getScheme()); } static String resolveFilePath(Context context, Uri uri, String selection, String[] args) { Cursor cursor = null; final String[] projection = {MediaStore.Images.Media.DATA}; try { cursor = context.getContentResolver().query(uri, projection, selection, args, null); if (cursor != null && cursor.moveToFirst()) { final int i = cursor.getColumnIndexOrThrow(MediaStore.Images.Media.DATA); return cursor.getString(i); } } finally { if (cursor != null) { cursor.close(); } } return null; }  static String getMimeType(File file) { final String ext = getExtension(file.getName()); if (!TextUtils.isEmpty(ext)) { return MimeTypeMap.getSingleton().getMimeTypeFromExtension(ext); } // default from https://dev.twitter.com/rest/public/uploading-media return "application/octet-stream"; }  static String getExtension(String filename) { if (filename == null) { return null; } final int i = filename.lastIndexOf("."); return i < 0 ? "" : filename.substring(i + 1); }}package com.twitter.sdk.android.tweetui;import com.twitter.sdk.android.core.Callback;import com.twitter.sdk.android.core.Result;import com.twitter.sdk.android.core.models.Tweet;import java.util.ArrayList;import java.util.Collections;import java.util.List;public class FixedTweetTimeline extends BaseTimeline implements Timeline<Tweet> { private static final String SCRIBE_SECTION = "fixed"; List<Tweet> tweets; FixedTweetTimeline(TweetUi tweetUi, List<Tweet> tweets) { super(tweetUi); this.tweets = tweets == null ? new ArrayList<Tweet>() : tweets; } @Override public void next(Long minPosition, Callback<TimelineResult<Tweet>> cb) { // always return the same fixed set of 'latest' Tweets final TimelineResult<Tweet> timelineResult = new TimelineResult<>(new TimelineCursor(tweets), tweets); cb.success(new Result(timelineResult, null)); } @Override public void previous(Long maxPosition, Callback<TimelineResult<Tweet>> cb) { final List<Tweet> empty = Collections.emptyList(); final TimelineResult<Tweet> timelineResult = new TimelineResult<>(new TimelineCursor(empty), empty); cb.success(new Result(timelineResult, null)); } @Override String getTimelineType() { return SCRIBE_SECTION; }  public static class Builder { private final TweetUi tweetUi; private List<Tweet> tweets;  public Builder() { this(TweetUi.getInstance()); }  public Builder(TweetUi tweetUi) { if (tweetUi == null) { throw new IllegalArgumentException("TweetUi instance must not be null"); } this.tweetUi = tweetUi; }  public Builder setTweets(List<Tweet> tweets) { this.tweets = tweets; return this; }  public FixedTweetTimeline build() { return new FixedTweetTimeline(tweetUi, tweets); } }}package com.twitter.sdk.android.tweetui;import com.twitter.sdk.android.core.models.MediaEntity;class FormattedMediaEntity extends FormattedUrlEntity { final String type; final String mediaUrlHttps; FormattedMediaEntity(MediaEntity entity) { super(entity); this.type = entity.type; this.mediaUrlHttps = entity.mediaUrlHttps; }}package com.twitter.sdk.android.tweetui;import java.util.ArrayList;import java.util.List;class FormattedTweetText { String text; final List<FormattedUrlEntity> urlEntities; final List<FormattedMediaEntity> mediaEntities; FormattedTweetText() { urlEntities = new ArrayList<>(); mediaEntities = new ArrayList<>(); }}package com.twitter.sdk.android.tweetui;import com.twitter.sdk.android.core.models.UrlEntity;class FormattedUrlEntity { int start; int end; final String displayUrl; final String url; FormattedUrlEntity(UrlEntity entity) { this.start = entity.getStart(); this.end = entity.getEnd(); this.displayUrl = entity.displayUrl; this.url = entity.url; }}package com.twitter.sdk.android.tweetui;import android.app.Activity;import android.os.Bundle;import com.squareup.picasso.Picasso;import com.twitter.sdk.android.core.models.MediaEntity;import com.twitter.sdk.android.tweetui.internal.MultiTouchImageView;public class GalleryActivity extends Activity { static final String MEDIA_ENTITY = "MEDIA_ENTITY"; static final String TWEET_ID = "TWEET_ID"; @Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.tw__gallery_activity); final MediaEntity entity = (MediaEntity) getIntent().getSerializableExtra(MEDIA_ENTITY); final MultiTouchImageView imageView = (MultiTouchImageView) findViewById(R.id.image_view); Picasso.with(this).load(entity.mediaUrlHttps).into(imageView); }}package com.twitter.sdk.android.core.services.params;public class Geocode { public enum Distance { MILES("mi"), KILOMETERS("km"); public final String identifier; Distance(String identifier) { this.identifier = identifier; } } public final double latitude; public final double longitude; public final int radius; public final Distance distance; public Geocode(double latitude, double longitude, int radius, Distance distance) { this.latitude = latitude; this.longitude = longitude; this.radius = radius; this.distance = distance; } @Override public String toString() { return latitude + "," + longitude + "," + radius + distance.identifier; }}package com.twitter.sdk.android.core.internal.network;import com.twitter.sdk.android.core.GuestSession;import com.twitter.sdk.android.core.GuestSessionProvider;import com.twitter.sdk.android.core.internal.oauth.GuestAuthToken;import com.twitter.sdk.android.core.internal.oauth.OAuthConstants;import java.io.IOException;import okhttp3.Authenticator;import okhttp3.Request;import okhttp3.Response;import okhttp3.Route;public class GuestAuthenticator implements Authenticator { static final int MAX_RETRIES = 2; final GuestSessionProvider guestSessionProvider; public GuestAuthenticator(GuestSessionProvider guestSessionProvider) { this.guestSessionProvider = guestSessionProvider; } @Override public Request authenticate(Route route, Response response) throws IOException { return reauth(response); } Request reauth(Response response) { if (canRetry(response)) { final GuestSession session = guestSessionProvider .refreshCurrentSession(new GuestSession(getExpiredToken(response))); final GuestAuthToken token = session == null ? null : session.getAuthToken(); if (token != null) { return resign(response.request(), token); } } return null; } GuestAuthToken getExpiredToken(Response response) { final String auth = response.request().header(OAuthConstants.HEADER_AUTHORIZATION); final String guest = response.request().header(OAuthConstants.HEADER_GUEST_TOKEN); return new GuestAuthToken("bearer", auth.replace("bearer ", ""), guest); } Request resign(Request request, GuestAuthToken token) { final Request.Builder builder = request.newBuilder(); GuestAuthInterceptor.addAuthHeaders(builder, token); return builder.build(); } boolean canRetry(Response response) { int responseCount = 1; while ((response = response.priorResponse()) != null) { responseCount++; } return responseCount < MAX_RETRIES; }}package com.twitter.sdk.android.core.internal.network;import com.twitter.sdk.android.core.GuestSession;import com.twitter.sdk.android.core.GuestSessionProvider;import com.twitter.sdk.android.core.internal.oauth.GuestAuthToken;import com.twitter.sdk.android.core.internal.oauth.OAuthConstants;import java.io.IOException;import okhttp3.Interceptor;import okhttp3.Request;import okhttp3.Response;public class GuestAuthInterceptor implements Interceptor { final GuestSessionProvider guestSessionProvider; public GuestAuthInterceptor(GuestSessionProvider guestSessionProvider) { this.guestSessionProvider = guestSessionProvider; } @Override public Response intercept(Chain chain) throws IOException { final Request request = chain.request(); final GuestSession session = guestSessionProvider.getCurrentSession(); final GuestAuthToken token = session == null ? null : session.getAuthToken(); if (token != null) { final Request.Builder builder = request.newBuilder(); addAuthHeaders(builder, token); return chain.proceed(builder.build()); } return chain.proceed(request); } static void addAuthHeaders(Request.Builder builder, GuestAuthToken token) { final String authHeader = token.getTokenType() + " " + token.getAccessToken(); builder.header(OAuthConstants.HEADER_AUTHORIZATION, authHeader); builder.header(OAuthConstants.HEADER_GUEST_TOKEN, token.getGuestToken()); }}package com.twitter.sdk.android.core.internal.network;import java.io.IOException;import okhttp3.Interceptor;import okhttp3.Response;public class GuestAuthNetworkInterceptor implements Interceptor { @Override public Response intercept(Chain chain) throws IOException { Response response = chain.proceed(chain.request()); if (response.code() == 403) { response = response.newBuilder().code(401).build(); } return response; }}package com.twitter.sdk.android.core.internal.oauth;import android.text.format.DateUtils;import com.google.gson.annotations.SerializedName;public class GuestAuthToken extends OAuth2Token { public static final String HEADER_GUEST_TOKEN = "x-guest-token";  private static final long EXPIRES_IN_MS = DateUtils.HOUR_IN_MILLIS * 3; @SerializedName("guest_token") private final String guestToken; public GuestAuthToken(String tokenType, String accessToken, String guestToken) { super(tokenType, accessToken); this.guestToken = guestToken; } public GuestAuthToken(String tokenType, String accessToken, String guestToken, long createdAt) { super(tokenType, accessToken, createdAt); this.guestToken = guestToken; } public String getGuestToken() { return guestToken; } // Passbird maintains guest tokens for at least 1 hour, but no more than 3 hours. Tokens // older than 3 hours are known to have expired and should not be reused. @Override public boolean isExpired() { return System.currentTimeMillis() >= this.createdAt + EXPIRES_IN_MS; } @Override public boolean equals(Object o) { if (this == o) return true; if (o == null || getClass() != o.getClass()) return false; if (!super.equals(o)) return false; final GuestAuthToken that = (GuestAuthToken) o; if (guestToken != null ? !guestToken.equals(that.guestToken) : that.guestToken != null) return false; return true; } @Override public int hashCode() { int result = super.hashCode(); result = 31 * result + (guestToken != null ? guestToken.hashCode() : 0); return result; }}package com.twitter.sdk.android.core;import android.text.TextUtils;import com.google.gson.Gson;import com.google.gson.GsonBuilder;import com.twitter.sdk.android.core.internal.oauth.GuestAuthToken;import io.fabric.sdk.android.Fabric;import io.fabric.sdk.android.services.persistence.SerializationStrategy;public class GuestSession extends Session<GuestAuthToken> { public static final long LOGGED_OUT_USER_ID = 0L;  public GuestSession(GuestAuthToken authToken) { super(authToken, LOGGED_OUT_USER_ID); } static public class Serializer implements SerializationStrategy<GuestSession> { private final Gson gson; public Serializer() { this.gson = new GsonBuilder() .registerTypeAdapter(GuestAuthToken.class, new AuthTokenAdapter()) .create(); } @Override public String serialize(GuestSession session) { if (session != null && session.getAuthToken() != null) { try { return gson.toJson(session); } catch (Exception e) { Fabric.getLogger().d(TwitterCore.TAG, "Failed to serialize session " + e.getMessage()); } } return ""; } @Override public GuestSession deserialize(String serializedSession) { if (!TextUtils.isEmpty(serializedSession)) { try { return gson.fromJson(serializedSession, GuestSession.class); } catch (Exception e) { Fabric.getLogger().d(TwitterCore.TAG, "Failed to deserialize session " + e.getMessage()); } } return null; } }}package com.twitter.sdk.android.core;import com.twitter.sdk.android.core.internal.oauth.GuestAuthToken;import com.twitter.sdk.android.core.internal.oauth.OAuth2Service;import java.util.concurrent.CountDownLatch;import io.fabric.sdk.android.Fabric;public class GuestSessionProvider { private final OAuth2Service oAuth2Service; private final SessionManager<GuestSession> sessionManager; public GuestSessionProvider(OAuth2Service oAuth2Service, SessionManager<GuestSession> sessionManager) { this.oAuth2Service = oAuth2Service; this.sessionManager = sessionManager; } public synchronized GuestSession getCurrentSession() { final GuestSession session = sessionManager.getActiveSession(); if (isSessionValid(session)) { return session; } refreshToken(); return sessionManager.getActiveSession(); } public synchronized GuestSession refreshCurrentSession(GuestSession expiredSession) { final GuestSession session = sessionManager.getActiveSession(); if (expiredSession != null && expiredSession.equals(session)) { refreshToken(); } return sessionManager.getActiveSession(); } void refreshToken() { Fabric.getLogger().d("GuestSessionProvider", "Refreshing expired guest session."); final CountDownLatch latch = new CountDownLatch(1); oAuth2Service.requestGuestAuthToken(new Callback<GuestAuthToken>() { @Override public void success(Result<GuestAuthToken> result) { sessionManager.setActiveSession(new GuestSession(result.data)); latch.countDown(); } @Override public void failure(TwitterException exception) { sessionManager.clearSession(GuestSession.LOGGED_OUT_USER_ID); latch.countDown(); } }); try { latch.await(); } catch (InterruptedException e) { sessionManager.clearSession(GuestSession.LOGGED_OUT_USER_ID); } } boolean isSessionValid(GuestSession session) { return session != null && session.getAuthToken() != null && !session.getAuthToken().isExpired(); }}package com.twitter.sdk.android.core.internal.oauth;import com.google.gson.annotations.SerializedName;class GuestTokenResponse { @SerializedName("guest_token") public final String guestToken; public GuestTokenResponse(String guestToken) { this.guestToken = guestToken; }}package com.twitter.sdk.android.core.models;import com.google.gson.annotations.SerializedName;public class HashtagEntity extends Entity {  @SerializedName("text") public final String text; public HashtagEntity(String text, int start, int end) { super(start, end); this.text = text; }}package com.twitter.sdk.android.tweetui.internal;import android.view.View;public interface HighlightedClickableSpan {  void onClick(View view);  void select(boolean selected);  boolean isSelected();}package com.twitter.sdk.android.tweetui.internal.util;import java.util.ArrayList;import java.util.HashMap;import java.util.Map;import java.util.TreeMap;public class HtmlEntities {  // public static final Entities XML;  // public static final Entities HTML32;  public static final HtmlEntities HTML40;  // package scoped for testing static final String[][] ISO8859_1_ARRAY = { { "nbsp", "160" }, // non-breaking space { "iexcl", "161" }, // inverted exclamation mark { "cent", "162" }, // cent sign { "pound", "163" }, // pound sign { "curren", "164" }, // currency sign { "yen", "165" }, // yen sign = yuan sign { "brvbar", "166" }, // broken bar = broken vertical bar { "sect", "167" }, // section sign { "uml", "168" }, // diaeresis = spacing diaeresis { "copy", "169" }, // - copyright sign { "ordf", "170" }, // feminine ordinal indicator { "laquo", "171" }, // left-pointing double angle quotation mark = left pointing // guillemet { "not", "172" }, // not sign { "shy", "173" }, // soft hyphen = discretionary hyphen { "reg", "174" }, // - registered trademark sign { "macr", "175" }, // macron = spacing macron = overline = APL overbar { "deg", "176" }, // degree sign { "plusmn", "177" }, // plus-minus sign = plus-or-minus sign { "sup2", "178" }, // superscript two = superscript digit two = squared { "sup3", "179" }, // superscript three = superscript digit three = cubed { "acute", "180" }, // acute accent = spacing acute { "micro", "181" }, // micro sign { "para", "182" }, // pilcrow sign = paragraph sign { "middot", "183" }, // middle dot = Georgian comma = Greek middle dot { "cedil", "184" }, // cedilla = spacing cedilla { "sup1", "185" }, // superscript one = superscript digit one { "ordm", "186" }, // masculine ordinal indicator { "raquo", "187" }, // right-pointing double angle quotation mark = right pointing // guillemet { "frac14", "188" }, // vulgar fraction one quarter = fraction one quarter { "frac12", "189" }, // vulgar fraction one half = fraction one half { "frac34", "190" }, // vulgar fraction three quarters = fraction three quarters { "iquest", "191" }, // inverted question mark = turned question mark { "Agrave", "192" }, // - uppercase A, grave accent { "Aacute", "193" }, // - uppercase A, acute accent { "Acirc", "194" }, // - uppercase A, circumflex accent { "Atilde", "195" }, // - uppercase A, tilde { "Auml", "196" }, // - uppercase A, umlaut { "Aring", "197" }, // - uppercase A, ring { "AElig", "198" }, // - uppercase AE { "Ccedil", "199" }, // - uppercase C, cedilla { "Egrave", "200" }, // - uppercase E, grave accent { "Eacute", "201" }, // - uppercase E, acute accent { "Ecirc", "202" }, // - uppercase E, circumflex accent { "Euml", "203" }, // - uppercase E, umlaut { "Igrave", "204" }, // - uppercase I, grave accent { "Iacute", "205" }, // - uppercase I, acute accent { "Icirc", "206" }, // - uppercase I, circumflex accent { "Iuml", "207" }, // - uppercase I, umlaut { "ETH", "208" }, // - uppercase Eth, Icelandic { "Ntilde", "209" }, // - uppercase N, tilde { "Ograve", "210" }, // - uppercase O, grave accent { "Oacute", "211" }, // - uppercase O, acute accent { "Ocirc", "212" }, // - uppercase O, circumflex accent { "Otilde", "213" }, // - uppercase O, tilde { "Ouml", "214" }, // - uppercase O, umlaut { "times", "215" }, // multiplication sign { "Oslash", "216" }, // - uppercase O, slash { "Ugrave", "217" }, // - uppercase U, grave accent { "Uacute", "218" }, // - uppercase U, acute accent { "Ucirc", "219" }, // - uppercase U, circumflex accent { "Uuml", "220" }, // - uppercase U, umlaut { "Yacute", "221" }, // - uppercase Y, acute accent { "THORN", "222" }, // - uppercase THORN, Icelandic { "szlig", "223" }, // - lowercase sharps, German { "agrave", "224" }, // - lowercase a, grave accent { "aacute", "225" }, // - lowercase a, acute accent { "acirc", "226" }, // - lowercase a, circumflex accent { "atilde", "227" }, // - lowercase a, tilde { "auml", "228" }, // - lowercase a, umlaut { "aring", "229" }, // - lowercase a, ring { "aelig", "230" }, // - lowercase ae { "ccedil", "231" }, // - lowercase c, cedilla { "egrave", "232" }, // - lowercase e, grave accent { "eacute", "233" }, // - lowercase e, acute accent { "ecirc", "234" }, // - lowercase e, circumflex accent { "euml", "235" }, // - lowercase e, umlaut { "igrave", "236" }, // - lowercase i, grave accent { "iacute", "237" }, // - lowercase i, acute accent { "icirc", "238" }, // - lowercase i, circumflex accent { "iuml", "239" }, // - lowercase i, umlaut { "eth", "240" }, // - lowercase eth, Icelandic { "ntilde", "241" }, // - lowercase n, tilde { "ograve", "242" }, // - lowercase o, grave accent { "oacute", "243" }, // - lowercase o, acute accent { "ocirc", "244" }, // - lowercase o, circumflex accent { "otilde", "245" }, // - lowercase o, tilde { "ouml", "246" }, // - lowercase o, umlaut { "divide", "247" }, // division sign { "oslash", "248" }, // - lowercase o, slash { "ugrave", "249" }, // - lowercase u, grave accent { "uacute", "250" }, // - lowercase u, acute accent { "ucirc", "251" }, // - lowercase u, circumflex accent { "uuml", "252" }, // - lowercase u, umlaut { "yacute", "253" }, // - lowercase y, acute accent { "thorn", "254" }, // - lowercase thorn, Icelandic { "yuml", "255" }, // - lowercase y, umlaut }; // http://www.w3.org/TR/REC-html40/sgml/entities.html // package scoped for testing static final String[][] HTML40_ARRAY = { // <!-- Latin Extended-B --> { "fnof", "402" }, // latin small f with hook = function= florin, U+0192 ISOtech --> // <!-- Greek --> { "Alpha", "913" }, // greek capital letter alpha, U+0391 --> { "Beta", "914" }, // greek capital letter beta, U+0392 --> { "Gamma", "915" }, // greek capital letter gamma,U+0393 ISOgrk3 --> { "Delta", "916" }, // greek capital letter delta,U+0394 ISOgrk3 --> { "Epsilon", "917" }, // greek capital letter epsilon, U+0395 --> { "Zeta", "918" }, // greek capital letter zeta, U+0396 --> { "Eta", "919" }, // greek capital letter eta, U+0397 --> { "Theta", "920" }, // greek capital letter theta,U+0398 ISOgrk3 --> { "Iota", "921" }, // greek capital letter iota, U+0399 --> { "Kappa", "922" }, // greek capital letter kappa, U+039A --> { "Lambda", "923" }, // greek capital letter lambda,U+039B ISOgrk3 --> { "Mu", "924" }, // greek capital letter mu, U+039C --> { "Nu", "925" }, // greek capital letter nu, U+039D --> { "Xi", "926" }, // greek capital letter xi, U+039E ISOgrk3 --> { "Omicron", "927" }, // greek capital letter omicron, U+039F --> { "Pi", "928" }, // greek capital letter pi, U+03A0 ISOgrk3 --> { "Rho", "929" }, // greek capital letter rho, U+03A1 --> // <!-- there is no Sigmaf, and no U+03A2 character either --> { "Sigma", "931" }, // greek capital letter sigma,U+03A3 ISOgrk3 --> { "Tau", "932" }, // greek capital letter tau, U+03A4 --> { "Upsilon", "933" }, // greek capital letter upsilon,U+03A5 ISOgrk3 --> { "Phi", "934" }, // greek capital letter phi,U+03A6 ISOgrk3 --> { "Chi", "935" }, // greek capital letter chi, U+03A7 --> { "Psi", "936" }, // greek capital letter psi,U+03A8 ISOgrk3 --> { "Omega", "937" }, // greek capital letter omega,U+03A9 ISOgrk3 --> { "alpha", "945" }, // greek small letter alpha,U+03B1 ISOgrk3 --> { "beta", "946" }, // greek small letter beta, U+03B2 ISOgrk3 --> { "gamma", "947" }, // greek small letter gamma,U+03B3 ISOgrk3 --> { "delta", "948" }, // greek small letter delta,U+03B4 ISOgrk3 --> { "epsilon", "949" }, // greek small letter epsilon,U+03B5 ISOgrk3 --> { "zeta", "950" }, // greek small letter zeta, U+03B6 ISOgrk3 --> { "eta", "951" }, // greek small letter eta, U+03B7 ISOgrk3 --> { "theta", "952" }, // greek small letter theta,U+03B8 ISOgrk3 --> { "iota", "953" }, // greek small letter iota, U+03B9 ISOgrk3 --> { "kappa", "954" }, // greek small letter kappa,U+03BA ISOgrk3 --> { "lambda", "955" }, // greek small letter lambda,U+03BB ISOgrk3 --> { "mu", "956" }, // greek small letter mu, U+03BC ISOgrk3 --> { "nu", "957" }, // greek small letter nu, U+03BD ISOgrk3 --> { "xi", "958" }, // greek small letter xi, U+03BE ISOgrk3 --> { "omicron", "959" }, // greek small letter omicron, U+03BF NEW --> { "pi", "960" }, // greek small letter pi, U+03C0 ISOgrk3 --> { "rho", "961" }, // greek small letter rho, U+03C1 ISOgrk3 --> { "sigmaf", "962" }, // greek small letter final sigma,U+03C2 ISOgrk3 --> { "sigma", "963" }, // greek small letter sigma,U+03C3 ISOgrk3 --> { "tau", "964" }, // greek small letter tau, U+03C4 ISOgrk3 --> { "upsilon", "965" }, // greek small letter upsilon,U+03C5 ISOgrk3 --> { "phi", "966" }, // greek small letter phi, U+03C6 ISOgrk3 --> { "chi", "967" }, // greek small letter chi, U+03C7 ISOgrk3 --> { "psi", "968" }, // greek small letter psi, U+03C8 ISOgrk3 --> { "omega", "969" }, // greek small letter omega,U+03C9 ISOgrk3 --> { "thetasym", "977" }, // greek small letter theta symbol,U+03D1 NEW --> { "upsih", "978" }, // greek upsilon with hook symbol,U+03D2 NEW --> { "piv", "982" }, // greek pi symbol, U+03D6 ISOgrk3 --> // <!-- General Punctuation --> { "bull", "8226" }, // bullet = black small circle,U+2022 ISOpub --> // <!-- bullet is NOT the same as bullet operator, U+2219 --> { "hellip", "8230" }, // horizontal ellipsis = three dot leader,U+2026 ISOpub --> { "prime", "8242" }, // prime = minutes = feet, U+2032 ISOtech --> { "Prime", "8243" }, // double prime = seconds = inches,U+2033 ISOtech --> { "oline", "8254" }, // overline = spacing overscore,U+203E NEW --> { "frasl", "8260" }, // fraction slash, U+2044 NEW --> // <!-- Letterlike Symbols --> { "weierp", "8472" }, // script capital P = power set= Weierstrass p, U+2118 ISOamso // --> { "image", "8465" }, // blackletter capital I = imaginary part,U+2111 ISOamso --> { "real", "8476" }, // blackletter capital R = real part symbol,U+211C ISOamso --> { "trade", "8482" }, // trade mark sign, U+2122 ISOnum --> { "alefsym", "8501" }, // alef symbol = first transfinite cardinal,U+2135 NEW --> // <!-- alef symbol is NOT the same as hebrew letter alef,U+05D0 // although the same glyph could be used to depict both characters // --> // <!-- Arrows --> { "larr", "8592" }, // leftwards arrow, U+2190 ISOnum --> { "uarr", "8593" }, // upwards arrow, U+2191 ISOnum--> { "rarr", "8594" }, // rightwards arrow, U+2192 ISOnum --> { "darr", "8595" }, // downwards arrow, U+2193 ISOnum --> { "harr", "8596" }, // left right arrow, U+2194 ISOamsa --> { "crarr", "8629" }, // downwards arrow with corner leftwards= carriage return, U+21B5 // NEW --> { "lArr", "8656" }, // leftwards double arrow, U+21D0 ISOtech --> // <!-- ISO 10646 does not say that lArr is the same as the 'is // implied by' arrowbut also does not have any other character for // that function. So ? lArr canbe used for 'is implied by' as // ISOtech suggests --> { "uArr", "8657" }, // upwards double arrow, U+21D1 ISOamsa --> { "rArr", "8658" }, // rightwards double arrow,U+21D2 ISOtech --> // <!-- ISO 10646 does not say this is the 'implies' character but // does not have another character with this function so ?rArr can // be used for 'implies' as ISOtech suggests --> { "dArr", "8659" }, // downwards double arrow, U+21D3 ISOamsa --> { "hArr", "8660" }, // left right double arrow,U+21D4 ISOamsa --> // <!-- Mathematical Operators --> { "forall", "8704" }, // for all, U+2200 ISOtech --> { "part", "8706" }, // partial differential, U+2202 ISOtech --> { "exist", "8707" }, // there exists, U+2203 ISOtech --> { "empty", "8709" }, // empty set = null set = diameter,U+2205 ISOamso --> { "nabla", "8711" }, // nabla = backward difference,U+2207 ISOtech --> { "isin", "8712" }, // element of, U+2208 ISOtech --> { "notin", "8713" }, // not an element of, U+2209 ISOtech --> { "ni", "8715" }, // contains as member, U+220B ISOtech --> // <!-- should there be a more memorable name than 'ni'? --> { "prod", "8719" }, // n-ary product = product sign,U+220F ISOamsb --> // <!-- prod is NOT the same character as U+03A0 'greek capital // letter pi' though the same glyph might be used for both --> { "sum", "8721" }, // n-ary summation, U+2211 ISOamsb --> // <!-- sum is NOT the same character as U+03A3 'greek capital // letter sigma' though the same glyph might be used for both --> { "minus", "8722" }, // minus sign, U+2212 ISOtech --> { "lowast", "8727" }, // asterisk operator, U+2217 ISOtech --> { "radic", "8730" }, // square root = radical sign,U+221A ISOtech --> { "prop", "8733" }, // proportional to, U+221D ISOtech --> { "infin", "8734" }, // infinity, U+221E ISOtech --> { "ang", "8736" }, // angle, U+2220 ISOamso --> { "and", "8743" }, // logical and = wedge, U+2227 ISOtech --> { "or", "8744" }, // logical or = vee, U+2228 ISOtech --> { "cap", "8745" }, // intersection = cap, U+2229 ISOtech --> { "cup", "8746" }, // union = cup, U+222A ISOtech --> { "int", "8747" }, // integral, U+222B ISOtech --> { "there4", "8756" }, // therefore, U+2234 ISOtech --> { "sim", "8764" }, // tilde operator = varies with = similar to,U+223C ISOtech --> // <!-- tilde operator is NOT the same character as the tilde, // U+007E,although the same glyph might be used to represent both // --> { "cong", "8773" }, // approximately equal to, U+2245 ISOtech --> { "asymp", "8776" }, // almost equal to = asymptotic to,U+2248 ISOamsr --> { "ne", "8800" }, // not equal to, U+2260 ISOtech --> { "equiv", "8801" }, // identical to, U+2261 ISOtech --> { "le", "8804" }, // less-than or equal to, U+2264 ISOtech --> { "ge", "8805" }, // greater-than or equal to,U+2265 ISOtech --> { "sub", "8834" }, // subset of, U+2282 ISOtech --> { "sup", "8835" }, // superset of, U+2283 ISOtech --> // <!-- note that nsup, 'not a superset of, U+2283' is not covered // by the Symbol font encoding and is not included. Should it be, // for symmetry?It is in ISOamsn --> <!ENTITY nsub", "8836"}, //not // a subset of, U+2284 ISOamsn --> { "sube", "8838" }, // subset of or equal to, U+2286 ISOtech --> { "supe", "8839" }, // superset of or equal to,U+2287 ISOtech --> { "oplus", "8853" }, // circled plus = direct sum,U+2295 ISOamsb --> { "otimes", "8855" }, // circled times = vector product,U+2297 ISOamsb --> { "perp", "8869" }, // up tack = orthogonal to = perpendicular,U+22A5 ISOtech --> { "sdot", "8901" }, // dot operator, U+22C5 ISOamsb --> // <!-- dot operator is NOT the same character as U+00B7 middle dot // --> // <!-- Miscellaneous Technical --> { "lceil", "8968" }, // left ceiling = apl upstile,U+2308 ISOamsc --> { "rceil", "8969" }, // right ceiling, U+2309 ISOamsc --> { "lfloor", "8970" }, // left floor = apl downstile,U+230A ISOamsc --> { "rfloor", "8971" }, // right floor, U+230B ISOamsc --> { "lang", "9001" }, // left-pointing angle bracket = bra,U+2329 ISOtech --> // <!-- lang is NOT the same character as U+003C 'less than' or // U+2039 'single left-pointing angle quotation mark' --> { "rang", "9002" }, // right-pointing angle bracket = ket,U+232A ISOtech --> // <!-- rang is NOT the same character as U+003E 'greater than' or // U+203A 'single right-pointing angle quotation mark' --> // <!-- Geometric Shapes --> { "loz", "9674" }, // lozenge, U+25CA ISOpub --> // <!-- Miscellaneous Symbols --> { "spades", "9824" }, // black spade suit, U+2660 ISOpub --> // <!-- black here seems to mean filled as opposed to hollow --> { "clubs", "9827" }, // black club suit = shamrock,U+2663 ISOpub --> { "hearts", "9829" }, // black heart suit = valentine,U+2665 ISOpub --> { "diams", "9830" }, // black diamond suit, U+2666 ISOpub --> // <!-- Latin Extended-A --> { "OElig", "338" }, // -- latin capital ligature OE,U+0152 ISOlat2 --> { "oelig", "339" }, // -- latin small ligature oe, U+0153 ISOlat2 --> // <!-- ligature is a misnomer, this is a separate character in some // languages --> { "Scaron", "352" }, // -- latin capital letter S with caron,U+0160 ISOlat2 --> { "scaron", "353" }, // -- latin small letter s with caron,U+0161 ISOlat2 --> { "Yuml", "376" }, // -- latin capital letter Y with diaeresis,U+0178 ISOlat2 --> // <!-- Spacing Modifier Letters --> { "circ", "710" }, // -- modifier letter circumflex accent,U+02C6 ISOpub --> { "tilde", "732" }, // small tilde, U+02DC ISOdia --> // <!-- General Punctuation --> { "ensp", "8194" }, // en space, U+2002 ISOpub --> { "emsp", "8195" }, // em space, U+2003 ISOpub --> { "thinsp", "8201" }, // thin space, U+2009 ISOpub --> { "zwnj", "8204" }, // zero width non-joiner,U+200C NEW RFC 2070 --> { "zwj", "8205" }, // zero width joiner, U+200D NEW RFC 2070 --> { "lrm", "8206" }, // left-to-right mark, U+200E NEW RFC 2070 --> { "rlm", "8207" }, // right-to-left mark, U+200F NEW RFC 2070 --> { "ndash", "8211" }, // en dash, U+2013 ISOpub --> { "mdash", "8212" }, // em dash, U+2014 ISOpub --> { "lsquo", "8216" }, // left single quotation mark,U+2018 ISOnum --> { "rsquo", "8217" }, // right single quotation mark,U+2019 ISOnum --> { "sbquo", "8218" }, // single low-9 quotation mark, U+201A NEW --> { "ldquo", "8220" }, // left double quotation mark,U+201C ISOnum --> { "rdquo", "8221" }, // right double quotation mark,U+201D ISOnum --> { "bdquo", "8222" }, // double low-9 quotation mark, U+201E NEW --> { "dagger", "8224" }, // dagger, U+2020 ISOpub --> { "Dagger", "8225" }, // double dagger, U+2021 ISOpub --> { "permil", "8240" }, // per mille sign, U+2030 ISOtech --> { "lsaquo", "8249" }, // single left-pointing angle quotation mark,U+2039 ISO proposed // --> // <!-- lsaquo is proposed but not yet ISO standardized --> { "rsaquo", "8250" }, // single right-pointing angle quotation mark,U+203A ISO proposed // --> // <!-- rsaquo is proposed but not yet ISO standardized --> { "euro", "8364" }, // -- euro sign, U+20AC NEW --> }; private static final String[][] BASIC_ARRAY = { { "quot", "34" }, // " - double-quote { "amp", "38" }, // & - ampersand { "lt", "60" }, // < - less-than { "gt", "62" }, // > - greater-than }; // package scoped for testing final EntityMap map = new HtmlEntities.LookupEntityMap();   static { HTML40 = new HtmlEntities(); fillWithHtml40Entities(HTML40); } static void fillWithHtml40Entities(HtmlEntities entities) { entities.addEntities(BASIC_ARRAY); entities.addEntities(ISO8859_1_ARRAY); entities.addEntities(HTML40_ARRAY); } interface EntityMap { void add(String name, int value); String name(int value); int value(String name); } static class PrimitiveEntityMap implements EntityMap { @SuppressWarnings("unchecked") private final Map mapNameToValue = new HashMap(); private final IntHashMap mapValueToName = new IntHashMap(); @SuppressWarnings("unchecked") public void add(String name, int value) { mapNameToValue.put(name, value); mapValueToName.put(value, name); } public String name(int value) { return (String) mapValueToName.get(value); } public int value(String name) { final Object value = mapNameToValue.get(name); if (value == null) { return -1; } return ((Integer) value).intValue(); } } abstract static class MapIntMap implements EntityMap { @SuppressWarnings("unchecked") protected Map mapNameToValue; @SuppressWarnings("unchecked") protected Map mapValueToName; @SuppressWarnings("unchecked") public void add(String name, int value) { mapNameToValue.put(name, value); mapValueToName.put(value, name); } public String name(int value) { return (String) mapValueToName.get(value); } public int value(String name) { final Object value = mapNameToValue.get(name); if (value == null) { return -1; } return ((Integer) value).intValue(); } } static class HashEntityMap extends MapIntMap { @SuppressWarnings("unchecked") public HashEntityMap() { mapNameToValue = new HashMap(); mapValueToName = new HashMap(); } } static class TreeEntityMap extends MapIntMap { @SuppressWarnings("unchecked") public TreeEntityMap() { mapNameToValue = new TreeMap(); mapValueToName = new TreeMap(); } } static class LookupEntityMap extends PrimitiveEntityMap { private static final int LOOKUP_TABLE_SIZE = 256; private String[] lookupTable; @Override public String name(int value) { if (value < LOOKUP_TABLE_SIZE) { return lookupTable()[value]; } return super.name(value); } private String[] lookupTable() { if (lookupTable == null) { createLookupTable(); } return lookupTable; } private void createLookupTable() { lookupTable = new String[LOOKUP_TABLE_SIZE]; for (int i = 0; i < LOOKUP_TABLE_SIZE; ++i) { lookupTable[i] = super.name(i); } } } static class ArrayEntityMap implements EntityMap { protected int growBy = 100; protected int size = 0; protected String[] names; protected int[] values; public ArrayEntityMap() { names = new String[growBy]; values = new int[growBy]; } public ArrayEntityMap(int growBy) { this.growBy = growBy; names = new String[growBy]; values = new int[growBy]; } public void add(String name, int value) { ensureCapacity(size + 1); names[size] = name; values[size] = value; size++; } protected void ensureCapacity(int capacity) { if (capacity > names.length) { final int newSize = Math.max(capacity, size + growBy); final String[] newNames = new String[newSize]; System.arraycopy(names, 0, newNames, 0, size); names = newNames; final int[] newValues = new int[newSize]; System.arraycopy(values, 0, newValues, 0, size); values = newValues; } } public String name(int value) { for (int i = 0; i < size; ++i) { if (values[i] == value) { return names[i]; } } return null; } public int value(String name) { for (int i = 0; i < size; ++i) { if (names[i].equals(name)) { return values[i]; } } return -1; } } static class BinaryEntityMap extends ArrayEntityMap { public BinaryEntityMap() {} public BinaryEntityMap(int growBy) { super(growBy); } // based on code in java.util.Arrays private int binarySearch(int key) { int low = 0; int high = size - 1; while (low <= high) { final int mid = (low + high) >>> 1; final int midVal = values[mid]; if (midVal < key) { low = mid + 1; } else if (midVal > key) { high = mid - 1; } else { return mid; // key found } } return -(low + 1); // key not found. } @Override public void add(String name, int value) { ensureCapacity(size + 1); int insertAt = binarySearch(value); if (insertAt > 0) { return; // note: this means you can't insert the same value // twice } insertAt = -(insertAt + 1); // binarySearch returns it negative and // off-by-one System.arraycopy(values, insertAt, values, insertAt + 1, size - insertAt); values[insertAt] = value; System.arraycopy(names, insertAt, names, insertAt + 1, size - insertAt); names[insertAt] = name; size++; } @Override public String name(int value) { final int index = binarySearch(value); if (index < 0) { return null; } return names[index]; } }  public static final class Unescaped { public final String unescaped; // An ordered list of start/end indices public final ArrayList<int[]> indices; public Unescaped(String unescaped, ArrayList<int[]> indices) { this.unescaped = unescaped; this.indices = indices; } } public void addEntities(String[][] entityArray) { for (String[] anEntityArray : entityArray) { addEntity(anEntityArray[0], Integer.parseInt(anEntityArray[1])); } } public void addEntity(String name, int value) { map.add(name, value); } public String entityName(int value) { return map.name(value); } public int entityValue(String name) { return map.value(name); }  public Unescaped unescape(String str) { final int length = str.length(); final StringBuilder buf = new StringBuilder(length); final ArrayList<int[]> indices = new ArrayList<>(5); int i; for (i = 0; i < length; ++i) { final char ch = str.charAt(i); if (ch == '&') { final int semi = str.indexOf(';', i + 1); if (semi == -1) { buf.append(ch); continue; } final String entityName = str.substring(i + 1, semi); final int entityNameLength = entityName.length(); int entityValue = -1; if (entityNameLength > 0) { if (entityName.charAt(0) == '#' && entityNameLength > 1) { final char charAt1 = entityName.charAt(1); try { if (charAt1 == 'x' || charAt1 == 'X') { if (entityNameLength > 2) { entityValue = Integer.valueOf(entityName.substring(2), 16) .intValue(); } } else { entityValue = Integer.parseInt(entityName.substring(1)); } } catch (Exception ignore) { } } else { entityValue = this.entityValue(entityName); } } if (entityValue == -1) { buf.append('&'); final int amp = entityName.indexOf('&'); if (amp == -1) { buf.append(entityName); buf.append(';'); i = semi; } } else { buf.append((char) (entityValue)); indices.add(new int[] { i, semi }); i = semi; } } else { buf.append(ch); } } return new Unescaped(buf.toString(), indices); }}package com.twitter.sdk.android.core.models;public interface Identifiable {  long getId();}package com.twitter.sdk.android.core.models;import com.google.gson.annotations.SerializedName;public class Image { @SerializedName("w") public final int w; @SerializedName("h") public final int h; @SerializedName("image_type") public final String imageType; public Image(int w, int h, String imageType) { this.w = w; this.h = h; this.imageType = imageType; }}package com.twitter.sdk.android.core.models;import com.google.gson.annotations.SerializedName;public class ImageValue { @SerializedName("height") public final int height; @SerializedName("width") public final int width; @SerializedName("url") public final String url; @SerializedName("alt") public final String alt; public ImageValue(int height, int width, String url, String alt) { this.height = height; this.width = width; this.url = url; this.alt = alt; }}package com.twitter.sdk.android.core;import android.content.Context;import android.content.Intent;import android.content.pm.PackageManager;import android.content.pm.ResolveInfo;import java.util.List;public class IntentUtils {  public static boolean isActivityAvailable(Context context, Intent intent) { final PackageManager packageManager = context.getPackageManager(); final List<ResolveInfo> activities = packageManager.queryIntentActivities(intent, 0); return !activities.isEmpty(); }  public static boolean safeStartActivity(Context context, Intent intent) { if (isActivityAvailable(context, intent)) { context.startActivity(intent); return true; } return false; }}package com.twitter.sdk.android.core;import android.content.Intent;import io.fabric.sdk.android.FabricAndroidTestCase;public class IntentUtilsTest extends FabricAndroidTestCase { public void testIsActivityAvailable_noActivitiesAvailable() { final Intent intent = new Intent("io.fabric.is.awesome"); assertFalse(IntentUtils.isActivityAvailable(getContext(), intent)); } public void testIsActivityAvailable_activitiesAvailable() { final Intent intent = new Intent(android.provider.Settings.ACTION_SETTINGS); assertTrue(IntentUtils.isActivityAvailable(getContext(), intent)); } public void testSafeStartActivity() { final Intent intent = new Intent("io.fabric.is.awesome"); assertFalse(IntentUtils.safeStartActivity(getContext(), intent)); }}package com.twitter.sdk.android.tweetui.internal.util;public class IntHashMap {  private Entry[] table;  private int count;  private int threshold;  private float loadFactor;  private static class Entry { public final int hash; @SuppressWarnings("unused") public int key; public Object value; public Entry next;  protected Entry(int hash, int key, Object value, Entry next) { this.hash = hash; this.key = key; this.value = value; this.next = next; } }  public IntHashMap() { this(20, 0.75f); }  public IntHashMap(int initialCapacity) { this(initialCapacity, 0.75f); }  public IntHashMap(int initialCapacity, float loadFactor) { super(); if (initialCapacity < 0) { throw new IllegalArgumentException("Illegal Capacity: " + initialCapacity); } if (loadFactor <= 0) { throw new IllegalArgumentException("Illegal Load: " + loadFactor); } if (initialCapacity == 0) { initialCapacity = 1; } this.loadFactor = loadFactor; table = new Entry[initialCapacity]; threshold = (int) (initialCapacity * loadFactor); }  public int size() { return count; }  public boolean isEmpty() { return count == 0; }  public boolean contains(Object value) { if (value == null) { throw new NullPointerException(); } final Entry[] tab = table; for (int i = tab.length; i-- > 0;) { for (Entry e = tab[i]; e != null; e = e.next) { if (e.value.equals(value)) { return true; } } } return false; }  public boolean containsValue(Object value) { return contains(value); }  public boolean containsKey(int key) { final Entry[] tab = table; final int hash = key; final int index = (hash & 0x7FFFFFFF) % tab.length; for (Entry e = tab[index]; e != null; e = e.next) { if (e.hash == hash) { return true; } } return false; }  public Object get(int key) { final Entry[] tab = table; final int hash = key; final int index = (hash & 0x7FFFFFFF) % tab.length; for (Entry e = tab[index]; e != null; e = e.next) { if (e.hash == hash) { return e.value; } } return null; }  protected void rehash() { final int oldCapacity = table.length; final Entry[] oldMap = table; final int newCapacity = oldCapacity * 2 + 1; final Entry[] newMap = new Entry[newCapacity]; threshold = (int) (newCapacity * loadFactor); table = newMap; for (int i = oldCapacity; i-- > 0;) { for (Entry old = oldMap[i]; old != null;) { final Entry e = old; old = old.next; final int index = (e.hash & 0x7FFFFFFF) % newCapacity; e.next = newMap[index]; newMap[index] = e; } } }  public Object put(int key, Object value) { // Makes sure the key is not already in the hashtable. Entry[] tab = table; final int hash = key; int index = (hash & 0x7FFFFFFF) % tab.length; for (Entry e = tab[index]; e != null; e = e.next) { if (e.hash == hash) { final Object old = e.value; e.value = value; return old; } } if (count >= threshold) { // Rehash the table if the threshold is exceeded rehash(); tab = table; index = (hash & 0x7FFFFFFF) % tab.length; } // Creates the new entry. final Entry e = new Entry(hash, key, value, tab[index]); tab[index] = e; count++; return null; }  public Object remove(int key) { final Entry[] tab = table; final int hash = key; final int index = (hash & 0x7FFFFFFF) % tab.length; for (Entry e = tab[index], prev = null; e != null; prev = e, e = e.next) { if (e.hash == hash) { if (prev != null) { prev.next = e.next; } else { tab[index] = e.next; } count--; final Object oldValue = e.value; e.value = null; return oldValue; } } return null; }  public synchronized void clear() { final Entry[] tab = table; for (int index = tab.length; --index >= 0;) { tab[index] = null; } count = 0; }}package com.twitter.sdk.android.tweetui;import android.view.View;import com.twitter.sdk.android.core.Callback;import com.twitter.sdk.android.core.Result;import com.twitter.sdk.android.core.TwitterApiException;import com.twitter.sdk.android.core.TwitterException;import com.twitter.sdk.android.core.internal.TwitterApiConstants;import com.twitter.sdk.android.core.models.Tweet;import com.twitter.sdk.android.core.models.TweetBuilder;class LikeTweetAction extends BaseTweetAction implements View.OnClickListener { final Tweet tweet; final TweetRepository tweetRepository; final TweetUi tweetUi; final TweetScribeClient tweetScribeClient; LikeTweetAction(Tweet tweet, TweetUi tweetUi, Callback<Tweet> cb) { this(tweet, tweetUi, cb, new TweetScribeClientImpl(tweetUi)); } // For testing only LikeTweetAction(Tweet tweet, TweetUi tweetUi, Callback<Tweet> cb, TweetScribeClient tweetScribeClient) { super(cb); this.tweet = tweet; this.tweetUi = tweetUi; this.tweetScribeClient = tweetScribeClient; this.tweetRepository = tweetUi.getTweetRepository(); } @Override public void onClick(View view) { if (view instanceof ToggleImageButton) { final ToggleImageButton toggleImageButton = (ToggleImageButton) view; if (tweet.favorited) { scribeUnFavoriteAction(); tweetRepository.unfavorite(tweet.id, new LikeCallback(toggleImageButton, tweet, getActionCallback())); } else { scribeFavoriteAction(); tweetRepository.favorite(tweet.id, new LikeCallback(toggleImageButton, tweet, getActionCallback())); } } } void scribeFavoriteAction() { tweetScribeClient.favorite(tweet); } void scribeUnFavoriteAction() { tweetScribeClient.unfavorite(tweet); }  static class LikeCallback extends Callback<Tweet> { ToggleImageButton button; Tweet tweet; Callback<Tweet> cb;  LikeCallback(ToggleImageButton button, Tweet tweet, Callback<Tweet> cb) { this.button = button; this.tweet = tweet; this.cb = cb; } @Override public void success(Result<Tweet> result) { cb.success(result); } @Override public void failure(TwitterException exception) { if (exception instanceof TwitterApiException) { final TwitterApiException apiException = (TwitterApiException) exception; final int errorCode = apiException.getErrorCode(); switch (errorCode) { case TwitterApiConstants.Errors.ALREADY_FAVORITED: final Tweet favorited = new TweetBuilder().copy(tweet).setFavorited(true) .build(); cb.success(new Result<>(favorited, null)); return; case TwitterApiConstants.Errors.ALREADY_UNFAVORITED: final Tweet unfavorited = new TweetBuilder().copy(tweet).setFavorited(false) .build(); cb.success(new Result<>(unfavorited, null)); return; default: // reset the toggle state back to match the Tweet button.setToggledOn(tweet.favorited); cb.failure(exception); return; } } // reset the toggle state back to match the Tweet button.setToggledOn(tweet.favorited); cb.failure(exception); } }}package com.twitter.sdk.android.tweetui;import com.twitter.sdk.android.core.models.MediaEntity;interface LinkClickListener {  void onUrlClicked(String url);  void onPhotoClicked(MediaEntity mediaEntity);}package com.twitter.sdk.android.core.services;import com.twitter.sdk.android.core.models.Tweet;import java.util.List;import retrofit2.Call;import retrofit2.http.GET;import retrofit2.http.Query;public interface ListService {  @GET("/1.1/lists/statuses.json?" + "tweet_mode=extended&include_cards=true&cards_platform=TwitterKit-13") Call<List<Tweet>> statuses(@Query("list_id") Long listId, @Query("slug") String slug, @Query("owner_screen_name") String ownerScreenName, @Query("owner_id") Long ownerId, @Query("since_id") Long sinceId, @Query("max_id") Long maxId, @Query("count") Integer count, @Query("include_entities") Boolean includeEntities, @Query("include_rts") Boolean includeRetweets);}package com.twitter.sdk.android.tweetui;import com.twitter.sdk.android.core.Callback;import com.twitter.sdk.android.core.TwitterException;import io.fabric.sdk.android.Logger;abstract class LoggingCallback<T> extends Callback<T> { // Wrapped cb generic type is unknown, concrete subclass responsible for implementing // success(Result<T> result) and unpacking result to call cb with proper type checking private final Callback cb; private final Logger logger;  LoggingCallback(Callback cb, Logger logger) { this.cb = cb; this.logger = logger; } @Override public void failure(TwitterException exception) { logger.e(TweetUi.LOGTAG, exception.getMessage(), exception); if (cb != null) { cb.failure(exception); } }}package com.twitter.sdk.android.unity;import android.app.Activity;import android.content.Intent;import android.os.Bundle;import com.twitter.sdk.android.core.Callback;import com.twitter.sdk.android.core.Result;import com.twitter.sdk.android.core.TwitterException;import com.twitter.sdk.android.core.TwitterSession;import com.twitter.sdk.android.core.TwitterSessionHelper;import com.twitter.sdk.android.core.identity.TwitterAuthClient;public class LoginActivity extends Activity { TwitterAuthClient authClient; @Override public void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); authClient = new TwitterAuthClient(); authClient.authorize(this, new Callback<TwitterSession>() { @Override public void success(Result<TwitterSession> result) { final String session = TwitterSessionHelper.serialize(result.data); final UnityMessage message = new UnityMessage.Builder() .setMethod("LoginComplete") .setData(session) .build(); message.send(); finish(); } @Override public void failure(TwitterException ex) { final String error = new ApiError.Serializer() .serialize(new ApiError(0, ex.getMessage())); final UnityMessage message = new UnityMessage.Builder() .setMethod("LoginFailed") .setData(error) .build(); message.send(); finish(); } }); } @Override protected void onActivityResult(int requestCode, int resultCode, Intent data) { super.onActivityResult(requestCode, resultCode, data); authClient.onActivityResult(requestCode, resultCode, data); }}package com.twitter.sdk.android.core.models;import com.google.gson.annotations.SerializedName;public class Media { @SerializedName("media_id") public final long mediaId; @SerializedName("media_id_string") public final String mediaIdString; @SerializedName("size") public final long size; @SerializedName("image") public final Image image; public Media(long mediaID, String mediaIdString, long size, Image image) { this.mediaId = mediaID; this.mediaIdString = mediaIdString; this.size = size; this.image = image; }}package com.twitter.sdk.android.tweetui.internal;import android.content.Context;import android.graphics.drawable.Drawable;import android.util.AttributeSet;import android.view.LayoutInflater;import android.view.View;import android.widget.FrameLayout;import android.widget.ImageView;import android.widget.TextView;import com.twitter.sdk.android.core.internal.VineCardUtils;import com.twitter.sdk.android.core.models.Card;import com.twitter.sdk.android.core.models.MediaEntity;import com.twitter.sdk.android.tweetui.R;public class MediaBadgeView extends FrameLayout { TextView videoDuration; ImageView badge; public MediaBadgeView(Context context) { this(context, null); } public MediaBadgeView(Context context, AttributeSet attrs) { this(context, attrs, 0); } public MediaBadgeView(Context context, AttributeSet attrs, int defStyleAttr) { super(context, attrs, defStyleAttr); initSubViews(context); } void initSubViews(Context context) { final LayoutInflater inflater = (LayoutInflater) context .getSystemService(Context.LAYOUT_INFLATER_SERVICE); final View view = inflater.inflate(R.layout.tw__media_badge, this, true); videoDuration = (TextView) view.findViewById(R.id.tw__video_duration); badge = (ImageView) view.findViewById(R.id.tw__gif_badge); } public void setMediaEntity(MediaEntity entity) { if (TweetMediaUtils.GIF_TYPE.equals(entity.type)) { setBadge(getResources().getDrawable(R.drawable.tw__gif_badge)); } else if (TweetMediaUtils.VIDEO_TYPE.equals(entity.type)) { final long duration = entity.videoInfo == null ? 0 : entity.videoInfo.durationMillis; setText(duration); } else { setEmpty(); } } public void setCard(Card card) { if (VineCardUtils.isVine(card)) { setBadge(getResources().getDrawable(R.drawable.tw__vine_badge)); } else { setEmpty(); } } void setText(long duration) { videoDuration.setVisibility(View.VISIBLE); badge.setVisibility(View.GONE); videoDuration.setText(MediaTimeUtils.getPlaybackTime(duration)); } void setBadge(Drawable drawable) { badge.setVisibility(View.VISIBLE); videoDuration.setVisibility(View.GONE); badge.setImageDrawable(drawable); } void setEmpty() { videoDuration.setVisibility(View.GONE); badge.setVisibility(View.GONE); }}package com.twitter.sdk.android.core.models;import com.google.gson.annotations.SerializedName;import java.io.Serializable;public class MediaEntity extends UrlEntity {  @SerializedName("id") public final long id;  @SerializedName("id_str") public final String idStr;  @SerializedName("media_url") public final String mediaUrl;  @SerializedName("media_url_https") public final String mediaUrlHttps;  @SerializedName("sizes") public final Sizes sizes;  @SerializedName("source_status_id") public final long sourceStatusId;  @SerializedName("source_status_id_str") public final String sourceStatusIdStr;  @SerializedName("type") public final String type;  @SerializedName("video_info") public final VideoInfo videoInfo; @SerializedName("ext_alt_text") public final String altText; public MediaEntity(String url, String expandedUrl, String displayUrl, int start, int end, long id, String idStr, String mediaUrl, String mediaUrlHttps, Sizes sizes, long sourceStatusId, String sourceStatusIdStr, String type, VideoInfo videoInfo, String altText) { super(url, expandedUrl, displayUrl, start, end); this.id = id; this.idStr = idStr; this.mediaUrl = mediaUrl; this.mediaUrlHttps = mediaUrlHttps; this.sizes = sizes; this.sourceStatusId = sourceStatusId; this.sourceStatusIdStr = sourceStatusIdStr; this.type = type; this.videoInfo = videoInfo; this.altText = altText; } public static class Sizes implements Serializable {  @SerializedName("medium") public final Size medium;  @SerializedName("thumb") public final Size thumb;  @SerializedName("small") public final Size small;  @SerializedName("large") public final Size large; public Sizes(Size thumb, Size small, Size medium, Size large) { this.thumb = thumb; this.small = small; this.medium = medium; this.large = large; } } public static class Size implements Serializable {  @SerializedName("w") public final int w;  @SerializedName("h") public final int h;  @SerializedName("resize") public final String resize; public Size(int w, int h, String resize) { this.w = w; this.h = h; this.resize = resize; } }}package com.twitter.sdk.android.core.services;import com.twitter.sdk.android.core.models.Media;import okhttp3.RequestBody;import retrofit2.Call;import retrofit2.http.Multipart;import retrofit2.http.POST;import retrofit2.http.Part;public interface MediaService {  @Multipart @POST("https://upload.twitter.com/1.1/media/upload.json") Call<Media> upload(@Part("media") RequestBody media, @Part("media_data") RequestBody mediaData, @Part("additional_owners") RequestBody additionalOwners);}package com.twitter.sdk.android.tweetui.internal;import java.util.Locale;final class MediaTimeUtils { private static final String TIME_FORMAT_LONG = "%1$d:%2$02d:%3$02d"; private static final String TIME_FORMAT_SHORT = "%1$d:%2$02d"; private MediaTimeUtils() {} static String getPlaybackTime(long timeMillis) { final int timeSeconds = (int) (timeMillis / 1000); final int seconds = timeSeconds % 60; final int minutes = (timeSeconds / 60) % 60; final int hours = timeSeconds / 3600; if (hours > 0) { return String.format(Locale.getDefault(), TIME_FORMAT_LONG, hours, minutes, seconds); } else { return String.format(Locale.getDefault(), TIME_FORMAT_SHORT, minutes, seconds); } }}package com.twitter.sdk.android.core.models;import com.google.gson.annotations.SerializedName;public class MentionEntity extends Entity {  @SerializedName("id") public final long id;  @SerializedName("id_str") public final String idStr;  @SerializedName("name") public final String name;  @SerializedName("screen_name") public final String screenName; public MentionEntity(long id, String idStr, String name, String screenName, int start, int end) { super(start, end); this.id = id; this.idStr = idStr; this.name = name; this.screenName = screenName; }}package com.twitter.sdk.android.core.internal;import android.content.Context;import java.io.File;import java.io.FilenameFilter;import java.util.Arrays;import java.util.Comparator;public class MigrationHelper { private static final String SHARED_PREFS_DIR = "shared_prefs"; public void migrateSessionStore(Context context, String prefixMatch, String expectedFileName) { final File sharedPrefsDir = getSharedPreferencesDir(context); // shared_prefs dir has not been created, do nothing if (!sharedPrefsDir.exists() || !sharedPrefsDir.isDirectory()) { return; } // if shared prefs already exist, do nothing final File expectedSharedPrefsFile = new File(sharedPrefsDir, expectedFileName); if (expectedSharedPrefsFile.exists()) { return; } // rename latest final File oldPrefsharedPrefsFile = getLatestFile(sharedPrefsDir, prefixMatch); if (oldPrefsharedPrefsFile != null) { oldPrefsharedPrefsFile.renameTo(expectedSharedPrefsFile); } } File getSharedPreferencesDir(Context context) { return new File(context.getApplicationInfo().dataDir, SHARED_PREFS_DIR); } File getLatestFile(File sharedPrefsDir, String prefix) { final File[] files = sharedPrefsDir.listFiles(new PrefixFileNameFilter(prefix)); Arrays.sort(files, new FileLastModifiedComparator()); return files.length > 0 ? files[0] : null; } static class FileLastModifiedComparator implements Comparator<File> { @Override public int compare(File file1, File file2) { return Long.valueOf(file2.lastModified()).compareTo(file1.lastModified()); } } static class PrefixFileNameFilter implements FilenameFilter { final String prefix; public PrefixFileNameFilter(String prefix) { this.prefix = prefix; } @Override public boolean accept(File file, String filename) { return filename.startsWith(prefix); } }}package com.twitter.sdk.android.core.internal;import android.content.Context;import com.twitter.sdk.android.core.TwitterCoreTest;import java.io.File;import java.io.FilenameFilter;import java.io.IOException;import java.util.Comparator;import static org.mockito.Mockito.mock;import static org.mockito.Mockito.when;public class MigrationHelperTests extends TwitterCoreTest { private static final String SHARED_PREFS_DIR = "shared_prefs"; private static final String KIT_IDENTIFIER = "com.foo.test:test"; private static final String EXPECTED_PREFERENCE = KIT_IDENTIFIER + ":test.xml"; private static final String TEST_PREFERENCE = KIT_IDENTIFIER + ":a.b.c.xml"; MigrationHelper migrationHelper; @Override public void setUp() throws Exception { super.setUp(); migrationHelper = new MigrationHelper(); } public void testMigrateSessionStore_emptyDirectory() throws Exception { final File sharedPrefsDir = getSharedPreferencesDir(getContext()); clearSharePrefs(sharedPrefsDir); createSharedPrefsFolder(sharedPrefsDir); migrationHelper.migrateSessionStore(getContext(), KIT_IDENTIFIER, EXPECTED_PREFERENCE); assertEquals(0, sharedPrefsDir.listFiles().length); } public void testMigrateSessionStore_noSharedPrefDirectory() throws Exception { final File sharedPrefsDir = getSharedPreferencesDir(getContext()); clearSharePrefs(sharedPrefsDir); deleteSharedPrefsFolder(sharedPrefsDir); migrationHelper.migrateSessionStore(getContext(), KIT_IDENTIFIER, EXPECTED_PREFERENCE); assertFalse(sharedPrefsDir.exists()); } public void testMigrateSessionStore_notMigrated() throws Exception { final File sharedPrefsDir = getSharedPreferencesDir(getContext()); clearSharePrefs(sharedPrefsDir); createSharedPrefsFolder(sharedPrefsDir); createFile(sharedPrefsDir, TEST_PREFERENCE); migrationHelper.migrateSessionStore(getContext(), KIT_IDENTIFIER, EXPECTED_PREFERENCE); final File expected = new File(sharedPrefsDir, EXPECTED_PREFERENCE); assertTrue(expected.exists()); final File oldPrefFile = new File(sharedPrefsDir, TEST_PREFERENCE); assertFalse(oldPrefFile.exists()); } public void testMigrateSessionStore_alreadyMigrated() throws Exception { final File sharedPrefsDir = getSharedPreferencesDir(getContext()); clearSharePrefs(sharedPrefsDir); createSharedPrefsFolder(sharedPrefsDir); createFile(sharedPrefsDir, TEST_PREFERENCE); createFile(sharedPrefsDir, EXPECTED_PREFERENCE); migrationHelper.migrateSessionStore(getContext(), KIT_IDENTIFIER, EXPECTED_PREFERENCE); final File expected = new File(sharedPrefsDir, EXPECTED_PREFERENCE); assertTrue(expected.exists()); final File oldPrefFile = new File(sharedPrefsDir, TEST_PREFERENCE); assertTrue(oldPrefFile.exists()); } public void testPrefixFileNameFilter() throws Exception { final FilenameFilter filter = new MigrationHelper.PrefixFileNameFilter(KIT_IDENTIFIER); assertFalse(filter.accept(null, "foo.xml")); assertTrue(filter.accept(null, KIT_IDENTIFIER + "foo.xml")); } public void testFileLastModifiedComparator() { final Comparator<File> comparator = new MigrationHelper.FileLastModifiedComparator(); final File file1 = mock(File.class); when(file1.lastModified()).thenReturn(100L); final File file2 = mock(File.class); when(file2.lastModified()).thenReturn(200L); assertEquals(1, comparator.compare(file1, file2)); assertEquals(-1, comparator.compare(file2, file1)); } private void clearSharePrefs(File sharedPrefsFolder) { final File[] files = sharedPrefsFolder.listFiles(); if (files == null) { return; } for (File file : files) { file.delete(); } } private void createSharedPrefsFolder(File sharedPrefsFolder) { if (!sharedPrefsFolder.exists()) { sharedPrefsFolder.mkdir(); } } private void deleteSharedPrefsFolder(File sharedPrefsFolder) { if (sharedPrefsFolder.exists()) { sharedPrefsFolder.delete(); } } private File getSharedPreferencesDir(Context context) { return new File(context.getApplicationInfo().dataDir, SHARED_PREFS_DIR); } private File createFile(File sharedPrefsFolder, String name) { final File result = new File(sharedPrefsFolder, name); try { result.createNewFile(); } catch (IOException e) { // Ignore } return result; }}package com.twitter.sdk.android.tweetui.internal;import android.animation.ValueAnimator;import android.content.Context;import android.graphics.Matrix;import android.graphics.RectF;import android.graphics.drawable.Drawable;import android.util.AttributeSet;import android.view.GestureDetector;import android.view.MotionEvent;import android.view.ScaleGestureDetector;import android.view.animation.AccelerateDecelerateInterpolator;import android.widget.ImageView;public class MultiTouchImageView extends ImageView { private final static long SCALE_ANIMATION_DURATION = 300L; private final static float DOUBLE_TAP_SCALE_FACTOR = 2.0f; private final static float MINIMUM_SCALE_FACTOR = 1.0f; final ScaleGestureDetector scaleGestureDetector; final GestureDetector gestureDetector; final Matrix drawMatrix = new Matrix(); final Matrix baseMatrix = new Matrix(); final Matrix updateMatrix = new Matrix(); final RectF viewRect = new RectF(); // Used to avoid allocating new objects final RectF drawRect = new RectF(); final float[] matrixValues = new float[9]; public MultiTouchImageView(Context context) { this(context, null); } public MultiTouchImageView(Context context, AttributeSet attrs) { this(context, attrs, 0); } public MultiTouchImageView(Context context, AttributeSet attrs, int defStyleAttr) { super(context, attrs, defStyleAttr); scaleGestureDetector = new ScaleGestureDetector(context, new ScaleGestureDetector .SimpleOnScaleGestureListener() { @Override public boolean onScale(ScaleGestureDetector scaleGestureDetector) { setScale(scaleGestureDetector.getScaleFactor(), scaleGestureDetector.getFocusX(), scaleGestureDetector.getFocusY()); setImageMatrix(); return true; } @Override public void onScaleEnd(ScaleGestureDetector detector) { if (getScale() < MINIMUM_SCALE_FACTOR) { reset(); setImageMatrix(); } } }); gestureDetector = new GestureDetector(context, new GestureDetector .SimpleOnGestureListener() { @Override public boolean onScroll(MotionEvent e1, MotionEvent e2, float dx, float dy) { setTranslate(-dx, -dy); setImageMatrix(); return true; } @Override public boolean onDoubleTap(MotionEvent e) { if (getScale() > MINIMUM_SCALE_FACTOR) { animateScale(getScale(), MINIMUM_SCALE_FACTOR, e.getX(), e.getY()); } else { animateScale(getScale(), DOUBLE_TAP_SCALE_FACTOR, e.getX(), e.getY()); } return true; } }); } boolean isInitializationComplete() { final Drawable drawable = getDrawable(); return drawable != null && drawable.getIntrinsicWidth() > 0; } @Override protected void onLayout(boolean changed, int left, int top, int right, int bottom) { super.onLayout(changed, left, top, right, bottom); if (isInitializationComplete()) { initializeViewRect(); initializeBaseMatrix(getDrawable()); setImageMatrix(); } } void initializeViewRect() { viewRect.set(getPaddingLeft(), getPaddingTop(), getWidth() - getPaddingRight(), getHeight() - getPaddingBottom()); } void initializeBaseMatrix(Drawable drawable) { final int drawableWidth = drawable.getIntrinsicWidth(); final int drawableHeight = drawable.getIntrinsicHeight(); final RectF srcRect = new RectF(0, 0, drawableWidth, drawableHeight); baseMatrix.reset(); baseMatrix.setRectToRect(srcRect, viewRect, Matrix.ScaleToFit.CENTER); } @Override public boolean onTouchEvent(MotionEvent event) { if (!isInitializationComplete()) { return false; } // Do not allow touch events to be intercepted (usually for gallery swipes) by default getParent().requestDisallowInterceptTouchEvent(true); boolean retVal = scaleGestureDetector.onTouchEvent(event); retVal = gestureDetector.onTouchEvent(event) || retVal; return retVal || super.onTouchEvent(event); } void setScale(float ds, float px, float py) { updateMatrix.postScale(ds, ds, px, py); } float getScale() { updateMatrix.getValues(matrixValues); return matrixValues[Matrix.MSCALE_X]; } void setTranslate(float dx, float dy) { updateMatrix.postTranslate(dx, dy); } void reset() { updateMatrix.reset(); } void updateMatrixBounds() { final RectF rect = getDrawRect(getDrawMatrix()); float dy = 0; float dx = 0; if (rect.height() <= viewRect.height()) { dy = (viewRect.height() - rect.height()) / 2 - rect.top; } else if (rect.top > 0) { dy = -rect.top; } else if (rect.bottom < viewRect.height()) { dy = viewRect.height() - rect.bottom; } if (rect.width() <= viewRect.width()) { dx = (viewRect.width() - rect.width()) / 2 - rect.left; } else if (rect.left > 0) { dx = -rect.left; } else if (rect.right < viewRect.width()) { dx = viewRect.width() - rect.right; } setTranslate(dx, dy); } RectF getDrawRect(Matrix matrix) { final Drawable drawable = getDrawable(); if (drawable != null) { drawRect.set(0, 0, drawable.getIntrinsicWidth(), drawable.getIntrinsicHeight()); matrix.mapRect(drawRect); } return drawRect; } Matrix getDrawMatrix() { drawMatrix.set(baseMatrix); drawMatrix.postConcat(updateMatrix); return drawMatrix; } void setImageMatrix() { updateMatrixBounds(); setScaleType(ScaleType.MATRIX); setImageMatrix(getDrawMatrix()); } void animateScale(float start, float end, final float px, final float py) { final ValueAnimator animator = ValueAnimator.ofFloat(start, end); animator.setDuration(SCALE_ANIMATION_DURATION); animator.setInterpolator(new AccelerateDecelerateInterpolator()); animator.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() { @Override public void onAnimationUpdate(ValueAnimator valueAnimator) { final float scale = (float) valueAnimator.getAnimatedValue(); final float ds = scale / getScale(); setScale(ds, px, py); setImageMatrix(); } }); animator.start(); }}package com.twitter.sdk.android.core.internal.oauth;import com.twitter.sdk.android.core.TwitterAuthConfig;import com.twitter.sdk.android.core.TwitterAuthToken;import java.util.HashMap;import java.util.Map;public class OAuth1aHeaders { public static final String HEADER_AUTH_SERVICE_PROVIDER = "X-Auth-Service-Provider"; public static final String HEADER_AUTH_CREDENTIALS = "X-Verify-Credentials-Authorization";  public String getAuthorizationHeader(TwitterAuthConfig authConfig, TwitterAuthToken authToken, String callback, String method, String url, Map<String, String> postParams) { final OAuth1aParameters oAuth1aParameters = getOAuth1aParameters(authConfig, authToken, callback, method, url, postParams); return oAuth1aParameters.getAuthorizationHeader(); }  public Map<String, String> getOAuthEchoHeaders(TwitterAuthConfig authConfig, TwitterAuthToken authToken, String callback, String method, String url, Map<String, String> postParams) { final Map<String, String> headers = new HashMap<>(2); final String authorizationHeader = getAuthorizationHeader(authConfig, authToken, callback, method, url, postParams); headers.put(HEADER_AUTH_CREDENTIALS, authorizationHeader); headers.put(HEADER_AUTH_SERVICE_PROVIDER, url); return headers; } OAuth1aParameters getOAuth1aParameters(TwitterAuthConfig authConfig, TwitterAuthToken authToken, String callback, String method, String url, Map<String, String> postParams) { return new OAuth1aParameters(authConfig, authToken, callback, method, url, postParams); }}package com.twitter.sdk.android.core.internal.network;import com.twitter.sdk.android.core.Session;import com.twitter.sdk.android.core.TwitterAuthConfig;import com.twitter.sdk.android.core.TwitterAuthToken;import com.twitter.sdk.android.core.internal.oauth.OAuth1aHeaders;import com.twitter.sdk.android.core.internal.oauth.OAuthConstants;import java.io.IOException;import java.util.HashMap;import java.util.Locale;import java.util.Map;import io.fabric.sdk.android.services.network.UrlUtils;import okhttp3.FormBody;import okhttp3.HttpUrl;import okhttp3.Interceptor;import okhttp3.Request;import okhttp3.RequestBody;import okhttp3.Response;public class OAuth1aInterceptor implements Interceptor { final Session<? extends TwitterAuthToken> session; final TwitterAuthConfig authConfig; public OAuth1aInterceptor(Session<? extends TwitterAuthToken> session, TwitterAuthConfig authConfig) { this.session = session; this.authConfig = authConfig; } @Override public Response intercept(Chain chain) throws IOException { final Request request = chain.request(); final Request hackRequest = request.newBuilder() .url(urlWorkaround(request.url())) .build(); final Request newRequest = hackRequest .newBuilder() .header(OAuthConstants.HEADER_AUTHORIZATION, getAuthorizationHeader(hackRequest)) .build(); return chain.proceed(newRequest); } HttpUrl urlWorkaround(HttpUrl url) { final HttpUrl.Builder builder = url.newBuilder().query(null); final int size = url.querySize(); for (int i = 0; i < size; i++) { builder.addEncodedQueryParameter(UrlUtils.percentEncode(url.queryParameterName(i)), UrlUtils.percentEncode(url.queryParameterValue(i))); } return builder.build(); } String getAuthorizationHeader(Request request) throws IOException { return new OAuth1aHeaders().getAuthorizationHeader(authConfig, session.getAuthToken(), null, request.method(), request.url().toString(), getPostParams(request)); } Map<String, String> getPostParams(Request request) throws IOException { final Map<String, String> params = new HashMap<>(); if ("POST".equals(request.method().toUpperCase(Locale.US))) { final RequestBody output = request.body(); if (output instanceof FormBody) { final FormBody body = (FormBody) output; for (int i = 0; i < body.size(); i++) { params.put(body.encodedName(i), body.value(i)); } } } return params; }}package com.twitter.sdk.android.core.internal.oauth;import io.fabric.sdk.android.Fabric;import io.fabric.sdk.android.services.network.HttpRequest;import io.fabric.sdk.android.services.network.UrlUtils;import com.twitter.sdk.android.core.TwitterAuthConfig;import com.twitter.sdk.android.core.TwitterAuthToken;import com.twitter.sdk.android.core.TwitterCore;import java.io.UnsupportedEncodingException;import java.net.URI;import java.security.InvalidKeyException;import java.security.NoSuchAlgorithmException;import java.security.SecureRandom;import java.util.Locale;import java.util.Map;import java.util.TreeMap;import javax.crypto.Mac;import javax.crypto.SecretKey;import javax.crypto.spec.SecretKeySpec;class OAuth1aParameters { private static final String VERSION = "1.0"; private static final String SIGNATURE_METHOD = "HMAC-SHA1";  private static final SecureRandom RAND = new SecureRandom(); private final TwitterAuthConfig authConfig; private final TwitterAuthToken authToken; private final String callback; private final String method; private final String url; private final Map<String, String> postParams; public OAuth1aParameters(TwitterAuthConfig authConfig, TwitterAuthToken authToken, String callback, String method, String url, Map<String, String> postParams) { this.authConfig = authConfig; this.authToken = authToken; this.callback = callback; this.method = method; this.url = url; this.postParams = postParams; }  public String getAuthorizationHeader() { final String nonce = getNonce(); final String timestamp = getTimestamp(); final String signatureBase = constructSignatureBase(nonce, timestamp); final String signature = calculateSignature(signatureBase); return constructAuthorizationHeader(nonce, timestamp, signature); } private String getNonce() { return String.valueOf(System.nanoTime()) + String.valueOf(Math.abs(RAND.nextLong())); } private String getTimestamp() { final long secondsFromEpoch = System.currentTimeMillis() / 1000; return Long.toString(secondsFromEpoch); } String constructSignatureBase(String nonce, String timestamp) { // Get query parameters from request. final URI uri = URI.create(url); final TreeMap<String, String> params = UrlUtils.getQueryParams(uri, true); if (postParams != null) { params.putAll(postParams); } // Add OAuth parameters. if (callback != null) { params.put(OAuthConstants.PARAM_CALLBACK, callback); } params.put(OAuthConstants.PARAM_CONSUMER_KEY, authConfig.getConsumerKey()); params.put(OAuthConstants.PARAM_NONCE, nonce); params.put(OAuthConstants.PARAM_SIGNATURE_METHOD, SIGNATURE_METHOD); params.put(OAuthConstants.PARAM_TIMESTAMP, timestamp); if (authToken != null && authToken.token != null) { params.put(OAuthConstants.PARAM_TOKEN, authToken.token); } params.put(OAuthConstants.PARAM_VERSION, VERSION); // Construct the signature base. final String baseUrl = uri.getScheme() + "://" + uri.getHost() + uri.getPath(); final StringBuilder sb = new StringBuilder() .append(method.toUpperCase(Locale.ENGLISH)) .append('&') .append(UrlUtils.percentEncode(baseUrl)) .append('&') .append(getEncodedQueryParams(params)); return sb.toString(); } private String getEncodedQueryParams(TreeMap<String, String> params) { final StringBuilder paramsBuf = new StringBuilder(); final int numParams = params.size(); int current = 0; for (Map.Entry<String, String> entry : params.entrySet()) { paramsBuf.append(UrlUtils.percentEncode(UrlUtils.percentEncode(entry.getKey()))) .append("%3D") .append(UrlUtils.percentEncode(UrlUtils.percentEncode(entry.getValue()))); current += 1; if (current < numParams) { paramsBuf.append("%26"); } } return paramsBuf.toString(); } String calculateSignature(String signatureBase) { try { final String key = getSigningKey(); // Calculate the signature by passing both the signature base and signing key to the // HMAC-SHA1 hashing algorithm final byte[] signatureBaseBytes = signatureBase.getBytes(UrlUtils.UTF8); final byte[] keyBytes = key.getBytes(UrlUtils.UTF8); final SecretKey secretKey = new SecretKeySpec(keyBytes, "HmacSHA1"); final Mac mac = Mac.getInstance("HmacSHA1"); mac.init(secretKey); final byte[] signatureBytes = mac.doFinal(signatureBaseBytes); return new String( HttpRequest.Base64.encodeBytesToBytes(signatureBytes, 0, signatureBytes.length), UrlUtils.UTF8); } catch (InvalidKeyException e) { Fabric.getLogger().e(TwitterCore.TAG, "Failed to calculate signature", e); return ""; } catch (NoSuchAlgorithmException e) { Fabric.getLogger().e(TwitterCore.TAG, "Failed to calculate signature", e); return ""; } catch (UnsupportedEncodingException e) { Fabric.getLogger().e(TwitterCore.TAG, "Failed to calculate signature", e); return ""; } } private String getSigningKey() { final String tokenSecret = authToken != null ? authToken.secret : null; return new StringBuilder() .append(UrlUtils.urlEncode(authConfig.getConsumerSecret())) .append('&') .append(UrlUtils.urlEncode(tokenSecret)) .toString(); } String constructAuthorizationHeader(String nonce, String timestamp, String signature) { final StringBuilder sb = new StringBuilder("OAuth"); appendParameter(sb, OAuthConstants.PARAM_CALLBACK, callback); appendParameter(sb, OAuthConstants.PARAM_CONSUMER_KEY, authConfig.getConsumerKey()); appendParameter(sb, OAuthConstants.PARAM_NONCE, nonce); appendParameter(sb, OAuthConstants.PARAM_SIGNATURE, signature); appendParameter(sb, OAuthConstants.PARAM_SIGNATURE_METHOD, SIGNATURE_METHOD); appendParameter(sb, OAuthConstants.PARAM_TIMESTAMP, timestamp); final String token = authToken != null ? authToken.token : null; appendParameter(sb, OAuthConstants.PARAM_TOKEN, token); appendParameter(sb, OAuthConstants.PARAM_VERSION, VERSION); // Remove the extra ',' at the end. return sb.substring(0, sb.length() - 1); } private void appendParameter(StringBuilder sb, String name, String value) { if (value != null) { sb.append(' ') .append(UrlUtils.percentEncode(name)).append("=\"") .append(UrlUtils.percentEncode(value)).append("\","); } }}package com.twitter.sdk.android.core.internal.oauth;import android.net.Uri;import io.fabric.sdk.android.services.network.UrlUtils;import com.twitter.sdk.android.core.Callback;import com.twitter.sdk.android.core.Result;import com.twitter.sdk.android.core.TwitterCore;import com.twitter.sdk.android.core.TwitterAuthConfig;import com.twitter.sdk.android.core.TwitterAuthException;import com.twitter.sdk.android.core.TwitterAuthToken;import com.twitter.sdk.android.core.TwitterException;import com.twitter.sdk.android.core.internal.TwitterApi;import java.io.BufferedReader;import java.io.IOException;import java.io.InputStreamReader;import java.util.TreeMap;import javax.net.ssl.SSLSocketFactory;import okhttp3.ResponseBody;import retrofit2.Call;import retrofit2.http.Header;import retrofit2.http.POST;import retrofit2.http.Query;public class OAuth1aService extends OAuthService { interface OAuthApi { @POST("/oauth/request_token") Call<ResponseBody> getTempToken(@Header(OAuthConstants.HEADER_AUTHORIZATION) String auth); @POST("/oauth/access_token") Call<ResponseBody> getAccessToken(@Header(OAuthConstants.HEADER_AUTHORIZATION) String auth, @Query(OAuthConstants.PARAM_VERIFIER) String verifier); } private static final String RESOURCE_OAUTH = "oauth"; private static final String CALLBACK_URL = "twittersdk://callback"; private static final String PARAM_SCREEN_NAME = "screen_name"; private static final String PARAM_USER_ID = "user_id"; OAuthApi api; public OAuth1aService(TwitterCore twitterCore, SSLSocketFactory sslSocketFactory, TwitterApi api) { super(twitterCore, sslSocketFactory, api); this.api = getRetrofit().create(OAuthApi.class); }  public void requestTempToken(final Callback<OAuthResponse> callback) { final TwitterAuthConfig config = getTwitterCore().getAuthConfig(); final String url = getTempTokenUrl(); api.getTempToken(new OAuth1aHeaders().getAuthorizationHeader(config, null, buildCallbackUrl(config), "POST", url, null)).enqueue(getCallbackWrapper(callback)); } String getTempTokenUrl() { return getApi().getBaseHostUrl() + "/oauth/request_token"; }  public String buildCallbackUrl(TwitterAuthConfig authConfig) { return Uri.parse(CALLBACK_URL).buildUpon() .appendQueryParameter("version", getTwitterCore().getVersion()) .appendQueryParameter("app", authConfig.getConsumerKey()) .build() .toString(); }  public void requestAccessToken(final Callback<OAuthResponse> callback, TwitterAuthToken requestToken, String verifier) { final String url = getAccessTokenUrl(); final String authHeader = new OAuth1aHeaders().getAuthorizationHeader(getTwitterCore() .getAuthConfig(), requestToken, null, "POST", url, null); api.getAccessToken(authHeader, verifier).enqueue(getCallbackWrapper(callback)); } String getAccessTokenUrl() { return getApi().getBaseHostUrl() + "/oauth/access_token"; }  public String getAuthorizeUrl(TwitterAuthToken requestToken) { // https://api.twitter.com/oauth/authorize?oauth_token=%s return getApi().buildUponBaseHostUrl(RESOURCE_OAUTH, "authorize") .appendQueryParameter(OAuthConstants.PARAM_TOKEN, requestToken.token) .build() .toString(); }  public static OAuthResponse parseAuthResponse(String response) { final TreeMap<String, String> params = UrlUtils.getQueryParams(response, false); final String token = params.get(OAuthConstants.PARAM_TOKEN); final String secret = params.get(OAuthConstants.PARAM_TOKEN_SECRET); final String userName = params.get(PARAM_SCREEN_NAME); final long userId; if (params.containsKey(PARAM_USER_ID)) { userId = Long.parseLong(params.get(PARAM_USER_ID)); } else { userId = 0L; } if (token == null || secret == null) { return null; } else { return new OAuthResponse(new TwitterAuthToken(token, secret), userName, userId); } } Callback<ResponseBody> getCallbackWrapper(final Callback<OAuthResponse> callback) { return new Callback<ResponseBody>() { @Override public void success(Result<ResponseBody> result) { //Try to get response body BufferedReader reader = null; final StringBuilder sb = new StringBuilder(); try { try { reader = new BufferedReader( new InputStreamReader(result.data.byteStream())); String line; while ((line = reader.readLine()) != null) { sb.append(line); } } finally { if (reader != null) { reader.close(); } } final String responseAsStr = sb.toString(); final OAuthResponse authResponse = parseAuthResponse(responseAsStr); if (authResponse == null) { callback.failure(new TwitterAuthException( "Failed to parse auth response: " + responseAsStr)); } else { callback.success(new Result<>(authResponse, null)); } } catch (IOException e) { callback.failure(new TwitterAuthException(e.getMessage(), e)); } } @Override public void failure(TwitterException exception) { callback.failure(exception); } }; }}package com.twitter.sdk.android.core.internal.oauth;import io.fabric.sdk.android.Fabric;import io.fabric.sdk.android.services.network.HttpRequest;import io.fabric.sdk.android.services.network.UrlUtils;import com.twitter.sdk.android.core.Callback;import com.twitter.sdk.android.core.Result;import com.twitter.sdk.android.core.TwitterCore;import com.twitter.sdk.android.core.TwitterAuthConfig;import com.twitter.sdk.android.core.TwitterException;import com.twitter.sdk.android.core.internal.TwitterApi;import javax.net.ssl.SSLSocketFactory;import retrofit2.Call;import retrofit2.http.Field;import retrofit2.http.FormUrlEncoded;import retrofit2.http.Header;import retrofit2.http.Headers;import retrofit2.http.POST;public class OAuth2Service extends OAuthService { OAuth2Api api; interface OAuth2Api { @POST("/1.1/guest/activate.json") Call<GuestTokenResponse> getGuestToken( @Header(OAuthConstants.HEADER_AUTHORIZATION) String auth); @Headers("Content-Type: application/x-www-form-urlencoded;charset=UTF-8") @FormUrlEncoded @POST("/oauth2/token") Call<OAuth2Token> getAppAuthToken(@Header(OAuthConstants.HEADER_AUTHORIZATION) String auth, @Field(OAuthConstants.PARAM_GRANT_TYPE) String grantType); } public OAuth2Service(TwitterCore twitterCore, SSLSocketFactory sslSocketFactory, TwitterApi api) { super(twitterCore, sslSocketFactory, api); this.api = getRetrofit().create(OAuth2Api.class); }  public void requestGuestAuthToken(final Callback<GuestAuthToken> callback) { final Callback<OAuth2Token> appAuthCallback = new Callback<OAuth2Token>() { @Override public void success(Result<OAuth2Token> result) { final OAuth2Token appAuthToken = result.data; // Got back an app auth token, now request a guest auth token. final Callback<GuestTokenResponse> guestTokenCallback = new Callback<GuestTokenResponse>() { @Override public void success(Result<GuestTokenResponse> result) { // Return a GuestAuthToken that includes the guestToken. final GuestAuthToken guestAuthToken = new GuestAuthToken( appAuthToken.getTokenType(), appAuthToken.getAccessToken(), result.data.guestToken); callback.success(new Result<>(guestAuthToken, null)); } @Override public void failure(TwitterException error) { Fabric.getLogger().e(TwitterCore.TAG, "Your app may not allow guest auth. Please talk to us " + "regarding upgrading your consumer key.", error); callback.failure(error); } }; requestGuestToken(guestTokenCallback, appAuthToken); } @Override public void failure(TwitterException error) { Fabric.getLogger().e(TwitterCore.TAG, "Failed to get app auth token", error); if (callback != null) { callback.failure(error); } } }; requestAppAuthToken(appAuthCallback); }  void requestAppAuthToken(final Callback<OAuth2Token> callback) { api.getAppAuthToken(getAuthHeader(), OAuthConstants.GRANT_TYPE_CLIENT_CREDENTIALS) .enqueue(callback); }  void requestGuestToken(final Callback<GuestTokenResponse> callback, OAuth2Token appAuthToken) { api.getGuestToken(getAuthorizationHeader(appAuthToken)).enqueue(callback); }  private String getAuthorizationHeader(OAuth2Token token) { return OAuthConstants.AUTHORIZATION_BEARER + " " + token.getAccessToken(); } private String getAuthHeader() { final TwitterAuthConfig authConfig = getTwitterCore().getAuthConfig(); return OAuthConstants.AUTHORIZATION_BASIC + " " + HttpRequest.Base64.encode( UrlUtils.percentEncode(authConfig.getConsumerKey()) + ":" + UrlUtils.percentEncode(authConfig.getConsumerSecret())); }}package com.twitter.sdk.android.core.internal.oauth;import android.os.Parcel;import android.os.Parcelable;import com.google.gson.annotations.SerializedName;import com.twitter.sdk.android.core.AuthToken;public class OAuth2Token extends AuthToken implements Parcelable { public static final String TOKEN_TYPE_BEARER = "bearer"; public static final Parcelable.Creator<OAuth2Token> CREATOR = new Parcelable.Creator<OAuth2Token>() { public OAuth2Token createFromParcel(Parcel in) { return new OAuth2Token(in); } public OAuth2Token[] newArray(int size) { return new OAuth2Token[size]; } }; @SerializedName("token_type") private final String tokenType; @SerializedName("access_token") private final String accessToken; public OAuth2Token(String tokenType, String accessToken) { super(); this.tokenType = tokenType; this.accessToken = accessToken; } public OAuth2Token(String tokenType, String accessToken, long createdAt) { super(createdAt); this.tokenType = tokenType; this.accessToken = accessToken; } private OAuth2Token(Parcel in) { super(); tokenType = in.readString(); accessToken = in.readString(); } public String getTokenType() { return tokenType; } public String getAccessToken() { return accessToken; } @Override public boolean isExpired() { // Oauth 2.0 tokens do not have a common expiration policy. Returning false indicates // the token is not known to have expired. App auth tokens only expire when manually // invalidated, while guest auth tokens are known to have expired after 3 hours. return false; } @Override public int describeContents() { return 0; } @Override public void writeToParcel(Parcel out, int flags) { out.writeString(tokenType); out.writeString(accessToken); } @Override public boolean equals(Object o) { if (this == o) return true; if (o == null || getClass() != o.getClass()) return false; final OAuth2Token that = (OAuth2Token) o; if (accessToken != null ? !accessToken.equals(that.accessToken) : that.accessToken != null) return false; if (tokenType != null ? !tokenType.equals(that.tokenType) : that.tokenType != null) return false; return true; } @Override public int hashCode() { int result = tokenType != null ? tokenType.hashCode() : 0; result = 31 * result + (accessToken != null ? accessToken.hashCode() : 0); return result; }}package com.twitter.sdk.android.core.identity;import android.app.Activity;import android.content.Intent;import android.os.Bundle;import android.view.View;import android.webkit.WebView;import android.widget.ProgressBar;import com.twitter.sdk.android.core.R;import com.twitter.sdk.android.core.TwitterAuthConfig;import com.twitter.sdk.android.core.TwitterAuthException;import com.twitter.sdk.android.core.TwitterCore;import com.twitter.sdk.android.core.internal.TwitterApi;import com.twitter.sdk.android.core.internal.oauth.OAuth1aService;// This activity assumes it will handle configuration changes itself and MUST have the// following attribute defined in the AndroidManifest.xml// file: android:configChanges="orientation|screenSize"public class OAuthActivity extends Activity implements OAuthController.Listener { static final String EXTRA_AUTH_CONFIG = "auth_config"; private static final String STATE_PROGRESS = "progress"; OAuthController oAuthController; private ProgressBar spinner; private WebView webView; @Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.tw__activity_oauth); spinner = (ProgressBar) findViewById(R.id.tw__spinner); webView = (WebView) findViewById(R.id.tw__web_view); final boolean showProgress; if (savedInstanceState != null) { showProgress = savedInstanceState.getBoolean(STATE_PROGRESS, false); } else { showProgress = true; } spinner.setVisibility(showProgress ? View.VISIBLE : View.GONE); final TwitterCore kit = TwitterCore.getInstance(); oAuthController = new OAuthController(spinner, webView, (TwitterAuthConfig) getIntent().getParcelableExtra(EXTRA_AUTH_CONFIG), new OAuth1aService(kit, kit.getSSLSocketFactory(), new TwitterApi()), this); oAuthController.startAuth(); } @Override protected void onSaveInstanceState(Bundle outState) { if (spinner.getVisibility() == View.VISIBLE) { outState.putBoolean(STATE_PROGRESS, true); } super.onSaveInstanceState(outState); } @Override public void onBackPressed() { oAuthController.handleAuthError(RESULT_CANCELED, new TwitterAuthException("Authorization failed, request was canceled.")); } @Override public void onComplete(int resultCode, Intent data) { setResult(resultCode, data); finish(); }}package com.twitter.sdk.android.core.identity;import android.app.Activity;import android.content.Context;import android.content.Intent;import io.fabric.sdk.android.FabricActivityTestCase;import io.fabric.sdk.android.FabricTestUtils;import com.twitter.sdk.android.core.TwitterAuthConfig;import com.twitter.sdk.android.core.TwitterAuthException;import com.twitter.sdk.android.core.TwitterCore;import org.mockito.ArgumentCaptor;import static org.mockito.Mockito.*;public class OAuthActivityTest extends FabricActivityTestCase<OAuthActivity> { private Context context; private TwitterCore twitterCore; private OAuthController mockController; public OAuthActivityTest() { super(OAuthActivity.class); } @Override protected void setUp() throws Exception { super.setUp(); context = getInstrumentation().getTargetContext(); twitterCore = new TwitterCore(new TwitterAuthConfig("", "")); mockController = mock(TestOAuthController.class); FabricTestUtils.resetFabric(); FabricTestUtils.with(context, twitterCore); } @Override protected void tearDown() throws Exception { FabricTestUtils.resetFabric(); super.tearDown(); } private void init() { final Intent intent = new Intent(context, OAuthActivity.class) .putExtra(OAuthActivity.EXTRA_AUTH_CONFIG, twitterCore.getAuthConfig()); final OAuthActivity activity = startActivity(intent, null, null); activity.oAuthController = mockController; } public void testOnBackPressed() { init(); getActivity().onBackPressed(); final ArgumentCaptor<TwitterAuthException> exceptionArgCaptor = ArgumentCaptor.forClass(TwitterAuthException.class); verify(mockController).handleAuthError(eq(Activity.RESULT_CANCELED), exceptionArgCaptor.capture()); assertEquals("Authorization failed, request was canceled.", exceptionArgCaptor.getValue().getMessage()); } public void testOnComplete() { init(); getActivity().onComplete(Activity.RESULT_OK, new Intent()); assertTrue(isFinishCalled()); }}package com.twitter.sdk.android.core.internal.oauth;public class OAuthConstants { public static final String HEADER_AUTHORIZATION = "Authorization"; public static final String HEADER_GUEST_TOKEN = "x-guest-token"; // OAuth1.0a parameter constants. public static final String PARAM_CALLBACK = "oauth_callback"; public static final String PARAM_CONSUMER_KEY = "oauth_consumer_key"; public static final String PARAM_NONCE = "oauth_nonce"; public static final String PARAM_SIGNATURE_METHOD = "oauth_signature_method"; public static final String PARAM_TIMESTAMP = "oauth_timestamp"; public static final String PARAM_TOKEN = "oauth_token"; public static final String PARAM_TOKEN_SECRET = "oauth_token_secret"; public static final String PARAM_VERSION = "oauth_version"; public static final String PARAM_SIGNATURE = "oauth_signature"; public static final String PARAM_VERIFIER = "oauth_verifier"; // OAuth2 public static final String AUTHORIZATION_BASIC = "Basic"; public static final String AUTHORIZATION_BEARER = "Bearer"; public static final String PARAM_GRANT_TYPE = "grant_type"; public static final String GRANT_TYPE_CLIENT_CREDENTIALS = "client_credentials";}package com.twitter.sdk.android.core.identity;import android.app.Activity;import android.content.Intent;import android.os.Bundle;import android.view.View;import android.webkit.WebChromeClient;import android.webkit.WebSettings;import android.webkit.WebView;import android.webkit.WebViewClient;import android.widget.ProgressBar;import io.fabric.sdk.android.Fabric;import com.twitter.sdk.android.core.Callback;import com.twitter.sdk.android.core.Result;import com.twitter.sdk.android.core.TwitterAuthConfig;import com.twitter.sdk.android.core.TwitterAuthException;import com.twitter.sdk.android.core.TwitterAuthToken;import com.twitter.sdk.android.core.TwitterCore;import com.twitter.sdk.android.core.TwitterException;import com.twitter.sdk.android.core.internal.oauth.OAuth1aService;import com.twitter.sdk.android.core.internal.oauth.OAuthConstants;import com.twitter.sdk.android.core.internal.oauth.OAuthResponse;class OAuthController implements OAuthWebViewClient.Listener { interface Listener { void onComplete(int resultCode, Intent data); } final Listener listener; TwitterAuthToken requestToken; private final ProgressBar spinner; private final WebView webView; private final TwitterAuthConfig authConfig; private final OAuth1aService oAuth1aService; OAuthController(ProgressBar spinner, WebView webView, TwitterAuthConfig authConfig, OAuth1aService oAuth1aService, Listener listener) { this.spinner = spinner; this.webView = webView; this.authConfig = authConfig; this.oAuth1aService = oAuth1aService; this.listener = listener; } void startAuth() { // Step 1. Obtain a request token to start the sign in flow. Fabric.getLogger().d(TwitterCore.TAG, "Obtaining request token to start the sign in flow"); oAuth1aService.requestTempToken(newRequestTempTokenCallback()); }  Callback<OAuthResponse> newRequestTempTokenCallback() { return new Callback<OAuthResponse>() { @Override public void success(Result<OAuthResponse> result) { requestToken = result.data.authToken; final String authorizeUrl = oAuth1aService.getAuthorizeUrl(requestToken); // Step 2. Redirect user to web view to complete authorization flow. Fabric.getLogger().d(TwitterCore.TAG, "Redirecting user to web view to complete authorization flow"); setUpWebView(webView, new OAuthWebViewClient(oAuth1aService.buildCallbackUrl(authConfig), OAuthController.this), authorizeUrl, new OAuthWebChromeClient()); } @Override public void failure(TwitterException error) { Fabric.getLogger().e(TwitterCore.TAG, "Failed to get request token", error); // Create new exception that can be safely serialized since Retrofit errors may // throw a NotSerializableException. handleAuthError(AuthHandler.RESULT_CODE_ERROR, new TwitterAuthException("Failed to get request token")); } }; } protected void handleAuthError(int resultCode, TwitterAuthException error) { final Intent data = new Intent(); data.putExtra(AuthHandler.EXTRA_AUTH_ERROR, error); listener.onComplete(resultCode, data); }  void setUpWebView(WebView webView, WebViewClient webViewClient, String url, WebChromeClient webChromeClient) { final WebSettings webSettings = webView.getSettings(); webSettings.setAllowFileAccess(false); webSettings.setJavaScriptEnabled(false); webSettings.setSaveFormData(false); webView.setVerticalScrollBarEnabled(false); webView.setHorizontalScrollBarEnabled(false); webView.setWebViewClient(webViewClient); webView.loadUrl(url); webView.setVisibility(View.INVISIBLE); webView.setWebChromeClient(webChromeClient); } private void handleWebViewSuccess(Bundle bundle) { Fabric.getLogger().d(TwitterCore.TAG, "OAuth web view completed successfully"); if (bundle != null) { final String verifier = bundle.getString(OAuthConstants.PARAM_VERIFIER); if (verifier != null) { // Step 3. Convert the request token to an access token. Fabric.getLogger().d(TwitterCore.TAG, "Converting the request token to an access token."); oAuth1aService.requestAccessToken(newRequestAccessTokenCallback(), requestToken, verifier); return; } } // If we get here, we failed to complete authorization. Fabric.getLogger().e(TwitterCore.TAG, "Failed to get authorization, bundle incomplete " + bundle, null); handleAuthError(AuthHandler.RESULT_CODE_ERROR, new TwitterAuthException("Failed to get authorization, bundle incomplete")); }  Callback<OAuthResponse> newRequestAccessTokenCallback() { return new Callback<OAuthResponse>() { @Override public void success(Result<OAuthResponse> result) { final Intent data = new Intent(); final OAuthResponse response = result.data; data.putExtra(AuthHandler.EXTRA_SCREEN_NAME, response.userName); data.putExtra(AuthHandler.EXTRA_USER_ID, response.userId); data.putExtra(AuthHandler.EXTRA_TOKEN, response.authToken.token); data.putExtra(AuthHandler.EXTRA_TOKEN_SECRET, response.authToken.secret); listener.onComplete(Activity.RESULT_OK, data); } @Override public void failure(TwitterException error) { Fabric.getLogger().e(TwitterCore.TAG, "Failed to get access token", error); // Create new exception that can be safely serialized since Retrofit errors may // throw a NotSerializableException. handleAuthError(AuthHandler.RESULT_CODE_ERROR, new TwitterAuthException("Failed to get access token")); } }; } private void handleWebViewError(WebViewException error) { Fabric.getLogger().e(TwitterCore.TAG, "OAuth web view completed with an error", error); handleAuthError(AuthHandler.RESULT_CODE_ERROR, new TwitterAuthException("OAuth web view completed with an error")); } private void dismissWebView() { webView.stopLoading(); dismissSpinner(); } private void dismissSpinner() { spinner.setVisibility(View.GONE); } @Override public void onPageFinished(WebView webView, String url) { dismissSpinner(); webView.setVisibility(View.VISIBLE); } @Override public void onSuccess(Bundle bundle) { handleWebViewSuccess(bundle); dismissWebView(); } @Override public void onError(WebViewException exception) { handleWebViewError(exception); dismissWebView(); }}package com.twitter.sdk.android.core.identity;import android.app.Activity;import android.content.Intent;import com.twitter.sdk.android.core.Callback;import com.twitter.sdk.android.core.TwitterAuthConfig;import com.twitter.sdk.android.core.TwitterSession;class OAuthHandler extends AuthHandler {  public OAuthHandler(TwitterAuthConfig authConfig, Callback<TwitterSession> callback, int requestCode) { super(authConfig, callback, requestCode); } @Override public boolean authorize(Activity activity) { activity.startActivityForResult(newIntent(activity), requestCode); return true; } Intent newIntent(Activity activity) { final Intent intent = new Intent(activity, OAuthActivity.class); intent.putExtra(OAuthActivity.EXTRA_AUTH_CONFIG, getAuthConfig()); return intent; }}package com.twitter.sdk.android.core.internal.oauth;import android.os.Parcel;import android.os.Parcelable;import com.twitter.sdk.android.core.TwitterAuthToken;public class OAuthResponse implements Parcelable { public static final Parcelable.Creator<OAuthResponse> CREATOR = new Parcelable.Creator<OAuthResponse>() { public OAuthResponse createFromParcel(Parcel in) { return new OAuthResponse(in); } public OAuthResponse[] newArray(int size) { return new OAuthResponse[size]; } };  public final TwitterAuthToken authToken;  public final String userName;  public final long userId; public OAuthResponse(TwitterAuthToken authToken, String userName, long userId) { this.authToken = authToken; this.userName = userName; this.userId = userId; } private OAuthResponse(Parcel in) { this.authToken = in.readParcelable(TwitterAuthToken.class.getClassLoader()); this.userName = in.readString(); this.userId = in.readLong(); } @Override public String toString() { return new StringBuilder() .append("authToken=").append(authToken) .append(",userName=").append(userName) .append(",userId=").append(userId) .toString(); } @Override public int describeContents() { return 0; } @Override public void writeToParcel(Parcel out, int flags) { out.writeParcelable(this.authToken, flags); out.writeString(this.userName); out.writeLong(this.userId); }}package com.twitter.sdk.android.core.internal.oauth;import com.twitter.sdk.android.core.TwitterCore;import com.twitter.sdk.android.core.internal.TwitterApi;import java.io.IOException;import javax.net.ssl.SSLSocketFactory;import okhttp3.Interceptor;import okhttp3.OkHttpClient;import okhttp3.Request;import okhttp3.Response;import retrofit2.Retrofit;import retrofit2.converter.gson.GsonConverterFactory;abstract class OAuthService { private static final String CLIENT_NAME = "TwitterAndroidSDK"; private final TwitterCore twitterCore; private final TwitterApi api; private final String userAgent; private final Retrofit retrofit; OAuthService(TwitterCore twitterCore, SSLSocketFactory sslSocketFactory, TwitterApi api) { this.twitterCore = twitterCore; this.api = api; userAgent = TwitterApi.buildUserAgent(CLIENT_NAME, twitterCore.getVersion()); if (sslSocketFactory == null) { throw new IllegalArgumentException("sslSocketFactory must not be null"); } final OkHttpClient client = new OkHttpClient.Builder() .sslSocketFactory(sslSocketFactory) .addInterceptor(new Interceptor() { @Override public Response intercept(Chain chain) throws IOException { final Request request = chain.request().newBuilder() .header("User-Agent", getUserAgent()) .build(); return chain.proceed(request); } }) .build(); retrofit = new Retrofit.Builder() .baseUrl(getApi().getBaseHostUrl()) .client(client) .addConverterFactory(GsonConverterFactory.create()) .build(); } protected TwitterCore getTwitterCore() { return twitterCore; } protected TwitterApi getApi() { return api; } protected String getUserAgent() { return userAgent; } protected Retrofit getRetrofit() { return retrofit; }}package com.twitter.sdk.android.core;import io.fabric.sdk.android.services.network.HttpMethod;import com.twitter.sdk.android.core.internal.TwitterApi;import com.twitter.sdk.android.core.internal.oauth.OAuth1aHeaders;import java.util.Map;public class OAuthSigning { static final String VERIFY_CREDENTIALS_URL = TwitterApi.BASE_HOST_URL + "/1.1/account/verify_credentials.json"; final TwitterAuthConfig authConfig; final TwitterAuthToken authToken; final OAuth1aHeaders oAuth1aHeaders;  public OAuthSigning(TwitterAuthConfig authConfig, TwitterAuthToken authToken) { this(authConfig, authToken, new OAuth1aHeaders()); } OAuthSigning(TwitterAuthConfig authConfig, TwitterAuthToken authToken, OAuth1aHeaders oAuth1aHeaders) { if (authConfig == null) { throw new IllegalArgumentException("authConfig must not be null"); } if (authToken == null) { throw new IllegalArgumentException("authToken must not be null"); } this.authConfig = authConfig; this.authToken = authToken; this.oAuth1aHeaders = oAuth1aHeaders; }  public String getAuthorizationHeader(String method, String url, Map<String, String> postParams) { return oAuth1aHeaders.getAuthorizationHeader(authConfig, authToken, null, method, url, postParams); }  public Map<String, String> getOAuthEchoHeaders(String method, String url, Map<String, String> postParams) { return oAuth1aHeaders.getOAuthEchoHeaders(authConfig, authToken, null, method, url, postParams); }  public Map<String, String> getOAuthEchoHeadersForVerifyCredentials() { return oAuth1aHeaders.getOAuthEchoHeaders(authConfig, authToken, null, HttpMethod.GET.name(), VERIFY_CREDENTIALS_URL, null); }}package com.twitter.sdk.android.core.identity;import android.webkit.ConsoleMessage;import android.webkit.WebChromeClient;class OAuthWebChromeClient extends WebChromeClient { @Override public boolean onConsoleMessage(ConsoleMessage consoleMessage) { //Do not log return true; }}package com.twitter.sdk.android.core.identity;import android.net.http.SslError;import android.os.Bundle;import android.webkit.SslErrorHandler;import android.webkit.WebView;import android.webkit.WebViewClient;import java.net.URI;import java.util.TreeMap;import io.fabric.sdk.android.services.network.UrlUtils;class OAuthWebViewClient extends WebViewClient { interface Listener { void onPageFinished(WebView webView, String url); void onSuccess(Bundle bundle); void onError(WebViewException exception); } private final String completeUrl; private final Listener listener; public OAuthWebViewClient(String completeUrl, Listener listener) { this.completeUrl = completeUrl; this.listener = listener; } @Override public void onPageFinished(WebView view, String url) { super.onPageFinished(view, url); listener.onPageFinished(view, url); } @Override public boolean shouldOverrideUrlLoading(WebView view, String url) { if (url.startsWith(completeUrl)) { final TreeMap<String, String> params = UrlUtils.getQueryParams(URI.create(url), false); final Bundle bundle = new Bundle(params.size()); for (TreeMap.Entry<String, String> entry : params.entrySet()) { bundle.putString(entry.getKey(), entry.getValue()); } listener.onSuccess(bundle); return true; } return super.shouldOverrideUrlLoading(view, url); } @Override public void onReceivedError(WebView view, int errorCode, String description, String failingUrl) { super.onReceivedError(view, errorCode, description, failingUrl); listener.onError(new WebViewException(errorCode, description, failingUrl)); } @Override public void onReceivedSslError(WebView view, SslErrorHandler handler, SslError error) { super.onReceivedSslError(view, handler, error); listener.onError(new WebViewException(error.getPrimaryError(), null, null)); }}package com.twitter.sdk.android.core.internal.util;import android.annotation.TargetApi;import android.content.Context;import android.os.Build;import android.util.AttributeSet;import android.widget.ScrollView;public class ObservableScrollView extends ScrollView { ScrollViewListener scrollViewListener; public ObservableScrollView(Context context) { super(context); } public ObservableScrollView(Context context, AttributeSet attrs) { super(context, attrs); } public ObservableScrollView(Context context, AttributeSet attrs, int defStyleAttr) { super(context, attrs, defStyleAttr); } @TargetApi(Build.VERSION_CODES.LOLLIPOP) public ObservableScrollView(Context context, AttributeSet attrs, int defStyleAttr, int defStyleRes) { super(context, attrs, defStyleAttr, defStyleRes); } @Override protected void onScrollChanged(int currentX, int currentY, int oldX, int oldY) { super.onScrollChanged(currentX, currentY, oldX, oldY); if (scrollViewListener != null) { scrollViewListener.onScrollChanged(currentY); } } public void setScrollViewListener(ScrollViewListener scrollViewListener) { this.scrollViewListener = scrollViewListener; } public interface ScrollViewListener { void onScrollChanged(int scrollY); }}package com.twitter.sdk.android.core.internal.util;import android.test.AndroidTestCase;import static org.mockito.Mockito.mock;import static org.mockito.Mockito.verify;public class ObservableScrollViewTest extends AndroidTestCase { static final int TEST_SCROLL_X = 10; public void testOnScrollChanged() { final ObservableScrollView scrollView = new ObservableScrollView(getContext()); final ObservableScrollView.ScrollViewListener listener = mock(ObservableScrollView.ScrollViewListener.class); scrollView.setScrollViewListener(listener); scrollView.onScrollChanged(0, TEST_SCROLL_X, 0, 0); verify(listener).onScrollChanged(TEST_SCROLL_X); }}package com.twitter.sdk.android.core.internal.network;import com.twitter.sdk.android.core.GuestSessionProvider;import com.twitter.sdk.android.core.Session;import com.twitter.sdk.android.core.TwitterAuthConfig;import com.twitter.sdk.android.core.TwitterAuthToken;import javax.net.ssl.SSLSocketFactory;import okhttp3.OkHttpClient;public class OkHttpClientHelper { public static OkHttpClient getOkHttpClient(GuestSessionProvider guestSessionProvider, SSLSocketFactory sslSocketFactory) { return getOkHttpClientBuilder(guestSessionProvider, sslSocketFactory).build(); } public static OkHttpClient.Builder getOkHttpClientBuilder( GuestSessionProvider guestSessionProvider, SSLSocketFactory sslSocketFactory) { return new OkHttpClient.Builder() .sslSocketFactory(sslSocketFactory) .authenticator(new GuestAuthenticator(guestSessionProvider)) .addInterceptor(new GuestAuthInterceptor(guestSessionProvider)) .addNetworkInterceptor(new GuestAuthNetworkInterceptor()); } public static OkHttpClient getOkHttpClient(Session<? extends TwitterAuthToken> session, TwitterAuthConfig authConfig, SSLSocketFactory sslSocketFactory) { return getOkHttpClientBuilder(session, authConfig, sslSocketFactory).build(); } public static OkHttpClient.Builder getOkHttpClientBuilder( Session<? extends TwitterAuthToken> session, TwitterAuthConfig authConfig, SSLSocketFactory sslSocketFactory) { if (session == null) { throw new IllegalArgumentException("Session must not be null."); } return new OkHttpClient.Builder() .sslSocketFactory(sslSocketFactory) .addInterceptor(new OAuth1aInterceptor(session, authConfig)); }}package com.twitter.sdk.android.core;import io.fabric.sdk.android.services.persistence.PreferenceStore;import io.fabric.sdk.android.services.persistence.PreferenceStoreStrategy;import io.fabric.sdk.android.services.persistence.SerializationStrategy;import java.util.Collections;import java.util.Map;import java.util.concurrent.ConcurrentHashMap;import java.util.concurrent.atomic.AtomicReference;public class PersistedSessionManager<T extends Session> implements SessionManager<T> { private static final int NUM_SESSIONS = 1; private final PreferenceStore preferenceStore; private final SerializationStrategy<T> serializer; private final ConcurrentHashMap<Long, T> sessionMap; private final ConcurrentHashMap<Long, PreferenceStoreStrategy<T>> storageMap; private final PreferenceStoreStrategy<T> activeSessionStorage; private final AtomicReference<T> activeSessionRef; private final String prefKeySession; private volatile boolean restorePending = true; public PersistedSessionManager(PreferenceStore preferenceStore, SerializationStrategy<T> serializer, String prefKeyActiveSession, String prefKeySession) { this(preferenceStore, serializer, new ConcurrentHashMap<Long, T>(NUM_SESSIONS), new ConcurrentHashMap<Long, PreferenceStoreStrategy<T>>(NUM_SESSIONS), new PreferenceStoreStrategy<>(preferenceStore, serializer, prefKeyActiveSession), prefKeySession); } PersistedSessionManager(PreferenceStore preferenceStore, SerializationStrategy<T> serializer, ConcurrentHashMap<Long, T> sessionMap, ConcurrentHashMap<Long, PreferenceStoreStrategy<T>> storageMap, PreferenceStoreStrategy<T> activesSessionStorage, String prefKeySession) { this.preferenceStore = preferenceStore; this.serializer = serializer; this.sessionMap = sessionMap; this.storageMap = storageMap; this.activeSessionStorage = activesSessionStorage; this.activeSessionRef = new AtomicReference<>(); this.prefKeySession = prefKeySession; } void restoreAllSessionsIfNecessary() { // Only restore once if (restorePending) { restoreAllSessions(); } } private synchronized void restoreAllSessions() { if (restorePending) { restoreActiveSession(); restoreSessions(); restorePending = false; } } private void restoreSessions() { T session; final Map<String, ?> preferences = preferenceStore.get().getAll(); for (Map.Entry<String, ?> entry : preferences.entrySet()) { if (isSessionPreferenceKey(entry.getKey())) { session = serializer.deserialize((String) entry.getValue()); if (session != null) { internalSetSession(session.getId(), session, false); } } } } private void restoreActiveSession() { final T session = activeSessionStorage.restore(); if (session != null) { internalSetSession(session.getId(), session, false); } } boolean isSessionPreferenceKey(String preferenceKey) { return preferenceKey.startsWith(prefKeySession); }  @Override public T getActiveSession() { restoreAllSessionsIfNecessary(); return activeSessionRef.get(); }  @Override public void setActiveSession(T session) { if (session == null) { throw new IllegalArgumentException("Session must not be null!"); } restoreAllSessionsIfNecessary(); internalSetSession(session.getId(), session, true); }  @Override public void clearActiveSession() { restoreAllSessionsIfNecessary(); if (activeSessionRef.get() != null) { clearSession(activeSessionRef.get().getId()); } }  @Override public T getSession(long id) { restoreAllSessionsIfNecessary(); return sessionMap.get(id); }  @Override public void setSession(long id, T session) { if (session == null) { throw new IllegalArgumentException("Session must not be null!"); } restoreAllSessionsIfNecessary(); internalSetSession(id, session, false); } @Override public Map<Long, T> getSessionMap() { restoreAllSessionsIfNecessary(); return Collections.unmodifiableMap(sessionMap); } private void internalSetSession(long id, T session, boolean forceUpdate) { sessionMap.put(id, session); PreferenceStoreStrategy<T> storage = storageMap.get(id); if (storage == null) { storage = new PreferenceStoreStrategy<>(preferenceStore, serializer, getPrefKey(id)); storageMap.putIfAbsent(id, storage); } storage.save(session); final T activeSession = activeSessionRef.get(); if (activeSession == null || activeSession.getId() == id || forceUpdate) { synchronized (this) { activeSessionRef.compareAndSet(activeSession, session); activeSessionStorage.save(session); } } } String getPrefKey(long id) { return prefKeySession + "_" + id; }  @Override public void clearSession(long id) { restoreAllSessionsIfNecessary(); if (activeSessionRef.get() != null && activeSessionRef.get().getId() == id) { synchronized (this) { activeSessionRef.set(null); activeSessionStorage.clear(); } } sessionMap.remove(id); final PreferenceStoreStrategy<T> storage = storageMap.remove(id); if (storage != null) { storage.clear(); } }}package com.twitter.sdk.android.core.models;import com.google.gson.annotations.SerializedName;import java.util.List;import java.util.Map;public class Place {  @SerializedName("attributes") public final Map<String, String> attributes;  @SerializedName("bounding_box") public final BoundingBox boundingBox;  @SerializedName("country") public final String country;  @SerializedName("country_code") public final String countryCode;  @SerializedName("full_name") public final String fullName;  @SerializedName("id") public final String id;  @SerializedName("name") public final String name;  @SerializedName("place_type") public final String placeType;  @SerializedName("url") public final String url; public Place(Map<String, String> attributes, BoundingBox boundingBox, String country, String countryCode, String fullName, String id, String name, String placeType, String url) { this.attributes = attributes; this.boundingBox = boundingBox; this.country = country; this.countryCode = countryCode; this.fullName = fullName; this.id = id; this.name = name; this.placeType = placeType; this.url = url; } public static class BoundingBox {  @SerializedName("coordinates") public final List<List<List<Double>>> coordinates;  @SerializedName("type") public final String type; public BoundingBox(List<List<List<Double>>> coordinates, String type) { this.coordinates = coordinates; this.type = type; } }}package com.twitter.sdk.android.tweetui;import android.app.Activity;import android.os.Bundle;import android.view.View;import com.twitter.sdk.android.core.internal.scribe.ScribeItem;import java.io.Serializable;public class PlayerActivity extends Activity { static final String PLAYER_ITEM = "PLAYER_ITEM"; static final String SCRIBE_ITEM = "SCRIBE_ITEM"; static final VideoScribeClient videoScribeClient = new VideoScribeClientImpl(TweetUi.getInstance()); PlayerController playerController; @Override public void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.tw__player_activity); final PlayerItem item = (PlayerItem) getIntent().getSerializableExtra(PLAYER_ITEM); final View rootView = findViewById(android.R.id.content); playerController = new PlayerController(rootView); playerController.prepare(item); final ScribeItem scribeItem = (ScribeItem) getIntent().getSerializableExtra(SCRIBE_ITEM); scribeCardPlayImpression(scribeItem); } @Override protected void onResume() { super.onResume(); playerController.onResume(); } @Override protected void onPause() { playerController.onPause(); super.onPause(); } @Override public void onDestroy() { playerController.onDestroy(); super.onDestroy(); } private void scribeCardPlayImpression(ScribeItem scribeItem) { videoScribeClient.play(scribeItem); } public static class PlayerItem implements Serializable { public String url; public boolean looping; public String callToActionUrl; public String callToActionText; public PlayerItem(String url, boolean looping) { this.url = url; this.looping = looping; } public PlayerItem(String url, boolean looping, String callToActionText, String callToActionUrl) { this.url = url; this.looping = looping; this.callToActionText = callToActionText; this.callToActionUrl = callToActionUrl; } }}package com.twitter.sdk.android.tweetui;import android.content.Intent;import android.media.MediaPlayer;import android.net.Uri;import android.view.View;import android.widget.ProgressBar;import android.widget.TextView;import com.twitter.sdk.android.core.IntentUtils;import com.twitter.sdk.android.tweetui.internal.VideoControlView;import com.twitter.sdk.android.tweetui.internal.VideoView;import io.fabric.sdk.android.Fabric;class PlayerController { private static final String TAG = "PlayerController"; final VideoView videoView; final VideoControlView videoControlView; final ProgressBar videoProgressView; final TextView callToActionView; View rootView; int seekPosition = 0; boolean isPlaying = true; PlayerController(View rootView) { this.rootView = rootView; this.videoView = (VideoView) rootView.findViewById(R.id.video_view); this.videoControlView = (VideoControlView) rootView.findViewById(R.id.video_control_view); this.videoProgressView = (ProgressBar) rootView.findViewById(R.id.video_progress_view); this.callToActionView = (TextView) rootView.findViewById(R.id.call_to_action_view); } // Unit testing purposes PlayerController(View rootView, VideoView videoView, VideoControlView videoControlView, ProgressBar videoProgressView, TextView callToActionView) { this.rootView = rootView; this.videoView = videoView; this.videoControlView = videoControlView; this.videoProgressView = videoProgressView; this.callToActionView = callToActionView; } void prepare(PlayerActivity.PlayerItem item) { try { setUpCallToAction(item); setUpMediaControl(item.looping); videoView.setOnPreparedListener(new MediaPlayer.OnPreparedListener() { @Override public void onPrepared(MediaPlayer mediaPlayer) { videoProgressView.setVisibility(View.GONE); } }); videoView.setOnInfoListener(new MediaPlayer.OnInfoListener() { @Override public boolean onInfo(MediaPlayer mediaPlayer, int what, int extra) { if (what == MediaPlayer.MEDIA_INFO_BUFFERING_END) { videoProgressView.setVisibility(View.GONE); return true; } else if (what == MediaPlayer.MEDIA_INFO_BUFFERING_START) { videoProgressView.setVisibility(View.VISIBLE); return true; } return false; } }); final Uri uri = Uri.parse(item.url); videoView.setVideoURI(uri, item.looping); videoView.requestFocus(); } catch (Exception e) { Fabric.getLogger().e(TAG, "Error occurred during video playback", e); } } void onResume() { if (seekPosition != 0) { videoView.seekTo(seekPosition); } if (isPlaying) { videoView.start(); videoControlView.update(); } } void onPause() { isPlaying = videoView.isPlaying(); seekPosition = videoView.getCurrentPosition(); videoView.pause(); } void onDestroy() { videoView.stopPlayback(); } void setUpMediaControl(boolean looping) { if (looping) { setUpLoopControl(); } else { setUpMediaControl(); } } void setUpLoopControl() { videoControlView.setVisibility(View.INVISIBLE); videoView.setOnClickListener(new View.OnClickListener() { @Override public void onClick(View view) { if (videoView.isPlaying()) { videoView.pause(); } else { videoView.start(); } } }); } void setUpMediaControl() { videoView.setMediaController(videoControlView); } void setUpCallToAction(PlayerActivity.PlayerItem item) { if (item.callToActionText != null && item.callToActionUrl != null) { callToActionView.setVisibility(View.VISIBLE); callToActionView.setText(item.callToActionText); setUpCallToActionListener(item.callToActionUrl); setUpRootViewOnClickListener(); } } void setUpCallToActionListener(final String callToActionUrl) { callToActionView.setOnClickListener(new View.OnClickListener() { @Override public void onClick(View v) { final Uri uri = Uri.parse(callToActionUrl); final Intent intent = new Intent(Intent.ACTION_VIEW, uri); IntentUtils.safeStartActivity(callToActionView.getContext(), intent); } }); } void setUpRootViewOnClickListener() { rootView.setOnClickListener(new View.OnClickListener() { @Override public void onClick(View v) { if (callToActionView.getVisibility() == View.VISIBLE) { callToActionView.setVisibility(View.GONE); } else { callToActionView.setVisibility(View.VISIBLE); } } }); }}package com.twitter.sdk.android.unity;import android.app.Activity;import android.content.Intent;import android.os.Bundle;import com.twitter.sdk.android.core.Callback;import com.twitter.sdk.android.core.Result;import com.twitter.sdk.android.core.TwitterException;import com.twitter.sdk.android.core.TwitterSession;import com.twitter.sdk.android.core.TwitterSessionHelper;import com.twitter.sdk.android.core.identity.TwitterAuthClient;public class RequestEmailActivity extends Activity { TwitterAuthClient authClient; @Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); final String session = getIntent().getStringExtra(TwitterKit.EXTRA_TWITTER_SESSION); final TwitterSession twitterSession = TwitterSessionHelper.deserialize(session); new TwitterAuthClient().requestEmail(twitterSession, new Callback<String>() { @Override public void success(Result<String> result) { final UnityMessage message = new UnityMessage.Builder() .setMethod("RequestEmailComplete") .setData(result.data) .build(); message.send(); finish(); } @Override public void failure(TwitterException ex) { final String error = new ApiError.Serializer() .serialize(new ApiError(0, ex.getMessage())); final UnityMessage message = new UnityMessage.Builder() .setMethod("RequestEmailFailed") .setData(error) .build(); message.send(); finish(); } }); } @Override protected void onActivityResult(int requestCode, int resultCode, Intent data) { super.onActivityResult(requestCode, resultCode, data); authClient.onActivityResult(requestCode, resultCode, data); }}package com.twitter.sdk.android.tweetui;import com.twitter.sdk.android.core.Callback;import com.twitter.sdk.android.core.Result;import com.twitter.sdk.android.core.TwitterException;import com.twitter.sdk.android.core.models.Tweet;class ResetTweetCallback extends Callback<Tweet> { BaseTweetView baseTweetView; TweetRepository tweetRepository; Callback<Tweet> cb; ResetTweetCallback(BaseTweetView baseTweetView, TweetRepository tweetRepository, Callback<Tweet> cb) { this.baseTweetView = baseTweetView; this.tweetRepository = tweetRepository; this.cb = cb; } @Override public void success(Result<Tweet> result) { tweetRepository.updateCache(result.data); baseTweetView.setTweet(result.data); if (cb != null) { cb.success(result); } } @Override public void failure(TwitterException exception) { if (cb != null) { cb.failure(exception); } }}package com.twitter.sdk.android.core;import retrofit2.Response;public class Result<T> { public final T data; public final Response response; public Result(T data, Response response) { this.data = data; this.response = response; }}package com.twitter.sdk.android.tweetcomposer;import android.graphics.Bitmap;import android.graphics.BitmapShader;import android.graphics.Canvas;import android.graphics.Paint;import android.graphics.Path;import android.graphics.RectF;import android.graphics.Shader;import com.squareup.picasso.Transformation;import java.util.Arrays;import static android.graphics.Bitmap.createBitmap;class RoundedCornerTransformation implements Transformation { final float[] radii; RoundedCornerTransformation(float[] radii) { this.radii = radii; } @Override public Bitmap transform(Bitmap source) { final RectF rect = new RectF(0, 0, source.getWidth(), source.getHeight()); final Bitmap result = createBitmap(source.getWidth(), source.getHeight(), source.getConfig()); final BitmapShader bitmapShader = new BitmapShader(source, Shader.TileMode.CLAMP, Shader.TileMode.CLAMP); final Paint paint = new Paint(); paint.setAntiAlias(true); paint.setShader(bitmapShader); final Path path = new Path(); path.addRoundRect(rect, radii, Path.Direction.CCW); final Canvas canvas = new Canvas(result); canvas.drawPath(path, paint); source.recycle(); return result; } @Override public String key() { return "RoundedCornerTransformation(" + Arrays.toString(radii) + ")"; } public static class Builder { int topLeftRadius; int topRightRadius; int bottomRightRadius; int bottomLeftRadius; public Builder setRadius(int radius) { topLeftRadius = radius; topRightRadius = radius; bottomRightRadius = radius; bottomLeftRadius = radius; return this; } public Builder setRadii(int topLeftRadius, int topRightRadius, int bottomRightRadius, int bottomLeftRadius) { this.topLeftRadius = topLeftRadius; this.topRightRadius = topRightRadius; this.bottomRightRadius = bottomRightRadius; this.bottomLeftRadius = bottomLeftRadius; return this; } RoundedCornerTransformation build() { if (topLeftRadius < 0 || topRightRadius < 0 || bottomRightRadius < 0 || bottomLeftRadius < 0) { throw new IllegalStateException("Radius must not be negative"); } final float[] radii = {topLeftRadius, topLeftRadius, topRightRadius, topRightRadius, bottomRightRadius, bottomRightRadius, bottomLeftRadius, bottomLeftRadius}; return new RoundedCornerTransformation(radii); } }}package com.twitter.sdk.android.mopub.internal;import android.content.Context;import android.graphics.Bitmap;import android.graphics.BitmapShader;import android.graphics.Canvas;import android.graphics.Paint;import android.graphics.Path;import android.graphics.RectF;import android.graphics.Shader;import android.graphics.drawable.BitmapDrawable;import android.util.AttributeSet;import android.widget.ImageView;import static android.graphics.Bitmap.createBitmap;public class RoundedImageView extends ImageView { private float[] roundedCornerRadii; public RoundedImageView(Context context, AttributeSet attrs) { super(context, attrs, 0); setDefaultCornerRadii(); } public RoundedImageView(Context context, AttributeSet attrs, int styleResId) { super(context, attrs, styleResId); setDefaultCornerRadii(); } private void setDefaultCornerRadii() { setCornerRadii(0, 0, 0, 0); }  public void setCornerRadii(int topLeftRadius, int topRightRadius, int bottomLeftRadius, int bottomRightRadius) { if (topLeftRadius < 0 || topRightRadius < 0 || bottomRightRadius < 0 || bottomLeftRadius < 0) { throw new IllegalStateException("Radius must not be negative"); } roundedCornerRadii = new float[]{ topLeftRadius, topLeftRadius, topRightRadius, topRightRadius, bottomLeftRadius, bottomLeftRadius, bottomRightRadius, bottomRightRadius}; } @Override public void setImageBitmap(Bitmap bitmap) { setImageDrawable(new BitmapDrawable(getResources(), transform(bitmap))); } private Bitmap transform(Bitmap source) { final RectF rect = new RectF(0, 0, source.getWidth(), source.getHeight()); final Bitmap result = createBitmap(source.getWidth(), source.getHeight(), source.getConfig()); final BitmapShader bitmapShader = new BitmapShader(source, Shader.TileMode.CLAMP, Shader.TileMode.CLAMP); final Paint paint = new Paint(); paint.setAntiAlias(true); paint.setShader(bitmapShader); final Path path = new Path(); path.addRoundRect(rect, roundedCornerRadii, Path.Direction.CCW); final Canvas canvas = new Canvas(result); canvas.drawPath(path, paint); return result; }}package com.twitter.sdk.android.core.models;import com.google.gson.Gson;import com.google.gson.TypeAdapter;import com.google.gson.TypeAdapterFactory;import com.google.gson.reflect.TypeToken;import com.google.gson.stream.JsonReader;import com.google.gson.stream.JsonWriter;import java.io.IOException;import java.util.Collections;import java.util.List;public class SafeListAdapter implements TypeAdapterFactory { @Override public <T> TypeAdapter<T> create(final Gson gson, final TypeToken<T> tokenType) { final TypeAdapter<T> delegate = gson.getDelegateAdapter(this, tokenType); return new TypeAdapter<T>() { @Override public void write(JsonWriter out, T value) throws IOException { delegate.write(out, value); } @Override public T read(JsonReader arg0) throws IOException { final T t = delegate.read(arg0); if (List.class.isAssignableFrom(tokenType.getRawType())) { if (t == null) { return (T) Collections.EMPTY_LIST; } final List<?> list = (List<?>) t; return (T) Collections.unmodifiableList(list); } return t; } }; }}package com.twitter.sdk.android.core.models;import com.google.gson.Gson;import com.google.gson.TypeAdapter;import com.google.gson.TypeAdapterFactory;import com.google.gson.reflect.TypeToken;import com.google.gson.stream.JsonReader;import com.google.gson.stream.JsonWriter;import java.io.IOException;import java.util.Collections;import java.util.Map;public class SafeMapAdapter implements TypeAdapterFactory { @Override public <T> TypeAdapter<T> create(final Gson gson, final TypeToken<T> tokenType) { final TypeAdapter<T> delegate = gson.getDelegateAdapter(this, tokenType); return new TypeAdapter<T>() { @Override public void write(JsonWriter out, T value) throws IOException { delegate.write(out, value); } @Override public T read(JsonReader arg0) throws IOException { final T t = delegate.read(arg0); if (Map.class.isAssignableFrom(tokenType.getRawType())) { if (t == null) { return (T) Collections.EMPTY_MAP; } final Map<?, ?> map = (Map<?, ?>) t; return (T) Collections.unmodifiableMap(map); } return t; } }; }}package com.twitter.sdk.android.tweetcomposer;import com.twitter.sdk.android.core.internal.scribe.EventNamespace;import com.twitter.sdk.android.core.internal.scribe.ScribeItem;import java.util.List;interface ScribeClient { void scribe(EventNamespace eventNamespace, List<ScribeItem> items);}package com.twitter.sdk.android.tweetcomposer;import com.twitter.sdk.android.core.internal.scribe.DefaultScribeClient;import com.twitter.sdk.android.core.internal.scribe.EventNamespace;import com.twitter.sdk.android.core.internal.scribe.ScribeItem;import java.util.List;class ScribeClientImpl implements ScribeClient { private final DefaultScribeClient scribeClient; public ScribeClientImpl(DefaultScribeClient scribeClient) { this.scribeClient = scribeClient; } @Override public void scribe(EventNamespace eventNamespace, List<ScribeItem> items) { if (scribeClient != null) { scribeClient.scribe(eventNamespace, items); } }}package com.twitter.sdk.android.core.internal.scribe;public class ScribeConfig { public static final String BASE_URL = "https://api.twitter.com"; public static final int DEFAULT_MAX_FILES_TO_KEEP = 100; public static final int DEFAULT_SEND_INTERVAL_SECONDS = 10 * 60; // 10 minutes  public final boolean isEnabled;  public final String baseUrl;  public final String pathVersion;  public final String pathType;  public final String sequence;  public final String userAgent;  public final int maxFilesToKeep;  public final int sendIntervalSeconds; public ScribeConfig(boolean isEnabled, String baseUrl, String pathVersion, String pathType, String sequence, String userAgent, int maxFilesToKeep, int sendIntervalSeconds) { this.isEnabled = isEnabled; this.baseUrl = baseUrl; this.pathVersion = pathVersion; this.pathType = pathType; this.sequence = sequence; this.userAgent = userAgent; this.maxFilesToKeep = maxFilesToKeep; this.sendIntervalSeconds = sendIntervalSeconds; }}package com.twitter.sdk.android.tweetcomposer;import com.twitter.sdk.android.core.internal.scribe.EventNamespace;import com.twitter.sdk.android.core.internal.scribe.ScribeItem;final class ScribeConstants { private ScribeConstants() {} // namespaces with client "tfw" become SyndicationClientEvent scribes to /logs/tfw_client_event static final String SCRIBE_TFW_CLIENT = "tfw"; static final String SCRIBE_PAGE = "android"; static final String SCRIBE_SECTION = "composer"; static final String SCRIBE_COMPONENT = ""; static final String SCRIBE_IMPRESSION_ELEMENT = ""; static final String SCRIBE_TWEET_ELEMENT = "tweet"; static final String SCRIBE_CANCEL_ELEMENT = "cancel"; static final String SCRIBE_IMPRESSION_ACTION = "impression"; static final String SCRIBE_CLICK_ACTION = "click"; static final int SCRIBE_PROMO_APP_CARD_TYPE = 8; static final EventNamespace.Builder ComposerEventBuilder = new EventNamespace.Builder() .setClient(SCRIBE_TFW_CLIENT) .setPage(SCRIBE_PAGE) .setSection(SCRIBE_SECTION);  static ScribeItem newCardScribeItem(Card card) { // promo app card is currently the only type of Card return new ScribeItem.Builder() .setItemType(ScribeItem.TYPE_TWEET) .setCardEvent(new ScribeItem.CardEvent(SCRIBE_PROMO_APP_CARD_TYPE)) .build(); }}package com.twitter.sdk.android.core.internal.scribe;import android.text.TextUtils;import com.google.gson.Gson;import com.google.gson.annotations.SerializedName;import io.fabric.sdk.android.services.events.EventTransform;import java.io.IOException;import java.util.Collections;import java.util.List;public class ScribeEvent {  private static final String CURRENT_FORMAT_VERSION = "2";  @SerializedName("event_namespace") final EventNamespace eventNamespace;  @SerializedName("ts") final String timestamp;  @SerializedName("format_version") final String formatVersion; @SerializedName("_category_") final String category; @SerializedName("items") final List<ScribeItem> items; public ScribeEvent(String category, EventNamespace eventNamespace, long timestamp) { this(category, eventNamespace, timestamp, Collections.<ScribeItem>emptyList()); } public ScribeEvent(String category, EventNamespace eventNamespace, long timestamp, List<ScribeItem> items) { this.category = category; this.eventNamespace = eventNamespace; this.timestamp = String.valueOf(timestamp); this.formatVersion = CURRENT_FORMAT_VERSION; this.items = Collections.unmodifiableList(items); } @Override public String toString() { return new StringBuilder() .append("event_namespace=").append(eventNamespace) .append(", ts=").append(timestamp) .append(", format_version=").append(formatVersion) .append(", _category_=").append(category) .append(", items=").append("[" + TextUtils.join(", ", items) + "]") .toString(); } @Override public boolean equals(Object o) { if (this == o) return true; if (o == null || getClass() != o.getClass()) return false; final ScribeEvent that = (ScribeEvent) o; if (category != null ? !category.equals(that.category) : that.category != null) { return false; } if (eventNamespace != null ? !eventNamespace.equals(that.eventNamespace) : that.eventNamespace != null) { return false; } if (formatVersion != null ? !formatVersion.equals(that.formatVersion) : that.formatVersion != null) { return false; } if (timestamp != null ? !timestamp.equals(that.timestamp) : that.timestamp != null) { return false; } if (items != null ? !items.equals(that.items) : that.items != null) { return false; } return true; } @Override public int hashCode() { int result = eventNamespace != null ? eventNamespace.hashCode() : 0; result = 31 * result + (timestamp != null ? timestamp.hashCode() : 0); result = 31 * result + (formatVersion != null ? formatVersion.hashCode() : 0); result = 31 * result + (category != null ? category.hashCode() : 0); result = 31 * result + (items != null ? items.hashCode() : 0); return result; } public static class Transform implements EventTransform<ScribeEvent> { private final Gson gson; public Transform(Gson gson) { this.gson = gson; } @Override public byte[] toBytes(ScribeEvent event) throws IOException { return gson.toJson(event).getBytes("UTF-8"); } }}package com.twitter.sdk.android.core.internal.scribe;import java.util.Collections;import java.util.List;public class ScribeEventFactory { public static ScribeEvent newScribeEvent(EventNamespace ns, long timestamp, String language, String advertisingId) { return newScribeEvent(ns, "", timestamp, language, advertisingId, Collections.<ScribeItem>emptyList()); } public static ScribeEvent newScribeEvent(EventNamespace ns, String eventInfo, long timestamp, String language, String advertisingId, List<ScribeItem> items) { switch (ns.client) { case SyndicationClientEvent.CLIENT_NAME: return new SyndicationClientEvent(ns, eventInfo, timestamp, language, advertisingId, items); default: return new SyndicatedSdkImpressionEvent(ns, timestamp, language, advertisingId, items); } }}package com.twitter.sdk.android.core.internal.scribe;import io.fabric.sdk.android.FabricAndroidTestCase;import io.fabric.sdk.android.services.common.CommonUtils;import com.google.gson.GsonBuilder;import java.io.IOException;import java.io.InputStream;import java.util.Arrays;import java.util.List;public class ScribeEventTransformTest extends FabricAndroidTestCase { static final String TEST_MESSAGE = "TEST MESSAGE"; static final String TEST_ITEM_TYPE = "\"item_type\":6"; static final String TEST_DESCRIPTION = "\"description\":\"TEST MESSAGE\""; private ScribeEvent.Transform transform; private EventNamespace eventNamespace; private String scribeEventJsonString; @Override protected void setUp() throws Exception { super.setUp(); transform = new ScribeEvent.Transform(new GsonBuilder().create()); eventNamespace = new EventNamespace.Builder() .setClient("testclient") .setPage("testpage") .setSection("testsection") .setComponent("testcomponent") .setElement("testelement") .setAction("testaction") .builder(); InputStream is = null; try { is = getContext().getAssets().open("scribe_event.json"); scribeEventJsonString = CommonUtils.streamToString(is).trim(); } finally { CommonUtils.closeQuietly(is); } } public void testToBytes() throws IOException { final ScribeEvent scribeEvent = new ScribeEvent("testcategory", eventNamespace, 1404426136717L); final byte[] bytes = transform.toBytes(scribeEvent); assertEquals(scribeEventJsonString, new String(bytes, "UTF-8")); } public void testToBytes_withItems() throws IOException { final ScribeItem scribeItem = ScribeItem.fromMessage(TEST_MESSAGE); final List<ScribeItem> itemList = Arrays.asList(scribeItem); final ScribeEvent scribeEvent = new ScribeEvent("testcategory", eventNamespace, 1404426136717L, itemList); final byte[] bytes = transform.toBytes(scribeEvent); assertTrue(new String(bytes, "UTF-8").contains(TEST_ITEM_TYPE)); assertTrue(new String(bytes, "UTF-8").contains(TEST_DESCRIPTION)); }}package com.twitter.sdk.android.core.internal.scribe;import android.content.Context;import io.fabric.sdk.android.services.common.CurrentTimeProvider;import io.fabric.sdk.android.services.events.EventTransform;import io.fabric.sdk.android.services.events.EventsFilesManager;import io.fabric.sdk.android.services.events.QueueFileEventStorage;import java.io.IOException;import java.util.UUID;class ScribeFilesManager extends EventsFilesManager<ScribeEvent> { static final String FILE_PREFIX = "se"; static final String FILE_EXTENSION = ".tap"; public ScribeFilesManager(Context context, EventTransform<ScribeEvent> transform, CurrentTimeProvider currentTimeProvider, QueueFileEventStorage eventsStorage, int defaultMaxFilesToKeep) throws IOException { super(context, transform, currentTimeProvider, eventsStorage, defaultMaxFilesToKeep); } @Override protected String generateUniqueRollOverFileName() { final UUID targetUUIDComponent = UUID.randomUUID(); return new StringBuilder() .append(FILE_PREFIX) .append(ROLL_OVER_FILE_NAME_SEPARATOR) .append(targetUUIDComponent.toString()) .append(ROLL_OVER_FILE_NAME_SEPARATOR) .append(currentTimeProvider.getCurrentTimeMillis()) .append(FILE_EXTENSION) .toString(); }}package com.twitter.sdk.android.core.internal.scribe;import android.content.Context;import android.text.TextUtils;import io.fabric.sdk.android.services.common.CommonUtils;import io.fabric.sdk.android.services.common.IdManager;import io.fabric.sdk.android.services.common.QueueFile;import io.fabric.sdk.android.services.events.FilesSender;import com.twitter.sdk.android.core.GuestSessionProvider;import com.twitter.sdk.android.core.Session;import com.twitter.sdk.android.core.SessionManager;import com.twitter.sdk.android.core.TwitterAuthConfig;import com.twitter.sdk.android.core.TwitterAuthToken;import com.twitter.sdk.android.core.internal.network.GuestAuthInterceptor;import com.twitter.sdk.android.core.internal.network.OAuth1aInterceptor;import java.io.ByteArrayOutputStream;import java.io.File;import java.io.IOException;import java.io.InputStream;import java.net.HttpURLConnection;import java.util.List;import java.util.concurrent.ExecutorService;import java.util.concurrent.atomic.AtomicReference;import javax.net.ssl.SSLSocketFactory;import okhttp3.Interceptor;import okhttp3.OkHttpClient;import okhttp3.Request;import okhttp3.ResponseBody;import retrofit2.Call;import retrofit2.Response;import retrofit2.Retrofit;import retrofit2.http.Field;import retrofit2.http.FormUrlEncoded;import retrofit2.http.Headers;import retrofit2.http.POST;import retrofit2.http.Path;class ScribeFilesSender implements FilesSender { private static final String SEND_FILE_FAILURE_ERROR = "Failed sending files";  private static final byte[] START_JSON_ARRAY = {'['};  private static final byte[] COMMA = {','};  private static final byte[] END_JSON_ARRAY = {']'}; private final Context context; private final ScribeConfig scribeConfig; private final long ownerId; private final TwitterAuthConfig authConfig; private final SessionManager<? extends Session<TwitterAuthToken>> sessionManager; private final GuestSessionProvider guestSessionProvider; private final SSLSocketFactory sslSocketFactory; private final AtomicReference<ScribeService> scribeService; private final ExecutorService executorService; private final IdManager idManager; public ScribeFilesSender(Context context, ScribeConfig scribeConfig, long ownerId, TwitterAuthConfig authConfig, SessionManager<? extends Session<TwitterAuthToken>> sessionManager, GuestSessionProvider guestSessionProvider, SSLSocketFactory sslSocketFactory, ExecutorService executorService, IdManager idManager) { this.context = context; this.scribeConfig = scribeConfig; this.ownerId = ownerId; this.authConfig = authConfig; this.sessionManager = sessionManager; this.guestSessionProvider = guestSessionProvider; this.sslSocketFactory = sslSocketFactory; this.executorService = executorService; this.idManager = idManager; this.scribeService = new AtomicReference<>(); } @Override public boolean send(List<File> files) { if (hasApiAdapter()) { try { final String scribeEvents = getScribeEventsAsJsonArrayString(files); CommonUtils.logControlled(context, scribeEvents); final Response<ResponseBody> response = upload(scribeEvents); if (response.code() == HttpURLConnection.HTTP_OK) { return true; } else { CommonUtils.logControlledError(context, SEND_FILE_FAILURE_ERROR, null); if (response.code() == HttpURLConnection.HTTP_INTERNAL_ERROR || response.code() == HttpURLConnection.HTTP_BAD_REQUEST) { return true; } } } catch (Exception e) { CommonUtils.logControlledError(context, SEND_FILE_FAILURE_ERROR, e); } } else { CommonUtils.logControlled(context, "Cannot attempt upload at this time"); } return false; } String getScribeEventsAsJsonArrayString(List<File> files) throws IOException { final ByteArrayOutputStream out = new ByteArrayOutputStream(1024); final boolean[] appendComma = new boolean[1]; out.write(START_JSON_ARRAY); for (File f : files) { QueueFile qf = null; try { qf = new QueueFile(f); qf.forEach(new QueueFile.ElementReader() { @Override public void read(InputStream in, int length) throws IOException { final byte[] buf = new byte[length]; in.read(buf); if (appendComma[0]) { out.write(COMMA); } else { // First time through we don't append comma, but subsequent times we do appendComma[0] = true; } out.write(buf); } }); } finally { CommonUtils.closeQuietly(qf); } } out.write(END_JSON_ARRAY); return out.toString("UTF-8"); }  private boolean hasApiAdapter() { return getScribeService() != null; }  void setScribeService(ScribeService restAdapter) { scribeService.set(restAdapter); }  synchronized ScribeService getScribeService() { if (scribeService.get() == null) { final Session session = getSession(ownerId); OkHttpClient client; if (isValidSession(session)) { client = new OkHttpClient.Builder() .sslSocketFactory(sslSocketFactory) .addInterceptor(new ConfigRequestInterceptor(scribeConfig, idManager)) .addInterceptor(new OAuth1aInterceptor(session, authConfig)) .build(); } else { client = new OkHttpClient.Builder() .sslSocketFactory(sslSocketFactory) .addInterceptor(new ConfigRequestInterceptor(scribeConfig, idManager)) .addInterceptor(new GuestAuthInterceptor(guestSessionProvider)) .build(); } final Retrofit retrofit = new Retrofit.Builder() .baseUrl(scribeConfig.baseUrl) .client(client) .build(); scribeService.compareAndSet(null, retrofit.create(ScribeService.class)); } return scribeService.get(); } private Session getSession(long ownerId) { return sessionManager.getSession(ownerId); } private boolean isValidSession(Session session) { return session != null && session.getAuthToken() != null; }  Response<ResponseBody> upload(String scribeEvents) throws IOException { final ScribeService service = getScribeService(); if (!TextUtils.isEmpty(scribeConfig.sequence)) { return service.uploadSequence(scribeConfig.sequence, scribeEvents).execute(); } else { return service.upload(scribeConfig.pathVersion, scribeConfig.pathType, scribeEvents) .execute(); } } interface ScribeService { @Headers("Content-Type: application/x-www-form-urlencoded;charset=UTF-8") @FormUrlEncoded @POST("/{version}/jot/{type}") Call<ResponseBody> upload(@Path("version") String version, @Path("type") String type, @Field("log[]") String logs); @Headers("Content-Type: application/x-www-form-urlencoded;charset=UTF-8") @FormUrlEncoded @POST("/scribe/{sequence}") Call<ResponseBody> uploadSequence(@Path("sequence") String sequence, @Field("log[]") String logs); } // At a certain point we might need to allow either a custom RequestInterceptor to be set // by the user of the ScribeClient or a custom map of headers to be supplied. static class ConfigRequestInterceptor implements Interceptor { private static final String USER_AGENT_HEADER = "User-Agent"; private static final String CLIENT_UUID_HEADER = "X-Client-UUID"; private static final String POLLING_HEADER = "X-Twitter-Polling"; private static final String POLLING_HEADER_VALUE = "true"; private final ScribeConfig scribeConfig; private final IdManager idManager; ConfigRequestInterceptor(ScribeConfig scribeConfig, IdManager idManager) { this.scribeConfig = scribeConfig; this.idManager = idManager; } @Override public okhttp3.Response intercept(Chain chain) throws IOException { final Request.Builder builder = chain.request().newBuilder(); if (!TextUtils.isEmpty(scribeConfig.userAgent)) { builder.header(USER_AGENT_HEADER, scribeConfig.userAgent); }  if (!TextUtils.isEmpty(idManager.getDeviceUUID())) { builder.header(CLIENT_UUID_HEADER, idManager.getDeviceUUID()); }  builder.header(POLLING_HEADER, POLLING_HEADER_VALUE); return chain.proceed(builder.build()); } }}package com.twitter.sdk.android.core.internal.scribe;import android.content.Context;import io.fabric.sdk.android.services.events.DisabledEventsStrategy;import io.fabric.sdk.android.services.events.EventsFilesManager;import io.fabric.sdk.android.services.events.EventsHandler;import io.fabric.sdk.android.services.events.EventsStrategy;import java.util.concurrent.ScheduledExecutorService;class ScribeHandler extends EventsHandler<ScribeEvent> { public ScribeHandler(Context context, EventsStrategy<ScribeEvent> strategy, EventsFilesManager filesManager, ScheduledExecutorService executorService) { super(context, strategy, filesManager, executorService); }  public void scribe(ScribeEvent event) { recordEventAsync(event, false); }  public void scribeAndFlush(ScribeEvent event) { recordEventAsync(event, true); } @Override protected EventsStrategy<ScribeEvent> getDisabledEventsStrategy() { return new DisabledEventsStrategy<>(); }}package com.twitter.sdk.android.core.internal.scribe;import com.google.gson.annotations.SerializedName;import com.twitter.sdk.android.core.internal.VineCardUtils;import com.twitter.sdk.android.core.models.Card;import com.twitter.sdk.android.core.models.MediaEntity;import com.twitter.sdk.android.core.models.Tweet;import com.twitter.sdk.android.core.models.User;import java.io.Serializable;public class ScribeItem implements Serializable {  public static final int TYPE_TWEET = 0; public static final int TYPE_USER = 3; public static final int TYPE_MESSAGE = 6;  @SerializedName("item_type") public final Integer itemType;  @SerializedName("id") public final Long id;  @SerializedName("description") public final String description;  @SerializedName("card_event") public final CardEvent cardEvent;  @SerializedName("media_details") public final MediaDetails mediaDetails; private ScribeItem(Integer itemType, Long id, String description, CardEvent cardEvent, MediaDetails mediaDetails) { this.itemType = itemType; this.id = id; this.description = description; this.cardEvent = cardEvent; this.mediaDetails = mediaDetails; } public static ScribeItem fromTweet(Tweet tweet) { return new ScribeItem.Builder() .setItemType(TYPE_TWEET) .setId(tweet.id) .build(); } public static ScribeItem fromUser(User user) { return new ScribeItem.Builder() .setItemType(TYPE_USER) .setId(user.id) .build(); } public static ScribeItem fromMessage(String message) { return new ScribeItem.Builder() .setItemType(TYPE_MESSAGE) .setDescription(message) .build(); } public static ScribeItem fromTweetCard(long tweetId, Card card) { return new ScribeItem.Builder() .setItemType(ScribeItem.TYPE_TWEET) .setId(tweetId) .setMediaDetails(createCardDetails(tweetId, card)) .build(); } public static ScribeItem fromMediaEntity(long tweetId, MediaEntity mediaEntity) { return new ScribeItem.Builder() .setItemType(ScribeItem.TYPE_TWEET) .setId(tweetId) .setMediaDetails(createMediaDetails(tweetId, mediaEntity)) .build(); } static ScribeItem.MediaDetails createMediaDetails(long tweetId, MediaEntity mediaEntity) { return new ScribeItem.MediaDetails(tweetId, getMediaType(mediaEntity), mediaEntity.id); } static ScribeItem.MediaDetails createCardDetails(long tweetId, Card card) { return new ScribeItem.MediaDetails(tweetId, MediaDetails.TYPE_VINE, Long.valueOf(VineCardUtils.getPublisherId(card))); } static int getMediaType(MediaEntity mediaEntity) { if (MediaDetails.GIF_TYPE.equals(mediaEntity.type)) { return ScribeItem.MediaDetails.TYPE_ANIMATED_GIF; } else { return ScribeItem.MediaDetails.TYPE_CONSUMER; } } @Override public boolean equals(Object o) { if (this == o) return true; if (o == null || getClass() != o.getClass()) return false; final ScribeItem that = (ScribeItem) o; if (itemType != null ? !itemType.equals(that.itemType) : that.itemType != null) return false; if (id != null ? !id.equals(that.id) : that.id != null) return false; if (description != null ? !description.equals(that.description) : that.description != null) return false; if (cardEvent != null ? !cardEvent.equals(that.cardEvent) : that.cardEvent != null) return false; return !(mediaDetails != null ? !mediaDetails.equals(that.mediaDetails) : that .mediaDetails != null); } @Override public int hashCode() { int result = itemType != null ? itemType.hashCode() : 0; result = 31 * result + (id != null ? id.hashCode() : 0); result = 31 * result + (description != null ? description.hashCode() : 0); result = 31 * result + (cardEvent != null ? cardEvent.hashCode() : 0); result = 31 * result + (mediaDetails != null ? mediaDetails.hashCode() : 0); return result; }  public static class CardEvent implements Serializable { public CardEvent(int cardType) { promotionCardType = cardType; } @SerializedName("promotion_card_type") final int promotionCardType; @Override public boolean equals(Object o) { if (this == o) return true; if (o == null || getClass() != o.getClass()) return false; final CardEvent cardEvent = (CardEvent) o; return promotionCardType == cardEvent.promotionCardType; } @Override public int hashCode() { return promotionCardType; } }  public static class MediaDetails implements Serializable { public static final int TYPE_CONSUMER = 1; public static final int TYPE_AMPLIFY = 2; public static final int TYPE_ANIMATED_GIF = 3; public static final int TYPE_VINE = 4; public static final String GIF_TYPE = "animated_gif"; @SerializedName("content_id") public final long contentId; @SerializedName("media_type") public final int mediaType; @SerializedName("publisher_id") public final long publisherId; public MediaDetails(long contentId, int mediaType, long publisherId) { this.contentId = contentId; this.mediaType = mediaType; this.publisherId = publisherId; } @Override public boolean equals(Object o) { if (this == o) return true; if (o == null || getClass() != o.getClass()) return false; final MediaDetails that = (MediaDetails) o; if (contentId != that.contentId) return false; if (mediaType != that.mediaType) return false; return publisherId == that.publisherId; } @Override public int hashCode() { int result = (int) (contentId ^ (contentId >>> 32)); result = 31 * result + mediaType; result = 31 * result + (int) (publisherId ^ (publisherId >>> 32)); return result; } } public static class Builder { private Integer itemType; private Long id; private String description; private CardEvent cardEvent; private MediaDetails mediaDetails; public Builder setItemType(int itemType) { this.itemType = itemType; return this; } public Builder setId(long id) { this.id = id; return this; } public Builder setDescription(String description) { this.description = description; return this; } public Builder setCardEvent(CardEvent cardEvent) { this.cardEvent = cardEvent; return this; } public Builder setMediaDetails(MediaDetails mediaDetails) { this.mediaDetails = mediaDetails; return this; } public ScribeItem build() { return new ScribeItem(itemType, id, description, cardEvent, mediaDetails); } }}package com.twitter.sdk.android.core.models;import com.google.gson.annotations.SerializedName;import java.util.List;public class Search { @SerializedName("statuses") public final List<Tweet> tweets; @SerializedName("search_metadata") public final SearchMetadata searchMetadata; public Search(List<Tweet> tweets, SearchMetadata searchMetadata) { this.tweets = tweets; this.searchMetadata = searchMetadata; }}package com.twitter.sdk.android.core.models;import com.google.gson.annotations.SerializedName;public class SearchMetadata { @SerializedName("max_id") public final long maxId; @SerializedName("since_id") public final long sinceId; @SerializedName("refresh_url") public final String refreshUrl; @SerializedName("next_results") public final String nextResults; @SerializedName("count") public final long count; @SerializedName("completed_in") public final double completedIn; @SerializedName("since_id_str") public final String sinceIdStr; @SerializedName("query") public final String query; @SerializedName("max_id_str") public final String maxIdStr; public SearchMetadata(int maxId, int sinceId, String refreshUrl, String nextResults, int count, double completedIn, String sinceIdStr, String query, String maxIdStr) { this.maxId = maxId; this.sinceId = sinceId; this.refreshUrl = refreshUrl; this.nextResults = nextResults; this.count = count; this.completedIn = completedIn; this.sinceIdStr = sinceIdStr; this.query = query; this.maxIdStr = maxIdStr; }}package com.twitter.sdk.android.core.services;import com.twitter.sdk.android.core.services.params.Geocode;import com.twitter.sdk.android.core.models.Search;import retrofit2.Call;import retrofit2.http.GET;import retrofit2.http.Query;public interface SearchService {  @GET("/1.1/search/tweets.json?" + "tweet_mode=extended&include_cards=true&cards_platform=TwitterKit-13") Call<Search> tweets(@Query("q") String query, //EncodedQuery protects commas from encode @Query(value = "geocode", encoded = true) Geocode geocode, @Query("lang") String lang, @Query("locale") String locale, @Query("result_type") String resultType, @Query("count") Integer count, @Query("until") String until, @Query("since_id") Long sinceId, @Query("max_id") Long maxId, @Query("include_entities") Boolean includeEntities);}package com.twitter.sdk.android.tweetui;import com.twitter.sdk.android.core.Callback;import com.twitter.sdk.android.core.Result;import com.twitter.sdk.android.core.TwitterCore;import com.twitter.sdk.android.core.TwitterException;import com.twitter.sdk.android.core.models.Search;import com.twitter.sdk.android.core.models.Tweet;import java.util.List;import retrofit2.Call;public class SearchTimeline extends BaseTimeline implements Timeline<Tweet> { static final String FILTER_RETWEETS = " -filter:retweets"; // leading whitespace intentional private static final String SCRIBE_SECTION = "search"; final String query; final String resultType; final String languageCode; final Integer maxItemsPerRequest; SearchTimeline(TweetUi tweetUi, String query, String resultType, String languageCode, Integer maxItemsPerRequest) { super(tweetUi); this.languageCode = languageCode; this.maxItemsPerRequest = maxItemsPerRequest; this.resultType = resultType; // if the query is non-null append the filter Retweets modifier this.query = query == null ? null : query + FILTER_RETWEETS; }  @Override public void next(Long sinceId, Callback<TimelineResult<Tweet>> cb) { createSearchRequest(sinceId, null).enqueue(new SearchCallback(cb)); }  @Override public void previous(Long maxId, Callback<TimelineResult<Tweet>> cb) { // api quirk: search api provides results that are inclusive of the maxId iff // FILTER_RETWEETS is added to the query (which we currently always add), decrement the // maxId to get exclusive results createSearchRequest(null, decrementMaxId(maxId)).enqueue(new SearchCallback(cb)); } @Override String getTimelineType() { return SCRIBE_SECTION; } Call<Search> createSearchRequest(final Long sinceId, final Long maxId) { return TwitterCore.getInstance().getApiClient().getSearchService().tweets(query, null, languageCode, null, resultType, maxItemsPerRequest, null, sinceId, maxId, true); }  class SearchCallback extends Callback<Search> { final Callback<TimelineResult<Tweet>> cb;  SearchCallback(Callback<TimelineResult<Tweet>> cb) { this.cb = cb; } @Override public void success(Result<Search> result) { final List<Tweet> tweets = result.data.tweets; final TimelineResult<Tweet> timelineResult = new TimelineResult<>(new TimelineCursor(tweets), tweets); if (cb != null) { cb.success(new Result<>(timelineResult, result.response)); } } @Override public void failure(TwitterException exception) { if (cb != null) { cb.failure(exception); } } } public enum ResultType { RECENT("recent"), POPULAR("popular"), MIXED("mixed"), FILTERED("filtered"); final String type; ResultType(String type) { this.type = type; } }  public static class Builder { private TweetUi tweetUi; private String query; private String lang; private String resultType = ResultType.FILTERED.type; private Integer maxItemsPerRequest = 30;  public Builder() { this(TweetUi.getInstance()); }  public Builder(TweetUi tweetUi) { if (tweetUi == null) { throw new IllegalArgumentException("TweetUi instance must not be null"); } this.tweetUi = tweetUi; }  public Builder query(String query) { this.query = query; return this; }  public Builder resultType(ResultType resultType) { this.resultType = resultType.type; return this; }  public Builder languageCode(String languageCode) { this.lang = languageCode; return this; }  public Builder maxItemsPerRequest(Integer maxItemsPerRequest) { this.maxItemsPerRequest = maxItemsPerRequest; return this; }  public SearchTimeline build() { if (query == null) { throw new IllegalStateException("query must not be null"); } return new SearchTimeline(tweetUi, query, resultType, lang, maxItemsPerRequest); } }}package com.twitter.sdk.android.core;import com.google.gson.annotations.SerializedName;public class Session<T extends AuthToken> { @SerializedName("auth_token") private final T authToken; @SerializedName("id") private final long id; public Session(T authToken, long id) { if (authToken == null) { throw new IllegalArgumentException("AuthToken must not be null."); } this.authToken = authToken; this.id = id; } public T getAuthToken() { return authToken; } public long getId() { return id; } @Override public boolean equals(Object o) { if (this == o) return true; if (o == null || getClass() != o.getClass()) return false; final Session session = (Session) o; if (id != session.id) return false; return authToken != null ? authToken.equals(session.authToken) : session.authToken == null; } @Override public int hashCode() { int result = authToken != null ? authToken.hashCode() : 0; result = 31 * result + (int) (id ^ (id >>> 32)); return result; }}package com.twitter.sdk.android.core;import java.util.Map;public interface SessionManager<T extends Session> {  T getActiveSession();  void setActiveSession(T session);  void clearActiveSession();  T getSession(long id);  void setSession(long id, T session);  void clearSession(long id);  Map<Long, T> getSessionMap();}package com.twitter.sdk.android.core.internal;import android.app.Activity;import android.text.format.DateUtils;import io.fabric.sdk.android.ActivityLifecycleManager;import io.fabric.sdk.android.services.common.SystemCurrentTimeProvider;import com.twitter.sdk.android.core.Session;import com.twitter.sdk.android.core.SessionManager;import java.util.Calendar;import java.util.TimeZone;import java.util.concurrent.ExecutorService;public class SessionMonitor<T extends Session> { protected final MonitorState monitorState; private final SystemCurrentTimeProvider time; private final SessionManager<T> sessionManager; private final ExecutorService executorService; private final SessionVerifier sessionVerifier;  public SessionMonitor(SessionManager<T> sessionManager, ExecutorService executorService, SessionVerifier<T> sessionVerifier) { this(sessionManager, new SystemCurrentTimeProvider(), executorService, new MonitorState(), sessionVerifier); } SessionMonitor(SessionManager<T> sessionManager, SystemCurrentTimeProvider time, ExecutorService executorService, MonitorState monitorState, SessionVerifier sessionVerifier) { this.time = time; this.sessionManager = sessionManager; this.executorService = executorService; this.monitorState = monitorState; this.sessionVerifier = sessionVerifier; }  public void monitorActivityLifecycle(ActivityLifecycleManager activityLifecycleManager) { activityLifecycleManager.registerCallbacks(new ActivityLifecycleManager.Callbacks() { @Override public void onActivityStarted(Activity activity) { triggerVerificationIfNecessary(); } }); }  public void triggerVerificationIfNecessary() { final Session session = sessionManager.getActiveSession(); final long currentTime = time.getCurrentTimeMillis(); final boolean startVerification = session != null && monitorState.beginVerification(currentTime); if (startVerification) { executorService.submit(new Runnable() { @Override public void run() { verifyAll(); } }); } } protected void verifyAll() { for (T session : sessionManager.getSessionMap().values()) { sessionVerifier.verifySession(session); } monitorState.endVerification(time.getCurrentTimeMillis()); }  protected static class MonitorState { private static final long TIME_THRESHOLD_IN_MILLIS = 6 * DateUtils.HOUR_IN_MILLIS; public boolean verifying; public long lastVerification; private final Calendar utcCalendar; public MonitorState() { this.utcCalendar = Calendar.getInstance(TimeZone.getTimeZone("UTC")); } public synchronized boolean beginVerification(long currentTime) { final boolean isPastThreshold = currentTime - lastVerification > TIME_THRESHOLD_IN_MILLIS; final boolean dayHasChanged = !isOnSameDate(currentTime, lastVerification); if (!verifying && (isPastThreshold || dayHasChanged)) { return verifying = true; } return false; } public synchronized void endVerification(long currentTime) { verifying = false; lastVerification = currentTime; } private boolean isOnSameDate(long timeA, long timeB) { utcCalendar.setTimeInMillis(timeA); final int dayA = utcCalendar.get(Calendar.DAY_OF_YEAR); final int yearA = utcCalendar.get(Calendar.YEAR); utcCalendar.setTimeInMillis(timeB); final int dayB = utcCalendar.get(Calendar.DAY_OF_YEAR); final int yearB = utcCalendar.get(Calendar.YEAR); return dayA == dayB && yearA == yearB; } }}package com.twitter.sdk.android.core.internal;import com.twitter.sdk.android.core.Session;public interface SessionVerifier<T extends Session> { void verifySession(T session);}package com.twitter.sdk.android.core.identity;import android.app.Activity;import android.content.Context;import android.content.Intent;import android.content.pm.PackageManager;import android.os.Bundle;import android.os.ResultReceiver;import android.view.View;import android.widget.TextView;import com.twitter.sdk.android.core.R;import com.twitter.sdk.android.core.TwitterCore;import com.twitter.sdk.android.core.TwitterSession;import io.fabric.sdk.android.Fabric;public class ShareEmailActivity extends Activity { static final String EXTRA_RESULT_RECEIVER = "result_receiver"; static final String EXTRA_SESSION_ID = "session_id";  ShareEmailController controller; private TwitterSession session; @Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.tw__activity_share_email); try { final Intent startIntent = getIntent(); final ResultReceiver resultReceiver = getResultReceiver(startIntent); session = getSession(startIntent); controller = new ShareEmailController(new ShareEmailClient(session), resultReceiver); final TextView shareEmailDescView = (TextView) findViewById(R.id.tw__share_email_desc); setUpShareEmailDesc(this, shareEmailDescView); } catch (IllegalArgumentException e) { Fabric.getLogger().e(TwitterCore.TAG, "Failed to create ShareEmailActivity.", e); finish(); } } private ResultReceiver getResultReceiver(Intent intent) { final ResultReceiver resultReceiver = intent.getParcelableExtra(EXTRA_RESULT_RECEIVER); if (resultReceiver == null) { throw new IllegalArgumentException("ResultReceiver must not be null. This activity " + "should not be started directly."); } return resultReceiver; } private TwitterSession getSession(Intent intent) { // TODO: Make session parcelable and pass actual session. final long sessionId = intent.getLongExtra(EXTRA_SESSION_ID, TwitterSession.UNKNOWN_USER_ID); final TwitterSession session = TwitterCore.getInstance().getSessionManager() .getSession(sessionId); if (session == null) { throw new IllegalArgumentException("No TwitterSession for id:" + sessionId); } return session; } void setUpShareEmailDesc(Context context, TextView shareEmailDescView) { final PackageManager packageManager = context.getPackageManager(); shareEmailDescView.setText(getResources().getString(R.string.tw__share_email_desc, packageManager.getApplicationLabel(context.getApplicationInfo()), session.getUserName())); } public void onClickNotNow(View view) { controller.cancelRequest(); finish(); } public void onClickAllow(View view) { controller.executeRequest(); finish(); } @Override public void onBackPressed() { controller.cancelRequest(); super.onBackPressed(); }}package com.twitter.sdk.android.core.identity;import android.content.Context;import android.content.Intent;import android.content.pm.ApplicationInfo;import android.content.pm.PackageManager;import android.widget.Button;import android.widget.TextView;import io.fabric.sdk.android.FabricActivityTestCase;import io.fabric.sdk.android.FabricTestUtils;import com.twitter.sdk.android.core.Callback;import com.twitter.sdk.android.core.R;import com.twitter.sdk.android.core.SessionManager;import com.twitter.sdk.android.core.TwitterAuthConfig;import com.twitter.sdk.android.core.TwitterCore;import com.twitter.sdk.android.core.TwitterSession;import static org.mockito.Matchers.any;import static org.mockito.Mockito.mock;import static org.mockito.Mockito.verify;import static org.mockito.Mockito.when;public class ShareEmailActivityTest extends FabricActivityTestCase<ShareEmailActivity> { private static final String TEST_APP_NAME = "app name"; private static final String TEST_USER_NAME = "user name"; private static final long TEST_SESSION_ID = 1L; private static final long TEST_SESSION_ID2 = 2L; private Context context; private TwitterSession mockSession; private ShareEmailController mockController; public ShareEmailActivityTest() { super(ShareEmailActivity.class); } @Override protected void setUp() throws Exception { super.setUp(); context = getInstrumentation().getTargetContext(); final TwitterCore twitterCore = new TwitterCore(new TwitterAuthConfig("", "")); FabricTestUtils.resetFabric(); FabricTestUtils.with(context, twitterCore); mockSession = mock(TwitterSession.class); when(mockSession.getUserName()).thenReturn(TEST_USER_NAME); when(mockSession.getId()).thenReturn(TEST_SESSION_ID); mockController = mock(TestShareEmailController.class); final SessionManager<TwitterSession> sessionManager = TwitterCore.getInstance() .getSessionManager(); sessionManager.setActiveSession(mockSession); } @Override protected void tearDown() throws Exception { FabricTestUtils.resetFabric(); super.tearDown(); } private void init() { final ShareEmailResultReceiver resultReceiver = new ShareEmailResultReceiver(mock(Callback.class)); final Intent intent = new Intent(context, ShareEmailActivity.class) .putExtra(ShareEmailActivity.EXTRA_RESULT_RECEIVER, resultReceiver) .putExtra(ShareEmailActivity.EXTRA_SESSION_ID, TEST_SESSION_ID); init(intent); } private void init(Intent intent) { final ShareEmailActivity activity = startActivity(intent, null, null); activity.controller = mockController; } public void testOnCreate_extraResultReceiverMissing() { final Intent intent = new Intent(context, ShareEmailActivity.class); init(intent); assertTrue(isFinishCalled()); } public void testOnCreate_extraSessionIdMissing() { final ShareEmailResultReceiver resultReceiver = new ShareEmailResultReceiver(mock(Callback.class)); final Intent intent = new Intent(context, ShareEmailActivity.class) .putExtra(ShareEmailActivity.EXTRA_RESULT_RECEIVER, resultReceiver); init(intent); assertTrue(isFinishCalled()); } public void testOnCreate_extraSessionIdUnknown() { final ShareEmailResultReceiver resultReceiver = new ShareEmailResultReceiver(mock(Callback.class)); final Intent intent = new Intent(context, ShareEmailActivity.class) .putExtra(ShareEmailActivity.EXTRA_RESULT_RECEIVER, resultReceiver) .putExtra(ShareEmailActivity.EXTRA_SESSION_ID, TwitterSession.UNKNOWN_USER_ID); init(intent); assertTrue(isFinishCalled()); } public void testOnCreate_extraSessionIdNotFound() { final ShareEmailResultReceiver resultReceiver = new ShareEmailResultReceiver(mock(Callback.class)); final Intent intent = new Intent(context, ShareEmailActivity.class) .putExtra(ShareEmailActivity.EXTRA_RESULT_RECEIVER, resultReceiver) .putExtra(ShareEmailActivity.EXTRA_SESSION_ID, TEST_SESSION_ID2); init(intent); assertTrue(isFinishCalled()); } public void testOnClickNotNow() { init(); final Button button = (Button) getActivity().findViewById(R.id.tw__not_now_btn); button.performClick(); verify(mockController).cancelRequest(); } public void testOnClickAllow() { init(); final Button button = (Button) getActivity().findViewById(R.id.tw__allow_btn); button.performClick(); verify(mockController).executeRequest(); } public void testSetUpShareEmailDesc() { init(); final TextView textView = new TextView(context); final Context mockContext = mock(Context.class); final PackageManager mockPackageManager = mock(PackageManager.class); when(mockContext.getPackageManager()).thenReturn(mockPackageManager); when(mockPackageManager.getApplicationLabel(any(ApplicationInfo.class))) .thenReturn(TEST_APP_NAME); getActivity().setUpShareEmailDesc(mockContext, textView); assertEquals(context.getString(R.string.tw__share_email_desc, TEST_APP_NAME, TEST_USER_NAME), textView.getText().toString()); } public void testOnBackPressed() { init(); getActivity().onBackPressed(); verify(mockController).cancelRequest(); }}package com.twitter.sdk.android.core.identity;import android.app.Activity;import com.twitter.sdk.android.core.Callback;import com.twitter.sdk.android.core.TwitterApiClient;import com.twitter.sdk.android.core.TwitterSession;import com.twitter.sdk.android.core.models.User;import retrofit2.Call;import retrofit2.http.GET;import retrofit2.http.Query;class ShareEmailClient extends TwitterApiClient { static final int RESULT_CODE_CANCELED = Activity.RESULT_CANCELED; static final int RESULT_CODE_OK = Activity.RESULT_OK; static final int RESULT_CODE_ERROR = Activity.RESULT_FIRST_USER; static final String RESULT_DATA_EMAIL = "email"; static final String RESULT_DATA_MSG = "msg"; static final String RESULT_DATA_ERROR = "error"; ShareEmailClient(TwitterSession session) { super(session); }  protected void getEmail(Callback<User> callback) { getService(EmailService.class).verifyCredentials(true, true).enqueue(callback); } interface EmailService { @GET("/1.1/account/verify_credentials.json?include_email=true") Call<User> verifyCredentials( @Query("include_entities") Boolean includeEntities, @Query("skip_status") Boolean skipStatus); }}package com.twitter.sdk.android.core.identity;import io.fabric.sdk.android.FabricAndroidTestCase;import io.fabric.sdk.android.FabricTestUtils;import retrofit2.Call;import com.twitter.sdk.android.core.Callback;import com.twitter.sdk.android.core.TestFixtures;import com.twitter.sdk.android.core.TwitterAuthConfig;import com.twitter.sdk.android.core.TwitterCore;import com.twitter.sdk.android.core.TwitterSession;import com.twitter.sdk.android.core.models.User;import static org.mockito.Matchers.anyBoolean;import static org.mockito.Matchers.eq;import static org.mockito.Mockito.mock;import static org.mockito.Mockito.verify;import static org.mockito.Mockito.when;public class ShareEmailClientTest extends FabricAndroidTestCase { private ShareEmailClient.EmailService mockEmailService; private ShareEmailClient shareEmailClient; public void setUp() throws Exception { super.setUp(); FabricTestUtils.resetFabric(); FabricTestUtils.with(getContext(), new TwitterCore(new TwitterAuthConfig(TestFixtures.KEY, TestFixtures.SECRET))); mockEmailService = mock(ShareEmailClient.EmailService.class); when(mockEmailService.verifyCredentials(anyBoolean(), anyBoolean())) .thenReturn(mock(Call.class)); shareEmailClient = new ShareEmailClient(mock(TwitterSession.class)) { @Override protected <T> T getService(Class<T> cls) { if (cls.equals(EmailService.class)) { return (T) mockEmailService; } else { return super.getService(cls); } } }; } @Override protected void tearDown() throws Exception { FabricTestUtils.resetFabric(); super.tearDown(); } public void testGetEmail() throws Exception { final Callback<User> mockCallback = mock(Callback.class); shareEmailClient.getEmail(mockCallback); verify(mockEmailService).verifyCredentials(eq(true), eq(true)); }}package com.twitter.sdk.android.core.identity;import android.os.Bundle;import android.os.ResultReceiver;import com.twitter.sdk.android.core.Callback;import com.twitter.sdk.android.core.Result;import com.twitter.sdk.android.core.TwitterCore;import com.twitter.sdk.android.core.TwitterException;import com.twitter.sdk.android.core.models.User;import io.fabric.sdk.android.Fabric;class ShareEmailController { private static final String EMPTY_EMAIL = ""; private final ShareEmailClient emailClient; private final ResultReceiver resultReceiver; public ShareEmailController(ShareEmailClient emailClient, ResultReceiver resultReceiver) { this.emailClient = emailClient; this.resultReceiver = resultReceiver; } public void executeRequest() { emailClient.getEmail(newCallback()); } Callback<User> newCallback() { return new Callback<User>() { @Override public void success(Result<User> result) { handleSuccess(result.data); } @Override public void failure(TwitterException exception) { Fabric.getLogger().e(TwitterCore.TAG, "Failed to get email address.", exception); // Create new exception that can be safely serialized since Retrofit errors may // throw a NotSerializableException. sendResultCodeError(new TwitterException("Failed to get email address.")); } }; } void handleSuccess(User user) { if (user.email == null) { sendResultCodeError(new TwitterException("Your application may not have access to" + " email addresses or the user may not have an email address. To request" + " access, please visit https://support.twitter.com/forms/platform.")); } else if (EMPTY_EMAIL.equals(user.email)) { sendResultCodeError(new TwitterException("This user does not have an email address.")); } else { sendResultCodeOk(user.email); } } void sendResultCodeOk(String email) { final Bundle bundle = new Bundle(); bundle.putString(ShareEmailClient.RESULT_DATA_EMAIL, email); resultReceiver.send(ShareEmailClient.RESULT_CODE_OK, bundle); } void sendResultCodeError(TwitterException exception) { final Bundle bundle = new Bundle(); bundle.putSerializable(ShareEmailClient.RESULT_DATA_ERROR, exception); resultReceiver.send(ShareEmailClient.RESULT_CODE_ERROR, bundle); } public void cancelRequest() { final Bundle bundle = new Bundle(); bundle.putSerializable(ShareEmailClient.RESULT_DATA_MSG, "The user chose not to share their email address at this time."); resultReceiver.send(ShareEmailClient.RESULT_CODE_CANCELED, bundle); }}package com.twitter.sdk.android.core.identity;import android.os.Bundle;import android.os.ResultReceiver;import com.twitter.sdk.android.core.Callback;import com.twitter.sdk.android.core.Result;import com.twitter.sdk.android.core.TwitterException;class ShareEmailResultReceiver extends ResultReceiver { private final Callback<String> callback; public ShareEmailResultReceiver(Callback<String> callback) { super(null); if (callback == null) { throw new IllegalArgumentException("Callback must not be null"); } this.callback = callback; } @Override public void onReceiveResult(int resultCode, Bundle resultData) { switch (resultCode) { case ShareEmailClient.RESULT_CODE_OK: { callback.success(new Result<>( resultData.getString(ShareEmailClient.RESULT_DATA_EMAIL), null)); break; } case ShareEmailClient.RESULT_CODE_CANCELED: { callback.failure(new TwitterException(resultData.getString( ShareEmailClient.RESULT_DATA_MSG))); break; } case ShareEmailClient.RESULT_CODE_ERROR: { callback.failure((TwitterException) resultData.getSerializable( ShareEmailClient.RESULT_DATA_ERROR)); break; } default: { throw new IllegalArgumentException("Invalid result code " + resultCode); } } }}package com.twitter.sdk.android.tweetui;import android.content.Context;import android.content.Intent;import android.content.res.Resources;import android.view.View;import com.twitter.sdk.android.core.IntentUtils;import com.twitter.sdk.android.core.models.Tweet;import io.fabric.sdk.android.Fabric;class ShareTweetAction implements View.OnClickListener { final Tweet tweet; final TweetUi tweetUi; final TweetScribeClient tweetScribeClient; ShareTweetAction(Tweet tweet, TweetUi tweetUi) { this(tweet, tweetUi, new TweetScribeClientImpl(tweetUi)); } // For testing only ShareTweetAction(Tweet tweet, TweetUi tweetUi, TweetScribeClient tweetScribeClient) { super(); this.tweet = tweet; this.tweetUi = tweetUi; this.tweetScribeClient = tweetScribeClient; } @Override public void onClick(View v) { onClick(v.getContext(), v.getResources()); } void scribeShareAction() { tweetScribeClient.share(tweet); } void onClick(Context context, Resources resources) { if (tweet == null || tweet.user == null) return; scribeShareAction(); final String shareSubject = getShareSubject(resources); final String shareContent = getShareContent(resources); final Intent shareIntent = getShareIntent(shareSubject, shareContent); final String shareText = resources.getString(R.string.tw__share_tweet); final Intent chooser = Intent.createChooser(shareIntent, shareText); launchShareIntent(chooser, context); } String getShareContent(Resources resources) { return resources.getString(R.string.tw__share_content_format, tweet.user.screenName, tweet.id); } String getShareSubject(Resources resources) { return resources.getString(R.string.tw__share_subject_format, tweet.user.name, tweet.user.screenName); } void launchShareIntent(Intent chooser, Context context) { if (!IntentUtils.safeStartActivity(context, chooser)) { Fabric.getLogger().e(TweetUi.LOGTAG, "Activity cannot be found to handle share intent"); } } Intent getShareIntent(String subject, String content) { final Intent intent = new Intent(); intent.setAction(Intent.ACTION_SEND); intent.putExtra(Intent.EXTRA_SUBJECT, subject); intent.putExtra(Intent.EXTRA_TEXT, content); intent.setType("text/plain"); return intent; }}package com.twitter.sdk.android.tweetui.internal;import android.annotation.SuppressLint;import android.text.Layout;import android.text.Spanned;import android.view.MotionEvent;import android.view.View;import android.widget.TextView;public class SpanClickHandler { private final View view; private Layout layout; private float left; private float top; private HighlightedClickableSpan highlightedClickableSpan; public static void enableClicksOnSpans(TextView textView) { final SpanClickHandler helper = new SpanClickHandler(textView, null); textView.setOnTouchListener(new View.OnTouchListener() { @SuppressLint("ClickableViewAccessibility") @Override public boolean onTouch(View view, MotionEvent event) { final TextView textView = (TextView) view; final Layout layout = textView.getLayout(); if (layout != null) { helper.layout = layout; helper.left = textView.getTotalPaddingLeft() + textView.getScrollX(); helper.top = textView.getTotalPaddingTop() + textView.getScrollY(); return helper.handleTouchEvent(event); } return false; } }); }  public SpanClickHandler(View view, Layout layout) { this.view = view; this.layout = layout; }  public void setPosition(float left, float top) { this.left = left; this.top = top; }  public boolean handleTouchEvent(MotionEvent event) { final CharSequence text = layout.getText(); final Spanned spannedText = text instanceof Spanned ? (Spanned) text : null; if (spannedText == null) { return false; } final int action = (event.getAction() & MotionEvent.ACTION_MASK); final int x = (int) (event.getX() - left); final int y = (int) (event.getY() - top); if (x < 0 || x >= layout.getWidth() || y < 0 || y >= layout.getHeight()) { deselectSpan(); return false; } // Get the clicked line and check x is within the text on this line. final int line = layout.getLineForVertical(y); if (x < layout.getLineLeft(line) || x > layout.getLineRight(line)) { deselectSpan(); return false; } if (action == MotionEvent.ACTION_DOWN) { final int offset = layout.getOffsetForHorizontal(line, x); final HighlightedClickableSpan[] span = spannedText.getSpans(offset, offset, HighlightedClickableSpan.class); if (span.length > 0) { selectSpan(span[0]); return true; } } else if (action == MotionEvent.ACTION_UP) { final HighlightedClickableSpan selectedSpan = highlightedClickableSpan; if (selectedSpan != null) { selectedSpan.onClick(view); deselectSpan(); return true; } } return false; }  private void selectSpan(HighlightedClickableSpan span) { span.select(true); highlightedClickableSpan = span; invalidate(); }  private void deselectSpan() { final HighlightedClickableSpan selectedSpan = highlightedClickableSpan; if (selectedSpan != null && selectedSpan.isSelected()) { selectedSpan.select(false); highlightedClickableSpan = null; invalidate(); } } private void invalidate() { view.invalidate((int) left, (int) top, (int) left + layout.getWidth(), (int) top + layout.getHeight()); }}package com.twitter.sdk.android.core.identity;import android.app.Activity;import android.content.ComponentName;import android.content.Context;import android.content.Intent;import android.content.pm.PackageInfo;import android.content.pm.PackageManager;import android.content.pm.Signature;import io.fabric.sdk.android.Fabric;import com.twitter.sdk.android.core.Callback;import com.twitter.sdk.android.core.IntentUtils;import com.twitter.sdk.android.core.TwitterCore;import com.twitter.sdk.android.core.TwitterAuthConfig;import com.twitter.sdk.android.core.TwitterSession;class SSOAuthHandler extends AuthHandler { // Package name of the Twitter for Android application. static final String TWITTER_PACKAGE_NAME = "com.twitter.android"; // Package name of the Twitter Dogfood Android application. static final String DOGFOOD_PACKAGE_NAME = "com.twitter.android.beta"; // Class name of the Activity responsible for Single sign-on flow. static final String SSO_CLASS_NAME = TWITTER_PACKAGE_NAME + ".SingleSignOnActivity"; // Twitter for Android application signature static final String TWITTER_SIGNATURE = "3082025d308201c6a00302010202044bd76cce300d06092" + "a864886f70d01010505003073310b3009060355040613025553310b3009060355040813024341311630" + "140603550407130d53616e204672616e636973636f31163014060355040a130d547769747465722c204" + "96e632e310f300d060355040b13064d6f62696c65311630140603550403130d4c656c616e6420526563" + "686973301e170d3130303432373233303133345a170d3438303832353233303133345a3073310b30090" + "60355040613025553310b3009060355040813024341311630140603550407130d53616e204672616e63" + "6973636f31163014060355040a130d547769747465722c20496e632e310f300d060355040b13064d6f6" + "2696c65311630140603550403130d4c656c616e642052656368697330819f300d06092a864886f70d01" + "0101050003818d003081890281810086233c2e51c62232d49cc932e470713d63a6a1106b38f9e442e01" + "bc79ca4f95c72b2cb3f1369ef7dea6036bff7c4b2828cb3787e7657ad83986751ced5b131fcc6f413ef" + "b7334e32ed9787f9e9a249ae108fa66009ac7a7932c25d37e1e07d4f9f66aa494c270dbac87d261c966" + "8d321c2fba4ef2800e46671a597ff2eac5d7f0203010001300d06092a864886f70d0101050500038181" + "003e1f01cb6ea8be8d2cecef5cd2a64c97ba8728aa5f08f8275d00508d64d139b6a72c5716b40a040df" + "0eeeda04de9361107e123ee8d3dc05e70c8a355f46dbadf1235443b0b214c57211afd4edd147451c443" + "d49498d2a7ff27e45a99c39b9e47429a1dae843ba233bf8ca81296dbe1dc5c5434514d995b027924680" + "9392a219b"; // Twitter Android Dogfood application signature static final String DOGFOOD_SIGNATURE = "308203523082023aa00302010202044fd0006b300d06092a864" + "886f70d0101050500306b310b3009060355040613025553310b30090603550408130243413116301406" + "03550407130d53616e204672616e636973636f3110300e060355040a130754776974746572310f300d0" + "60355040b13064d6f62696c65311430120603550403130b4a6f6e617468616e204c65301e170d313230" + "3630373031313431395a170d3339313032343031313431395a306b310b3009060355040613025553310" + "b3009060355040813024341311630140603550407130d53616e204672616e636973636f3110300e0603" + "55040a130754776974746572310f300d060355040b13064d6f62696c65311430120603550403130b4a6" + "f6e617468616e204c6530820122300d06092a864886f70d01010105000382010f003082010a02820101" + "0089e6cbdfed4288a9c0a215d33d4fa978a5bdd20be426ef4b497d358a9fd1c6efec9684f059f6955e6" + "0e5fda1b5910bb2d097e7421a78f9c81e95cd8ef3bf50add7f8d9f073c0478736a6c7fd38c587155978" + "3a76420d37f3f874f2114ec02532e85587791d24037485b1b95ec8cbc75b52042867988b51c7c3589d5" + "b5972fd20a2e8a7c9ced986873f5008a418b2921daa7cfb78afc174eecdb8a79dc0961bea9740d09c46" + "56ac9b8c86263a788e35af1d4a3f86ce053a1aefb5369def91614a390219f896f378712376baa05934a" + "341798950e229f4f735b86004952b259f23cc9fc3b8c1bc8171984884dc92940e91f2e9a78a84a78f0c" + "2946b7e37bbf3b9b0203010001300d06092a864886f70d010105050003820101001cf15250365e66cc8" + "7bb5054de1661266cf87907841016b20dfa1f9f59842020cbc33f9b4d41717db0428d11696a0bade6a4" + "950a48cc4fa8ae56c850647379a5c2d977436b644162c453dd36b7745ccb9ff0b5fc070125024de73da" + "b6dcda5c69372e978a49865f569927199ed0f61d7cbee1839079a7da2e83f8c90f7421a8c81b3f17f1c" + "c05d52aedac9acd6e092ffd9ad572960e779a5b91a78e1aeb2b3c7b24464bd223c745e40abd74fc5863" + "10809520d183443fcca3c6ade3be458afedbd3325df9c0e552636e35bb55b240eb8c0ba3973c4fb8121" + "3f22363be2d70e85014650c2f4fc679747a7ec31ea7b08da7dd9b9ba279a7fbbc1bd440fbe831bf4"; private static final String EXTRA_CONSUMER_KEY = "ck"; private static final String EXTRA_CONSUMER_SECRET = "cs"; public SSOAuthHandler(TwitterAuthConfig authConfig, Callback<TwitterSession> callback, int requestCode) { super(authConfig, callback, requestCode); } @Override public boolean authorize(Activity activity) { return startAuthActivityForResult(activity); } private boolean startAuthActivityForResult(Activity activity) { final PackageManager pm = activity.getPackageManager(); final String packageName = availableSSOPackage(pm); if (packageName == null) { Fabric.getLogger().e(TwitterCore.TAG, "SSO app signature check failed", null); return false; } final ComponentName ssoActivity = new ComponentName(packageName, SSO_CLASS_NAME); final TwitterAuthConfig authConfig = getAuthConfig(); final Intent intent = new Intent().setComponent(ssoActivity); if (!IntentUtils.isActivityAvailable(activity, intent)) { Fabric.getLogger().e(TwitterCore.TAG, "SSO auth activity not found", null); return false; } intent.putExtra(EXTRA_CONSUMER_KEY, authConfig.getConsumerKey()) .putExtra(EXTRA_CONSUMER_SECRET, authConfig.getConsumerSecret()); try { activity.startActivityForResult(intent, requestCode); return true; } catch (Exception e) { Fabric.getLogger().e(TwitterCore.TAG, "SSO exception occurred", e); return false; } }  public static String availableSSOPackage(PackageManager pm) { if (checkAppSignature(pm, TWITTER_PACKAGE_NAME, TWITTER_SIGNATURE)) { return TWITTER_PACKAGE_NAME; } else if (checkAppSignature(pm, DOGFOOD_PACKAGE_NAME, DOGFOOD_SIGNATURE)) { return DOGFOOD_PACKAGE_NAME; } else { return null; } }  public static boolean isAvailable(Context context) { final PackageManager pm = context.getPackageManager(); return checkAppSignature(pm, TWITTER_PACKAGE_NAME, TWITTER_SIGNATURE) || checkAppSignature(pm, DOGFOOD_PACKAGE_NAME, DOGFOOD_SIGNATURE); } private static boolean checkAppSignature(PackageManager pm, String packageName, String requiredSignature) { PackageInfo p; try { p = pm.getPackageInfo(packageName, PackageManager.GET_SIGNATURES); } catch (PackageManager.NameNotFoundException e) { return false; } for (Signature s : p.signatures) { if (!requiredSignature.equals(s.toCharsString())) { return false; } } return true; }}package com.twitter.sdk.android.tweetcomposer;import com.twitter.sdk.android.core.models.Tweet;import retrofit2.Call;import retrofit2.http.Field;import retrofit2.http.FormUrlEncoded;import retrofit2.http.POST;public interface StatusesService { @FormUrlEncoded @POST("/1.1/statuses/update.json") Call<Tweet> update(@Field("status") String status, @Field("card_uri") String cardUri);}package com.twitter.sdk.android.core.internal.scribe;import com.google.gson.annotations.SerializedName;import java.util.Collections;import java.util.List;public class SyndicatedSdkImpressionEvent extends ScribeEvent { public static final String CLIENT_NAME = "android"; private static final String SCRIBE_CATEGORY = "syndicated_sdk_impression";  @SerializedName("external_ids") public final ExternalIds externalIds;  @SerializedName("device_id_created_at") public final long deviceIdCreatedAt;  @SerializedName("language") public final String language; public SyndicatedSdkImpressionEvent(EventNamespace eventNamespace, long timestamp, String language, String adId) { this(eventNamespace, timestamp, language, adId, Collections.<ScribeItem>emptyList()); } public SyndicatedSdkImpressionEvent(EventNamespace eventNamespace, long timestamp, String language, String adId, List<ScribeItem> items) { super(SCRIBE_CATEGORY, eventNamespace, timestamp, items); this.language = language; this.externalIds = new ExternalIds(adId); this.deviceIdCreatedAt = 0; // see field comment } public class ExternalIds {  @SerializedName("AD_ID") public final String adId; public ExternalIds(String adId) { this.adId = adId; } }}package com.twitter.sdk.android.core.internal.scribe;import com.google.gson.annotations.SerializedName;import java.util.List;public class SyndicationClientEvent extends ScribeEvent { public static final String CLIENT_NAME = "tfw"; private static final String SCRIBE_CATEGORY = "tfw_client_event";  @SerializedName("language") public final String language;  @SerializedName("event_info") public final String eventInfo;  @SerializedName("external_ids") public final ExternalIds externalIds; public SyndicationClientEvent(EventNamespace eventNamespace, String eventInfo, long timestamp, String language, String adId, List<ScribeItem> items) { super(SCRIBE_CATEGORY, eventNamespace, timestamp, items); this.language = language; this.eventInfo = eventInfo; externalIds = new ExternalIds(adId); } public class ExternalIds {  @SerializedName("6") public final String adId; public ExternalIds(String adId) { this.adId = adId; } }}package com.twitter.sdk.android.core.identity;public class TestAuthState extends AuthState {}package com.twitter.sdk.android.core;public final class TestFixtures { public static final String KEY = "key"; public static final String TOKEN = "token"; public static final String SECRET = "secret"; public static final long USER_ID = 11L;}package com.twitter.sdk.android.core.identity;import android.webkit.WebView;import android.widget.ProgressBar;import com.twitter.sdk.android.core.TwitterAuthConfig;import com.twitter.sdk.android.core.internal.oauth.OAuth1aService;public class TestOAuthController extends OAuthController { TestOAuthController(ProgressBar spinner, WebView webView, TwitterAuthConfig authConfig, OAuth1aService oAuth1aService, Listener listener) { super(spinner, webView, authConfig, oAuth1aService, listener); }}package com.twitter.sdk.android.core.identity;import com.twitter.sdk.android.core.TwitterSession;public class TestShareEmailClient extends ShareEmailClient { public TestShareEmailClient(TwitterSession session) { super(session); }}package com.twitter.sdk.android.core.identity;import android.os.ResultReceiver;public class TestShareEmailController extends ShareEmailController { public TestShareEmailController(ShareEmailClient emailClient, ResultReceiver resultReceiver) { super(emailClient, resultReceiver); }}package com.twitter.sdk.android.core.identity;import android.content.Context;import android.content.pm.PackageInfo;import android.content.pm.PackageManager;import android.content.pm.Signature;import static org.mockito.Mockito.*;public final class TestUtils { private TestUtils() { // Private constructor } public static void setupTwitterInstalled(Context mockContext) throws PackageManager.NameNotFoundException { setupTwitterInstalled(mockContext, SSOAuthHandler.TWITTER_SIGNATURE); } public static void setupTwitterInstalled(Context mockContext, String signature) throws PackageManager.NameNotFoundException { final PackageManager mockPm = mock(PackageManager.class); final PackageInfo mockPackageInfo = mock(PackageInfo.class); mockPackageInfo.signatures = new Signature[] { new Signature(signature) }; when(mockContext.getPackageManager()).thenReturn(mockPm); when(mockPm.getPackageInfo(SSOAuthHandler.TWITTER_PACKAGE_NAME, PackageManager.GET_SIGNATURES)).thenReturn(mockPackageInfo); when(mockPm.getPackageInfo(SSOAuthHandler.DOGFOOD_PACKAGE_NAME, PackageManager.GET_SIGNATURES)) .thenThrow(new PackageManager.NameNotFoundException()); } public static void setupNoSSOAppInstalled(Context mockContext) throws PackageManager.NameNotFoundException { final PackageManager mockPm = mock(PackageManager.class); when(mockContext.getPackageManager()).thenReturn(mockPm); when(mockPm.getPackageInfo(SSOAuthHandler.TWITTER_PACKAGE_NAME, PackageManager.GET_SIGNATURES)) .thenThrow(new PackageManager.NameNotFoundException()); when(mockPm.getPackageInfo(SSOAuthHandler.DOGFOOD_PACKAGE_NAME, PackageManager.GET_SIGNATURES)) .thenThrow(new PackageManager.NameNotFoundException()); }}package com.twitter.sdk.android.tweetui;import com.twitter.sdk.android.core.Callback;public interface Timeline<T> {  void next(Long minPosition, final Callback<TimelineResult<T>> cb);  void previous(Long maxPosition, final Callback<TimelineResult<T>> cb);}package com.twitter.sdk.android.tweetui;import com.twitter.sdk.android.core.models.Identifiable;import java.util.List;public class TimelineCursor { public final Long minPosition; public final Long maxPosition;  public TimelineCursor(Long minPosition, Long maxPosition) { this.minPosition = minPosition; this.maxPosition = maxPosition; }  TimelineCursor(List<? extends Identifiable> items) { this.minPosition = items.size() > 0 ? items.get(items.size() - 1).getId() : null; this.maxPosition = items.size() > 0 ? items.get(0).getId() : null; }}package com.twitter.sdk.android.tweetui.internal;import android.database.DataSetObservable;import android.database.DataSetObserver;import com.twitter.sdk.android.core.Callback;import com.twitter.sdk.android.core.Result;import com.twitter.sdk.android.core.TwitterException;import com.twitter.sdk.android.core.models.Identifiable;import com.twitter.sdk.android.tweetui.Timeline;import com.twitter.sdk.android.tweetui.TimelineResult;import java.util.ArrayList;import java.util.List;public class TimelineDelegate<T extends Identifiable> { // once capacity is exceeded, additional items will not be loaded static final long CAPACITY = 200L; // timeline that next and previous items are loaded from final Timeline<T> timeline; // Observable for Adapter DataSetObservers (for ListViews) final DataSetObservable listAdapterObservable; final TimelineStateHolder timelineStateHolder; List<T> itemList;  public TimelineDelegate(Timeline<T> timeline) { this(timeline, null, null); } TimelineDelegate(Timeline<T> timeline, DataSetObservable observable, List<T> items) { if (timeline == null) { throw new IllegalArgumentException("Timeline must not be null"); } this.timeline = timeline; this.timelineStateHolder = new TimelineStateHolder(); if (observable == null) { listAdapterObservable = new DataSetObservable(); } else { listAdapterObservable = observable; } if (items == null) { itemList = new ArrayList<>(); } else { itemList = items; } }  public void refresh(Callback<TimelineResult<T>> developerCb) { // reset scrollStateHolder cursors to be null, loadNext will get latest items timelineStateHolder.resetCursors(); // load latest timeline items and replace existing items loadNext(timelineStateHolder.positionForNext(), new RefreshCallback(developerCb, timelineStateHolder)); }  public void next(Callback<TimelineResult<T>> developerCb) { loadNext(timelineStateHolder.positionForNext(), new NextCallback(developerCb, timelineStateHolder)); }  public void previous() { loadPrevious(timelineStateHolder.positionForPrevious(), new PreviousCallback(timelineStateHolder)); }  public int getCount() { return itemList.size(); }  public T getItem(int position) { if (isLastPosition(position)) { previous(); } return itemList.get(position); }  public long getItemId(int position) { final Identifiable item = itemList.get(position); return item.getId(); }  public void setItemById(T item) { for (int i = 0; i < itemList.size(); i++) { if (item.getId() == itemList.get(i).getId()) { itemList.set(i, item); } } notifyDataSetChanged(); }  boolean withinMaxCapacity() { return itemList.size() < CAPACITY; }  boolean isLastPosition(int position) { return position == (itemList.size() - 1); }  void loadNext(Long minPosition, Callback<TimelineResult<T>> cb) { if (withinMaxCapacity()) { if (timelineStateHolder.startTimelineRequest()) { timeline.next(minPosition, cb); } else { cb.failure(new TwitterException("Request already in flight")); } } else { cb.failure(new TwitterException("Max capacity reached")); } }  void loadPrevious(Long maxPosition, Callback<TimelineResult<T>> cb) { if (withinMaxCapacity()) { if (timelineStateHolder.startTimelineRequest()) { timeline.previous(maxPosition, cb); } else { cb.failure(new TwitterException("Request already in flight")); } } else { cb.failure(new TwitterException("Max capacity reached")); } }  class DefaultCallback extends Callback<TimelineResult<T>> { final Callback<TimelineResult<T>> developerCallback; final TimelineStateHolder timelineStateHolder; DefaultCallback(Callback<TimelineResult<T>> developerCb, TimelineStateHolder timelineStateHolder) { this.developerCallback = developerCb; this.timelineStateHolder = timelineStateHolder; } @Override public void success(Result<TimelineResult<T>> result) { timelineStateHolder.finishTimelineRequest(); if (developerCallback != null) { developerCallback.success(result); } } @Override public void failure(TwitterException exception) { timelineStateHolder.finishTimelineRequest(); if (developerCallback != null) { developerCallback.failure(exception); } } }  class NextCallback extends DefaultCallback { NextCallback(Callback<TimelineResult<T>> developerCb, TimelineStateHolder timelineStateHolder) { super(developerCb, timelineStateHolder); } @Override public void success(Result<TimelineResult<T>> result) { if (result.data.items.size() > 0) { final ArrayList<T> receivedItems = new ArrayList<>(result.data.items); receivedItems.addAll(itemList); itemList = receivedItems; notifyDataSetChanged(); timelineStateHolder.setNextCursor(result.data.timelineCursor); } // do nothing when zero items are received. Subsequent 'next' call does not change. super.success(result); } }  class RefreshCallback extends NextCallback { RefreshCallback(Callback<TimelineResult<T>> developerCb, TimelineStateHolder timelineStateHolder) { super(developerCb, timelineStateHolder); } @Override public void success(Result<TimelineResult<T>> result) { if (result.data.items.size() > 0) { itemList.clear(); } super.success(result); } }  class PreviousCallback extends DefaultCallback { PreviousCallback(TimelineStateHolder timelineStateHolder) { super(null, timelineStateHolder); } @Override public void success(Result<TimelineResult<T>> result) { if (result.data.items.size() > 0) { itemList.addAll(result.data.items); notifyDataSetChanged(); timelineStateHolder.setPreviousCursor(result.data.timelineCursor); } // do nothing when zero items are received. Subsequent 'next' call does not change. super.success(result); } }   public void registerDataSetObserver(DataSetObserver observer) { listAdapterObservable.registerObserver(observer); }  public void unregisterDataSetObserver(DataSetObserver observer) { listAdapterObservable.unregisterObserver(observer); }  public void notifyDataSetChanged() { listAdapterObservable.notifyChanged(); }  public void notifyDataSetInvalidated() { listAdapterObservable.notifyInvalidated(); }}package com.twitter.sdk.android.tweetui;import android.content.Context;import android.database.DataSetObserver;import android.widget.BaseAdapter;import com.twitter.sdk.android.core.Callback;import com.twitter.sdk.android.core.models.Identifiable;import com.twitter.sdk.android.tweetui.internal.TimelineDelegate;abstract class TimelineListAdapter<T extends Identifiable> extends BaseAdapter { protected final Context context; protected final TimelineDelegate<T> delegate;  public TimelineListAdapter(Context context, Timeline<T> timeline) { this(context, new TimelineDelegate<>(timeline)); } TimelineListAdapter(Context context, TimelineDelegate<T> delegate) { if (context == null) { throw new IllegalArgumentException("Context must not be null"); } this.context = context; this.delegate = delegate; delegate.refresh(null); }  public void refresh(Callback<TimelineResult<T>> cb) { delegate.refresh(cb); } @Override public int getCount() { return delegate.getCount(); } @Override public T getItem(int position) { return delegate.getItem(position); } @Override public long getItemId(int position) { return delegate.getItemId(position); } @Override public void registerDataSetObserver(DataSetObserver observer) { delegate.registerDataSetObserver(observer); } @Override public void unregisterDataSetObserver(DataSetObserver observer) { delegate.unregisterDataSetObserver(observer); } @Override public void notifyDataSetChanged() { delegate.notifyDataSetChanged(); } @Override public void notifyDataSetInvalidated() { delegate.notifyDataSetInvalidated(); }}package com.twitter.sdk.android.tweetui;import java.util.List;public class TimelineResult<T> { public final TimelineCursor timelineCursor; public final List<T> items;  public TimelineResult(TimelineCursor timelineCursor, List<T> items) { this.timelineCursor = timelineCursor; this.items = items; }}package com.twitter.sdk.android.tweetui.internal;import com.twitter.sdk.android.tweetui.TimelineCursor;import java.util.concurrent.atomic.AtomicBoolean;public class TimelineStateHolder { // cursor for Timeline 'next' calls TimelineCursor nextCursor; // cursor for Timeline 'previous' calls TimelineCursor previousCursor; // true while a request is in flight, false otherwise public final AtomicBoolean requestInFlight = new AtomicBoolean(false); public TimelineStateHolder() { // intentionally blank }  public TimelineStateHolder(TimelineCursor nextCursor, TimelineCursor previousCursor) { this.nextCursor = nextCursor; this.previousCursor = previousCursor; }  public void resetCursors() { nextCursor = null; previousCursor = null; }  public Long positionForNext() { return nextCursor == null ? null : nextCursor.maxPosition; }  public Long positionForPrevious() { return previousCursor == null ? null : previousCursor.minPosition; }  public void setNextCursor(TimelineCursor timelineCursor) { nextCursor = timelineCursor; setCursorsIfNull(timelineCursor); }  public void setPreviousCursor(TimelineCursor timelineCursor) { previousCursor = timelineCursor; setCursorsIfNull(timelineCursor); }  public void setCursorsIfNull(TimelineCursor timelineCursor) { if (nextCursor == null) { nextCursor = timelineCursor; } if (previousCursor == null) { previousCursor = timelineCursor; } }  public boolean startTimelineRequest() { return requestInFlight.compareAndSet(false, true); }  public void finishTimelineRequest() { requestInFlight.set(false); }}package com.twitter.sdk.android.tweetui;import android.content.Context;import android.content.res.TypedArray;import android.util.AttributeSet;import android.widget.ImageButton;public class ToggleImageButton extends ImageButton { private static final int[] STATE_TOGGLED_ON = {R.attr.state_toggled_on}; boolean isToggledOn; String contentDescriptionOn; String contentDescriptionOff; final boolean toggleOnClick; public ToggleImageButton(Context context) { this(context, null); } public ToggleImageButton(Context context, AttributeSet attrs) { this(context, attrs, 0); } public ToggleImageButton(Context context, AttributeSet attrs, int defStyle) { super(context, attrs, defStyle); TypedArray a = null; try { a = context.getTheme().obtainStyledAttributes(attrs, R.styleable.ToggleImageButton, defStyle, 0); final String contentDescriptionOn = a.getString(R.styleable.ToggleImageButton_contentDescriptionOn); final String contentDescriptionOff = a.getString(R.styleable.ToggleImageButton_contentDescriptionOff); this.contentDescriptionOn = contentDescriptionOn == null ? (String) getContentDescription() : contentDescriptionOn; this.contentDescriptionOff = contentDescriptionOff == null ? (String) getContentDescription() : contentDescriptionOff; toggleOnClick = a.getBoolean(R.styleable.ToggleImageButton_toggleOnClick, true); setToggledOn(false); } finally { if (a != null) { a.recycle(); } } } @Override public int[] onCreateDrawableState(int extraSpace) { final int[] drawableState = super.onCreateDrawableState(extraSpace + 2); if (isToggledOn) { mergeDrawableStates(drawableState, STATE_TOGGLED_ON); } return drawableState; } @Override public boolean performClick() { if (toggleOnClick) { toggle(); } return super.performClick(); } public void setToggledOn(boolean isToggledOn) { this.isToggledOn = isToggledOn; setContentDescription(isToggledOn ? contentDescriptionOn : contentDescriptionOff); refreshDrawableState(); } public void toggle() { setToggledOn(!isToggledOn); } public boolean isToggledOn() { return isToggledOn; }}package com.twitter.sdk.android.core.models;import com.google.gson.annotations.SerializedName;import java.util.List;public class Tweet implements Identifiable { public static final long INVALID_ID = -1L;  @SerializedName("coordinates") public final Coordinates coordinates;  @SerializedName("created_at") public final String createdAt;  @SerializedName("current_user_retweet") public final Object currentUserRetweet;  @SerializedName("entities") public final TweetEntities entities;  @SerializedName("extended_entities") public final TweetEntities extendedEtities;  @SerializedName("favorite_count") public final Integer favoriteCount;  @SerializedName("favorited") public final boolean favorited;  @SerializedName("filter_level") public final String filterLevel;  @SerializedName("id") public final long id;  @SerializedName("id_str") public final String idStr;  @SerializedName("in_reply_to_screen_name") public final String inReplyToScreenName;  @SerializedName("in_reply_to_status_id") public final long inReplyToStatusId;  @SerializedName("in_reply_to_status_id_str") public final String inReplyToStatusIdStr;  @SerializedName("in_reply_to_user_id") public final long inReplyToUserId;  @SerializedName("in_reply_to_user_id_str") public final String inReplyToUserIdStr;  @SerializedName("lang") public final String lang;  @SerializedName("place") public final Place place;  @SerializedName("possibly_sensitive") public final boolean possiblySensitive;  @SerializedName("scopes") public final Object scopes;  @SerializedName("quoted_status_id") public final long quotedStatusId;  @SerializedName("quoted_status_id_str") public final String quotedStatusIdStr;  @SerializedName("quoted_status") public final Tweet quotedStatus;  @SerializedName("retweet_count") public final int retweetCount;  @SerializedName("retweeted") public final boolean retweeted;  @SerializedName("retweeted_status") public final Tweet retweetedStatus;  @SerializedName("source") public final String source;  @SerializedName(value = "text", alternate = {"full_text"}) public final String text;  @SerializedName("display_text_range") public final List<Integer> displayTextRange;  @SerializedName("truncated") public final boolean truncated;  @SerializedName("user") public final User user;  @SerializedName("withheld_copyright") public final boolean withheldCopyright;  @SerializedName("withheld_in_countries") public final List<String> withheldInCountries;  @SerializedName("withheld_scope") public final String withheldScope;  @SerializedName("card") public final Card card; public Tweet(Coordinates coordinates, String createdAt, Object currentUserRetweet, TweetEntities entities, TweetEntities extendedEtities, Integer favoriteCount, boolean favorited, String filterLevel, long id, String idStr, String inReplyToScreenName, long inReplyToStatusId, String inReplyToStatusIdStr, long inReplyToUserId, String inReplyToUserIdStr, String lang, Place place, boolean possiblySensitive, Object scopes, long quotedStatusId, String quotedStatusIdStr, Tweet quotedStatus, int retweetCount, boolean retweeted, Tweet retweetedStatus, String source, String text, List<Integer> displayTextRange, boolean truncated, User user, boolean withheldCopyright, List<String> withheldInCountries, String withheldScope, Card card) { this.coordinates = coordinates; this.createdAt = createdAt; this.currentUserRetweet = currentUserRetweet; this.entities = entities; this.extendedEtities = extendedEtities; this.favoriteCount = favoriteCount; this.favorited = favorited; this.filterLevel = filterLevel; this.id = id; this.idStr = idStr; this.inReplyToScreenName = inReplyToScreenName; this.inReplyToStatusId = inReplyToStatusId; this.inReplyToStatusIdStr = inReplyToStatusIdStr; this.inReplyToUserId = inReplyToUserId; this.inReplyToUserIdStr = inReplyToUserIdStr; this.lang = lang; this.place = place; this.possiblySensitive = possiblySensitive; this.scopes = scopes; this.quotedStatusId = quotedStatusId; this.quotedStatusIdStr = quotedStatusIdStr; this.quotedStatus = quotedStatus; this.retweetCount = retweetCount; this.retweeted = retweeted; this.retweetedStatus = retweetedStatus; this.source = source; this.text = text; this.displayTextRange = displayTextRange; this.truncated = truncated; this.user = user; this.withheldCopyright = withheldCopyright; this.withheldInCountries = withheldInCountries; this.withheldScope = withheldScope; this.card = card; } @Override public long getId() { return this.id; } @Override public boolean equals(Object o) { if (o == null) return false; if (!(o instanceof Tweet)) return false; final Tweet other = (Tweet) o; return this.id == other.id; } @Override public int hashCode() { return (int) this.id; }}package com.twitter.sdk.android.tweetui;import android.content.Context;import android.util.AttributeSet;import android.widget.ImageButton;import android.widget.LinearLayout;import com.twitter.sdk.android.core.Callback;import com.twitter.sdk.android.core.models.Tweet;public class TweetActionBarView extends LinearLayout { final DependencyProvider dependencyProvider; ToggleImageButton likeButton; ImageButton shareButton; Callback<Tweet> actionCallback; public TweetActionBarView(Context context) { this(context, null, new DependencyProvider()); } public TweetActionBarView(Context context, AttributeSet attrs) { this(context, attrs, new DependencyProvider()); } TweetActionBarView(Context context, AttributeSet attrs, DependencyProvider dependencyProvider) { super(context, attrs); this.dependencyProvider = dependencyProvider; } @Override protected void onFinishInflate() { super.onFinishInflate(); findSubviews(); }  void setOnActionCallback(Callback<Tweet> actionCallback) { this.actionCallback = actionCallback; } void findSubviews() { likeButton = (ToggleImageButton) findViewById(R.id.tw__tweet_like_button); shareButton = (ImageButton) findViewById(R.id.tw__tweet_share_button); }  void setTweet(Tweet tweet) { setLike(tweet); setShare(tweet); } void setLike(Tweet tweet) { final TweetUi tweetUi = dependencyProvider.getTweetUi(); if (tweet != null) { likeButton.setToggledOn(tweet.favorited); final LikeTweetAction likeTweetAction = new LikeTweetAction(tweet, tweetUi, actionCallback); likeButton.setOnClickListener(likeTweetAction); } } void setShare(Tweet tweet) { final TweetUi tweetUi = dependencyProvider.getTweetUi(); if (tweet != null) { shareButton.setOnClickListener(new ShareTweetAction(tweet, tweetUi)); } }  static class DependencyProvider {  TweetUi getTweetUi() { return TweetUi.getInstance(); } }}package com.twitter.sdk.android.core.models;import java.util.Collections;import java.util.List;public class TweetBuilder { private Coordinates coordinates; private String createdAt; private Object currentUserRetweet; private TweetEntities entities; private TweetEntities extendedEtities; private Integer favoriteCount; private boolean favorited; private String filterLevel; private long id = Tweet.INVALID_ID; private String idStr; private String inReplyToScreenName; private long inReplyToStatusId; private String inReplyToStatusIdStr; private long inReplyToUserId; private String inReplyToUserIdStr; private String lang; private Place place; private boolean possiblySensitive; private Object scopes; private long quotedStatusId; private String quotedStatusIdStr; private Tweet quotedStatus; private int retweetCount; private boolean retweeted; private Tweet retweetedStatus; private String source; private String text; private List<Integer> displayTextRange = Collections.EMPTY_LIST; private boolean truncated; private User user; private boolean withheldCopyright; private List<String> withheldInCountries = Collections.EMPTY_LIST; private String withheldScope; private Card card; public TweetBuilder setCoordinates(Coordinates coordinates) { this.coordinates = coordinates; return this; } public TweetBuilder setCreatedAt(String createdAt) { this.createdAt = createdAt; return this; } public TweetBuilder setCurrentUserRetweet(Object currentUserRetweet) { this.currentUserRetweet = currentUserRetweet; return this; } public TweetBuilder setEntities(TweetEntities entities) { this.entities = entities; return this; } public TweetBuilder setExtendedEntities(TweetEntities extendedEtities) { this.extendedEtities = extendedEtities; return this; } public TweetBuilder setFavoriteCount(Integer favoriteCount) { this.favoriteCount = favoriteCount; return this; } public TweetBuilder setFavorited(boolean favorited) { this.favorited = favorited; return this; } public TweetBuilder setFilterLevel(String filterLevel) { this.filterLevel = filterLevel; return this; } public TweetBuilder setId(long id) { this.id = id; return this; } public TweetBuilder setIdStr(String idStr) { this.idStr = idStr; return this; } public TweetBuilder setInReplyToScreenName(String inReplyToScreenName) { this.inReplyToScreenName = inReplyToScreenName; return this; } public TweetBuilder setInReplyToStatusId(long inReplyToStatusId) { this.inReplyToStatusId = inReplyToStatusId; return this; } public TweetBuilder setInReplyToStatusIdStr(String inReplyToStatusIdStr) { this.inReplyToStatusIdStr = inReplyToStatusIdStr; return this; } public TweetBuilder setInReplyToUserId(long inReplyToUserId) { this.inReplyToUserId = inReplyToUserId; return this; } public TweetBuilder setInReplyToUserIdStr(String inReplyToUserIdStr) { this.inReplyToUserIdStr = inReplyToUserIdStr; return this; } public TweetBuilder setLang(String lang) { this.lang = lang; return this; } public TweetBuilder setPlace(Place place) { this.place = place; return this; } public TweetBuilder setPossiblySensitive(boolean possiblySensitive) { this.possiblySensitive = possiblySensitive; return this; } public TweetBuilder setScopes(Object scopes) { this.scopes = scopes; return this; } public TweetBuilder setQuotedStatusId(long quotedStatusId) { this.quotedStatusId = quotedStatusId; return this; } public TweetBuilder setQuotedStatusIdStr(String quotedStatusIdStr) { this.quotedStatusIdStr = quotedStatusIdStr; return this; } public TweetBuilder setQuotedStatus(Tweet quotedStatus) { this.quotedStatus = quotedStatus; return this; } public TweetBuilder setRetweetCount(int retweetCount) { this.retweetCount = retweetCount; return this; } public TweetBuilder setRetweeted(boolean retweeted) { this.retweeted = retweeted; return this; } public TweetBuilder setRetweetedStatus(Tweet retweetedStatus) { this.retweetedStatus = retweetedStatus; return this; } public TweetBuilder setSource(String source) { this.source = source; return this; } public TweetBuilder setText(String text) { this.text = text; return this; } public TweetBuilder setDisplayTextRange(List<Integer> displayTextRange) { this.displayTextRange = displayTextRange; return this; } public TweetBuilder setTruncated(boolean truncated) { this.truncated = truncated; return this; } public TweetBuilder setUser(User user) { this.user = user; return this; } public TweetBuilder setWithheldCopyright(boolean withheldCopyright) { this.withheldCopyright = withheldCopyright; return this; } public TweetBuilder setWithheldInCountries(List<String> withheldInCountries) { this.withheldInCountries = withheldInCountries; return this; } public TweetBuilder setWithheldScope(String withheldScope) { this.withheldScope = withheldScope; return this; } public TweetBuilder setCard(Card card) { this.card = card; return this; } public TweetBuilder copy(Tweet tweet) { this.coordinates = tweet.coordinates; this.createdAt = tweet.createdAt; this.currentUserRetweet = tweet.currentUserRetweet; this.entities = tweet.entities; this.extendedEtities = tweet.extendedEtities; this.favoriteCount = tweet.favoriteCount; this.favorited = tweet.favorited; this.filterLevel = tweet.filterLevel; this.id = tweet.id; this.idStr = tweet.idStr; this.inReplyToScreenName = tweet.inReplyToScreenName; this.inReplyToStatusId = tweet.inReplyToStatusId; this.inReplyToStatusIdStr = tweet.inReplyToStatusIdStr; this.inReplyToUserId = tweet.inReplyToUserId; this.inReplyToUserIdStr = tweet.inReplyToStatusIdStr; this.lang = tweet.lang; this.place = tweet.place; this.possiblySensitive = tweet.possiblySensitive; this.scopes = tweet.scopes; this.quotedStatusId = tweet.quotedStatusId; this.quotedStatusIdStr = tweet.quotedStatusIdStr; this.quotedStatus = tweet.quotedStatus; this.retweetCount = tweet.retweetCount; this.retweeted = tweet.retweeted; this.retweetedStatus = tweet.retweetedStatus; this.source = tweet.source; this.text = tweet.text; this.displayTextRange = tweet.displayTextRange; this.truncated = tweet.truncated; this.user = tweet.user; this.withheldCopyright = tweet.withheldCopyright; this.withheldInCountries = tweet.withheldInCountries; this.withheldScope = tweet.withheldScope; this.card = tweet.card; return this; } public Tweet build() { return new Tweet(coordinates, createdAt, currentUserRetweet, entities, extendedEtities, favoriteCount, favorited, filterLevel, id, idStr, inReplyToScreenName, inReplyToStatusId, inReplyToStatusIdStr, inReplyToUserId, inReplyToUserIdStr, lang, place, possiblySensitive, scopes, quotedStatusId, quotedStatusIdStr, quotedStatus, retweetCount, retweeted, retweetedStatus, source, text, displayTextRange, truncated, user, withheldCopyright, withheldInCountries, withheldScope, card); }}package com.twitter.sdk.android.tweetcomposer;import android.content.Context;import android.content.Intent;import android.content.pm.PackageManager;import android.content.pm.ResolveInfo;import android.net.Uri;import android.text.TextUtils;import com.twitter.sdk.android.core.GuestSessionProvider;import com.twitter.sdk.android.core.Session;import com.twitter.sdk.android.core.SessionManager;import com.twitter.sdk.android.core.TwitterCore;import com.twitter.sdk.android.core.TwitterSession;import com.twitter.sdk.android.core.internal.scribe.DefaultScribeClient;import io.fabric.sdk.android.Fabric;import io.fabric.sdk.android.Kit;import io.fabric.sdk.android.services.concurrency.DependsOn;import io.fabric.sdk.android.services.network.UrlUtils;import java.net.URL;import java.util.List;import java.util.concurrent.ConcurrentHashMap;@DependsOn(TwitterCore.class)public class TweetComposer extends Kit<Void> { private static final String MIME_TYPE_PLAIN_TEXT = "text/plain"; private static final String MIME_TYPE_JPEG = "image/jpeg"; private static final String TWITTER_PACKAGE_NAME = "com.twitter.android"; private static final String WEB_INTENT = "https://twitter.com/intent/tweet?text=%s&url=%s"; private static final String KIT_SCRIBE_NAME = "TweetComposer"; private final ConcurrentHashMap<Session, ComposerApiClient> apiClients; String advertisingId; SessionManager<TwitterSession> sessionManager; GuestSessionProvider guestSessionProvider; private ScribeClient scribeClient; public TweetComposer() { this.apiClients = new ConcurrentHashMap<>(); scribeClient = new ScribeClientImpl(null); } @Override public String getVersion() { return BuildConfig.VERSION_NAME + "." + BuildConfig.BUILD_NUMBER; } protected boolean onPreExecute() { sessionManager = TwitterCore.getInstance().getSessionManager(); guestSessionProvider = TwitterCore.getInstance().getGuestSessionProvider(); return super.onPreExecute(); } @Override protected Void doInBackground() { advertisingId = getIdManager().getAdvertisingId(); scribeClient = new ScribeClientImpl(new DefaultScribeClient(this, KIT_SCRIBE_NAME, sessionManager, guestSessionProvider, getIdManager())); return null; } @Override public String getIdentifier() { return BuildConfig.GROUP + ":" + BuildConfig.ARTIFACT_ID; } public ComposerApiClient getApiClient(TwitterSession session) { checkInitialized(); if (!apiClients.containsKey(session)) { apiClients.putIfAbsent(session, new ComposerApiClient(session)); } return apiClients.get(session); } public static TweetComposer getInstance() { checkInitialized(); return Fabric.getKit(TweetComposer.class); } protected ScribeClient getScribeClient() { return scribeClient; } private static void checkInitialized() { if (Fabric.getKit(TweetComposer.class) == null) { throw new IllegalStateException("Must start Twitter Kit with Fabric.with() first"); } } String getAdvertisingId() {  return advertisingId; }  public static class Builder { private final Context context; private String text; private URL url; private Uri imageUri;  public Builder(Context context) { if (context == null) { throw new IllegalArgumentException("Context must not be null."); } this.context = context; }  public Builder text(String text) { if (text == null) { throw new IllegalArgumentException("text must not be null."); } if (this.text != null) { throw new IllegalStateException("text already set."); } this.text = text; return this; }  public Builder url(URL url) { if (url == null) { throw new IllegalArgumentException("url must not be null."); } if (this.url != null) { throw new IllegalStateException("url already set."); } this.url = url; return this; }  public Builder image(Uri imageUri) { if (imageUri == null) { throw new IllegalArgumentException("imageUri must not be null."); } if (this.imageUri != null) { throw new IllegalStateException("imageUri already set."); } this.imageUri = imageUri; return this; }  public Intent createIntent() { Intent intent = createTwitterIntent(); if (intent == null) { intent = createWebIntent(); } return intent; } Intent createTwitterIntent() { final Intent intent = new Intent(Intent.ACTION_SEND); final StringBuilder builder = new StringBuilder(); if (!TextUtils.isEmpty(text)) { builder.append(text); } if (url != null) { if (builder.length() > 0) { builder.append(' '); } builder.append(url.toString()); } intent.putExtra(Intent.EXTRA_TEXT, builder.toString()); intent.setType(MIME_TYPE_PLAIN_TEXT); if (imageUri != null) { intent.putExtra(Intent.EXTRA_STREAM, imageUri); intent.setType(MIME_TYPE_JPEG); } final PackageManager packManager = context.getPackageManager(); final List<ResolveInfo> resolvedInfoList = packManager.queryIntentActivities(intent, PackageManager.MATCH_DEFAULT_ONLY); for (ResolveInfo resolveInfo: resolvedInfoList){ if (resolveInfo.activityInfo.packageName.startsWith(TWITTER_PACKAGE_NAME)){ intent.setClassName(resolveInfo.activityInfo.packageName, resolveInfo.activityInfo.name); return intent; } } return null; } Intent createWebIntent() { final String url = (this.url == null ? "" : this.url.toString()); final String tweetUrl = String.format(WEB_INTENT, UrlUtils.urlEncode(text), UrlUtils.urlEncode(url)); return new Intent(Intent.ACTION_VIEW, Uri.parse(tweetUrl)); }  public void show() { final Intent intent = createIntent(); context.startActivity(intent); } }}package com.twitter.sdk.android.tweetui;import android.content.res.Resources;import android.text.format.DateUtils;import java.text.ParseException;import java.text.SimpleDateFormat;import java.util.Calendar;import java.util.Date;import java.util.Locale;// Cribbed from twitter-android-internal, renamed and formatted to our standards// methods here should only be accessed on the main threadfinal class TweetDateUtils { // Sat Mar 14 02:34:20 +0000 2009 static final SimpleDateFormat DATE_TIME_RFC822 = new SimpleDateFormat("EEE MMM dd HH:mm:ss Z yyyy", Locale.ENGLISH); static final SimpleDateFormat RELATIVE_DATE_FORMAT = new SimpleDateFormat("MM/dd/yy", Locale.ENGLISH); static final long INVALID_DATE = -1; private TweetDateUtils() {} static long apiTimeToLong(String apiTime) { if (apiTime == null) return INVALID_DATE; try { return DATE_TIME_RFC822.parse(apiTime).getTime(); } catch (ParseException e) { return INVALID_DATE; } } static boolean isValidTimestamp(String timestamp) { return TweetDateUtils.apiTimeToLong(timestamp) != TweetDateUtils.INVALID_DATE; }  public static String dotPrefix(String timestamp) { if (timestamp.charAt(0) == ' ') { return timestamp; } return " " + timestamp; }  static String getRelativeTimeString(Resources res, long currentTimeMillis, long timestamp) { final long diff = currentTimeMillis - timestamp; if (diff >= 0) { if (diff < DateUtils.MINUTE_IN_MILLIS) { // Less than a minute ago final int secs = (int) (diff / 1000); return res.getQuantityString(R.plurals.tw__time_secs, secs, secs); } else if (diff < DateUtils.HOUR_IN_MILLIS) { // Less than an hour ago final int mins = (int) (diff / DateUtils.MINUTE_IN_MILLIS); return res.getQuantityString(R.plurals.tw__time_mins, mins, mins); } else if (diff < DateUtils.DAY_IN_MILLIS) { // Less than a day ago final int hours = (int) (diff / DateUtils.HOUR_IN_MILLIS); return res.getQuantityString(R.plurals.tw__time_hours, hours, hours); } else { final Calendar now = Calendar.getInstance(); now.setTimeInMillis(currentTimeMillis); final Calendar c = Calendar.getInstance(); c.setTimeInMillis(timestamp); final Date d = new Date(timestamp); if (now.get(Calendar.YEAR) == c.get(Calendar.YEAR)) { // Same year RELATIVE_DATE_FORMAT.applyPattern( res.getString(R.string.tw__relative_date_format_short)); } else { // Outside of our year RELATIVE_DATE_FORMAT.applyPattern( res.getString(R.string.tw__relative_date_format_long)); } return RELATIVE_DATE_FORMAT.format(d); } } RELATIVE_DATE_FORMAT.applyPattern(res.getString( R.string.tw__relative_date_format_long)); return RELATIVE_DATE_FORMAT.format(new Date(timestamp)); }}package com.twitter.sdk.android.core.models;import com.google.gson.annotations.SerializedName;import java.util.Collections;import java.util.List;public class TweetEntities {  @SerializedName("urls") public final List<UrlEntity> urls;  @SerializedName("user_mentions") public final List<MentionEntity> userMentions;  @SerializedName("media") public final List<MediaEntity> media;  @SerializedName("hashtags") public final List<HashtagEntity> hashtags; public TweetEntities(List<UrlEntity> urls, List<MentionEntity> userMentions, List<MediaEntity> media, List<HashtagEntity> hashtags) { this.urls = getSafeList(urls); this.userMentions = getSafeList(userMentions); this.media = getSafeList(media); this.hashtags = getSafeList(hashtags); } private <T> List<T> getSafeList(List<T> entities) { // Entities may be null if Gson does not find object to parse. When that happens, make sure // to return an empty list. if (entities == null) { return Collections.EMPTY_LIST; } else { return Collections.unmodifiableList(entities); } }}package com.twitter.sdk.android.tweetui;import com.twitter.sdk.android.core.models.Tweet;public interface TweetLinkClickListener {  void onLinkClick(Tweet tweet, String url);}package com.twitter.sdk.android.tweetui;import com.twitter.sdk.android.core.models.MediaEntity;import com.twitter.sdk.android.core.models.Tweet;public interface TweetMediaClickListener {  void onMediaEntityClick(Tweet tweet, MediaEntity entity);}package com.twitter.sdk.android.tweetui.internal;import android.os.Build;import com.twitter.sdk.android.core.models.MediaEntity;import com.twitter.sdk.android.core.models.Tweet;import com.twitter.sdk.android.core.models.VideoInfo;import java.util.ArrayList;import java.util.List;final public class TweetMediaUtils { public static final String PHOTO_TYPE = "photo"; public static final String VIDEO_TYPE = "video"; public static final String GIF_TYPE = "animated_gif"; private static final String CONTENT_TYPE_MP4 = "video/mp4"; private static final String CONTENT_TYPE_HLS = "application/x-mpegURL"; private TweetMediaUtils() { }  static public MediaEntity getPhotoEntity(Tweet tweet) { final List<MediaEntity> mediaEntityList = getAllMediaEntities(tweet); for (int i = mediaEntityList.size() - 1; i >= 0; i--) { final MediaEntity entity = mediaEntityList.get(i); if (entity.type != null && isPhotoType(entity)) { return entity; } } return null; }  static public boolean hasPhoto(Tweet tweet) { return getPhotoEntity(tweet) != null; }  static public MediaEntity getVideoEntity(Tweet tweet) { for (MediaEntity mediaEntity : getAllMediaEntities(tweet)) { if (mediaEntity.type != null && isVideoType(mediaEntity)) { return mediaEntity; } } return null; }  static public boolean hasSupportedVideo(Tweet tweet) { final MediaEntity entity = getVideoEntity(tweet); return entity != null && getSupportedVariant(entity) != null; } static boolean isPhotoType(MediaEntity mediaEntity) { return PHOTO_TYPE.equals(mediaEntity.type); } static boolean isVideoType(MediaEntity mediaEntity) { return VIDEO_TYPE.equals(mediaEntity.type) || GIF_TYPE.equals(mediaEntity.type); } static public VideoInfo.Variant getSupportedVariant(MediaEntity mediaEntity) { for (VideoInfo.Variant variant : mediaEntity.videoInfo.variants) { if (isVariantSupported(variant)) { return variant; } } return null; } static public boolean isLooping(MediaEntity mediaEntity) { return GIF_TYPE.equals(mediaEntity.type); } static boolean isVariantSupported(VideoInfo.Variant variant) { if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP && CONTENT_TYPE_HLS.equals(variant.contentType)) { return true; } else if (CONTENT_TYPE_MP4.equals(variant.contentType)) { return true; } return false; } static List<MediaEntity> getAllMediaEntities(Tweet tweet) { final List<MediaEntity> entities = new ArrayList<>(); if (tweet.entities != null && tweet.entities.media != null) { entities.addAll(tweet.entities.media); } if (tweet.extendedEtities != null && tweet.extendedEtities.media != null) { entities.addAll(tweet.extendedEtities.media); } return entities; }}package com.twitter.sdk.android.tweetui.internal;import android.content.Context;import android.graphics.Canvas;import android.graphics.drawable.Drawable;import android.util.AttributeSet;import android.widget.ImageView;import com.twitter.sdk.android.core.internal.util.AspectRatioImageView;public class TweetMediaView extends AspectRatioImageView { Overlay overlay = new Overlay(null); public TweetMediaView(Context context) { super(context); } public TweetMediaView(Context context, AttributeSet attrs) { super(context, attrs); } @Override protected void onDraw(Canvas canvas) { super.onDraw(canvas); overlay.draw(canvas); } @Override protected void drawableStateChanged() { super.drawableStateChanged(); overlay.setDrawableState(getDrawableState()); } @Override protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) { super.onMeasure(widthMeasureSpec, heightMeasureSpec); overlay.setDrawableBounds(getMeasuredWidth(), getMeasuredHeight()); } @Override protected void onSizeChanged(int width, int height, int oldWidth, int oldHeight) { super.onSizeChanged(width, height, oldWidth, oldHeight); overlay.setDrawableBounds(width, height); } @Override public void invalidateDrawable(Drawable drawable) { if (drawable == overlay.drawable) { invalidate(); } else { super.invalidateDrawable(drawable); } }  public void setOverlayDrawable(Drawable drawable) { overlay.cleanupDrawable(this); if (drawable != null) { drawable.setCallback(this); } overlay = new Overlay(drawable); overlay.setDrawableState(getDrawableState()); requestLayout(); }  static protected class Overlay { final Drawable drawable; Overlay(Drawable drawable) { this.drawable = drawable; } protected void cleanupDrawable(ImageView imageView) { if (drawable != null) { drawable.setCallback(null); imageView.unscheduleDrawable(drawable); } } protected void setDrawableBounds(int width, int height) { if (drawable != null) { drawable.setBounds(0, 0, width, height); } } protected void setDrawableState(int[] state) { if (drawable != null && drawable.isStateful()) { drawable.setState(state); } } protected void draw(Canvas canvas) { if (drawable != null) { drawable.draw(canvas); } } }}package com.twitter.sdk.android.tweetui;import android.os.Handler;import android.support.v4.util.LruCache;import android.text.TextUtils;import com.twitter.sdk.android.core.Callback;import com.twitter.sdk.android.core.Result;import com.twitter.sdk.android.core.SessionManager;import com.twitter.sdk.android.core.TwitterAuthException;import com.twitter.sdk.android.core.TwitterCore;import com.twitter.sdk.android.core.TwitterException;import com.twitter.sdk.android.core.TwitterSession;import com.twitter.sdk.android.core.models.Tweet;import java.util.List;import io.fabric.sdk.android.Fabric;class TweetRepository { // Cache size units are in number of entries, an average Tweet is roughly 900 bytes in memory private static final int DEFAULT_CACHE_SIZE = 20; private final TwitterCore twitterCore; private final Handler mainHandler; private final SessionManager<TwitterSession> userSessionManagers; // leave this package accessible for testing final LruCache<Long, Tweet> tweetCache; final LruCache<Long, FormattedTweetText> formatCache; TweetRepository(Handler mainHandler, SessionManager<TwitterSession> userSessionManagers) { this(mainHandler, userSessionManagers, TwitterCore.getInstance()); } // Testing only TweetRepository(Handler mainHandler, SessionManager<TwitterSession> userSessionManagers, TwitterCore twitterCore) { this.twitterCore = twitterCore; this.mainHandler = mainHandler; this.userSessionManagers = userSessionManagers; tweetCache = new LruCache<>(DEFAULT_CACHE_SIZE); formatCache = new LruCache<>(DEFAULT_CACHE_SIZE); }  FormattedTweetText formatTweetText(final Tweet tweet) { if (tweet == null) return null; final FormattedTweetText cached = formatCache.get(tweet.id); if (cached != null) return cached; final FormattedTweetText formattedTweetText = TweetTextUtils.formatTweetText(tweet); if (formattedTweetText != null && !TextUtils.isEmpty(formattedTweetText.text)) { formatCache.put(tweet.id, formattedTweetText); } return formattedTweetText; } void updateCache(final Tweet tweet) { tweetCache.put(tweet.id, tweet); }  private void deliverTweet(final Tweet tweet, final Callback<Tweet> cb) { if (cb == null) return; mainHandler.post(new Runnable() { @Override public void run() { cb.success(new Result<>(tweet, null)); } }); } void favorite(final long tweetId, final Callback<Tweet> cb) { getUserSession(new LoggingCallback<TwitterSession>(cb, Fabric.getLogger()) { @Override public void success(Result<TwitterSession> result) { twitterCore.getApiClient(result.data).getFavoriteService().create(tweetId, false) .enqueue(cb); } }); } void unfavorite(final long tweetId, final Callback<Tweet> cb) { getUserSession(new LoggingCallback<TwitterSession>(cb, Fabric.getLogger()) { @Override public void success(Result<TwitterSession> result) { twitterCore.getApiClient(result.data).getFavoriteService().destroy(tweetId, false) .enqueue(cb); } }); } void retweet(final long tweetId, final Callback<Tweet> cb) { getUserSession(new LoggingCallback<TwitterSession>(cb, Fabric.getLogger()) { @Override public void success(Result<TwitterSession> result) { twitterCore.getApiClient(result.data).getStatusesService().retweet(tweetId, false) .enqueue(cb); } }); } void unretweet(final long tweetId, final Callback<Tweet> cb) { getUserSession(new LoggingCallback<TwitterSession>(cb, Fabric.getLogger()) { @Override public void success(Result<TwitterSession> result) { twitterCore.getApiClient(result.data).getStatusesService().unretweet(tweetId, false) .enqueue(cb); } }); } void getUserSession(final Callback<TwitterSession> cb) { final TwitterSession session = userSessionManagers.getActiveSession(); if (session == null) { cb.failure(new TwitterAuthException("User authorization required")); } else { cb.success(new Result<>(session, null)); } }  void loadTweet(final long tweetId, final Callback<Tweet> cb) { final Tweet cachedTweet = tweetCache.get(tweetId); if (cachedTweet != null) { deliverTweet(cachedTweet, cb); return; } twitterCore.getApiClient().getStatusesService() .show(tweetId, null, null, null).enqueue(new SingleTweetCallback(cb)); }  void loadTweets(final List<Long> tweetIds, final Callback<List<Tweet>> cb) { final String commaSepIds = TextUtils.join(",", tweetIds); twitterCore.getApiClient().getStatusesService().lookup(commaSepIds, null, null, null) .enqueue(new MultiTweetsCallback(tweetIds, cb)); }  class SingleTweetCallback extends Callback<Tweet> { final Callback<Tweet> cb; SingleTweetCallback(Callback<Tweet> cb) { this.cb = cb; } @Override public void success(Result<Tweet> result) { final Tweet tweet = result.data; updateCache(tweet); if (cb != null) { cb.success(new Result<>(tweet, result.response)); } } @Override public void failure(TwitterException exception) { cb.failure(exception); } }  class MultiTweetsCallback extends Callback<List<Tweet>> { final Callback<List<Tweet>> cb; final List<Long> tweetIds; MultiTweetsCallback(List<Long> tweetIds, Callback<List<Tweet>> cb) { this.cb = cb; this.tweetIds = tweetIds; } @Override public void success(Result<List<Tweet>> result) { if (cb != null) { final List<Tweet> sorted = Utils.orderTweets(tweetIds, result.data); cb.success(new Result<>(sorted, result.response)); } } @Override public void failure(TwitterException exception) { cb.failure(exception); } }}package com.twitter.sdk.android.tweetui;import com.twitter.sdk.android.core.models.Tweet;public interface TweetScribeClient { void impression(Tweet tweet, String viewName, boolean actionEnabled); void share(Tweet tweet); void favorite(Tweet tweet); void unfavorite(Tweet tweet); void click(Tweet tweet, String viewName);}package com.twitter.sdk.android.tweetui;import com.twitter.sdk.android.core.internal.scribe.EventNamespace;import com.twitter.sdk.android.core.internal.scribe.ScribeItem;import com.twitter.sdk.android.core.internal.scribe.SyndicatedSdkImpressionEvent;import com.twitter.sdk.android.core.internal.scribe.SyndicationClientEvent;import com.twitter.sdk.android.core.models.Tweet;import java.util.ArrayList;import java.util.List;class TweetScribeClientImpl implements TweetScribeClient { // tfw client event specific names static final String TFW_CLIENT_EVENT_PAGE = "android"; static final String TFW_CLIENT_EVENT_SECTION = "tweet"; static final String TFW_CLIENT_EVENT_ELEMENT = ""; // intentionally blank // syndicated sdk impression specific names static final String SYNDICATED_SDK_IMPRESSION_PAGE = "tweet"; static final String SYNDICATED_SDK_IMPRESSION_COMPONENT = ""; static final String SYNDICATED_SDK_IMPRESSION_ELEMENT = ""; // intentionally blank // general names static final String SCRIBE_CLICK_ACTION = "click"; static final String SCRIBE_IMPRESSION_ACTION = "impression"; static final String SCRIBE_FAVORITE_ACTION = "favorite"; static final String SCRIBE_UNFAVORITE_ACTION = "unfavorite"; static final String SCRIBE_SHARE_ACTION = "share"; static final String SCRIBE_ACTIONS_ELEMENT = "actions"; final TweetUi tweetUi; TweetScribeClientImpl(TweetUi tweetUi) { this.tweetUi = tweetUi; } @Override public void impression(Tweet tweet, String viewName, boolean actionEnabled) { final List<ScribeItem> items = new ArrayList<>(); items.add(ScribeItem.fromTweet(tweet)); tweetUi.scribe(getTfwImpressionNamespace(viewName, actionEnabled), items); tweetUi.scribe(getSyndicatedImpressionNamespace(viewName), items); } @Override public void share(Tweet tweet) { final List<ScribeItem> items = new ArrayList<>(); items.add(ScribeItem.fromTweet(tweet)); tweetUi.scribe(getTfwShareNamespace(), items); } @Override public void favorite(Tweet tweet) { final List<ScribeItem> items = new ArrayList<>(); items.add(ScribeItem.fromTweet(tweet)); tweetUi.scribe(getTfwFavoriteNamespace(), items); } @Override public void unfavorite(Tweet tweet) { final List<ScribeItem> items = new ArrayList<>(); items.add(ScribeItem.fromTweet(tweet)); tweetUi.scribe(getTfwUnfavoriteNamespace(), items); } @Override public void click(Tweet tweet, String viewName) { final List<ScribeItem> items = new ArrayList<>(); items.add(ScribeItem.fromTweet(tweet)); tweetUi.scribe(getTfwClickNamespace(viewName), items); } static EventNamespace getTfwImpressionNamespace(String viewName, boolean actionEnabled) { return new EventNamespace.Builder() .setClient(SyndicationClientEvent.CLIENT_NAME) .setPage(TFW_CLIENT_EVENT_PAGE) .setSection(TFW_CLIENT_EVENT_SECTION) .setComponent(viewName) .setElement(actionEnabled ? SCRIBE_ACTIONS_ELEMENT : TFW_CLIENT_EVENT_ELEMENT) .setAction(SCRIBE_IMPRESSION_ACTION) .builder(); } static EventNamespace getTfwUnfavoriteNamespace() { return new EventNamespace.Builder() .setClient(SyndicationClientEvent.CLIENT_NAME) .setPage(TFW_CLIENT_EVENT_PAGE) .setSection(TFW_CLIENT_EVENT_SECTION) .setElement(SCRIBE_ACTIONS_ELEMENT) .setAction(SCRIBE_UNFAVORITE_ACTION) .builder(); } static EventNamespace getTfwFavoriteNamespace() { return new EventNamespace.Builder() .setClient(SyndicationClientEvent.CLIENT_NAME) .setPage(TFW_CLIENT_EVENT_PAGE) .setSection(TFW_CLIENT_EVENT_SECTION) .setElement(SCRIBE_ACTIONS_ELEMENT) .setAction(SCRIBE_FAVORITE_ACTION) .builder(); } static EventNamespace getTfwShareNamespace() { return new EventNamespace.Builder() .setClient(SyndicationClientEvent.CLIENT_NAME) .setPage(TFW_CLIENT_EVENT_PAGE) .setSection(TFW_CLIENT_EVENT_SECTION) .setElement(SCRIBE_ACTIONS_ELEMENT) .setAction(SCRIBE_SHARE_ACTION) .builder(); } static EventNamespace getTfwClickNamespace(String viewName) { return new EventNamespace.Builder() .setClient(SyndicationClientEvent.CLIENT_NAME) .setPage(TFW_CLIENT_EVENT_PAGE) .setSection(TFW_CLIENT_EVENT_SECTION) .setComponent(viewName) .setElement(TFW_CLIENT_EVENT_ELEMENT) .setAction(SCRIBE_CLICK_ACTION) .builder(); } static EventNamespace getSyndicatedImpressionNamespace(String viewName) { return new EventNamespace.Builder() .setClient(SyndicatedSdkImpressionEvent.CLIENT_NAME) .setPage(SYNDICATED_SDK_IMPRESSION_PAGE) .setSection(viewName) .setComponent(SYNDICATED_SDK_IMPRESSION_COMPONENT) .setElement(SYNDICATED_SDK_IMPRESSION_ELEMENT) .setAction(SCRIBE_IMPRESSION_ACTION) .builder(); }}package com.twitter.sdk.android.tweetui;import android.text.SpannableStringBuilder;import android.text.Spanned;import android.text.TextUtils;import android.text.style.CharacterStyle;import android.view.View;import com.twitter.sdk.android.tweetui.internal.ClickableLinkSpan;import java.util.ArrayList;import java.util.Collections;import java.util.Comparator;import java.util.List;final class TweetTextLinkifier { private static final String PHOTO_TYPE = "photo"; private TweetTextLinkifier() {}  static CharSequence linkifyUrls(FormattedTweetText tweetText, final LinkClickListener listener, boolean stripLastPhotoEntity, final int linkColor, final int linkHighlightColor) { if (tweetText == null) return null; if (TextUtils.isEmpty(tweetText.text)) { return tweetText.text; } final SpannableStringBuilder spannable = new SpannableStringBuilder(tweetText.text); final List<FormattedUrlEntity> urls = tweetText.urlEntities; final List<FormattedMediaEntity> media = tweetText.mediaEntities; final FormattedMediaEntity lastPhoto; if (stripLastPhotoEntity) { lastPhoto = getLastPhotoEntity(tweetText); } else { lastPhoto = null; }  final List<FormattedUrlEntity> combined = mergeAndSortEntities(urls, media); addUrlEntities(spannable, combined, lastPhoto, listener, linkColor, linkHighlightColor); return spannable; }  static List<FormattedUrlEntity> mergeAndSortEntities(final List<FormattedUrlEntity> urls, final List<FormattedMediaEntity> media) { if (media == null) return urls; final ArrayList<FormattedUrlEntity> combined = new ArrayList<>(urls); combined.addAll(media); Collections.sort(combined, new Comparator<FormattedUrlEntity>() { @Override public int compare(FormattedUrlEntity lhs, FormattedUrlEntity rhs) { if (lhs == null && rhs != null) return -1; if (lhs != null && rhs == null) return 1; if (lhs == null && rhs == null) return 0; if (lhs.start < rhs.start) return -1; if (lhs.start > rhs.start) return 1; return 0; } }); return combined; }  private static void addUrlEntities(final SpannableStringBuilder spannable, final List<FormattedUrlEntity> entities, final FormattedMediaEntity lastPhoto, final LinkClickListener listener, final int linkColor, final int linkHighlightColor) { if (entities == null || entities.isEmpty()) return; int offset = 0; int len; int start; int end; for (final FormattedUrlEntity url : entities) { start = url.start - offset; end = url.end - offset; if (start >= 0 && end <= spannable.length()) { // replace the last photo url with empty string, we can use the start indices as // as simple check, since none of this will work anyways if we have overlapping // entities if (lastPhoto != null && lastPhoto.start == url.start) { spannable.replace(start, end, ""); len = end - start; end -= len; offset += len; } else if (!TextUtils.isEmpty(url.displayUrl)) { spannable.replace(start, end, url.displayUrl); len = end - (start + url.displayUrl.length()); end -= len; offset += len; final CharacterStyle span = new ClickableLinkSpan(linkHighlightColor, linkColor, false) { @Override public void onClick(View widget) { if (listener == null) return; listener.onUrlClicked(url.url); } }; spannable.setSpan(span, start, end, Spanned.SPAN_EXCLUSIVE_EXCLUSIVE); } } } } private static FormattedMediaEntity getLastPhotoEntity( final FormattedTweetText formattedTweetText) { if (formattedTweetText == null) return null; final List<FormattedMediaEntity> mediaEntityList = formattedTweetText.mediaEntities; if (mediaEntityList.isEmpty()) return null; FormattedMediaEntity entity; for (int i = mediaEntityList.size() - 1; i >= 0; i--) { entity = mediaEntityList.get(i); if (PHOTO_TYPE.equals(entity.type)) { return entity; } } return null; }}package com.twitter.sdk.android.tweetui;import android.text.TextUtils;import com.twitter.sdk.android.core.models.MediaEntity;import com.twitter.sdk.android.core.models.Tweet;import com.twitter.sdk.android.core.models.UrlEntity;import com.twitter.sdk.android.tweetui.internal.util.HtmlEntities;import java.util.ArrayList;import java.util.List;final class TweetTextUtils { private TweetTextUtils() {}  static FormattedTweetText formatTweetText(Tweet tweet) { if (tweet == null) return null; final FormattedTweetText adjustedTweet = new FormattedTweetText(); convertEntities(adjustedTweet, tweet); format(adjustedTweet, tweet); return adjustedTweet; }  static void convertEntities(FormattedTweetText formattedTweetText, Tweet tweet) { if (tweet.entities == null) return; final List<UrlEntity> coreUrls = tweet.entities.urls; if (coreUrls != null) { for (UrlEntity entity : coreUrls) { final FormattedUrlEntity formattedUrlEntity = new FormattedUrlEntity(entity); formattedTweetText.urlEntities.add(formattedUrlEntity); } } final List<MediaEntity> coreMedia = tweet.entities.media; if (coreMedia != null) { for (MediaEntity entity : coreMedia) { final FormattedMediaEntity formattedMediaEntity = new FormattedMediaEntity(entity); formattedTweetText.mediaEntities.add(formattedMediaEntity); } } }  static void format(FormattedTweetText formattedTweetText, Tweet tweet) { if (TextUtils.isEmpty(tweet.text)) return; final HtmlEntities.Unescaped u = HtmlEntities.HTML40.unescape(tweet.text); final StringBuilder result = new StringBuilder(u.unescaped); adjustIndicesForEscapedChars(formattedTweetText.urlEntities, u.indices); adjustIndicesForEscapedChars(formattedTweetText.mediaEntities, u.indices); adjustIndicesForSupplementaryChars(result, formattedTweetText); formattedTweetText.text = result.toString(); }  static void adjustIndicesForEscapedChars( List<? extends FormattedUrlEntity> entities, List<int[]> indices) { if (entities == null || indices == null || indices.isEmpty()) { return; } final int size = indices.size(); int m = 0; // marker int diff = 0; // accumulated difference int inDiff; // end difference for escapes in range int len; // escaped length int start; // escaped start int end; // escaped end int i; // reusable index int[] index; // For each of the entities, update the start and end indices // Note: tweet entities are sorted. for (FormattedUrlEntity entity : entities) { inDiff = 0; // Go through the escaped entities' indices for (i = m; i < size; i++) { index = indices.get(i); start = index[0]; end = index[1]; // len is actually (end - start + 1) - 1 len = end - start; if (end < entity.start) { // bump position of the next marker diff += len; m++; } else if (end < entity.end) { inDiff += len; } } // Once we've accumulated diffs, calc the offset entity.start = entity.start - diff; entity.end = entity.end - (diff + inDiff); } }  static void adjustIndicesForSupplementaryChars(StringBuilder content, FormattedTweetText formattedTweetText) { final List<Integer> highSurrogateIndices = new ArrayList<>(); final int len = content.length() - 1; for (int i = 0; i < len; ++i) { if (Character.isHighSurrogate(content.charAt(i)) && Character.isLowSurrogate(content.charAt(i + 1))) { highSurrogateIndices.add(i); } } adjustEntitiesWithOffsets(formattedTweetText.urlEntities, highSurrogateIndices); adjustEntitiesWithOffsets(formattedTweetText.mediaEntities, highSurrogateIndices); }  static void adjustEntitiesWithOffsets(List<? extends FormattedUrlEntity> entities, List<Integer> indices) { if (entities == null || indices == null) return; for (FormattedUrlEntity entity : entities) { // find all indices <= start and update offsets by that much final int start = entity.start; int offset = 0; for (Integer index : indices) { if (index - offset <= start) { offset += 1; } else { break; } } entity.start = entity.start + offset; entity.end = entity.end + offset; } }}package com.twitter.sdk.android.tweetui;import android.content.Context;import android.view.View;import android.view.ViewGroup;import com.twitter.sdk.android.core.Callback;import com.twitter.sdk.android.core.Result;import com.twitter.sdk.android.core.TwitterException;import com.twitter.sdk.android.core.models.Tweet;import com.twitter.sdk.android.tweetui.internal.TimelineDelegate;public class TweetTimelineListAdapter extends TimelineListAdapter<Tweet> { protected Callback<Tweet> actionCallback; final protected int styleResId;  public TweetTimelineListAdapter(Context context, Timeline<Tweet> timeline) { this(context, timeline, R.style.tw__TweetLightStyle, null); } TweetTimelineListAdapter(Context context, Timeline<Tweet> timeline, int styleResId, Callback<Tweet> cb) { this(context, new TimelineDelegate<>(timeline), styleResId, cb); } TweetTimelineListAdapter(Context context, TimelineDelegate<Tweet> delegate, int styleResId, Callback<Tweet> cb) { super(context, delegate); this.styleResId = styleResId; this.actionCallback = new ReplaceTweetCallback(delegate, cb); }  @Override public View getView(int position, View convertView, ViewGroup parent) { View rowView = convertView; final Tweet tweet = getItem(position); if (rowView == null) { final BaseTweetView tv = new CompactTweetView(context, tweet, styleResId); tv.setOnActionCallback(actionCallback); rowView = tv; } else { ((BaseTweetView) rowView).setTweet(tweet); } return rowView; }  static class ReplaceTweetCallback extends Callback<Tweet> { TimelineDelegate<Tweet> delegate; Callback<Tweet> cb; ReplaceTweetCallback(TimelineDelegate<Tweet> delegate, Callback<Tweet> cb) { this.delegate = delegate; this.cb = cb; } @Override public void success(Result<Tweet> result) { delegate.setItemById(result.data); if (cb != null) { cb.success(result); } } @Override public void failure(TwitterException exception) { if (cb != null) { cb.failure(exception); } } }  public static class Builder { private Context context; private Timeline<Tweet> timeline; private Callback<Tweet> actionCallback; private int styleResId = R.style.tw__TweetLightStyle;  public Builder(Context context) { this.context = context; }  public Builder setTimeline(Timeline<Tweet> timeline) { this.timeline = timeline; return this; }  public Builder setViewStyle(int styleResId) { this.styleResId = styleResId; return this; }  public Builder setOnActionCallback(Callback<Tweet> actionCallback) { this.actionCallback = actionCallback; return this; }  public TweetTimelineListAdapter build() { return new TweetTimelineListAdapter(context, timeline, styleResId, actionCallback); } }}package com.twitter.sdk.android.tweetui;import io.fabric.sdk.android.Fabric;import io.fabric.sdk.android.Kit;import io.fabric.sdk.android.services.concurrency.DependsOn;import com.squareup.picasso.Picasso;import com.twitter.sdk.android.core.GuestSessionProvider;import com.twitter.sdk.android.core.SessionManager;import com.twitter.sdk.android.core.TwitterCore;import com.twitter.sdk.android.core.TwitterSession;import com.twitter.sdk.android.core.internal.scribe.DefaultScribeClient;import com.twitter.sdk.android.core.internal.scribe.EventNamespace;import com.twitter.sdk.android.core.internal.scribe.ScribeItem;import java.util.List;@DependsOn(TwitterCore.class)public class TweetUi extends Kit<Boolean> { static final String LOGTAG = "TweetUi"; static final String NOT_STARTED_ERROR = "Must start TweetUi Kit in Fabric.with()."; private static final String KIT_SCRIBE_NAME = "TweetUi"; SessionManager<TwitterSession> sessionManager; GuestSessionProvider guestSessionProvider; DefaultScribeClient scribeClient; private TweetRepository tweetRepository; private Picasso imageLoader;  public static TweetUi getInstance() { checkInitialized(); return Fabric.getKit(TweetUi.class); } @Override public String getIdentifier() { return BuildConfig.GROUP + ":" + BuildConfig.ARTIFACT_ID; } @Override public String getVersion() { return BuildConfig.VERSION_NAME + "." + BuildConfig.BUILD_NUMBER; } @Override protected boolean onPreExecute() { super.onPreExecute(); final TwitterCore twitterCore = TwitterCore.getInstance(); sessionManager = twitterCore.getSessionManager(); guestSessionProvider = twitterCore.getGuestSessionProvider(); tweetRepository = new TweetRepository(getFabric().getMainHandler(), twitterCore.getSessionManager()); return true; } @Override protected Boolean doInBackground() {  imageLoader = Picasso.with(getContext()); setUpScribeClient(); return true; }  private static void checkInitialized() { if (Fabric.getKit(TweetUi.class) == null) { throw new IllegalStateException(NOT_STARTED_ERROR); } } private void setUpScribeClient() { scribeClient = new DefaultScribeClient(this, KIT_SCRIBE_NAME, sessionManager, guestSessionProvider, getIdManager()); } void scribe(EventNamespace... namespaces) { if (scribeClient == null) return; for (EventNamespace ns : namespaces) { scribeClient.scribe(ns); } } void scribe(EventNamespace ns, List<ScribeItem> items) { if (scribeClient == null) return; scribeClient.scribe(ns, items); } TweetRepository getTweetRepository() { return tweetRepository; } // Testing purposes only void setTweetRepository(TweetRepository tweetRepository) { this.tweetRepository = tweetRepository; } Picasso getImageLoader() { return imageLoader; } // Testing purposes only void setImageLoader(Picasso imageLoader) { this.imageLoader = imageLoader; }}package com.twitter.sdk.android.tweetcomposer;import android.app.IntentService;import android.content.Intent;import android.net.Uri;import com.twitter.sdk.android.core.Callback;import com.twitter.sdk.android.core.Result;import com.twitter.sdk.android.core.TwitterAuthToken;import com.twitter.sdk.android.core.TwitterException;import com.twitter.sdk.android.core.TwitterSession;import com.twitter.sdk.android.core.models.Media;import com.twitter.sdk.android.core.models.Tweet;import com.twitter.sdk.android.tweetcomposer.internal.CardCreate;import com.twitter.sdk.android.tweetcomposer.internal.CardData;import java.io.File;import io.fabric.sdk.android.Fabric;import okhttp3.MediaType;import okhttp3.RequestBody;public class TweetUploadService extends IntentService { public static final String UPLOAD_SUCCESS = "com.twitter.sdk.android.tweetcomposer.UPLOAD_SUCCESS"; public static final String UPLOAD_FAILURE = "com.twitter.sdk.android.tweetcomposer.UPLOAD_FAILURE"; public static final String EXTRA_TWEET_ID = "EXTRA_TWEET_ID"; public static final String EXTRA_RETRY_INTENT = "EXTRA_RETRY_INTENT"; static final String TAG = "TweetUploadService"; static final String EXTRA_USER_TOKEN = "EXTRA_USER_TOKEN"; static final String EXTRA_TWEET_TEXT = "EXTRA_TWEET_TEXT"; static final String EXTRA_TWEET_CARD = "EXTRA_TWEET_CARD"; private static final int PLACEHOLDER_ID = -1; private static final String PLACEHOLDER_SCREEN_NAME = ""; DependencyProvider dependencyProvider; TwitterSession twitterSession; String tweetText; Card tweetCard; Intent intent; public TweetUploadService() { this(new DependencyProvider()); } // testing purposes TweetUploadService(DependencyProvider dependencyProvider) { super("TweetUploadService"); this.dependencyProvider = dependencyProvider; } @Override protected void onHandleIntent(Intent intent) { final TwitterAuthToken token = intent.getParcelableExtra(EXTRA_USER_TOKEN); this.intent = intent; twitterSession = new TwitterSession(token, PLACEHOLDER_ID, PLACEHOLDER_SCREEN_NAME); tweetText = intent.getStringExtra(EXTRA_TWEET_TEXT); tweetCard = (Card) intent.getSerializableExtra(EXTRA_TWEET_CARD); if (Card.isAppCard(tweetCard)) { uploadAppCardTweet(twitterSession, tweetText, tweetCard); } else { uploadTweet(twitterSession, tweetText); } } void uploadTweet(TwitterSession session, final String text) { final ComposerApiClient client = dependencyProvider.getComposerApiClient(session); client.getComposerStatusesService().update(text, null).enqueue(new Callback<Tweet>() { @Override public void success(Result<Tweet> result) { sendSuccessBroadcast(result.data.getId()); stopSelf(); } @Override public void failure(TwitterException exception) { fail(exception); } }); } void uploadAppCardTweet(TwitterSession session, final String text, final Card card) { final ComposerApiClient client = dependencyProvider.getComposerApiClient(session); final Uri uri = Uri.parse(card.imageUri); final String path = FileUtils.getPath(TweetUploadService.this, uri); if (path == null) { fail(new TwitterException("Uri file path resolved to null")); return; } final File file = new File(path); final String mimeType = FileUtils.getMimeType(file); final RequestBody media = RequestBody.create(MediaType.parse(mimeType), file); client.getMediaService().upload(media, null, null).enqueue(new Callback<Media>() { @Override public void success(Result<Media> result) { final CardData cardData = CardDataFactory.createAppCardData(card, result.data.mediaId, dependencyProvider.getAdvertisingId()); client.getCardService().create(cardData).enqueue(new Callback<CardCreate>() { @Override public void success(Result<CardCreate> result) { final String cardUri = result.data.cardUri; client.getComposerStatusesService().update(text, cardUri).enqueue( new Callback<Tweet>() { @Override public void success(Result<Tweet> result) { sendSuccessBroadcast(result.data.getId()); stopSelf(); } @Override public void failure(TwitterException exception) { fail(exception); } }); } @Override public void failure(TwitterException exception) { fail(exception); } }); } @Override public void failure(TwitterException exception) { fail(exception); } }); } void fail(TwitterException e) { sendFailureBroadcast(intent); Fabric.getLogger().e(TAG, "Post Tweet failed", e); stopSelf(); } void sendSuccessBroadcast(long tweetId) { final Intent intent = new Intent(UPLOAD_SUCCESS); intent.putExtra(EXTRA_TWEET_ID, tweetId); sendBroadcast(intent); } void sendFailureBroadcast(Intent original) { final Intent intent = new Intent(UPLOAD_FAILURE); intent.putExtra(EXTRA_RETRY_INTENT, original); sendBroadcast(intent); }  static class DependencyProvider { ComposerApiClient getComposerApiClient(TwitterSession session) { return TweetComposer.getInstance().getApiClient(session); } String getAdvertisingId() { return TweetComposer.getInstance().getAdvertisingId(); } }}package com.twitter.sdk.android.tweetui;import android.net.Uri;import android.text.TextUtils;import com.twitter.sdk.android.core.Callback;import com.twitter.sdk.android.core.Result;import com.twitter.sdk.android.core.models.Tweet;import java.util.List;import java.util.Locale;import io.fabric.sdk.android.Fabric;public final class TweetUtils { private static final String PERMALINK_FORMAT = "https://twitter.com/%s/status/%d"; private static final String UNKNOWN_SCREEN_NAME = "twitter_unknown"; static final String LOAD_TWEET_DEBUG = "loadTweet failure for Tweet Id %d."; private TweetUtils() {}  public static void loadTweet(final long tweetId, final Callback<Tweet> cb) { TweetUi.getInstance().getTweetRepository().loadTweet(tweetId, new com.twitter.sdk.android.tweetui.LoggingCallback<Tweet>(cb, Fabric.getLogger()) { @Override public void success(Result<Tweet> result) { if (cb != null) { cb.success(result); } } }); }  public static void loadTweets(final List<Long> tweetIds, final Callback<List<Tweet>> cb) { TweetUi.getInstance().getTweetRepository().loadTweets(tweetIds, new com.twitter.sdk.android.tweetui.LoggingCallback<List<Tweet>>(cb, Fabric.getLogger()) { @Override public void success(Result<List<Tweet>> result) { if (cb != null) { cb.success(result); } } }); }  static boolean isTweetResolvable(Tweet tweet) { return tweet != null && tweet.id > 0 && tweet.user != null && !TextUtils.isEmpty(tweet.user.screenName); }  static Tweet getDisplayTweet(Tweet tweet) { if (tweet == null || tweet.retweetedStatus == null) { return tweet; } else { return tweet.retweetedStatus; } }  static Uri getPermalink(String screenName, long tweetId) { if (tweetId <= 0) { return null; } String permalink; if (TextUtils.isEmpty(screenName)) { permalink = String.format(Locale.US, PERMALINK_FORMAT, UNKNOWN_SCREEN_NAME, tweetId); } else { permalink = String.format(Locale.US, PERMALINK_FORMAT, screenName, tweetId); } return Uri.parse(permalink); }}package com.twitter.sdk.android.tweetui;import android.content.Context;import android.util.AttributeSet;import android.widget.ImageView;import com.twitter.sdk.android.core.models.Tweet;public class TweetView extends BaseTweetView { private static final String VIEW_TYPE_NAME = "default"; public TweetView(Context context, Tweet tweet) { super(context, tweet); } public TweetView(Context context, Tweet tweet, int styleResId) { super(context, tweet, styleResId); } TweetView(Context context, Tweet tweet, int styleResId, DependencyProvider dependencyProvider) { super(context, tweet, styleResId, dependencyProvider); } public TweetView(Context context, AttributeSet attrs) { super(context, attrs); } public TweetView(Context context, AttributeSet attrs, int defStyle) { super(context, attrs, defStyle); } @Override protected int getLayout() { return R.layout.tw__tweet; }  @Override void render() { super.render(); setVerifiedCheck(tweet); }  private void setVerifiedCheck(Tweet tweet) { if (tweet != null && tweet.user != null && tweet.user.verified) { verifiedCheckView.setVisibility(ImageView.VISIBLE); } else { verifiedCheckView.setVisibility(ImageView.GONE); } } @Override String getViewTypeName() { return VIEW_TYPE_NAME; }}package com.twitter.sdk.android;import android.app.Activity;import com.twitter.sdk.android.core.Callback;import com.twitter.sdk.android.core.SessionManager;import com.twitter.sdk.android.core.TwitterApiClient;import com.twitter.sdk.android.core.TwitterSession;import com.twitter.sdk.android.tweetcomposer.TweetComposer;import io.fabric.sdk.android.Fabric;import io.fabric.sdk.android.Kit;import com.twitter.sdk.android.core.TwitterCore;import com.twitter.sdk.android.core.TwitterAuthConfig;import com.twitter.sdk.android.tweetui.TweetUi;import io.fabric.sdk.android.KitGroup;import java.util.Arrays;import java.util.Collection;import java.util.Collections;public class Twitter extends Kit implements KitGroup { public final TwitterCore core; public final TweetUi tweetUi; public final TweetComposer tweetComposer; public final Collection<? extends Kit> kits; public static Twitter getInstance() { return Fabric.getKit(Twitter.class); } private static void checkInitialized() { if (getInstance() == null) { throw new IllegalStateException("Must start Twitter Kit with Fabric.with() first"); } } public Twitter(TwitterAuthConfig config) { core = new TwitterCore(config); tweetUi = new TweetUi(); tweetComposer = new TweetComposer(); kits = Collections.unmodifiableCollection(Arrays.asList(core, tweetUi, tweetComposer)); } @Override public String getVersion() { return BuildConfig.VERSION_NAME + "." + BuildConfig.BUILD_NUMBER; } @Override public String getIdentifier() { return BuildConfig.GROUP + ":" + BuildConfig.ARTIFACT_ID; } @Override public Collection<? extends Kit> getKits() { return kits; } @Override protected Object doInBackground() { //Nothing to do return null; }  public static void logIn(Activity activity, Callback<TwitterSession> callback) { checkInitialized(); getInstance().core.logIn(activity, callback); }  public static void logOut() { checkInitialized(); getInstance().core.logOut(); }  public static SessionManager<TwitterSession> getSessionManager() { checkInitialized(); return getInstance().core.getSessionManager(); }  public static TwitterApiClient getApiClient() { checkInitialized(); return getInstance().core.getApiClient(); }  public static TwitterApiClient getApiClient(TwitterSession session) { checkInitialized(); return getInstance().core.getApiClient(session); }}package com.twitter.sdk.android.core.internal;import android.net.Uri;import android.os.Build;public class TwitterApi { public static final String BASE_HOST = "api.twitter.com"; public static final String BASE_HOST_URL = "https://" + BASE_HOST; private final String baseHostUrl; public TwitterApi() { this(BASE_HOST_URL); } public TwitterApi(String baseHostUrl) { this.baseHostUrl = baseHostUrl; } public String getBaseHostUrl() { return baseHostUrl; }  public Uri.Builder buildUponBaseHostUrl(String... paths) { final Uri.Builder builder = Uri.parse(getBaseHostUrl()).buildUpon(); if (paths != null) { for (String p : paths) { builder.appendPath(p); } } return builder; }  public static String buildUserAgent(String clientName, String version) { final StringBuilder ua = new StringBuilder(clientName) .append('/').append(version) // NOTE: We currently do not provide client_version_code information. .append(' ') .append(Build.MODEL).append('/').append(Build.VERSION.RELEASE) .append(" (") .append(Build.MANUFACTURER).append(';') .append(Build.MODEL).append(';') .append(Build.BRAND).append(';') .append(Build.PRODUCT) // NOTE: We do not add client_source, preload, or wifi information. .append(')'); return ua.toString(); }}package com.twitter.sdk.android.core;import com.twitter.sdk.android.core.internal.TwitterApi;import com.twitter.sdk.android.core.internal.network.OkHttpClientHelper;import com.twitter.sdk.android.core.models.BindingValues;import com.twitter.sdk.android.core.models.BindingValuesAdapter;import com.twitter.sdk.android.core.models.SafeListAdapter;import com.twitter.sdk.android.core.models.SafeMapAdapter;import com.twitter.sdk.android.core.services.AccountService;import com.twitter.sdk.android.core.services.CollectionService;import com.twitter.sdk.android.core.services.ConfigurationService;import com.twitter.sdk.android.core.services.FavoriteService;import com.twitter.sdk.android.core.services.ListService;import com.twitter.sdk.android.core.services.MediaService;import com.twitter.sdk.android.core.services.SearchService;import com.twitter.sdk.android.core.services.StatusesService;import com.google.gson.Gson;import com.google.gson.GsonBuilder;import java.util.concurrent.ConcurrentHashMap;import okhttp3.OkHttpClient;import retrofit2.Retrofit;import retrofit2.converter.gson.GsonConverterFactory;public class TwitterApiClient { final ConcurrentHashMap<Class, Object> services; final Retrofit retrofit; TwitterApiClient(OkHttpClient client, TwitterApi twitterApi) { this.services = new ConcurrentHashMap<>(); final Gson gson = new GsonBuilder() .registerTypeAdapterFactory(new SafeListAdapter()) .registerTypeAdapterFactory(new SafeMapAdapter()) .registerTypeAdapter(BindingValues.class, new BindingValuesAdapter()) .create(); retrofit = new Retrofit.Builder() .client(client) .baseUrl(twitterApi.getBaseHostUrl()) .addConverterFactory(GsonConverterFactory.create(gson)) .build(); } public TwitterApiClient(TwitterSession session) { this(OkHttpClientHelper.getOkHttpClient(session, TwitterCore.getInstance().getAuthConfig(), TwitterCore.getInstance().getSSLSocketFactory()), new TwitterApi()); } public TwitterApiClient() { this(OkHttpClientHelper.getOkHttpClient(TwitterCore.getInstance().getGuestSessionProvider(), TwitterCore.getInstance().getSSLSocketFactory()), new TwitterApi()); }  public AccountService getAccountService() { return getService(AccountService.class); }  public FavoriteService getFavoriteService() { return getService(FavoriteService.class); }  public StatusesService getStatusesService() { return getService(StatusesService.class); }  public SearchService getSearchService() { return getService(SearchService.class); }  public ListService getListService() { return getService(ListService.class); }  public CollectionService getCollectionService() { return getService(CollectionService.class); }  public ConfigurationService getConfigurationService() { return getService(ConfigurationService.class); }  public MediaService getMediaService() { return getService(MediaService.class); }  @SuppressWarnings("unchecked") protected <T> T getService(Class<T> cls) { if (!services.contains(cls)) { services.putIfAbsent(cls, retrofit.create(cls)); } return (T) services.get(cls); }}package com.twitter.sdk.android.core;import io.fabric.sdk.android.FabricAndroidTestCase;import io.fabric.sdk.android.FabricTestUtils;import okhttp3.OkHttpClient;import com.twitter.sdk.android.core.internal.TwitterApi;import com.twitter.sdk.android.core.services.FavoriteService;import com.twitter.sdk.android.core.services.StatusesService;import static org.mockito.Mockito.mock;public class TwitterApiClientTest extends FabricAndroidTestCase { public void testGetService_sdkNotStarted() { try { FabricTestUtils.resetFabric(); new TwitterApiClient(mock(TwitterSession.class)); fail(); } catch (IllegalStateException ise) { assertEquals("Must Initialize Fabric before using singleton()", ise.getMessage()); } } public void testConstructor_noSession() throws Exception { try { final TwitterCore twitterCore = TwitterCoreTestUtils.createTwitterCore( new TwitterAuthConfig("", ""), null, null); FabricTestUtils.with(getContext(), twitterCore); new TwitterApiClient(null); fail(); } catch (IllegalArgumentException ie) { assertEquals("Session must not be null.", ie.getMessage()); } finally { FabricTestUtils.resetFabric(); } } public void testGetService_cachedService() throws Exception { final TwitterApiClient client = newTwitterApiClient(); final StatusesService service = client.getService(StatusesService.class); assertSame(service, client.getService(StatusesService.class)); } public void testGetService_differentServices() throws Exception { final TwitterApiClient client = newTwitterApiClient(); final FavoriteService service = client.getService(FavoriteService.class); assertNotSame(service, client.getService(StatusesService.class)); } private TwitterApiClient newTwitterApiClient() { return new TwitterApiClient(mock(OkHttpClient.class), new TwitterApi()); }}package com.twitter.sdk.android.core.internal;public class TwitterApiConstants { public static final int MAX_TWEET_CHARS = 140; public static class Base { public static final String PARAM_ID = "id"; public static final String FIELD_ID = "id"; } public static class Errors extends Base { public static final String ERRORS = "errors"; // error when app auth token not recognized (such as when expired) public static final int APP_AUTH_ERROR_CODE = 89; // error when a tweet has already been favorited public static final int ALREADY_FAVORITED = 139; // error when a tweet has already been unfavorited public static final int ALREADY_UNFAVORITED = 144; // error when guest auth token not recognized (such as when expired) public static final int GUEST_AUTH_ERROR_CODE = 239; // legacy errors are errors that are returned by the api in a different format, where there // is no array of errors. public static final int LEGACY_ERROR = 0; }}package com.twitter.sdk.android.core;public class TwitterApiErrorConstants { //phone normalization errors public static final int DEVICE_REGISTRATION_INVALID_INPUT = 44; public static final int REGISTRATION_INVALID_INPUT = 300; public static final int REGISTRATION_PHONE_NORMALIZATION_FAILED = 303; //device already registered by other user public static final int DEVICE_ALREADY_REGISTERED = 285; //rate limit for sms exceeded public static final int RATE_LIMIT_EXCEEDED = 88; //registration general error public static final int REGISTRATION_GENERAL_ERROR = 284; public static final int REGISTRATION_OPERATION_FAILED = 302; //spammer phone number public static final int SPAMMER = 240; public static final int COULD_NOT_AUTHENTICATE = 32; public static final int CLIENT_NOT_PRIVILEGED = 87; public static final int UNKNOWN_ERROR = -1; //Unrecoverable errors public static final int OPERATOR_UNSUPPORTED = 286; public static final int USER_IS_NOT_SDK_USER = 269; public static final int EXPIRED_LOGIN_VERIFICATION_REQUEST = 235; public static final int MISSING_LOGIN_VERIFICATION_REQUEST = 237; public static final int DEVICE_REGISTRATION_RATE_EXCEEDED = 299; public static final int PAGE_NOT_EXIST = 34; public static final int EMAIL_ALREADY_REGISTERED = 120;}package com.twitter.sdk.android.core;import android.text.TextUtils;import com.google.gson.Gson;import com.google.gson.JsonSyntaxException;import com.twitter.sdk.android.core.models.ApiError;import com.twitter.sdk.android.core.models.ApiErrors;import io.fabric.sdk.android.Fabric;import retrofit2.Response;public class TwitterApiException extends TwitterException { public static final int DEFAULT_ERROR_CODE = 0; private final ApiError apiError; private final TwitterRateLimit twitterRateLimit; private final int code; private final Response response; public TwitterApiException(Response response) { this(response, readApiError(response), readApiRateLimit(response), response.code()); } TwitterApiException(Response response, ApiError apiError, TwitterRateLimit twitterRateLimit, int code) { super(createExceptionMessage(code)); this.apiError = apiError; this.twitterRateLimit = twitterRateLimit; this.code = code; this.response = response; } public int getStatusCode() { return code; }  public int getErrorCode() { return apiError == null ? DEFAULT_ERROR_CODE : apiError.code; }  public String getErrorMessage() { return apiError == null ? null : apiError.message; } public TwitterRateLimit getTwitterRateLimit() { return twitterRateLimit; } public Response getResponse() { return response; } public static TwitterRateLimit readApiRateLimit(Response response) { return new TwitterRateLimit(response.headers()); } public static ApiError readApiError(Response response) { try { // The response buffer can only be read once, so we clone the underlying buffer so the // response can be consumed down stream if necessary. final String body = response.errorBody().source().buffer().clone().readUtf8(); if (!TextUtils.isEmpty(body)) { return parseApiError(body); } } catch (Exception e) { Fabric.getLogger().e(TwitterCore.TAG, "Unexpected response", e); } return null; } static ApiError parseApiError(String body) { final Gson gson = new Gson(); try { final ApiErrors apiErrors = gson.fromJson(body, ApiErrors.class); if (!apiErrors.errors.isEmpty()) { return apiErrors.errors.get(0); } } catch (JsonSyntaxException e) { Fabric.getLogger().e(TwitterCore.TAG, "Invalid json: " + body, e); } return null; } static String createExceptionMessage(int code) { return "HTTP request failed, Status: " + code; }}package com.twitter.sdk.android.core.identity;import android.app.Activity;import android.content.Context;import android.content.Intent;import io.fabric.sdk.android.Fabric;import com.twitter.sdk.android.core.Callback;import com.twitter.sdk.android.core.Result;import com.twitter.sdk.android.core.SessionManager;import com.twitter.sdk.android.core.TwitterAuthException;import com.twitter.sdk.android.core.TwitterCore;import com.twitter.sdk.android.core.TwitterAuthConfig;import com.twitter.sdk.android.core.TwitterException;import com.twitter.sdk.android.core.TwitterSession;import com.twitter.sdk.android.core.internal.scribe.DefaultScribeClient;import com.twitter.sdk.android.core.internal.scribe.EventNamespace;import com.twitter.sdk.android.core.internal.scribe.TwitterCoreScribeClientHolder;public class TwitterAuthClient { private static class AuthStateLazyHolder { private static final AuthState INSTANCE = new AuthState(); } private static final String SCRIBE_CLIENT = "android"; private static final String SCRIBE_LOGIN_PAGE = "login"; private static final String SCRIBE_SHARE_EMAIL_PAGE = "shareemail"; private static final String SCRIBE_SECTION = ""; // intentionally blank private static final String SCRIBE_COMPONENT = ""; // intentionally blank private static final String SCRIBE_ELEMENT = ""; // intentionally blank private static final String SCRIBE_ACTION = "impression"; final AuthState authState; final SessionManager<TwitterSession> sessionManager; private final Context context; private final TwitterAuthConfig authConfig; public int getRequestCode() { return authConfig.getRequestCode(); }  public TwitterAuthClient() { this(TwitterCore.getInstance().getContext(), TwitterCore.getInstance().getAuthConfig(), TwitterCore.getInstance().getSessionManager(), AuthStateLazyHolder.INSTANCE); } TwitterAuthClient(Context context, TwitterAuthConfig authConfig, SessionManager<TwitterSession> sessionManager, AuthState authState) { this.authState = authState; this.context = context; this.authConfig = authConfig; this.sessionManager = sessionManager; }  public void authorize(Activity activity, Callback<TwitterSession> callback) { if (activity == null) { throw new IllegalArgumentException("Activity must not be null."); } if (callback == null) { throw new IllegalArgumentException("Callback must not be null."); } if (activity.isFinishing()) { Fabric.getLogger().e(TwitterCore.TAG, "Cannot authorize, activity is finishing.", null); } else { handleAuthorize(activity, callback); } } private void handleAuthorize(Activity activity, Callback<TwitterSession> callback) { scribeAuthorizeImpression(); final CallbackWrapper callbackWrapper = new CallbackWrapper(sessionManager, callback); if (!authorizeUsingSSO(activity, callbackWrapper) && !authorizeUsingOAuth(activity, callbackWrapper)) { callbackWrapper.failure(new TwitterAuthException("Authorize failed.")); } } private boolean authorizeUsingSSO(Activity activity, CallbackWrapper callbackWrapper) { if (SSOAuthHandler.isAvailable(activity)) { Fabric.getLogger().d(TwitterCore.TAG, "Using SSO"); return authState.beginAuthorize(activity, new SSOAuthHandler(authConfig, callbackWrapper, authConfig.getRequestCode())); } else { return false; } } private boolean authorizeUsingOAuth(Activity activity, CallbackWrapper callbackWrapper) { Fabric.getLogger().d(TwitterCore.TAG, "Using OAuth"); return authState.beginAuthorize(activity, new OAuthHandler(authConfig, callbackWrapper, authConfig.getRequestCode())); } private void scribeAuthorizeImpression() { final DefaultScribeClient scribeClient = getScribeClient(); if (scribeClient == null) return; final EventNamespace ns = new EventNamespace.Builder() .setClient(SCRIBE_CLIENT) .setPage(SCRIBE_LOGIN_PAGE) .setSection(SCRIBE_SECTION) .setComponent(SCRIBE_COMPONENT) .setElement(SCRIBE_ELEMENT) .setAction(SCRIBE_ACTION) .builder(); scribeClient.scribe(ns); }  public void onActivityResult(int requestCode, int resultCode, Intent data) { Fabric.getLogger().d(TwitterCore.TAG, "onActivityResult called with " + requestCode + " " + resultCode); if (!authState.isAuthorizeInProgress()) { Fabric.getLogger().e(TwitterCore.TAG, "Authorize not in progress", null); } else { final AuthHandler authHandler = authState.getAuthHandler(); if (authHandler != null && authHandler.handleOnActivityResult(requestCode, resultCode, data)) { authState.endAuthorize(); } } }  public void requestEmail(TwitterSession session, Callback<String> callback) { if (session == null) { throw new IllegalArgumentException("Session must not be null."); } if (callback == null) { throw new IllegalArgumentException("Callback must not be null."); } scribeRequestEmail(); context.startActivity(newShareEmailIntent(session, callback)); } protected DefaultScribeClient getScribeClient() { return TwitterCoreScribeClientHolder.getScribeClient(); } private void scribeRequestEmail() { final DefaultScribeClient scribeClient = getScribeClient(); if (scribeClient == null) return; final EventNamespace ns = new EventNamespace.Builder() .setClient(SCRIBE_CLIENT) .setPage(SCRIBE_SHARE_EMAIL_PAGE) .setSection(SCRIBE_SECTION) .setComponent(SCRIBE_COMPONENT) .setElement(SCRIBE_ELEMENT) .setAction(SCRIBE_ACTION) .builder(); scribeClient.scribe(ns); } Intent newShareEmailIntent(TwitterSession session, Callback<String> callback) { return new Intent(context, ShareEmailActivity.class) .setFlags(Intent.FLAG_ACTIVITY_NEW_TASK) .putExtra(ShareEmailActivity.EXTRA_SESSION_ID, session.getId()) .putExtra(ShareEmailActivity.EXTRA_RESULT_RECEIVER, new ShareEmailResultReceiver(callback)); } static class CallbackWrapper extends Callback<TwitterSession> { private final SessionManager<TwitterSession> sessionManager; private final Callback<TwitterSession> callback; public CallbackWrapper(SessionManager<TwitterSession> sessionManager, Callback<TwitterSession> callback) { this.sessionManager = sessionManager; this.callback = callback; } @Override public void success(Result<TwitterSession> result) { Fabric.getLogger().d(TwitterCore.TAG, "Authorization completed successfully"); sessionManager.setActiveSession(result.data); callback.success(result); } @Override public void failure(TwitterException exception) { Fabric.getLogger().e(TwitterCore.TAG, "Authorization completed with an error", exception); callback.failure(exception); } }}package com.twitter.sdk.android.core.identity;import android.app.Activity;import android.content.ComponentName;import android.content.Context;import android.content.Intent;import android.content.pm.PackageManager;import io.fabric.sdk.android.FabricAndroidTestCase;import io.fabric.sdk.android.FabricTestUtils;import io.fabric.sdk.android.KitStub;import com.twitter.sdk.android.core.Callback;import com.twitter.sdk.android.core.Result;import com.twitter.sdk.android.core.SessionManager;import com.twitter.sdk.android.core.TestFixtures;import com.twitter.sdk.android.core.TwitterAuthConfig;import com.twitter.sdk.android.core.TwitterAuthException;import com.twitter.sdk.android.core.TwitterSession;import com.twitter.sdk.android.core.internal.scribe.DefaultScribeClient;import com.twitter.sdk.android.core.internal.scribe.EventNamespace;import org.mockito.ArgumentCaptor;import static org.mockito.Mockito.*;public class TwitterAuthClientTest extends FabricAndroidTestCase { private static final int TEST_REQUEST_CODE = 100; private Context mockContext; private TwitterAuthConfig mockAuthConfig; private SessionManager<TwitterSession> mockSessionManager; private AuthState mockAuthState; private Callback<TwitterSession> mockCallback; private DefaultScribeClient mockScribeClient; private TwitterAuthClient authClient; @Override protected void setUp() throws Exception { super.setUp(); mockContext = mock(Context.class); when(mockContext.getPackageName()).thenReturn(getClass().getPackage().toString()); mockAuthConfig = mock(TwitterAuthConfig.class); when(mockAuthConfig.getRequestCode()).thenReturn(TEST_REQUEST_CODE); mockSessionManager = mock(SessionManager.class); mockAuthState = mock(TestAuthState.class); mockCallback = mock(Callback.class); mockScribeClient = mock(DefaultScribeClient.class); authClient = new TwitterAuthClient(mockContext, mockAuthConfig, mockSessionManager, mockAuthState); } public void testConstructor_noParameters() throws Exception { FabricTestUtils.with(getContext(), new KitStub()); try { new TwitterAuthClient(); fail("Expected IllegalStateException to be thrown"); } catch (IllegalStateException e) { assertEquals("Must start Twitter Kit with Fabric.with() first", e.getMessage()); } finally { FabricTestUtils.resetFabric(); } } public void testGetRequestCode() { assertEquals(TEST_REQUEST_CODE, authClient.getRequestCode()); } public void testAuthorize_activityNull() { try { authClient.authorize(null, mock(Callback.class)); fail("Expected IllegalArgumentException to be thrown"); } catch (IllegalArgumentException e) { assertEquals("Activity must not be null.", e.getMessage()); } } public void testAuthorize_activityIsFinishing() { final Activity mockActivity = mock(Activity.class); when(mockActivity.isFinishing()).thenReturn(true); // Verify that when activity is finishing, no further work is done. authClient.authorize(mockActivity, mockCallback); verifyZeroInteractions(mockAuthState); } public void testAuthorize_callbackNull() { try { authClient.authorize(mock(Activity.class), null); fail("Expected IllegalArgumentException to be thrown"); } catch (IllegalArgumentException e) { assertEquals("Callback must not be null.", e.getMessage()); } } public void testAuthorize_authorizeInProgress() throws PackageManager.NameNotFoundException { final Activity mockActivity = mock(Activity.class); TestUtils.setupNoSSOAppInstalled(mockActivity); when(mockAuthState.isAuthorizeInProgress()).thenReturn(true); // Verify that when authorize is in progress, callback is notified of error. authClient.authorize(mockActivity, mockCallback); verify(mockCallback).failure(any(TwitterAuthException.class)); } public void testAuthorize_ssoAvailable() throws PackageManager.NameNotFoundException { final Activity mockActivity = mock(Activity.class); TestUtils.setupTwitterInstalled(mockActivity); when(mockAuthState.beginAuthorize(any(Activity.class), any(AuthHandler.class))) .thenReturn(true); // Verify that when SSO is available, SSOAuthHandler is used to complete the authorization // flow. authClient.authorize(mockActivity, mockCallback); verify(mockAuthState).beginAuthorize(eq(mockActivity), any(SSOAuthHandler.class)); } public void testAuthorize_ssoAvailableViaTwitterDogfood() throws PackageManager.NameNotFoundException { final Activity mockActivity = mock(Activity.class); TestUtils.setupTwitterInstalled(mockActivity); when(mockAuthState.beginAuthorize(any(Activity.class), any(AuthHandler.class))) .thenReturn(true); // Verify that when SSO is available, SSOAuthHandler is used to complete the authorization // flow. authClient.authorize(mockActivity, mockCallback); verify(mockAuthState).beginAuthorize(eq(mockActivity), any(SSOAuthHandler.class)); } public void testAuthorize_ssoNotAvailable() throws PackageManager.NameNotFoundException { final Activity mockActivity = mock(Activity.class); TestUtils.setupNoSSOAppInstalled(mockActivity); when(mockAuthState.beginAuthorize(any(Activity.class), any(AuthHandler.class))) .thenReturn(true); // Verify that when SSO is not available, OAuthHandler is used to complete the // authorization flow. authClient.authorize(mockActivity, mockCallback); verify(mockAuthState).beginAuthorize(eq(mockActivity), any(OAuthHandler.class)); } public void testAuthorize_bothSsoAndOAuthFail() throws PackageManager.NameNotFoundException { final Activity mockActivity = mock(Activity.class); TestUtils.setupTwitterInstalled(mockActivity); when(mockAuthState.beginAuthorize(any(Activity.class), any(AuthHandler.class))) .thenReturn(false); authClient.authorize(mockActivity, mockCallback); verify(mockAuthState, times(2)).beginAuthorize(eq(mockActivity), any(AuthHandler.class)); final ArgumentCaptor<TwitterAuthException> argCaptor = ArgumentCaptor.forClass(TwitterAuthException.class); verify(mockCallback).failure(argCaptor.capture()); assertEquals("Authorize failed.", argCaptor.getValue().getMessage()); } public void testAuthorize_scribesImpression() throws PackageManager.NameNotFoundException { final Activity mockActivity = mock(Activity.class); TestUtils.setupNoSSOAppInstalled(mockActivity); authClient = new TwitterAuthClient(mockContext, mockAuthConfig, mockSessionManager, mockAuthState) { @Override protected DefaultScribeClient getScribeClient() { return mockScribeClient; } }; authClient.authorize(mockActivity, mockCallback); verify(mockScribeClient).scribe(any(EventNamespace.class)); } public void testAuthorize_scribeHandlesNullClient() throws PackageManager.NameNotFoundException { final Activity mockActivity = mock(Activity.class); TestUtils.setupNoSSOAppInstalled(mockActivity); authClient = new TwitterAuthClient(mockContext, mockAuthConfig, mockSessionManager, mockAuthState) { @Override protected DefaultScribeClient getScribeClient() { return null; } }; try { authClient.authorize(mockActivity, mockCallback); } catch (NullPointerException e) { fail("should not crash with null scribe client"); } } public void testOnActivityResult_noAuthorizeInProgress() { when(mockAuthState.isAuthorizeInProgress()).thenReturn(false); // Verify that if authorize is in progress, onActivityResult returns early. authClient.onActivityResult(TEST_REQUEST_CODE, Activity.RESULT_OK, mock(Intent.class)); verify(mockAuthState).isAuthorizeInProgress(); verifyNoMoreInteractions(mockAuthState); } public void testOnActivityResult_handleOnActivityResultTrue() { setUpAuthStateOnActivityResult(true); // Verify that when the activity result is handled, auth state is updated to end. authClient.onActivityResult(TEST_REQUEST_CODE, Activity.RESULT_OK, mock(Intent.class)); verify(mockAuthState).isAuthorizeInProgress(); verify(mockAuthState).getAuthHandler(); verify(mockAuthState).endAuthorize(); } public void testOnActivityResult_handleOnActivityResultFalse() { setUpAuthStateOnActivityResult(false); // Verify that when the activity result is not handled, auth state is not updated to end. authClient.onActivityResult(TEST_REQUEST_CODE, Activity.RESULT_OK, mock(Intent.class)); verify(mockAuthState).isAuthorizeInProgress(); verify(mockAuthState).getAuthHandler(); verifyNoMoreInteractions(mockAuthState); } private void setUpAuthStateOnActivityResult(boolean handled) { final AuthHandler mockAuthHandler = mock(AuthHandler.class); when(mockAuthHandler.handleOnActivityResult(anyInt(), anyInt(), any(Intent.class))) .thenReturn(handled); when(mockAuthState.isAuthorizeInProgress()).thenReturn(true); when(mockAuthState.getAuthHandler()).thenReturn(mockAuthHandler); } public void testRequestEmail_nullSession() { try { authClient.requestEmail(null, mock(Callback.class)); fail("Expected IllegalArgumentException to be thrown"); } catch (IllegalArgumentException e) { assertEquals("Session must not be null.", e.getMessage()); } } public void testRequestEmail() { final TwitterSession mockSession = mock(TwitterSession.class); when(mockSession.getId()).thenReturn(TestFixtures.USER_ID); authClient.requestEmail(mockSession, mock(Callback.class)); final ArgumentCaptor<Intent> argCaptor = ArgumentCaptor.forClass(Intent.class); verify(mockContext).startActivity(argCaptor.capture()); assertShareEmailIntent(argCaptor.getValue()); } public void testRequestEmail_nullCallback() { try { authClient.requestEmail(mock(TwitterSession.class), null); fail("Expected IllegalArgumentException to be thrown"); } catch (IllegalArgumentException e) { assertEquals("Callback must not be null.", e.getMessage()); } } public void testRequestEmail_scribesImpression() { final TwitterSession mockSession = mock(TwitterSession.class); when(mockSession.getId()).thenReturn(TestFixtures.USER_ID); authClient = new TwitterAuthClient(mockContext, mockAuthConfig, mockSessionManager, mockAuthState) { @Override protected DefaultScribeClient getScribeClient() { return mockScribeClient; } }; authClient.requestEmail(mockSession, mock(Callback.class)); verify(mockScribeClient).scribe(any(EventNamespace.class)); } public void testReqestEmail_scribeHandlesNullClient() { final TwitterSession mockSession = mock(TwitterSession.class); when(mockSession.getId()).thenReturn(TestFixtures.USER_ID); authClient = new TwitterAuthClient(mockContext, mockAuthConfig, mockSessionManager, mockAuthState) { @Override protected DefaultScribeClient getScribeClient() { return null; } }; try { authClient.requestEmail(mockSession, mock(Callback.class)); } catch (NullPointerException e) { fail("should handle null scribe client"); } } public void testNewShareEmailIntent() { final TwitterSession mockSession = mock(TwitterSession.class); when(mockSession.getId()).thenReturn(TestFixtures.USER_ID); final Intent intent = authClient.newShareEmailIntent(mockSession, mock(Callback.class)); assertShareEmailIntent(intent); } private void assertShareEmailIntent(Intent intent) { final ComponentName component = new ComponentName(mockContext, ShareEmailActivity.class.getName()); assertEquals(component, intent.getComponent()); assertEquals(Intent.FLAG_ACTIVITY_NEW_TASK, intent.getFlags()); assertEquals(TestFixtures.USER_ID, intent.getLongExtra(ShareEmailActivity.EXTRA_SESSION_ID, TwitterSession.UNKNOWN_USER_ID)); assertNotNull(intent.getParcelableExtra(ShareEmailActivity.EXTRA_RESULT_RECEIVER)); } public void testCallbackWrapper_success() { final TwitterAuthClient.CallbackWrapper callbackWrapper = new TwitterAuthClient.CallbackWrapper(mockSessionManager, mockCallback); final TwitterSession mockSession = mock(TwitterSession.class); final Result<TwitterSession> mockResult = new Result<>(mockSession, null); callbackWrapper.success(mockResult); verify(mockSessionManager).setActiveSession(eq(mockSession)); verify(mockCallback).success(eq(mockResult)); } public void testCallbackWrapper_failure() { final TwitterAuthClient.CallbackWrapper callbackWrapper = new TwitterAuthClient.CallbackWrapper(mockSessionManager, mockCallback); final TwitterAuthException mockException = mock(TwitterAuthException.class); callbackWrapper.failure(mockException); verifyZeroInteractions(mockSessionManager); verify(mockCallback).failure(eq(mockException)); }}package com.twitter.sdk.android.core;import android.os.Parcel;import android.os.Parcelable;public class TwitterAuthConfig implements Parcelable {  public static final int DEFAULT_AUTH_REQUEST_CODE = 140; public static final Parcelable.Creator<TwitterAuthConfig> CREATOR = new Parcelable.Creator<TwitterAuthConfig>() { public TwitterAuthConfig createFromParcel(Parcel in) { return new TwitterAuthConfig(in); } public TwitterAuthConfig[] newArray(int size) { return new TwitterAuthConfig[size]; } }; private final String consumerKey; private final String consumerSecret;  public TwitterAuthConfig(String consumerKey, String consumerSecret) { if (consumerKey == null || consumerSecret == null) { throw new IllegalArgumentException( "TwitterAuthConfig must not be created with null consumer key or secret."); } this.consumerKey = sanitizeAttribute(consumerKey); this.consumerSecret = sanitizeAttribute(consumerSecret); } private TwitterAuthConfig(Parcel in) { consumerKey = in.readString(); consumerSecret = in.readString(); }  public String getConsumerKey() { return consumerKey; }  public String getConsumerSecret() { return consumerSecret; }  public int getRequestCode() { return DEFAULT_AUTH_REQUEST_CODE; } static String sanitizeAttribute(String input) { if (input != null) { return input.trim(); } else { return null; } } @Override public int describeContents() { return 0; } @Override public void writeToParcel(Parcel out, int flags) { out.writeString(consumerKey); out.writeString(consumerSecret); }}package com.twitter.sdk.android.core;import android.os.Parcel;import io.fabric.sdk.android.FabricAndroidTestCase;public class TwitterAuthConfigTest extends FabricAndroidTestCase { private static final String NO_PARAM_ERROR_MSG = "TwitterAuthConfig must not be created with null consumer key or secret."; private TwitterAuthConfig authConfig; @Override protected void setUp() throws Exception { super.setUp(); authConfig = new TwitterAuthConfig(TestFixtures.KEY, TestFixtures.SECRET); } public void testParcelable() { final Parcel parcel = Parcel.obtain(); authConfig.writeToParcel(parcel, 0); parcel.setDataPosition(0); final TwitterAuthConfig parceledAuthConfig = TwitterAuthConfig.CREATOR.createFromParcel(parcel); assertEquals(TestFixtures.KEY, parceledAuthConfig.getConsumerKey()); assertEquals(TestFixtures.SECRET, parceledAuthConfig.getConsumerSecret()); } public void testGetRequestCode() { assertEquals(TwitterAuthConfig.DEFAULT_AUTH_REQUEST_CODE, authConfig.getRequestCode()); } public void testSanitizeAttribute_nullAttribute() { assertNull(TwitterAuthConfig.sanitizeAttribute(null)); } public void testSanitizeAttribute_sanitizedString() { final String test = "test"; assertEquals(test, TwitterAuthConfig.sanitizeAttribute(test)); } public void testSanitizeAttribute_trailingWhitespace() { final String test = "test "; assertEquals("test", TwitterAuthConfig.sanitizeAttribute(test)); } public void testConstructor_nullKey() { try { new TwitterAuthConfig(null, "secret"); fail(); } catch (IllegalArgumentException ie) { assertEquals(NO_PARAM_ERROR_MSG, ie.getMessage()); } } public void testConstructor_nullSecret() { try { new TwitterAuthConfig("key", null); fail(); } catch (IllegalArgumentException ie) { assertEquals(NO_PARAM_ERROR_MSG, ie.getMessage()); } } public void testConstructor_nullArguments() { try { new TwitterAuthConfig(null, null); fail(); } catch (IllegalArgumentException ie) { assertEquals(NO_PARAM_ERROR_MSG, ie.getMessage()); } }}package com.twitter.sdk.android.core;public class TwitterAuthException extends TwitterException { private static final long serialVersionUID = 577033016879783994L; public TwitterAuthException(String detailMessage) { super(detailMessage); } public TwitterAuthException(String detailMessage, Throwable throwable) { super(detailMessage, throwable); }}package com.twitter.sdk.android.core;import android.os.Parcel;import android.os.Parcelable;import com.google.gson.annotations.SerializedName;public class TwitterAuthToken extends AuthToken implements Parcelable { public static final Parcelable.Creator<TwitterAuthToken> CREATOR = new Parcelable.Creator<TwitterAuthToken>() { public TwitterAuthToken createFromParcel(Parcel in) { return new TwitterAuthToken(in); } public TwitterAuthToken[] newArray(int size) { return new TwitterAuthToken[size]; } }; @SerializedName("token") public final String token; @SerializedName("secret") public final String secret; public TwitterAuthToken(String token, String secret) { super(); this.token = token; this.secret = secret; } // for testing purposes TwitterAuthToken(String token, String secret, long createdAt) { super(createdAt); this.token = token; this.secret = secret; } private TwitterAuthToken(Parcel in) { super(); this.token = in.readString(); this.secret = in.readString(); } @Override public boolean isExpired() { // Twitter does not expire OAuth1a tokens return false; } @Override public String toString() { final StringBuilder sb = new StringBuilder() .append("token=").append(this.token) .append(",secret=").append(this.secret); return sb.toString(); } @Override public int describeContents() { return 0; } @Override public void writeToParcel(Parcel out, int flags) { out.writeString(token); out.writeString(secret); } @Override public boolean equals(Object o) { if (this == o) return true; if (!(o instanceof TwitterAuthToken)) return false; final TwitterAuthToken that = (TwitterAuthToken) o; if (secret != null ? !secret.equals(that.secret) : that.secret != null) return false; if (token != null ? !token.equals(that.token) : that.token != null) return false; return true; } @Override public int hashCode() { int result = token != null ? token.hashCode() : 0; result = 31 * result + (secret != null ? secret.hashCode() : 0); return result; }}package com.twitter.sdk.android.core.internal;import com.google.gson.annotations.SerializedName;import com.twitter.sdk.android.core.models.Tweet;import com.twitter.sdk.android.core.models.User;import java.util.List;import java.util.Map;public class TwitterCollection { public TwitterCollection(Content contents, Metadata metadata) { this.contents = contents; this.metadata = metadata; } @SerializedName("objects") public final Content contents; @SerializedName("response") public final Metadata metadata;  public static final class Content {  @SerializedName("tweets") public final Map<Long, Tweet> tweetMap;  @SerializedName("users") public final Map<Long, User> userMap; public Content(Map<Long, Tweet> tweetMap, Map<Long, User> userMap) { this.tweetMap = tweetMap; this.userMap = userMap; } }  public static final class Metadata { public Metadata(String timelineId, Position position, List<TimelineItem> timelines) { this.timelineId = timelineId; this.position = position; this.timelineItems = timelines; }  @SerializedName("timeline_id") public final String timelineId; @SerializedName("position") public final Position position;  @SerializedName("timeline") public final List<TimelineItem> timelineItems;  public static final class Position {  @SerializedName("min_position") public final Long minPosition;  @SerializedName("max_position") public final Long maxPosition; public Position(Long maxPosition, Long minPosition) { this.maxPosition = maxPosition; this.minPosition = minPosition; } } }  public static class TimelineItem { public TimelineItem(TweetItem tweetItem) { this.tweetItem = tweetItem; }  @SerializedName("tweet") public final TweetItem tweetItem; public static final class TweetItem { public TweetItem(Long id) { this.id = id; }  @SerializedName("id") public final Long id; } }}package com.twitter.sdk.android.core;import android.app.Activity;import io.fabric.sdk.android.Fabric;import io.fabric.sdk.android.Kit;import io.fabric.sdk.android.services.network.NetworkUtils;import io.fabric.sdk.android.services.persistence.PreferenceStoreImpl;import com.twitter.sdk.android.core.identity.TwitterAuthClient;import com.twitter.sdk.android.core.internal.MigrationHelper;import com.twitter.sdk.android.core.internal.SessionMonitor;import com.twitter.sdk.android.core.internal.TwitterApi;import com.twitter.sdk.android.core.internal.TwitterSessionVerifier;import com.twitter.sdk.android.core.internal.oauth.OAuth2Service;import com.twitter.sdk.android.core.internal.scribe.TwitterCoreScribeClientHolder;import java.util.concurrent.ConcurrentHashMap;import javax.net.ssl.SSLSocketFactory;public class TwitterCore extends Kit<Boolean> { public static final String TAG = "Twitter"; static final String PREF_KEY_ACTIVE_TWITTER_SESSION = "active_twittersession"; static final String PREF_KEY_TWITTER_SESSION = "twittersession"; static final String PREF_KEY_ACTIVE_GUEST_SESSION = "active_guestsession"; static final String PREF_KEY_GUEST_SESSION = "guestsession"; static final String SESSION_PREF_FILE_NAME = "session_store"; SessionManager<TwitterSession> twitterSessionManager; SessionManager<GuestSession> guestSessionManager; SessionMonitor<TwitterSession> sessionMonitor; private final TwitterAuthConfig authConfig; private final ConcurrentHashMap<Session, TwitterApiClient> apiClients; private volatile TwitterApiClient guestClient; private volatile GuestSessionProvider guestSessionProvider; private volatile SSLSocketFactory sslSocketFactory; public TwitterCore(TwitterAuthConfig authConfig) { this(authConfig, new ConcurrentHashMap<Session, TwitterApiClient>(), null); } // Testing only TwitterCore(TwitterAuthConfig authConfig, ConcurrentHashMap<Session, TwitterApiClient> apiClients, TwitterApiClient guestClient) { this.authConfig = authConfig; this.apiClients = apiClients; this.guestClient = guestClient; } public static TwitterCore getInstance() { checkInitialized(); return Fabric.getKit(TwitterCore.class); } @Override public String getVersion() { return BuildConfig.VERSION_NAME + "." + BuildConfig.BUILD_NUMBER; } public TwitterAuthConfig getAuthConfig() { return authConfig; }  public SSLSocketFactory getSSLSocketFactory() { checkInitialized(); if (sslSocketFactory == null) { createSSLSocketFactory(); } return sslSocketFactory; } private synchronized void createSSLSocketFactory() { if (sslSocketFactory == null) { try { sslSocketFactory = NetworkUtils.getSSLSocketFactory( new TwitterPinningInfoProvider(getContext())); Fabric.getLogger().d(TAG, "Custom SSL pinning enabled"); } catch (Exception e) { Fabric.getLogger().e(TAG, "Exception setting up custom SSL pinning", e); } } } @Override protected boolean onPreExecute() { final MigrationHelper migrationHelper = new MigrationHelper(); migrationHelper.migrateSessionStore(getContext(), getIdentifier(), getIdentifier() + ":" + SESSION_PREF_FILE_NAME + ".xml"); twitterSessionManager = new PersistedSessionManager<>( new PreferenceStoreImpl(getContext(), SESSION_PREF_FILE_NAME), new TwitterSession.Serializer(), PREF_KEY_ACTIVE_TWITTER_SESSION, PREF_KEY_TWITTER_SESSION); guestSessionManager = new PersistedSessionManager<>( new PreferenceStoreImpl(getContext(), SESSION_PREF_FILE_NAME), new GuestSession.Serializer(), PREF_KEY_ACTIVE_GUEST_SESSION, PREF_KEY_GUEST_SESSION); sessionMonitor = new SessionMonitor<>(twitterSessionManager, getFabric().getExecutorService(), new TwitterSessionVerifier()); return true; } @Override protected Boolean doInBackground() { // Trigger restoration of session twitterSessionManager.getActiveSession(); guestSessionManager.getActiveSession(); getSSLSocketFactory(); getGuestSessionProvider(); initializeScribeClient(); // Monitor activity lifecycle after sessions have been restored. Otherwise we would not // have any sessions to monitor anyways. sessionMonitor.monitorActivityLifecycle(getFabric().getActivityLifecycleManager()); return true; } @Override public String getIdentifier() { return BuildConfig.GROUP + ":" + BuildConfig.ARTIFACT_ID; } private static void checkInitialized() { if (Fabric.getKit(TwitterCore.class) == null) { throw new IllegalStateException("Must start Twitter Kit with Fabric.with() first"); } } private void initializeScribeClient() { TwitterCoreScribeClientHolder.initialize(this, getSessionManager(), getGuestSessionProvider(), getIdManager()); }   public void logIn(Activity activity, Callback<TwitterSession> callback) { checkInitialized(); new TwitterAuthClient().authorize(activity, callback); }  public void logOut() { checkInitialized(); final SessionManager<TwitterSession> sessionManager = getSessionManager(); if (sessionManager != null) { sessionManager.clearActiveSession(); } }  public SessionManager<TwitterSession> getSessionManager() { checkInitialized(); return twitterSessionManager; } public GuestSessionProvider getGuestSessionProvider() { checkInitialized(); if (guestSessionProvider == null) { createGuestSessionProvider(); } return guestSessionProvider; } private synchronized void createGuestSessionProvider() { if (guestSessionProvider == null) { final OAuth2Service service = new OAuth2Service(this, getSSLSocketFactory(), new TwitterApi()); guestSessionProvider = new GuestSessionProvider(service, guestSessionManager); } }  public TwitterApiClient getApiClient() { checkInitialized(); final TwitterSession session = twitterSessionManager.getActiveSession(); if (session == null) { return getGuestApiClient(); } return getApiClient(session); }  public TwitterApiClient getApiClient(TwitterSession session) { checkInitialized(); if (!apiClients.containsKey(session)) { apiClients.putIfAbsent(session, new TwitterApiClient(session)); } return apiClients.get(session); }  public TwitterApiClient getGuestApiClient() { checkInitialized(); if (guestClient == null) { createGuestClient(); } return guestClient; } private synchronized void createGuestClient() { if (guestClient == null) { guestClient = new TwitterApiClient(); } }}package com.twitter.sdk.android.core.internal.scribe;import com.twitter.sdk.android.core.GuestSessionProvider;import com.twitter.sdk.android.core.Session;import com.twitter.sdk.android.core.SessionManager;import com.twitter.sdk.android.core.TwitterAuthToken;import com.twitter.sdk.android.core.TwitterCore;import io.fabric.sdk.android.services.common.IdManager;public class TwitterCoreScribeClientHolder { private static final String KIT_NAME = "TwitterCore"; private static DefaultScribeClient instance;  public static DefaultScribeClient getScribeClient() { return instance; }  public static void initialize(TwitterCore kit, SessionManager<? extends Session<TwitterAuthToken>> sessionManagers, GuestSessionProvider guestSessionProvider, IdManager idManager) { instance = new DefaultScribeClient(kit, KIT_NAME, sessionManagers, guestSessionProvider, idManager); }}package com.twitter.sdk.android.core;import android.app.Activity;import io.fabric.sdk.android.Fabric;import io.fabric.sdk.android.FabricAndroidTestCase;import io.fabric.sdk.android.FabricTestUtils;import io.fabric.sdk.android.KitStub;import java.util.Arrays;import java.util.List;import java.util.concurrent.Callable;import java.util.concurrent.ExecutorService;import java.util.concurrent.Executors;import java.util.concurrent.Future;import javax.net.ssl.SSLSocketFactory;import static org.mockito.Mockito.mock;import static org.mockito.Mockito.when;public class TwitterCoreTest extends FabricAndroidTestCase { private static final String TWITTER_NOT_INIT_ERROR_MSG = "Must start Twitter Kit with Fabric.with() first"; private static final String FABRIC_NOT_INIT_ERROR_MSG = "Must Initialize Fabric before using singleton()"; private TwitterCore twitterCore; @Override protected void setUp() throws Exception { super.setUp(); twitterCore = new TwitterCore(new TwitterAuthConfig("", "")); } @Override protected void tearDown() throws Exception { super.tearDown(); FabricTestUtils.resetFabric(); } public void testLogOut_noSdkStart() { try { TwitterCore.getInstance().logOut(); fail("Should fail if Fabric is not instantiated."); } catch (IllegalStateException ex) { assertEquals(FABRIC_NOT_INIT_ERROR_MSG, ex.getMessage()); } } public void testLogOut_sdkStartNoTwitterKit() throws Exception { FabricTestUtils.with(getContext(), new KitStub<Result>()); try { TwitterCore.getInstance().logOut(); fail("Should fail if Twitter is not instantiated with Fabric."); } catch (IllegalStateException ie) { assertEquals(TWITTER_NOT_INIT_ERROR_MSG, ie.getMessage()); } } public void testLogIn_noSdkStart() { final Callback<TwitterSession> mockCallback = mock(Callback.class); try { TwitterCore.getInstance().logIn(mock(Activity.class), mockCallback); fail("Should fail if Fabric is not instantiated."); } catch (IllegalStateException ie) { assertEquals(FABRIC_NOT_INIT_ERROR_MSG, ie.getMessage()); } } public void testLogIn_sdkStartNoTwitterKit() throws Exception { FabricTestUtils.with(getContext(), new KitStub<Result>()); final Callback<TwitterSession> mockCallback = mock(Callback.class); try { TwitterCore.getInstance().logIn(mock(Activity.class), mockCallback); fail("Should fail if Twitter is not instantiated with Fabric."); } catch (IllegalStateException ie) { assertEquals(TWITTER_NOT_INIT_ERROR_MSG, ie.getMessage()); } } public void testGuestSessionManager_noSdkStart() { try { TwitterCore.getInstance().getGuestSessionProvider(); fail("Should fail if Fabric is not instantiated."); } catch (IllegalStateException ie) { assertEquals(FABRIC_NOT_INIT_ERROR_MSG, ie.getMessage()); } } public void testGuestSessionManager_sdkStartNoTwitterKit() throws Exception { FabricTestUtils.with(getContext(), new KitStub<Result>()); try { TwitterCore.getInstance().getGuestSessionProvider(); fail("Should fail if Twitter is not instantiated with Fabric."); } catch (IllegalStateException ie) { assertEquals(TWITTER_NOT_INIT_ERROR_MSG, ie.getMessage()); } } public void testGetIdentifier() { final String identifier = BuildConfig.GROUP + ":" + BuildConfig.ARTIFACT_ID; assertEquals(identifier, twitterCore.getIdentifier()); } public void testGetSSLSocketFactory_noSdkStart() { try { twitterCore.getSSLSocketFactory(); fail("Should fail if Fabric is not instantiated."); } catch (IllegalStateException ex) { assertEquals(FABRIC_NOT_INIT_ERROR_MSG, ex.getMessage()); } } public void testGetSSLSocketFactory_sdkStartNoTwitterKit() throws Exception { FabricTestUtils.with(getContext(), new KitStub<Result>()); try { twitterCore.getSSLSocketFactory(); fail("Should fail if Twitter is not instantiated with Fabric."); } catch (IllegalStateException ex) { assertEquals(TWITTER_NOT_INIT_ERROR_MSG, ex.getMessage()); } } public void testGetSessionManager() throws Exception { FabricTestUtils.with(getContext(), twitterCore); assertNotNull(twitterCore.getSessionManager()); } public void testGetSessionManager_twitterNotInitialized() throws Exception { FabricTestUtils.with(getContext(), new KitStub()); try { twitterCore.getSessionManager(); fail("Should fail if Twitter is not instantiated with Fabric."); } catch (IllegalStateException ex) { assertEquals(TWITTER_NOT_INIT_ERROR_MSG, ex.getMessage()); } } public void testGetAppSessionManager() throws Exception { FabricTestUtils.with(getContext(), twitterCore); assertNotNull(twitterCore.getGuestSessionProvider()); } public void testGetAppSessionManager_twitterNotInitialized() throws Exception { FabricTestUtils.with(getContext(), new KitStub()); try { twitterCore.getGuestSessionProvider(); fail("Should fail if Twitter is not instantiated with Fabric."); } catch (IllegalStateException ex) { assertEquals(TWITTER_NOT_INIT_ERROR_MSG, ex.getMessage()); } } public void testGetApiClient_activeSessionExists() throws Exception { FabricTestUtils.with(getContext(), twitterCore); twitterCore.twitterSessionManager = setUpSessionManager(mock(TwitterSession.class)); assertNotNull(twitterCore.getApiClient()); } public void testGetApiClient_twitterNotInitialized() throws Exception { FabricTestUtils.with(getContext(), new KitStub<Result>()); try { twitterCore.getApiClient(); fail("Should fail if Twitter is not instantiated with Fabric."); } catch (IllegalStateException ex) { assertEquals(TWITTER_NOT_INIT_ERROR_MSG, ex.getMessage()); } } public void testGetApiClient_withSession() throws Exception { FabricTestUtils.with(getContext(), twitterCore); assertNotNull(twitterCore.getApiClient(mock(TwitterSession.class))); } public void testGetApiClient_withSessionTwitterNotInitialized() throws Exception { FabricTestUtils.with(getContext(), new KitStub<Result>()); try { twitterCore.getApiClient(mock(TwitterSession.class)); fail("Should fail if Twitter is not instantiated with Fabric."); } catch (IllegalStateException ex) { assertEquals(TWITTER_NOT_INIT_ERROR_MSG, ex.getMessage()); } } public void testGetGuestApiClient_twitterNotInitialized() throws Exception { FabricTestUtils.with(getContext(), new KitStub<Result>()); try { twitterCore.getGuestApiClient(); fail("Should fail if Twitter is not instantiated with Fabric."); } catch (IllegalStateException ex) { assertEquals(TWITTER_NOT_INIT_ERROR_MSG, ex.getMessage()); } } private <T extends Session> SessionManager<T> setUpSessionManager(T session) { final SessionManager<T> sessionManager = mock(SessionManager.class); when(sessionManager.getActiveSession()).thenReturn(session); return sessionManager; } public void testGetSSLSocketFactory_contention() throws Exception { // We don't want to use FabricTestUtils here because we want to test // this when onBackground is also running Fabric.with(getContext(), twitterCore); final List<SSLSocketFactoryCallable> callables = Arrays.asList( new SSLSocketFactoryCallable(twitterCore), new SSLSocketFactoryCallable(twitterCore)); final ExecutorService executorService = Executors.newFixedThreadPool(callables.size()); final List<Future<SSLSocketFactory>> socketFactories = executorService.invokeAll(callables); assertNotNull(socketFactories.get(0).get()); assertNotNull(socketFactories.get(1).get()); assertSame(socketFactories.get(0).get(), socketFactories.get(1).get()); } private static class SSLSocketFactoryCallable implements Callable<SSLSocketFactory> { private TwitterCore twitter; protected SSLSocketFactoryCallable(TwitterCore twitter) { this.twitter = twitter; } @Override public SSLSocketFactory call() { return twitter.getSSLSocketFactory(); } }}package com.twitter.sdk.android.core;import java.util.concurrent.ConcurrentHashMap;public final class TwitterCoreTestUtils { private TwitterCoreTestUtils() {} public static TwitterCore createTwitterCore(TwitterAuthConfig authConfig, ConcurrentHashMap<Session, TwitterApiClient> clients, TwitterApiClient guestClient) { return new TwitterCore(authConfig, clients, guestClient); }}package com.twitter.sdk.android.core;public class TwitterException extends RuntimeException { public TwitterException(String detailMessage) { super(detailMessage); } public TwitterException(String detailMessage, Throwable throwable) { super(detailMessage, throwable); }}package com.twitter.sdk.android.unity;import android.app.Activity;import android.content.Intent;import android.net.Uri;import com.google.gson.Gson;import com.twitter.sdk.android.core.TwitterCore;import com.twitter.sdk.android.core.TwitterSession;import com.twitter.sdk.android.core.TwitterSessionHelper;import com.twitter.sdk.android.tweetcomposer.Card;import com.twitter.sdk.android.tweetcomposer.ComposerActivity;import com.unity3d.player.UnityPlayer;public class TwitterKit { public static final String GAME_OBJECT_NAME = "TwitterGameObject"; public static final String EXTRA_TWITTER_SESSION = "EXTRA_TWITTER_SESSION";  public static void login() { final Activity currentActivity = UnityPlayer.currentActivity; final Intent intent = new Intent(currentActivity, LoginActivity.class); currentActivity.startActivity(intent); }  public static void requestEmail(String session) { final Activity currentActivity = UnityPlayer.currentActivity; final Intent intent = new Intent(currentActivity, RequestEmailActivity.class); intent.putExtra(EXTRA_TWITTER_SESSION, session); currentActivity.startActivity(intent); }  public static void logout() { TwitterCore.getInstance().logOut(); }  public static String session() { final TwitterSession session = TwitterCore.getInstance().getSessionManager() .getActiveSession(); return TwitterSessionHelper.serialize(session); }  public static void compose(String session, String config, String[] hashtags) { final Activity currentActivity = UnityPlayer.currentActivity; final CardConfig cardConfig = new Gson().fromJson(config, CardConfig.class); final Card card = new Card.AppCardBuilder(currentActivity) .imageUri(Uri.parse(cardConfig.imageUri)) .googlePlayId(cardConfig.appGooglePlayId) .iPadId(cardConfig.appIPadId) .iPhoneId(cardConfig.appIPhoneId) .build(); final Intent intent = new ComposerActivity.Builder(currentActivity) .session(TwitterSessionHelper.deserialize(session)) .card(card) .hashtags(hashtags) .createIntent(); currentActivity.startActivity(intent); } static class CardConfig { final public String appIPhoneId; final public String appIPadId; final public String appGooglePlayId; final public String imageUri; CardConfig(String imageUri, String appGooglePlayId, String appIPadId, String appIPhoneId) { this.imageUri = imageUri; this.appGooglePlayId = appGooglePlayId; this.appIPadId = appIPadId; this.appIPhoneId = appIPhoneId; } }}package com.twitter.sdk.android.tweetui;import com.twitter.sdk.android.core.Callback;import com.twitter.sdk.android.core.TwitterCore;import com.twitter.sdk.android.core.models.Tweet;import java.util.List;import retrofit2.Call;public class TwitterListTimeline extends BaseTimeline implements Timeline<Tweet> { private static final String SCRIBE_SECTION = "list"; final Long listId; final String slug; final String ownerScreenName; final Long ownerId; final Integer maxItemsPerRequest; final Boolean includeRetweets; TwitterListTimeline(TweetUi tweetUi, Long listId, String slug, Long ownerId, String ownerScreenName, Integer maxItemsPerRequest, Boolean includeRetweets) { super(tweetUi); this.listId = listId; this.slug = slug; this.ownerId = ownerId; this.ownerScreenName = ownerScreenName; this.maxItemsPerRequest = maxItemsPerRequest; this.includeRetweets = includeRetweets; }  @Override public void next(Long sinceId, Callback<TimelineResult<Tweet>> cb) { createListTimelineRequest(sinceId, null).enqueue(new TweetsCallback(cb)); }  @Override public void previous(Long maxId, Callback<TimelineResult<Tweet>> cb) { // lists/statuses api provides results which are inclusive of the maxId, decrement the // maxId to get exclusive results createListTimelineRequest(null, decrementMaxId(maxId)).enqueue(new TweetsCallback(cb)); } Call<List<Tweet>> createListTimelineRequest(final Long sinceId, final Long maxId) { return TwitterCore.getInstance().getApiClient().getListService().statuses(listId, slug, ownerScreenName, ownerId, sinceId, maxId, maxItemsPerRequest, true, includeRetweets); } @Override String getTimelineType() { return SCRIBE_SECTION; }  public static class Builder { private final TweetUi tweetUi; private Long listId; private String slug; private Long ownerId; private String ownerScreenName; private Integer maxItemsPerRequest = 30; private Boolean includeRetweets;  public Builder() { this(TweetUi.getInstance()); }  public Builder(TweetUi tweetUi) { if (tweetUi == null) { throw new IllegalArgumentException("TweetUi instance must not be null"); } this.tweetUi = tweetUi; }  public Builder id(Long id) { this.listId = id; return this; }  public Builder slugWithOwnerId(String slug, Long ownerId) { this.slug = slug; this.ownerId = ownerId; return this; }  public Builder slugWithOwnerScreenName(String slug, String ownerScreenName) { this.slug = slug; this.ownerScreenName = ownerScreenName; return this; }  public Builder maxItemsPerRequest(Integer maxItemsPerRequest) { this.maxItemsPerRequest = maxItemsPerRequest; return this; }  public Builder includeRetweets(Boolean includeRetweets) { this.includeRetweets = includeRetweets; return this; }  public TwitterListTimeline build() { // user must provide either an id or slug, not both if (!(listId == null ^ slug == null)) { throw new IllegalStateException("must specify either a list id or slug/owner pair"); } // user provides a slug, but ownerId and ownerScreenName are null if (slug != null && ownerId == null && ownerScreenName == null) { throw new IllegalStateException( "slug/owner pair must set owner via ownerId or ownerScreenName"); } return new TwitterListTimeline(tweetUi, listId, slug, ownerId, ownerScreenName, maxItemsPerRequest, includeRetweets); } }}package com.twitter.sdk.android.core.identity;import android.app.Activity;import android.annotation.TargetApi;import android.content.Context;import android.content.Intent;import android.content.res.Resources;import android.graphics.Typeface;import android.os.Build;import android.util.AttributeSet;import android.util.TypedValue;import android.view.View;import android.widget.Button;import com.twitter.sdk.android.core.Callback;import com.twitter.sdk.android.core.R;import com.twitter.sdk.android.core.TwitterCore;import com.twitter.sdk.android.core.TwitterSession;import io.fabric.sdk.android.Fabric;import java.lang.ref.WeakReference;import io.fabric.sdk.android.services.common.CommonUtils;public class TwitterLoginButton extends Button { final static String TAG = TwitterCore.TAG; static final String ERROR_MSG_NO_ACTIVITY = "TwitterLoginButton requires an activity." + " Override getActivity to provide the activity for this button."; final WeakReference<Activity> activityRef; volatile TwitterAuthClient authClient; OnClickListener onClickListener; Callback<TwitterSession> callback; public TwitterLoginButton(Context context) { this(context, null); } public TwitterLoginButton(Context context, AttributeSet attrs) { this(context, attrs, android.R.attr.buttonStyle); } public TwitterLoginButton(Context context, AttributeSet attrs, int defStyle) { this(context, attrs, defStyle, null); } TwitterLoginButton(Context context, AttributeSet attrs, int defStyle, TwitterAuthClient authClient) { super(context, attrs, defStyle); this.activityRef = new WeakReference<>(getActivity()); this.authClient = authClient; setupButton(); checkTwitterCoreAndEnable(); } @TargetApi(Build.VERSION_CODES.LOLLIPOP) private void setupButton() { final Resources res = getResources(); super.setCompoundDrawablesWithIntrinsicBounds( res.getDrawable(R.drawable.tw__ic_logo_default), null, null, null); super.setCompoundDrawablePadding( res.getDimensionPixelSize(R.dimen.tw__login_btn_drawable_padding)); super.setText(R.string.tw__login_btn_txt); super.setTextColor(res.getColor(R.color.tw__solid_white)); super.setTextSize(TypedValue.COMPLEX_UNIT_PX, res.getDimensionPixelSize(R.dimen.tw__login_btn_text_size)); super.setTypeface(Typeface.DEFAULT_BOLD); super.setPadding(res.getDimensionPixelSize(R.dimen.tw__login_btn_left_padding), 0, res.getDimensionPixelSize(R.dimen.tw__login_btn_right_padding), 0); super.setBackgroundResource(R.drawable.tw__login_btn); super.setOnClickListener(new LoginClickListener()); if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) { super.setAllCaps(false); } }  public void setCallback(Callback<TwitterSession> callback) { if (callback == null) { throw new IllegalArgumentException("Callback cannot be null"); } this.callback = callback; }  public Callback<TwitterSession> getCallback() { return callback; }  public void onActivityResult(int requestCode, int resultCode, Intent data) { if (requestCode == getTwitterAuthClient().getRequestCode()) { getTwitterAuthClient().onActivityResult(requestCode, resultCode, data); } }  protected Activity getActivity() { if (getContext() instanceof Activity) { return (Activity) getContext(); } else if (isInEditMode()) { return null; } else { throw new IllegalStateException(ERROR_MSG_NO_ACTIVITY); } } @Override public void setOnClickListener(OnClickListener onClickListener) { this.onClickListener = onClickListener; } private class LoginClickListener implements OnClickListener { @Override public void onClick(View view) { checkCallback(callback); checkActivity(activityRef.get()); getTwitterAuthClient().authorize(activityRef.get(), callback); if (onClickListener != null) { onClickListener.onClick(view); } } private void checkCallback(Callback callback) { if (callback == null) { CommonUtils.logOrThrowIllegalStateException(TwitterCore.TAG, "Callback must not be null, did you call setCallback?"); } } private void checkActivity(Activity activity) { if (activity == null || activity.isFinishing()) { CommonUtils.logOrThrowIllegalStateException(TwitterCore.TAG, ERROR_MSG_NO_ACTIVITY); } } } TwitterAuthClient getTwitterAuthClient() { if (authClient == null) { synchronized (TwitterLoginButton.class) { if (authClient == null) { authClient = new TwitterAuthClient(); } } } return authClient; } private void checkTwitterCoreAndEnable() { //Default (Enabled) in edit mode if (isInEditMode()) return; try { TwitterCore.getInstance(); } catch (IllegalStateException ex) { //Disable if TwitterCore hasn't started Fabric.getLogger().e(TAG, ex.getMessage()); setEnabled(false); } }}package com.twitter.sdk.android.core.identity;import android.app.Activity;import android.content.Intent;import android.util.Log;import android.view.View;import io.fabric.sdk.android.Fabric;import io.fabric.sdk.android.FabricAndroidTestCase;import io.fabric.sdk.android.FabricTestUtils;import io.fabric.sdk.android.KitStub;import io.fabric.sdk.android.Logger;import com.twitter.sdk.android.core.Callback;import com.twitter.sdk.android.core.TwitterAuthConfig;import com.twitter.sdk.android.core.TwitterCore;import com.twitter.sdk.android.core.TwitterSession;import org.mockito.ArgumentCaptor;import static org.mockito.Mockito.*;public class TwitterLoginButtonTest extends FabricAndroidTestCase { private static final int TEST_REQUEST_CODE = 100; private Activity mockActivity; private TwitterAuthClient mockAuthClient; private Callback<TwitterSession> mockCallback; private View.OnClickListener mockViewClickListener; private TwitterLoginButton loginButton; @Override protected void setUp() throws Exception { super.setUp(); mockActivity = mock(Activity.class); mockAuthClient = mock(TwitterAuthClient.class); when(mockAuthClient.getRequestCode()).thenReturn(TEST_REQUEST_CODE); doNothing().when(mockAuthClient).authorize(any(Activity.class), any(Callback.class)); doNothing().when(mockAuthClient).onActivityResult(anyInt(), anyInt(), any(Intent.class)); mockCallback = mock(Callback.class); mockViewClickListener = mock(View.OnClickListener.class); loginButton = new TwitterLoginButton(getContext(), null, 0, mockAuthClient) { // This is to allow us to test TwitterLoginButton without having to set up a real // activity. @Override protected Activity getActivity() { return mockActivity; } }; } public void testConstructor_contextNotActivity() { try { loginButton = new TwitterLoginButton(getContext(), null, 0, mockAuthClient); fail("Constructor should throw an exception when provided context is not an activity"); } catch (IllegalStateException e) { assertEquals(TwitterLoginButton.ERROR_MSG_NO_ACTIVITY, e.getMessage()); } } public void testConstructor_contextNotActivityEditModeTrue() { loginButton = new TwitterLoginButton(getContext(), null, 0, mockAuthClient) { @Override public boolean isInEditMode() { return true; } }; assertNull(loginButton.getActivity()); } public void testConstructor_nullTwitterAuthClient() { final TwitterLoginButton button = new TwitterLoginButton(getContext()) { @Override protected Activity getActivity() { return mock(Activity.class); } }; assertNull(button.authClient); } public void testConstructor_editMode() throws Exception { final TwitterLoginButton button = new TwitterLoginButton(getContext()) { @Override protected Activity getActivity() { return mock(Activity.class); } @Override public boolean isInEditMode() { return true; } }; assertTrue(button.isEnabled()); } public void testConstructor_twitterNotStarted() throws Exception { try { final Fabric fabric = new Fabric.Builder(getContext()) .debuggable(true) .logger(mock(Logger.class)) .kits(new KitStub()) .build(); FabricTestUtils.with(fabric); final TwitterLoginButton button = new TwitterLoginButton(getContext()) { @Override protected Activity getActivity() { return mock(Activity.class); } }; final Logger logger = Fabric.getLogger(); verify(logger).e(eq(TwitterLoginButton.TAG), eq("Must start Twitter Kit with Fabric.with() first")); assertFalse(button.isEnabled()); } finally { FabricTestUtils.resetFabric(); } } public void testConstructor_twitterStarted() throws Exception { try { final Fabric fabric = new Fabric.Builder(getContext()) .debuggable(true) .kits(new TwitterCore(new TwitterAuthConfig("", ""))) .logger(mock(Logger.class)) .build(); FabricTestUtils.with(fabric); final TwitterLoginButton button = new TwitterLoginButton(getContext()) { @Override protected Activity getActivity() { return mock(Activity.class); } }; final Logger logger = Fabric.getLogger(); verify(logger, never()).e(eq(TwitterLoginButton.TAG), eq("Must start Twitter Kit with Fabric.with() first")); assertTrue(button.isEnabled()); } finally { FabricTestUtils.resetFabric(); } } public void testSetCallback_callbackNull() { try { loginButton.setCallback(null); fail("setCallback should throw an exception when called with null callback"); } catch (IllegalArgumentException e) { assertEquals("Callback cannot be null", e.getMessage()); } } public void testGetCallback() { final Callback<TwitterSession> mockCallback = mock(Callback.class); loginButton.setCallback(mockCallback); assertSame(mockCallback, loginButton.getCallback()); } public void testOnClick() { loginButton.setCallback(mockCallback); loginButton.performClick(); verify(mockAuthClient).authorize(eq(mockActivity), eq(mockCallback)); } public void testOnClick_withOnClickListener() { loginButton.setCallback(mockCallback); loginButton.setOnClickListener(mockViewClickListener); loginButton.performClick(); verify(mockAuthClient).authorize(eq(mockActivity), eq(mockCallback)); verify(mockViewClickListener).onClick(eq(loginButton)); } public void testOnClick_callbackNullDebuggableTrue() throws Exception { final Fabric fabric = new Fabric.Builder(getContext()) .kits(new KitStub()) .debuggable(true) .build(); FabricTestUtils.with(fabric); try { loginButton.performClick(); fail("onClick should throw an exception when called and there is no callback"); } catch (IllegalStateException e) { assertEquals("Callback must not be null, did you call setCallback?", e.getMessage()); } finally { FabricTestUtils.resetFabric(); } } public void testOnClick_callbackNullDebuggableFalse() throws Exception { final Fabric fabric = setUpLogTest(); FabricTestUtils.with(fabric); try { loginButton.performClick(); assertLogMessage("Callback must not be null, did you call setCallback?"); } finally { FabricTestUtils.resetFabric(); } } public void testOnClick_activityNullDebuggableTrue() throws Exception { final Fabric fabric = new Fabric.Builder(getContext()) .kits(new KitStub()) .debuggable(true) .build(); FabricTestUtils.with(fabric); loginButton = new TwitterLoginButton(getContext(), null, 0, mockAuthClient) { // This is to allow us to test TwitterLoginButton without having to set up a real // activity. @Override protected Activity getActivity() { return null; } }; loginButton.setCallback(mockCallback); try { loginButton.performClick(); fail("onClick should throw an exception when called and there is no activity"); } catch (IllegalStateException e) { assertEquals(TwitterLoginButton.ERROR_MSG_NO_ACTIVITY, e.getMessage()); } finally { FabricTestUtils.resetFabric(); } } public void testOnClick_activityNullDebuggableFalse() throws Exception { final Fabric fabric = setUpLogTest(); FabricTestUtils.with(fabric); loginButton = new TwitterLoginButton(getContext(), null, 0, mockAuthClient) { // This is to allow us to test TwitterLoginButton without having to set up a real // activity. @Override protected Activity getActivity() { return null; } }; loginButton.setCallback(mockCallback); try { loginButton.performClick(); assertLogMessage(TwitterLoginButton.ERROR_MSG_NO_ACTIVITY); } finally { FabricTestUtils.resetFabric(); } } public void testOnClick_activityFinishingDebuggableFalse() throws Exception { final Fabric fabric = setUpLogTest(); FabricTestUtils.with(fabric); loginButton = new TwitterLoginButton(getContext(), null, 0, mockAuthClient) { // This is to allow us to test TwitterLoginButton without having to set up a real // activity. @Override protected Activity getActivity() { final Activity mockActivity = mock(Activity.class); when(mockActivity.isFinishing()).thenReturn(true); return mockActivity; } }; loginButton.setCallback(mockCallback); try { loginButton.performClick(); assertLogMessage(TwitterLoginButton.ERROR_MSG_NO_ACTIVITY); } finally { FabricTestUtils.resetFabric(); } } private Fabric setUpLogTest() { final Logger mockLogger = mock(Logger.class); when(mockLogger.isLoggable(TwitterCore.TAG, Log.WARN)).thenReturn(true); final Fabric fabric = new Fabric.Builder(getContext()) .kits(new KitStub()) .debuggable(false) .logger(mockLogger) .build(); return fabric; } private void assertLogMessage(String expectedMessage) { final ArgumentCaptor<String> argumentCaptor = ArgumentCaptor.forClass(String.class); verify(Fabric.getLogger()).w(eq(TwitterCore.TAG), argumentCaptor.capture()); assertEquals(expectedMessage, argumentCaptor.getValue()); } public void testOnActivityResult_requestCodeMatches() { final int requestCode = TEST_REQUEST_CODE; final int resultCode = Activity.RESULT_OK; final Intent mockData = mock(Intent.class); loginButton.onActivityResult(requestCode, resultCode, mockData); verify(mockAuthClient).getRequestCode(); verify(mockAuthClient).onActivityResult(requestCode, resultCode, mockData); } public void testOnActivityResult_requestCodeDoesNotMatch() { final int requestCode = -1; final int resultCode = Activity.RESULT_OK; final Intent mockData = mock(Intent.class); loginButton.onActivityResult(requestCode, resultCode, mockData); verify(mockAuthClient).getRequestCode(); verifyNoMoreInteractions(mockAuthClient); } public void testGetTwitterAuthClient() throws Exception { try { final Fabric fabric = new Fabric.Builder(getContext()) .kits(new TwitterCore(new TwitterAuthConfig("", ""))) .build(); FabricTestUtils.with(fabric); final TwitterLoginButton button = new TwitterLoginButton(getContext()) { @Override protected Activity getActivity() { return mock(Activity.class); } }; final TwitterAuthClient client = button.getTwitterAuthClient(); assertNotNull(client); } finally { FabricTestUtils.resetFabric(); } } public void testGetTwitterAuthClient_duplicateCalls() throws Exception { try { final Fabric fabric = new Fabric.Builder(getContext()) .kits(new TwitterCore(new TwitterAuthConfig("", ""))) .build(); FabricTestUtils.with(fabric); final TwitterLoginButton button = new TwitterLoginButton(getContext()) { @Override protected Activity getActivity() { return mock(Activity.class); } }; final TwitterAuthClient client = button.getTwitterAuthClient(); final TwitterAuthClient client2 = button.getTwitterAuthClient(); assertSame(client, client2); } finally { FabricTestUtils.resetFabric(); } }}package com.twitter.sdk.android.mopub;import android.app.Activity;import android.support.annotation.NonNull;import android.support.annotation.Nullable;import android.text.TextUtils;import android.widget.Adapter;import com.mopub.nativeads.MoPubAdAdapter;import com.mopub.nativeads.MoPubNativeAdPositioning;import com.mopub.nativeads.RequestParameters;public class TwitterMoPubAdAdapter extends MoPubAdAdapter{ private final static String TWITTERKIT_KEYWORD = "src:twitterkit";  public TwitterMoPubAdAdapter(Activity activity, Adapter originalAdapter) { super(activity, originalAdapter); }  public TwitterMoPubAdAdapter(Activity activity, Adapter originalAdapter, MoPubNativeAdPositioning.MoPubServerPositioning adPositioning) { super(activity, originalAdapter, adPositioning); }  public TwitterMoPubAdAdapter(Activity activity, Adapter originalAdapter, MoPubNativeAdPositioning.MoPubClientPositioning adPositioning) { super(activity, originalAdapter, adPositioning); } @Override public void loadAds(@NonNull final String adUnitId) { loadAds(adUnitId, null); } @Override public void loadAds(@NonNull final String adUnitId, @Nullable final RequestParameters requestParams) { final RequestParameters.Builder builder = new RequestParameters.Builder(); if (requestParams != null) { final String keywords = TextUtils.isEmpty(requestParams.getKeywords()) ? TWITTERKIT_KEYWORD : requestParams.getKeywords() + "," + TWITTERKIT_KEYWORD; builder.keywords(keywords); builder.location(requestParams.getLocation()); } else { builder.keywords(TWITTERKIT_KEYWORD); } super.loadAds(adUnitId, builder.build()); }}package com.twitter.sdk.android.core;import android.content.Context;import io.fabric.sdk.android.services.network.PinningInfoProvider;import java.io.InputStream;import java.util.Collection;import java.util.HashMap;class TwitterPinningInfoProvider implements PinningInfoProvider { private static final String[] PINS; static { final HashMap<String, String> pinMap = new HashMap<>(); pinMap.put("VERISIGN_CLASS1", "2343d148a255899b947d461a797ec04cfed170b7"); pinMap.put("VERISIGN_CLASS1_G3", "5519b278acb281d7eda7abc18399c3bb690424b5"); pinMap.put("VERISIGN_CLASS2_G2", "1237ba4517eead2926fdc1cdfebeedf2ded9145c"); pinMap.put("VERISIGN_CLASS2_G3", "5abec575dcaef3b08e271943fc7f250c3df661e3"); pinMap.put("VERISIGN_CLASS3_G2", "1a21b4952b6293ce18b365ec9c0e934cb381e6d4"); pinMap.put("VERISIGN_CLASS3_G3", "22f19e2ec6eaccfc5d2346f4c2e8f6c554dd5e07"); pinMap.put("VERISIGN_CLASS3_G4", "ed663135d31bd4eca614c429e319069f94c12650"); pinMap.put("VERISIGN_CLASS3_G5", "b181081a19a4c0941ffae89528c124c99b34acc7"); pinMap.put("VERISIGN_CLASS4_G3", "3c03436868951cf3692ab8b426daba8fe922e5bd"); pinMap.put("VERISIGN_UNIVERSAL", "bbc23e290bb328771dad3ea24dbdf423bd06b03d"); pinMap.put("GEOTRUST_GLOBAL", "c07a98688d89fbab05640c117daa7d65b8cacc4e"); pinMap.put("GEOTRUST_GLOBAL2", "713836f2023153472b6eba6546a9101558200509"); pinMap.put("GEOTRUST_PRIMARY", "b01989e7effb4aafcb148f58463976224150e1ba"); pinMap.put("GEOTRUST_PRIMARY_G2", "bdbea71bab7157f9e475d954d2b727801a822682"); pinMap.put("GEOTRUST_PRIMARY_G3", "9ca98d00af740ddd8180d21345a58b8f2e9438d6"); pinMap.put("GEOTRUST_UNIVERAL", "87e85b6353c623a3128cb0ffbbf551fe59800e22"); pinMap.put("GEOTRUST_UNIVERSAL2", "5e4f538685dd4f9eca5fdc0d456f7d51b1dc9b7b"); pinMap.put("DIGICERT_GLOBAL_ROOT", "d52e13c1abe349dae8b49594ef7c3843606466bd"); pinMap.put("DIGICERT_EV_ROOT", "83317e62854253d6d7783190ec919056e991b9e3"); pinMap.put("DIGICERT_ASSUREDID_ROOT", "68330e61358521592983a3c8d2d2e1406e7ab3c1"); pinMap.put("TWITTER1", "56fef3c2147d4ed38837fdbd3052387201e5778d"); final Collection<String> values = pinMap.values(); PINS = values.toArray(new String[values.size()]); } private final Context appContext; public TwitterPinningInfoProvider(Context context) { appContext = context.getApplicationContext(); } @Override public InputStream getKeyStoreStream() { return appContext.getResources().openRawResource(R.raw.tw__cacerts); } @Override public String getKeyStorePassword() { // keystore required to have a password, but these certificates are public return "changeit"; } @Override public String[] getPins() { return PINS; } @Override public long getPinCreationTimeInMillis() { return BuildConfig.BUILD_TIME; }}package com.twitter.sdk.android.core;import okhttp3.Headers;public class TwitterRateLimit { private final static String LIMIT_KEY = "x-rate-limit-limit"; private final static String REMAINING_KEY = "x-rate-limit-remaining"; private final static String RESET_KEY = "x-rate-limit-reset"; private int requestLimit; private int remainingRequest; private long resetSeconds; TwitterRateLimit(final Headers headers) { if (headers == null) { throw new IllegalArgumentException("headers must not be null"); } for (int i = 0; i < headers.size(); i++) { if (LIMIT_KEY.equals(headers.name(i))) { requestLimit = Integer.valueOf(headers.value(i)); } else if (REMAINING_KEY.equals(headers.name(i))) { remainingRequest = Integer.valueOf(headers.value(i)); } else if (RESET_KEY.equals(headers.name(i))) { resetSeconds = Long.valueOf(headers.value(i)); } } }  public int getLimit() { return requestLimit; }  public int getRemaining() { return remainingRequest; }  public long getReset() { return resetSeconds; }}package com.twitter.sdk.android.core;import android.text.TextUtils;import io.fabric.sdk.android.Fabric;import io.fabric.sdk.android.services.persistence.SerializationStrategy;import com.google.gson.annotations.SerializedName;import com.google.gson.Gson;public class TwitterSession extends Session<TwitterAuthToken> { public static final long UNKNOWN_USER_ID = -1L; public static final String UNKNOWN_USER_NAME = ""; @SerializedName("user_name") private final String userName;  public TwitterSession(TwitterAuthToken authToken, long userId, String userName) { super(authToken, userId); this.userName = userName; } public long getUserId() { return getId(); } public String getUserName() { return userName; } @Override public boolean equals(Object o) { if (this == o) return true; if (o == null || getClass() != o.getClass()) return false; if (!super.equals(o)) return false; final TwitterSession that = (TwitterSession) o; return userName != null ? userName.equals(that.userName) : that.userName == null; } @Override public int hashCode() { int result = super.hashCode(); result = 31 * result + (userName != null ? userName.hashCode() : 0); return result; } static class Serializer implements SerializationStrategy<TwitterSession> { private final Gson gson; public Serializer() { this.gson = new Gson(); } @Override public String serialize(TwitterSession session) { if (session != null && session.getAuthToken() != null) { try { return gson.toJson(session); } catch (Exception e) { Fabric.getLogger().d(TwitterCore.TAG, e.getMessage()); } } return ""; } @Override public TwitterSession deserialize(String serializedSession) { if (!TextUtils.isEmpty(serializedSession)) { try { return gson.fromJson(serializedSession, TwitterSession.class); } catch (Exception e) { Fabric.getLogger().d(TwitterCore.TAG, e.getMessage()); } } return null; } }}package com.twitter.sdk.android.core;public class TwitterSessionHelper { public static String serialize(TwitterSession session) { final TwitterSession.Serializer serializer = new TwitterSession.Serializer(); return serializer.serialize(session); } public static TwitterSession deserialize(String session) { final TwitterSession.Serializer serializer = new TwitterSession.Serializer(); return serializer.deserialize(session); }}package com.twitter.sdk.android.core.internal;import com.twitter.sdk.android.core.TwitterApiClient;import com.twitter.sdk.android.core.TwitterSession;import com.twitter.sdk.android.core.internal.scribe.DefaultScribeClient;import com.twitter.sdk.android.core.internal.scribe.EventNamespace;import com.twitter.sdk.android.core.internal.scribe.TwitterCoreScribeClientHolder;import com.twitter.sdk.android.core.services.AccountService;import java.io.IOException;public class TwitterSessionVerifier implements SessionVerifier<TwitterSession> { static final String SCRIBE_CLIENT = "android"; static final String SCRIBE_PAGE = "credentials"; static final String SCRIBE_SECTION = ""; // intentionally blank static final String SCRIBE_COMPONENT = ""; // intentionally blank static final String SCRIBE_ELEMENT = ""; // intentionally blank static final String SCRIBE_ACTION = "impression"; private final AccountServiceProvider accountServiceProvider; private final DefaultScribeClient scribeClient; public TwitterSessionVerifier() { this.accountServiceProvider = new AccountServiceProvider(); this.scribeClient = TwitterCoreScribeClientHolder.getScribeClient(); } TwitterSessionVerifier(AccountServiceProvider accountServiceProvider, DefaultScribeClient scribeClient) { this.accountServiceProvider = accountServiceProvider; this.scribeClient = scribeClient; }  public void verifySession(final TwitterSession session) { final AccountService accountService = accountServiceProvider.getAccountService(session); try { scribeVerifySession(); accountService.verifyCredentials(true, false).execute(); } catch (IOException | RuntimeException e) { // We ignore failures since we will attempt the verification again the next time // the verification period comes up. This has the potential to lose events, but we // are not aiming towards 100% capture rate. } } private void scribeVerifySession() { if (scribeClient == null) return; final EventNamespace ns = new EventNamespace.Builder() .setClient(SCRIBE_CLIENT) .setPage(SCRIBE_PAGE) .setSection(SCRIBE_SECTION) .setComponent(SCRIBE_COMPONENT) .setElement(SCRIBE_ELEMENT) .setAction(SCRIBE_ACTION) .builder(); scribeClient.scribe(ns); }  protected static class AccountServiceProvider { public AccountService getAccountService(TwitterSession session) { return new TwitterApiClient(session).getAccountService(); } }}package com.twitter.sdk.android.mopub;import android.content.Context;import android.content.res.TypedArray;import android.graphics.drawable.Drawable;import android.graphics.drawable.GradientDrawable;import android.graphics.drawable.LayerDrawable;import android.graphics.drawable.ShapeDrawable;import android.graphics.drawable.StateListDrawable;import android.graphics.drawable.shapes.RectShape;import android.os.Build;import android.util.AttributeSet;import android.view.LayoutInflater;import android.widget.FrameLayout;import android.widget.ImageView;import android.widget.LinearLayout;import android.widget.RelativeLayout;import android.widget.TextView;import com.twitter.sdk.android.mopub.internal.RoundedImageView;public class TwitterStaticNativeAd extends FrameLayout { LinearLayout containerLayout; RoundedImageView mainImageView; RelativeLayout cardLayout; ImageView adIconView; TextView adTitleView; TextView adTextView; TextView callToActionView; ImageView privacyInfoView; // style colors int containerBackgroundColor; int cardBackgroundColor; int primaryTextColor; int ctaBackgroundColor; int cardBorderColor; private static final int DEFAULT_AD_STYLE = R.style.tw__ad_LightStyle; public TwitterStaticNativeAd(Context context) { this(context, null); } public TwitterStaticNativeAd(Context context, AttributeSet attrs) { this(context, attrs, DEFAULT_AD_STYLE); } public TwitterStaticNativeAd(Context context, AttributeSet attrs, int styleResId) { super(context, attrs); findSubviews(); initAttributes(styleResId); setStyleAttributes(); } private void findSubviews() { LayoutInflater.from(getContext()).inflate(R.layout.tw__native_ad, this, true); containerLayout = (LinearLayout) findViewById(R.id.tw__ad_mopub_layout); mainImageView = (RoundedImageView) findViewById(R.id.native_ad_main_image); cardLayout = (RelativeLayout) findViewById(R.id.native_ad_card); adIconView = (ImageView) findViewById(R.id.native_ad_icon_image); adTitleView = (TextView) findViewById(R.id.native_ad_title); adTextView = (TextView) findViewById(R.id.native_ad_text); callToActionView = (TextView) findViewById(R.id.native_ad_cta); privacyInfoView = (ImageView) findViewById(R.id.native_ad_privacy_info_icon_image); } private void initAttributes(int styleResId) { final TypedArray a = getContext().getTheme().obtainStyledAttributes(styleResId, R.styleable.tw__native_ad); try { readStyleAttributes(a); } finally { a.recycle(); } } private void readStyleAttributes(TypedArray typedArray) { containerBackgroundColor = typedArray.getColor( R.styleable.tw__native_ad_tw__ad_container_bg_color, getResources().getColor(R.color.tw__ad_light_container_bg_color)); cardBackgroundColor = typedArray.getColor(R.styleable.tw__native_ad_tw__ad_card_bg_color, getResources().getColor(R.color.tw__ad_light_card_bg_color)); primaryTextColor = typedArray.getColor( R.styleable.tw__native_ad_tw__ad_text_primary_color, getResources().getColor(R.color.tw__ad_light_text_primary_color)); ctaBackgroundColor = typedArray.getColor( R.styleable.tw__native_ad_tw__ad_cta_button_color, getResources().getColor(R.color.tw__ad_cta_default)); } private void setStyleAttributes() { containerLayout.setBackgroundColor(containerBackgroundColor); adTitleView.setTextColor(primaryTextColor); adTextView.setTextColor(primaryTextColor); final int adViewRadius = (int) getResources().getDimension(R.dimen.tw__ad_view_radius); mainImageView.setCornerRadii(adViewRadius, adViewRadius, 0, 0); final TextView privacyTextView = (TextView) findViewById(R.id.native_ad_privacy_text); privacyTextView.setTextColor( ColorUtils.calculateContrastingColor(containerBackgroundColor)); setCardStyling(); setCallToActionStyling(); } private void setCardStyling() { final boolean isLightBg = ColorUtils.isLightColor(containerBackgroundColor); if (isLightBg) { cardBorderColor = getResources().getColor(R.color.tw__ad_light_card_border_color); } else { cardBorderColor = getResources().getColor(R.color.tw__ad_dark_card_border_color); } final ShapeDrawable bgDrawable = new ShapeDrawable(new RectShape()); bgDrawable.getPaint().setColor(cardBackgroundColor); final ShapeDrawable borderDrawable = new ShapeDrawable(new RectShape()); borderDrawable.getPaint().setColor(cardBorderColor); final Drawable[] layers = new Drawable[2]; layers[0] = borderDrawable; layers[1] = bgDrawable; final LayerDrawable layerDrawable = new LayerDrawable(layers); layerDrawable.setLayerInset(0, 0, 0, 0, 0); layerDrawable.setLayerInset(1, 1, 0, 1, 0); if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN) { cardLayout.setBackground(layerDrawable); } else { cardLayout.setBackgroundDrawable(layerDrawable); } } private void setCallToActionStyling() { final int calculatedCTATextColor = ColorUtils.calculateCtaTextColor(ctaBackgroundColor); callToActionView.setTextColor(calculatedCTATextColor); // Setup StateListDrawable obj with two gradient drawables: // First is the selected item with lighter/darker bg color of original // Second is unselected item with the call to action background color // Also set the default ad view radius for bottomLeft and bottomRight corners final StateListDrawable stateListDrawable = new StateListDrawable(); final int adViewRadius = (int) getResources().getDimension(R.dimen.tw__ad_view_radius); final float[] ctaViewRadii = new float[]{ 0, 0, 0, 0, adViewRadius, adViewRadius, adViewRadius, adViewRadius}; final GradientDrawable selectedItem = new GradientDrawable(); selectedItem.setCornerRadii(ctaViewRadii); final int ctaPressedBgColor = ColorUtils.calculateCtaOnTapColor(ctaBackgroundColor); selectedItem.setColor(ctaPressedBgColor); stateListDrawable.addState(new int[]{android.R.attr.state_pressed}, selectedItem); final GradientDrawable unselectedItem = new GradientDrawable(); unselectedItem.setCornerRadii(ctaViewRadii); unselectedItem.setColor(ctaBackgroundColor); stateListDrawable.addState(new int[]{}, unselectedItem); if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN) { callToActionView.setBackground(stateListDrawable); } else { callToActionView.setBackgroundDrawable(stateListDrawable); } }}package com.twitter.sdk.android.mopub;import android.app.Activity;import android.view.View;import android.view.ViewGroup;import com.mopub.nativeads.BaseNativeAd;import com.mopub.nativeads.MoPubAdRenderer;import com.mopub.nativeads.NativeImageHelper;import com.mopub.nativeads.NativeRendererHelper;import com.mopub.nativeads.StaticNativeAd;public class TwitterStaticNativeAdRenderer implements MoPubAdRenderer<StaticNativeAd> { private static final int DEFAULT_STYLE = R.style.tw__ad_LightStyle; private final int styleResId; public TwitterStaticNativeAdRenderer() { this.styleResId = DEFAULT_STYLE; } public TwitterStaticNativeAdRenderer(int styleResId) { this.styleResId = styleResId; } @Override public View createAdView(final Activity activity, final ViewGroup parent) { return new TwitterStaticNativeAd(activity, null, styleResId); } @Override public void renderAdView(final View view, final StaticNativeAd staticNativeAd) { update((TwitterStaticNativeAd) view, staticNativeAd); } @Override public boolean supports(final BaseNativeAd nativeAd) { return nativeAd instanceof StaticNativeAd; } private void update(final TwitterStaticNativeAd staticNativeView, final StaticNativeAd staticNativeAd) { NativeRendererHelper.addTextView(staticNativeView.adTitleView, staticNativeAd.getTitle()); NativeRendererHelper.addTextView(staticNativeView.adTextView, staticNativeAd.getText()); NativeRendererHelper.addTextView(staticNativeView.callToActionView, staticNativeAd.getCallToAction()); NativeImageHelper.loadImageView(staticNativeAd.getMainImageUrl(), staticNativeView.mainImageView); NativeImageHelper.loadImageView(staticNativeAd.getIconImageUrl(), staticNativeView.adIconView); NativeRendererHelper.addPrivacyInformationIcon( staticNativeView.privacyInfoView, staticNativeAd.getPrivacyInformationIconImageUrl(), staticNativeAd.getPrivacyInformationIconClickThroughUrl()); }}package com.twitter.sdk.android.mopub;import android.graphics.Bitmap;import android.graphics.drawable.Drawable;import android.view.View;import android.view.ViewGroup;import android.widget.ImageView;import android.widget.TextView;import com.mopub.nativeads.BaseNativeAd;import com.mopub.nativeads.MoPubCustomEventVideoNative;import com.mopub.nativeads.StaticNativeAd;import com.mopub.network.MaxWidthImageLoader;import com.mopub.network.Networking;import com.mopub.volley.toolbox.ImageLoader;import com.twitter.sdk.android.mopub.internal.RoundedImageView;import org.junit.Before;import org.junit.Rule;import org.junit.Test;import org.junit.rules.ExpectedException;import org.junit.runner.RunWith;import org.mockito.Mock;import org.mockito.MockitoAnnotations;import org.mockito.invocation.InvocationOnMock;import org.mockito.stubbing.Answer;import org.robolectric.RobolectricGradleTestRunner;import org.robolectric.RuntimeEnvironment;import org.robolectric.annotation.Config;import static org.junit.Assert.assertFalse;import static org.junit.Assert.assertTrue;import static org.mockito.Matchers.any;import static org.mockito.Matchers.anyString;import static org.mockito.Mockito.doAnswer;import static org.mockito.Mockito.doReturn;import static org.mockito.Mockito.mock;import static org.mockito.Mockito.verify;@RunWith(RobolectricGradleTestRunner.class)@Config(constants = BuildConfig.class, sdk = 21)public class TwitterStaticNativeAdRendererTest { private static final String TEST_TITLE = "title"; private static final String TEST_TEXT = "text"; private static final String TEST_CTA = "cta"; private static final String TEST_URL = "https://twitter.com"; private TwitterStaticNativeAdRenderer twitterStaticNativeAdRenderer; private StaticNativeAd staticNativeAd; private TwitterStaticNativeAd twitterStaticNativeAd; @Mock private ViewGroup viewGroup; @Mock private MaxWidthImageLoader mockImageLoader; @Mock private ImageLoader.ImageContainer mockImageContainer; @Mock private Bitmap mockBitmap; @Rule public ExpectedException thrown = ExpectedException.none(); @Before public void setUp() throws Exception { MockitoAnnotations.initMocks(this); Networking.setImageLoaderForTesting(mockImageLoader); doReturn(mockBitmap).when(mockImageContainer).getBitmap(); doAnswer(new Answer<Void>() { @Override public Void answer(InvocationOnMock invocation) throws Throwable { final Object[] args = invocation.getArguments(); ((ImageLoader.ImageListener) args[1]).onResponse(mockImageContainer, true); return null; } }).when(mockImageLoader).get(anyString(), any(ImageLoader.ImageListener.class)); twitterStaticNativeAdRenderer = new TwitterStaticNativeAdRenderer(); twitterStaticNativeAd = new TwitterStaticNativeAd(RuntimeEnvironment.application); twitterStaticNativeAd.adTextView = mock(TextView.class); twitterStaticNativeAd.adTitleView = mock(TextView.class); twitterStaticNativeAd.callToActionView = mock(TextView.class); twitterStaticNativeAd.mainImageView = mock(RoundedImageView.class); twitterStaticNativeAd.adIconView = mock(ImageView.class); twitterStaticNativeAd.privacyInfoView = mock(ImageView.class); staticNativeAd = new StaticNativeAd() { }; staticNativeAd.setTitle(TEST_TITLE); staticNativeAd.setText(TEST_TEXT); staticNativeAd.setCallToAction(TEST_CTA); staticNativeAd.setClickDestinationUrl(TEST_URL); staticNativeAd.setMainImageUrl(TEST_URL); staticNativeAd.setIconImageUrl(TEST_URL); } @Test(expected = NullPointerException.class) public void testCreateAdView_withNullContext_shouldThrowNPE() { twitterStaticNativeAdRenderer.createAdView(null, viewGroup); } @Test(expected = NullPointerException.class) public void testRenderAdView_withNullView_shouldThrowNPE() { twitterStaticNativeAdRenderer.renderAdView(null, staticNativeAd); } @Test(expected = NullPointerException.class) public void testRenderAdView_withNullNativeAd_shouldThrowNPE() { twitterStaticNativeAdRenderer.renderAdView(twitterStaticNativeAd, null); } @Test public void testRenderAdView_shouldReturnPopulatedView() { twitterStaticNativeAdRenderer.renderAdView(twitterStaticNativeAd, staticNativeAd); verify(twitterStaticNativeAd.adTitleView).setText(TEST_TITLE); verify(twitterStaticNativeAd.adTextView).setText(TEST_TEXT); verify(twitterStaticNativeAd.callToActionView).setText(TEST_CTA); verify(twitterStaticNativeAd.mainImageView).setImageBitmap(mockBitmap); verify(twitterStaticNativeAd.adIconView).setImageBitmap(mockBitmap); verify(twitterStaticNativeAd.privacyInfoView) .setImageDrawable(any(Drawable.class)); verify(twitterStaticNativeAd.privacyInfoView) .setOnClickListener(any(View.OnClickListener.class)); } @Test public void testSupports_withCorrectInstanceOfBaseNativeAd_shouldReturnTrue() throws Exception { assertTrue(twitterStaticNativeAdRenderer.supports(new StaticNativeAd() {})); assertFalse(twitterStaticNativeAdRenderer.supports(mock(BaseNativeAd.class))); assertFalse(twitterStaticNativeAdRenderer .supports(mock(MoPubCustomEventVideoNative.MoPubVideoNativeAd.class))); }}package com.twitter.sdk.android.mopub;import android.test.AndroidTestCase;import org.junit.Test;import org.junit.runner.RunWith;import org.robolectric.RobolectricGradleTestRunner;import org.robolectric.RuntimeEnvironment;import org.robolectric.annotation.Config;@RunWith(RobolectricGradleTestRunner.class)@Config(constants = BuildConfig.class, sdk = 21)public class TwitterStaticNativeAdTest extends AndroidTestCase { @Test public void testStyleAttrsForDefaultTheme() { final TwitterStaticNativeAd nativeAd = new TwitterStaticNativeAd(RuntimeEnvironment.application); final int expectedContainerBgColor = nativeAd.getResources().getColor(R.color.tw__ad_light_container_bg_color); final int expectedCardBgColor = nativeAd.getResources().getColor(R.color.tw__ad_light_card_bg_color); final int expectedPrimaryTextColor = nativeAd.getResources().getColor(R.color.tw__ad_light_text_primary_color); final int ctaBackgroundColor = nativeAd.getResources().getColor(R.color.tw__ad_cta_default); final int cardBorderColor = nativeAd.getResources().getColor(R.color.tw__ad_light_card_border_color); assertEquals(expectedContainerBgColor, nativeAd.containerBackgroundColor); assertEquals(expectedCardBgColor, nativeAd.cardBackgroundColor); assertEquals(expectedPrimaryTextColor, nativeAd.primaryTextColor); assertEquals(ctaBackgroundColor, nativeAd.ctaBackgroundColor); assertEquals(cardBorderColor, nativeAd.cardBorderColor); } @Test public void testStyleAttrsForDarkTheme() { final TwitterStaticNativeAd nativeAd = new TwitterStaticNativeAd(RuntimeEnvironment.application, null, R.style.tw__ad_DarkStyle); final int expectedContainerBgColor = nativeAd.getResources().getColor(R.color.tw__ad_dark_container_bg_color); final int expectedCardBgColor = nativeAd.getResources().getColor(R.color.tw__ad_dark_card_bg_color); final int expectedPrimaryTextColor = nativeAd.getResources().getColor(R.color.tw__ad_dark_text_primary_color); final int ctaBackgroundColor = nativeAd.getResources().getColor(R.color.tw__ad_cta_default); final int cardBorderColor = nativeAd.getResources().getColor(R.color.tw__ad_dark_card_border_color); assertEquals(expectedContainerBgColor, nativeAd.containerBackgroundColor); assertEquals(expectedCardBgColor, nativeAd.cardBackgroundColor); assertEquals(expectedPrimaryTextColor, nativeAd.primaryTextColor); assertEquals(ctaBackgroundColor, nativeAd.ctaBackgroundColor); assertEquals(cardBorderColor, nativeAd.cardBorderColor); }}package com.twitter.sdk.android.unity;import com.unity3d.player.UnityPlayer;class UnityMessage { final String data; final String method; UnityMessage(String method, String data) { this.method = method; this.data = data; } public static class Builder { String data = ""; String method; public Builder setData(String data) { this.data = data; return this; } public Builder setMethod(String method) { this.method = method; return this; } public UnityMessage build() { return new UnityMessage(method, data); } } public void send() { UnityPlayer.UnitySendMessage(TwitterKit.GAME_OBJECT_NAME, method, data); }}package com.twitter.sdk.android.core.models;import com.google.gson.annotations.SerializedName;public class UrlEntity extends Entity {  @SerializedName("url") public final String url;  @SerializedName("expanded_url") public final String expandedUrl;  @SerializedName("display_url") public final String displayUrl; public UrlEntity(String url, String expandedUrl, String displayUrl, int start, int end) { super(start, end); this.url = url; this.expandedUrl = expandedUrl; this.displayUrl = displayUrl; }}package com.twitter.sdk.android.core.models;import com.google.gson.annotations.SerializedName;import java.io.Serializable;import java.util.List;public class User implements Serializable, Identifiable { private static final long serialVersionUID = 4663450696842173958L; public static final long INVALID_ID = -1L;  @SerializedName("contributors_enabled") public final boolean contributorsEnabled;  @SerializedName("created_at") public final String createdAt;  @SerializedName("default_profile") public final boolean defaultProfile;  @SerializedName("default_profile_image") public final boolean defaultProfileImage;  @SerializedName("description") public final String description;  @SerializedName("email") public final String email;  @SerializedName("entities") public final UserEntities entities;  @SerializedName("favourites_count") public final int favouritesCount;  @SerializedName("follow_request_sent") public final boolean followRequestSent;  @SerializedName("followers_count") public final int followersCount;  @SerializedName("friends_count") public final int friendsCount;  @SerializedName("geo_enabled") public final boolean geoEnabled;  @SerializedName("id") public final long id;  @SerializedName("id_str") public final String idStr;  @SerializedName("is_translator") public final boolean isTranslator;  @SerializedName("lang") public final String lang;  @SerializedName("listed_count") public final int listedCount;  @SerializedName("location") public final String location;  @SerializedName("name") public final String name;  @SerializedName("profile_background_color") public final String profileBackgroundColor;  @SerializedName("profile_background_image_url") public final String profileBackgroundImageUrl;  @SerializedName("profile_background_image_url_https") public final String profileBackgroundImageUrlHttps;  @SerializedName("profile_background_tile") public final boolean profileBackgroundTile;  @SerializedName("profile_banner_url") public final String profileBannerUrl;  @SerializedName("profile_image_url") public final String profileImageUrl;  @SerializedName("profile_image_url_https") public final String profileImageUrlHttps;  @SerializedName("profile_link_color") public final String profileLinkColor;  @SerializedName("profile_sidebar_border_color") public final String profileSidebarBorderColor;  @SerializedName("profile_sidebar_fill_color") public final String profileSidebarFillColor;  @SerializedName("profile_text_color") public final String profileTextColor;  @SerializedName("profile_use_background_image") public final boolean profileUseBackgroundImage;  @SerializedName("protected") public final boolean protectedUser;  @SerializedName("screen_name") public final String screenName;  @SerializedName("show_all_inline_media") public final boolean showAllInlineMedia;  @SerializedName("status") public final Tweet status;  @SerializedName("statuses_count") public final int statusesCount;  @SerializedName("time_zone") public final String timeZone;  @SerializedName("url") public final String url;  @SerializedName("utc_offset") public final int utcOffset;  @SerializedName("verified") public final boolean verified;  @SerializedName("withheld_in_countries") public final List<String> withheldInCountries;  @SerializedName("withheld_scope") public final String withheldScope; public User(boolean contributorsEnabled, String createdAt, boolean defaultProfile, boolean defaultProfileImage, String description, String emailAddress, UserEntities entities, int favouritesCount, boolean followRequestSent, int followersCount, int friendsCount, boolean geoEnabled, long id, String idStr, boolean isTranslator, String lang, int listedCount, String location, String name, String profileBackgroundColor, String profileBackgroundImageUrl, String profileBackgroundImageUrlHttps, boolean profileBackgroundTile, String profileBannerUrl, String profileImageUrl, String profileImageUrlHttps, String profileLinkColor, String profileSidebarBorderColor, String profileSidebarFillColor, String profileTextColor, boolean profileUseBackgroundImage, boolean protectedUser, String screenName, boolean showAllInlineMedia, Tweet status, int statusesCount, String timeZone, String url, int utcOffset, boolean verified, List<String> withheldInCountries, String withheldScope) { this.contributorsEnabled = contributorsEnabled; this.createdAt = createdAt; this.defaultProfile = defaultProfile; this.defaultProfileImage = defaultProfileImage; this.description = description; this.email = emailAddress; this.entities = entities; this.favouritesCount = favouritesCount; this.followRequestSent = followRequestSent; this.followersCount = followersCount; this.friendsCount = friendsCount; this.geoEnabled = geoEnabled; this.id = id; this.idStr = idStr; this.isTranslator = isTranslator; this.lang = lang; this.listedCount = listedCount; this.location = location; this.name = name; this.profileBackgroundColor = profileBackgroundColor; this.profileBackgroundImageUrl = profileBackgroundImageUrl; this.profileBackgroundImageUrlHttps = profileBackgroundImageUrlHttps; this.profileBackgroundTile = profileBackgroundTile; this.profileBannerUrl = profileBannerUrl; this.profileImageUrl = profileImageUrl; this.profileImageUrlHttps = profileImageUrlHttps; this.profileLinkColor = profileLinkColor; this.profileSidebarBorderColor = profileSidebarBorderColor; this.profileSidebarFillColor = profileSidebarFillColor; this.profileTextColor = profileTextColor; this.profileUseBackgroundImage = profileUseBackgroundImage; this.protectedUser = protectedUser; this.screenName = screenName; this.showAllInlineMedia = showAllInlineMedia; this.status = status; this.statusesCount = statusesCount; this.timeZone = timeZone; this.url = url; this.utcOffset = utcOffset; this.verified = verified; this.withheldInCountries = withheldInCountries; this.withheldScope = withheldScope; } @Override public long getId() { return this.id; }}package com.twitter.sdk.android.core.models;import java.util.List;public class UserBuilder { private boolean contributorsEnabled; private String createdAt; private boolean defaultProfile; private boolean defaultProfileImage; private String description; private String email; private UserEntities entities; private int favouritesCount; private boolean followRequestSent; private int followersCount; private int friendsCount; private boolean geoEnabled; private long id = User.INVALID_ID; private String idStr; private boolean isTranslator; private String lang; private int listedCount; private String location; private String name; private String profileBackgroundColor; private String profileBackgroundImageUrl; private String profileBackgroundImageUrlHttps; private boolean profileBackgroundTile; private String profileBannerUrl; private String profileImageUrl; private String profileImageUrlHttps; private String profileLinkColor; private String profileSidebarBorderColor; private String profileSidebarFillColor; private String profileTextColor; private boolean profileUseBackgroundImage; private boolean protectedUser; private String screenName; private boolean showAllInlineMedia; private Tweet status; private int statusesCount; private String timeZone; private String url; private int utcOffset; private boolean verified; private List<String> withheldInCountries; private String withheldScope; public UserBuilder setContributorsEnabled(boolean contributorsEnabled) { this.contributorsEnabled = contributorsEnabled; return this; } public UserBuilder setCreatedAt(String createdAt) { this.createdAt = createdAt; return this; } public UserBuilder setDefaultProfile(boolean defaultProfile) { this.defaultProfile = defaultProfile; return this; } public UserBuilder setDefaultProfileImage(boolean defaultProfileImage) { this.defaultProfileImage = defaultProfileImage; return this; } public UserBuilder setDescription(String description) { this.description = description; return this; } public UserBuilder setEmail(String email) { this.email = email; return this; } public UserBuilder setEntities(UserEntities entities) { this.entities = entities; return this; } public UserBuilder setFavouritesCount(int favouritesCount) { this.favouritesCount = favouritesCount; return this; } public UserBuilder setFollowRequestSent(boolean followRequestSent) { this.followRequestSent = followRequestSent; return this; } public UserBuilder setFollowersCount(int followersCount) { this.followersCount = followersCount; return this; } public UserBuilder setFriendsCount(int friendsCount) { this.friendsCount = friendsCount; return this; } public UserBuilder setGeoEnabled(boolean geoEnabled) { this.geoEnabled = geoEnabled; return this; } public UserBuilder setId(long id) { this.id = id; return this; } public UserBuilder setIdStr(String idStr) { this.idStr = idStr; return this; } public UserBuilder setIsTranslator(boolean isTranslator) { this.isTranslator = isTranslator; return this; } public UserBuilder setLang(String lang) { this.lang = lang; return this; } public UserBuilder setListedCount(int listedCount) { this.listedCount = listedCount; return this; } public UserBuilder setLocation(String location) { this.location = location; return this; } public UserBuilder setName(String name) { this.name = name; return this; } public UserBuilder setProfileBackgroundColor(String profileBackgroundColor) { this.profileBackgroundColor = profileBackgroundColor; return this; } public UserBuilder setProfileBackgroundImageUrl(String profileBackgroundImageUrl) { this.profileBackgroundImageUrl = profileBackgroundImageUrl; return this; } public UserBuilder setProfileBackgroundImageUrlHttps(String profileBackgroundImageUrlHttps) { this.profileBackgroundImageUrlHttps = profileBackgroundImageUrlHttps; return this; } public UserBuilder setProfileBackgroundTile(boolean profileBackgroundTile) { this.profileBackgroundTile = profileBackgroundTile; return this; } public UserBuilder setProfileBannerUrl(String profileBannerUrl) { this.profileBannerUrl = profileBannerUrl; return this; } public UserBuilder setProfileImageUrl(String profileImageUrl) { this.profileImageUrl = profileImageUrl; return this; } public UserBuilder setProfileImageUrlHttps(String profileImageUrlHttps) { this.profileImageUrlHttps = profileImageUrlHttps; return this; } public UserBuilder setProfileLinkColor(String profileLinkColor) { this.profileLinkColor = profileLinkColor; return this; } public UserBuilder setProfileSidebarBorderColor(String profileSidebarBorderColor) { this.profileSidebarBorderColor = profileSidebarBorderColor; return this; } public UserBuilder setProfileSidebarFillColor(String profileSidebarFillColor) { this.profileSidebarFillColor = profileSidebarFillColor; return this; } public UserBuilder setProfileTextColor(String profileTextColor) { this.profileTextColor = profileTextColor; return this; } public UserBuilder setProfileUseBackgroundImage(boolean profileUseBackgroundImage) { this.profileUseBackgroundImage = profileUseBackgroundImage; return this; } public UserBuilder setProtectedUser(boolean protectedUser) { this.protectedUser = protectedUser; return this; } public UserBuilder setScreenName(String screenName) { this.screenName = screenName; return this; } public UserBuilder setShowAllInlineMedia(boolean showAllInlineMedia) { this.showAllInlineMedia = showAllInlineMedia; return this; } public UserBuilder setStatus(Tweet status) { this.status = status; return this; } public UserBuilder setStatusesCount(int statusesCount) { this.statusesCount = statusesCount; return this; } public UserBuilder setTimeZone(String timeZone) { this.timeZone = timeZone; return this; } public UserBuilder setUrl(String url) { this.url = url; return this; } public UserBuilder setUtcOffset(int utcOffset) { this.utcOffset = utcOffset; return this; } public UserBuilder setVerified(boolean verified) { this.verified = verified; return this; } public UserBuilder setWithheldInCountries(List<String> withheldInCountries) { this.withheldInCountries = withheldInCountries; return this; } public UserBuilder setWithheldScope(String withheldScope) { this.withheldScope = withheldScope; return this; } public User build() { return new User(contributorsEnabled, createdAt, defaultProfile, defaultProfileImage, description, email, entities, favouritesCount, followRequestSent, followersCount, friendsCount, geoEnabled, id, idStr, isTranslator, lang, listedCount, location, name, profileBackgroundColor, profileBackgroundImageUrl, profileBackgroundImageUrlHttps, profileBackgroundTile, profileBannerUrl, profileImageUrl, profileImageUrlHttps, profileLinkColor, profileSidebarBorderColor, profileSidebarFillColor, profileTextColor, profileUseBackgroundImage, protectedUser, screenName, showAllInlineMedia, status, statusesCount, timeZone, url, utcOffset, verified, withheldInCountries, withheldScope); }}package com.twitter.sdk.android.core.models;import com.google.gson.annotations.SerializedName;import java.util.Collections;import java.util.List;public class UserEntities { @SerializedName("url") public final UrlEntities url; @SerializedName("description") public final UrlEntities description; public UserEntities(UrlEntities url, UrlEntities description) { this.url = url; this.description = description; } public static class UrlEntities { @SerializedName("urls") public final List<UrlEntity> urls; public UrlEntities(List<UrlEntity> urls) { this.urls = getSafeList(urls); } private <T> List<T> getSafeList(List<T> entities) { // Entities may be null if Gson does not find object to parse. When that happens, make // sure to return an empty list. if (entities == null) { return Collections.EMPTY_LIST; } else { return Collections.unmodifiableList(entities); } } }}package com.twitter.sdk.android.tweetui;import com.twitter.sdk.android.core.Callback;import com.twitter.sdk.android.core.TwitterCore;import com.twitter.sdk.android.core.models.Tweet;import java.util.List;import retrofit2.Call;public class UserTimeline extends BaseTimeline implements Timeline<Tweet> { private static final String SCRIBE_SECTION = "user"; final Long userId; final String screenName; final Integer maxItemsPerRequest; final Boolean includeReplies; final Boolean includeRetweets; UserTimeline(TweetUi tweetUi, Long userId, String screenName, Integer maxItemsPerRequest, Boolean includeReplies, Boolean includeRetweets) { super(tweetUi); this.userId = userId; this.screenName = screenName; this.maxItemsPerRequest = maxItemsPerRequest; // null includeReplies should default to false this.includeReplies = includeReplies == null ? false : includeReplies; this.includeRetweets = includeRetweets; }  @Override public void next(Long sinceId, Callback<TimelineResult<Tweet>> cb) { createUserTimelineRequest(sinceId, null).enqueue(new TweetsCallback(cb)); }  @Override public void previous(Long maxId, Callback<TimelineResult<Tweet>> cb) { // user timeline api provides results which are inclusive, decrement the maxId to get // exclusive results createUserTimelineRequest(null, decrementMaxId(maxId)).enqueue(new TweetsCallback(cb)); } @Override String getTimelineType() { return SCRIBE_SECTION; } Call<List<Tweet>> createUserTimelineRequest(final Long sinceId, final Long maxId) { return TwitterCore.getInstance().getApiClient().getStatusesService().userTimeline(userId, screenName, maxItemsPerRequest, sinceId, maxId, false, !includeReplies, null, includeRetweets); }  public static class Builder { private final TweetUi tweetUi; private Long userId; private String screenName; private Integer maxItemsPerRequest = 30; private Boolean includeReplies; private Boolean includeRetweets;  public Builder() { this(TweetUi.getInstance()); }  public Builder(TweetUi tweetUi) { if (tweetUi == null) { throw new IllegalArgumentException("TweetUi instance must not be null"); } this.tweetUi = tweetUi; }  public Builder userId(Long userId) { this.userId = userId; return this; }  public Builder screenName(String screenName) { this.screenName = screenName; return this; }  public Builder maxItemsPerRequest(Integer maxItemsPerRequest) { this.maxItemsPerRequest = maxItemsPerRequest; return this; }  public Builder includeReplies(Boolean includeReplies) { this.includeReplies = includeReplies; return this; }  public Builder includeRetweets(Boolean includeRetweets) { this.includeRetweets = includeRetweets; return this; }  public UserTimeline build() { return new UserTimeline(tweetUi, userId, screenName, maxItemsPerRequest, includeReplies, includeRetweets); } }}package com.twitter.sdk.android.core.internal;import android.text.TextUtils;import com.twitter.sdk.android.core.models.User;public final class UserUtils { private UserUtils() {} // see https://dev.twitter.com/overview/general/user-profile-images-and-banners // see also: https://confluence.twitter.biz/display/PLATFORM/Image+Types+and+Sizes public enum AvatarSize { NORMAL("_normal"), BIGGER("_bigger"), MINI("_mini"), ORIGINAL("_original"), REASONABLY_SMALL("_reasonably_small"); private final String suffix; AvatarSize(String suffix) { this.suffix = suffix; } String getSuffix() { return suffix; } } public static String getProfileImageUrlHttps(User user, AvatarSize size) { if (user != null && user.profileImageUrlHttps != null) { final String url = user.profileImageUrlHttps; if (size == null || url == null) { return url; } switch (size) { case NORMAL: case BIGGER: case MINI: case ORIGINAL: case REASONABLY_SMALL: return url .replace(AvatarSize.NORMAL.getSuffix(), size.getSuffix()); default: return url; } } else { return null; } }  public static CharSequence formatScreenName(CharSequence screenName) { if (TextUtils.isEmpty(screenName)) { return ""; } if (screenName.charAt(0) == '@') { return screenName; } return "@" + screenName; }}package com.twitter.sdk.android.core.models;import com.google.gson.annotations.SerializedName;public class UserValue { @SerializedName("id_str") public final String idStr; public UserValue(String idStr) { this.idStr = idStr; }}package com.twitter.sdk.android.tweetui;import com.twitter.sdk.android.core.models.Tweet;import java.util.ArrayList;import java.util.HashMap;import java.util.List;final class Utils { private Utils() {} static Long numberOrDefault(String candidate, long defaultLong) { try { return Long.parseLong(candidate); } catch (NumberFormatException e) { return defaultLong; } } static String stringOrEmpty(String candidate) { return stringOrDefault(candidate, ""); } static String stringOrDefault(String candidate, String defaultString) { return (candidate != null) ? candidate : defaultString; } static CharSequence charSeqOrEmpty(CharSequence candidate) { return charSeqOrDefault(candidate, ""); } static CharSequence charSeqOrDefault(CharSequence candidate, CharSequence defaultSequence) { return (candidate != null) ? candidate : defaultSequence; }  static List<Tweet> orderTweets(List<Long> tweetIds, List<Tweet> tweets) { final HashMap<Long, Tweet> idToTweet = new HashMap<>(); final ArrayList<Tweet> ordered = new ArrayList<>(); for (Tweet tweet: tweets) { idToTweet.put(tweet.id, tweet); } for (Long id: tweetIds) { if (idToTweet.containsKey(id)) { ordered.add(idToTweet.get(id)); } } return ordered; }}package com.twitter.sdk.android.tweetui.internal;import android.annotation.SuppressLint;import android.content.Context;import android.os.Handler;import android.os.Message;import android.util.AttributeSet;import android.view.LayoutInflater;import android.view.View;import android.widget.FrameLayout;import android.widget.ImageButton;import android.widget.SeekBar;import android.widget.TextView;import com.twitter.sdk.android.tweetui.R;public class VideoControlView extends FrameLayout { static final long PROGRESS_BAR_TICKS = 1000L; static final int FADE_DURATION_MS = 150; private static final int SHOW_PROGRESS_MSG = 1001; MediaPlayerControl player; ImageButton stateControl; TextView currentTime; TextView duration; SeekBar seekBar; public VideoControlView(Context context) { super(context); } public VideoControlView(Context context, AttributeSet attrs) { super(context, attrs); } public VideoControlView(Context context, AttributeSet attrs, int defStyleAttr) { super(context, attrs, defStyleAttr); } @SuppressLint("HandlerLeak") private final Handler handler = new Handler() { @Override public void handleMessage(Message msg) { if (msg.what == SHOW_PROGRESS_MSG) { if (player == null) { return; } updateProgress(); updateStateControl(); if (isShowing() && player.isPlaying()) { msg = obtainMessage(SHOW_PROGRESS_MSG); sendMessageDelayed(msg, 500); } } } }; public void setMediaPlayer(MediaPlayerControl player) { this.player = player; } @Override protected void onFinishInflate() { super.onFinishInflate(); initSubviews(); } void initSubviews() { final LayoutInflater inflater = (LayoutInflater) getContext() .getSystemService(Context.LAYOUT_INFLATER_SERVICE); inflater.inflate(R.layout.tw__video_control, this); stateControl = (ImageButton) findViewById(R.id.tw__state_control); currentTime = (TextView) findViewById(R.id.tw__current_time); duration = (TextView) findViewById(R.id.tw__duration); seekBar = (SeekBar) findViewById(R.id.tw__progress); seekBar.setMax((int) PROGRESS_BAR_TICKS); seekBar.setOnSeekBarChangeListener(createProgressChangeListener()); stateControl.setOnClickListener(createStateControlClickListener()); setDuration(0); setCurrentTime(0); setProgress(0, 0, 0); } OnClickListener createStateControlClickListener() { return new OnClickListener() { @Override public void onClick(View view) { if (player.isPlaying()) { player.pause(); } else { player.start(); } show(); } }; } SeekBar.OnSeekBarChangeListener createProgressChangeListener() { return new SeekBar.OnSeekBarChangeListener() { @Override public void onProgressChanged(SeekBar seekBar, int progress, boolean fromUser) { if (!fromUser) { return; } final int duration = player.getDuration(); final long position = (duration * progress) / PROGRESS_BAR_TICKS; player.seekTo((int) position); setCurrentTime((int) position); } @Override public void onStartTrackingTouch(SeekBar seekBar) { handler.removeMessages(SHOW_PROGRESS_MSG); } @Override public void onStopTrackingTouch(SeekBar seekBar) { handler.sendEmptyMessage(SHOW_PROGRESS_MSG); } }; } void updateProgress() { final int duration = player.getDuration(); final int currentTime = player.getCurrentPosition(); final int bufferPercentage = player.getBufferPercentage(); setDuration(duration); setCurrentTime(currentTime); setProgress(currentTime, duration, bufferPercentage); } void setDuration(int durationMillis) { duration.setText(MediaTimeUtils.getPlaybackTime(durationMillis)); } void setCurrentTime(int currentTimeMillis) { currentTime.setText(MediaTimeUtils.getPlaybackTime(currentTimeMillis)); } void setProgress(int currentTimeMillis, int durationMillis, int bufferPercentage) { final long pos = durationMillis > 0 ? PROGRESS_BAR_TICKS * currentTimeMillis / durationMillis : 0; seekBar.setProgress((int) pos); seekBar.setSecondaryProgress(bufferPercentage * 10); } void updateStateControl() { if (player.isPlaying()) { setPauseDrawable(); } else if (player.getCurrentPosition() > Math.max(player.getDuration() - 500, 0)) { setReplayDrawable(); } else { setPlayDrawable(); } } void setPlayDrawable() { stateControl.setImageResource(R.drawable.tw__video_play_btn); stateControl.setContentDescription(getContext().getString(R.string.tw__play)); } void setPauseDrawable() { stateControl.setImageResource(R.drawable.tw__video_pause_btn); stateControl.setContentDescription(getContext().getString(R.string.tw__pause)); } void setReplayDrawable() { stateControl.setImageResource(R.drawable.tw__video_replay_btn); stateControl.setContentDescription(getContext().getString(R.string.tw__replay)); } void hide() { handler.removeMessages(SHOW_PROGRESS_MSG); AnimationUtils.fadeOut(this, FADE_DURATION_MS); } void show() { handler.sendEmptyMessage(SHOW_PROGRESS_MSG); AnimationUtils.fadeIn(this, FADE_DURATION_MS); } public boolean isShowing() { return getVisibility() == View.VISIBLE; } public void update() { handler.sendEmptyMessage(SHOW_PROGRESS_MSG); } public interface MediaPlayerControl { void start(); void pause(); int getDuration(); int getCurrentPosition(); void seekTo(int position); boolean isPlaying(); int getBufferPercentage(); }}package com.twitter.sdk.android.core.models;import com.google.gson.annotations.SerializedName;import java.io.Serializable;import java.util.List;public class VideoInfo implements Serializable {  @SerializedName("aspect_ratio") public final List<Integer> aspectRatio;  @SerializedName("duration_millis") public final long durationMillis;  @SerializedName("variants") public final List<Variant> variants; public VideoInfo(List<Integer> aspectRatio, long durationMillis, List<Variant> variants) { this.aspectRatio = aspectRatio; this.durationMillis = durationMillis; this.variants = variants; } public static class Variant implements Serializable { @SerializedName("bitrate") public final long bitrate; @SerializedName("content_type") public final String contentType; @SerializedName("url") public final String url; public Variant(long bitrate, String contentType, String url) { this.bitrate = bitrate; this.contentType = contentType; this.url = url; } }}package com.twitter.sdk.android.tweetui;import com.twitter.sdk.android.core.internal.scribe.ScribeItem;public interface VideoScribeClient { void impression(ScribeItem card); void play(ScribeItem card);}package com.twitter.sdk.android.tweetui;import com.twitter.sdk.android.core.internal.scribe.EventNamespace;import com.twitter.sdk.android.core.internal.scribe.ScribeItem;import com.twitter.sdk.android.core.internal.scribe.SyndicationClientEvent;import java.util.ArrayList;import java.util.List;class VideoScribeClientImpl implements VideoScribeClient { static final String TFW_CLIENT_EVENT_PAGE = "android"; static final String TFW_CLIENT_EVENT_SECTION = "video"; static final String SCRIBE_IMPRESSION_ACTION = "impression"; static final String SCRIBE_PLAY_ACTION = "play"; final TweetUi tweetUi; VideoScribeClientImpl(TweetUi tweetUi) { this.tweetUi = tweetUi; } @Override public void impression(ScribeItem scribeItem) { final List<ScribeItem> items = new ArrayList<>(); items.add(scribeItem); tweetUi.scribe(getTfwImpressionNamespace(), items); } @Override public void play(ScribeItem scribeItem) { final List<ScribeItem> items = new ArrayList<>(); items.add(scribeItem); tweetUi.scribe(getTfwPlayNamespace(), items); } static EventNamespace getTfwImpressionNamespace() { return new EventNamespace.Builder() .setClient(SyndicationClientEvent.CLIENT_NAME) .setPage(TFW_CLIENT_EVENT_PAGE) .setSection(TFW_CLIENT_EVENT_SECTION) .setAction(SCRIBE_IMPRESSION_ACTION) .builder(); } static EventNamespace getTfwPlayNamespace() { return new EventNamespace.Builder() .setClient(SyndicationClientEvent.CLIENT_NAME) .setPage(TFW_CLIENT_EVENT_PAGE) .setSection(TFW_CLIENT_EVENT_SECTION) .setAction(SCRIBE_PLAY_ACTION) .builder(); }}package com.twitter.sdk.android.tweetui.internal;import android.content.Context;import android.media.AudioManager;import android.media.MediaPlayer;import android.media.MediaPlayer.OnCompletionListener;import android.media.MediaPlayer.OnErrorListener;import android.media.MediaPlayer.OnInfoListener;import android.net.Uri;import android.util.AttributeSet;import android.util.Log;import android.view.KeyEvent;import android.view.MotionEvent;import android.view.SurfaceHolder;import android.view.SurfaceView;public class VideoView extends SurfaceView implements VideoControlView.MediaPlayerControl { private String TAG = "VideoView"; // settable by the client private Uri mUri; // all possible internal states private static final int STATE_ERROR = -1; private static final int STATE_IDLE = 0; private static final int STATE_PREPARING = 1; private static final int STATE_PREPARED = 2; private static final int STATE_PLAYING = 3; private static final int STATE_PAUSED = 4; private static final int STATE_PLAYBACK_COMPLETED = 5; // mCurrentState is a VideoView object's current state. // mTargetState is the state that a method caller intends to reach. // For instance, regardless the VideoView object's current state, // calling pause() intends to bring the object to a target state // of STATE_PAUSED. private int mCurrentState = STATE_IDLE; private int mTargetState = STATE_IDLE; // All the stuff we need for playing and showing a video private SurfaceHolder mSurfaceHolder = null; private MediaPlayer mMediaPlayer = null; private int mAudioSession; private int mVideoWidth; private int mVideoHeight; private int mSurfaceWidth; private int mSurfaceHeight; private VideoControlView mMediaController; private OnCompletionListener mOnCompletionListener; private MediaPlayer.OnPreparedListener mOnPreparedListener; private int mCurrentBufferPercentage; private OnErrorListener mOnErrorListener; private OnInfoListener mOnInfoListener; private int mSeekWhenPrepared; // recording the seek position while preparing private boolean mLooping; public VideoView(Context context) { super(context); initVideoView(); } public VideoView(Context context, AttributeSet attrs) { this(context, attrs, 0); } public VideoView(Context context, AttributeSet attrs, int defStyleAttr) { super(context, attrs, defStyleAttr); initVideoView(); } @Override protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) { //Log.i("@@@@", "onMeasure(" + MeasureSpec.toString(widthMeasureSpec) + ", " // + MeasureSpec.toString(heightMeasureSpec) + ")"); int width = getDefaultSize(mVideoWidth, widthMeasureSpec); int height = getDefaultSize(mVideoHeight, heightMeasureSpec); if (mVideoWidth > 0 && mVideoHeight > 0) { int widthSpecMode = MeasureSpec.getMode(widthMeasureSpec); int widthSpecSize = MeasureSpec.getSize(widthMeasureSpec); int heightSpecMode = MeasureSpec.getMode(heightMeasureSpec); int heightSpecSize = MeasureSpec.getSize(heightMeasureSpec); if (widthSpecMode == MeasureSpec.EXACTLY && heightSpecMode == MeasureSpec.EXACTLY) { // the size is fixed width = widthSpecSize; height = heightSpecSize; // for compatibility, we adjust size based on aspect ratio if (mVideoWidth * height < width * mVideoHeight) { //Log.i("@@@", "image too wide, correcting"); width = height * mVideoWidth / mVideoHeight; } else if (mVideoWidth * height > width * mVideoHeight) { //Log.i("@@@", "image too tall, correcting"); height = width * mVideoHeight / mVideoWidth; } } else if (widthSpecMode == MeasureSpec.EXACTLY) { // only the width is fixed, adjust the height to match aspect ratio if possible width = widthSpecSize; height = width * mVideoHeight / mVideoWidth; if (heightSpecMode == MeasureSpec.AT_MOST && height > heightSpecSize) { // couldn't match aspect ratio within the constraints height = heightSpecSize; } } else if (heightSpecMode == MeasureSpec.EXACTLY) { // only the height is fixed, adjust the width to match aspect ratio if possible height = heightSpecSize; width = height * mVideoWidth / mVideoHeight; if (widthSpecMode == MeasureSpec.AT_MOST && width > widthSpecSize) { // couldn't match aspect ratio within the constraints width = widthSpecSize; } } else { // neither the width nor the height are fixed, try to use actual video size width = mVideoWidth; height = mVideoHeight; if (heightSpecMode == MeasureSpec.AT_MOST && height > heightSpecSize) { // too tall, decrease both width and height height = heightSpecSize; width = height * mVideoWidth / mVideoHeight; } if (widthSpecMode == MeasureSpec.AT_MOST && width > widthSpecSize) { // too wide, decrease both width and height width = widthSpecSize; height = width * mVideoHeight / mVideoWidth; } } } setMeasuredDimension(width, height); } private void initVideoView() { mVideoWidth = 0; mVideoHeight = 0; getHolder().addCallback(mSHCallback); getHolder().setType(SurfaceHolder.SURFACE_TYPE_PUSH_BUFFERS); setFocusable(true); setFocusableInTouchMode(true); requestFocus(); mCurrentState = STATE_IDLE; mTargetState = STATE_IDLE; }  public void setVideoURI(Uri uri, boolean looping) { mUri = uri; mLooping = looping; mSeekWhenPrepared = 0; openVideo(); requestLayout(); invalidate(); } public void stopPlayback() { if (mMediaPlayer != null) { mMediaPlayer.stop(); mMediaPlayer.release(); mMediaPlayer = null; mCurrentState = STATE_IDLE; mTargetState = STATE_IDLE; } } private void openVideo() { if (mUri == null || mSurfaceHolder == null) { // not ready for playback just yet, will try again later return; } // we shouldn't clear the target state, because somebody might have // called start() previously release(false); try { mMediaPlayer = new MediaPlayer(); if (mAudioSession != 0) { mMediaPlayer.setAudioSessionId(mAudioSession); } else { mAudioSession = mMediaPlayer.getAudioSessionId(); } mMediaPlayer.setOnPreparedListener(mPreparedListener); mMediaPlayer.setOnVideoSizeChangedListener(mSizeChangedListener); mMediaPlayer.setOnCompletionListener(mCompletionListener); mMediaPlayer.setOnErrorListener(mErrorListener); mMediaPlayer.setOnInfoListener(mInfoListener); mMediaPlayer.setOnBufferingUpdateListener(mBufferingUpdateListener); mCurrentBufferPercentage = 0; mMediaPlayer.setLooping(mLooping); mMediaPlayer.setDataSource(getContext(), mUri); mMediaPlayer.setDisplay(mSurfaceHolder); mMediaPlayer.setAudioStreamType(AudioManager.STREAM_MUSIC); mMediaPlayer.setScreenOnWhilePlaying(true); mMediaPlayer.prepareAsync(); // we don't set the target state here either, but preserve the // target state that was there before. mCurrentState = STATE_PREPARING; attachMediaController(); } catch (Exception ex) { Log.w(TAG, "Unable to open content: " + mUri, ex); mCurrentState = STATE_ERROR; mTargetState = STATE_ERROR; mErrorListener.onError(mMediaPlayer, MediaPlayer.MEDIA_ERROR_UNKNOWN, 0); } } public void setMediaController(VideoControlView controller) { if (mMediaController != null) { mMediaController.hide(); } mMediaController = controller; attachMediaController(); } private void attachMediaController() { if (mMediaPlayer != null && mMediaController != null) { mMediaController.setMediaPlayer(this); mMediaController.setEnabled(isInPlaybackState()); } } MediaPlayer.OnVideoSizeChangedListener mSizeChangedListener = new MediaPlayer.OnVideoSizeChangedListener() { public void onVideoSizeChanged(MediaPlayer mp, int width, int height) { mVideoWidth = mp.getVideoWidth(); mVideoHeight = mp.getVideoHeight(); if (mVideoWidth != 0 && mVideoHeight != 0) { getHolder().setFixedSize(mVideoWidth, mVideoHeight); requestLayout(); } } }; MediaPlayer.OnPreparedListener mPreparedListener = new MediaPlayer.OnPreparedListener() { public void onPrepared(MediaPlayer mp) { mCurrentState = STATE_PREPARED; if (mOnPreparedListener != null) { mOnPreparedListener.onPrepared(mMediaPlayer); } if (mMediaController != null) { mMediaController.setEnabled(true); } mVideoWidth = mp.getVideoWidth(); mVideoHeight = mp.getVideoHeight(); int seekToPosition = mSeekWhenPrepared; // mSeekWhenPrepared may be changed after // seekTo() call if (seekToPosition != 0) { seekTo(seekToPosition); } if (mVideoWidth != 0 && mVideoHeight != 0) { //Log.i("@@@@", "video size: " + mVideoWidth +"/"+ mVideoHeight); getHolder().setFixedSize(mVideoWidth, mVideoHeight); if (mSurfaceWidth == mVideoWidth && mSurfaceHeight == mVideoHeight) { // We didn't actually change the size (it was already at the size // we need), so we won't get a "surface changed" callback, so // start the video here instead of in the callback. if (mTargetState == STATE_PLAYING) { start(); if (mMediaController != null) { mMediaController.show(); } } else if (!isPlaying() && (seekToPosition != 0 || getCurrentPosition() > 0)) { if (mMediaController != null) { // Show the media controls when we're paused into a video and make // 'em stick. mMediaController.show(); } } } } else { // We don't know the video size yet, but should start anyway. // The video size might be reported to us later. if (mTargetState == STATE_PLAYING) { start(); } } } }; private MediaPlayer.OnCompletionListener mCompletionListener = new MediaPlayer.OnCompletionListener() { public void onCompletion(MediaPlayer mp) { mCurrentState = STATE_PLAYBACK_COMPLETED; mTargetState = STATE_PLAYBACK_COMPLETED; if (mOnCompletionListener != null) { mOnCompletionListener.onCompletion(mMediaPlayer); } } }; private MediaPlayer.OnInfoListener mInfoListener = new MediaPlayer.OnInfoListener() { public boolean onInfo(MediaPlayer mp, int arg1, int arg2) { if (mOnInfoListener != null) { mOnInfoListener.onInfo(mp, arg1, arg2); } return true; } }; private MediaPlayer.OnErrorListener mErrorListener = new MediaPlayer.OnErrorListener() { public boolean onError(MediaPlayer mp, int framework_err, int impl_err) { Log.d(TAG, "Error: " + framework_err + "," + impl_err); mCurrentState = STATE_ERROR; mTargetState = STATE_ERROR; if (mMediaController != null) { mMediaController.hide(); }  if (mOnErrorListener != null) { if (mOnErrorListener.onError(mMediaPlayer, framework_err, impl_err)) { return true; } } return true; } }; private MediaPlayer.OnBufferingUpdateListener mBufferingUpdateListener = new MediaPlayer.OnBufferingUpdateListener() { public void onBufferingUpdate(MediaPlayer mp, int percent) { mCurrentBufferPercentage = percent; } };  public void setOnPreparedListener(MediaPlayer.OnPreparedListener l) { mOnPreparedListener = l; }  public void setOnCompletionListener(OnCompletionListener l) { mOnCompletionListener = l; }  public void setOnErrorListener(OnErrorListener l) { mOnErrorListener = l; }  public void setOnInfoListener(OnInfoListener l) { mOnInfoListener = l; } SurfaceHolder.Callback mSHCallback = new SurfaceHolder.Callback() { public void surfaceChanged(SurfaceHolder holder, int format, int w, int h) { mSurfaceWidth = w; mSurfaceHeight = h; boolean isValidState = (mTargetState == STATE_PLAYING); boolean hasValidSize = (mVideoWidth == w && mVideoHeight == h); if (mMediaPlayer != null && isValidState && hasValidSize) { if (mSeekWhenPrepared != 0) { seekTo(mSeekWhenPrepared); } start(); if (mMediaController != null) { mMediaController.show(); } } } public void surfaceCreated(SurfaceHolder holder) { mSurfaceHolder = holder; openVideo(); } public void surfaceDestroyed(SurfaceHolder holder) { // after we return from this we can't use the surface any more mSurfaceHolder = null; if (mMediaController != null) mMediaController.hide(); release(true); } };  private void release(boolean cleartargetstate) { if (mMediaPlayer != null) { mMediaPlayer.reset(); mMediaPlayer.release(); mMediaPlayer = null; mCurrentState = STATE_IDLE; if (cleartargetstate) { mTargetState = STATE_IDLE; } } } @Override public boolean onTouchEvent(MotionEvent ev) { if (isInPlaybackState() && mMediaController != null) { toggleMediaControlsVisiblity(); } return super.onTouchEvent(ev); } @Override public boolean onTrackballEvent(MotionEvent ev) { if (isInPlaybackState() && mMediaController != null) { toggleMediaControlsVisiblity(); } return super.onTrackballEvent(ev); } @Override public boolean onKeyDown(int keyCode, KeyEvent event) { boolean isKeyCodeSupported = keyCode != KeyEvent.KEYCODE_BACK && keyCode != KeyEvent.KEYCODE_VOLUME_UP && keyCode != KeyEvent.KEYCODE_VOLUME_DOWN && keyCode != KeyEvent.KEYCODE_MENU && keyCode != KeyEvent.KEYCODE_CALL && keyCode != KeyEvent.KEYCODE_ENDCALL; if (isInPlaybackState() && isKeyCodeSupported && mMediaController != null) { if (keyCode == KeyEvent.KEYCODE_HEADSETHOOK || keyCode == KeyEvent.KEYCODE_MEDIA_PLAY_PAUSE) { if (mMediaPlayer.isPlaying()) { pause(); mMediaController.show(); } else { start(); mMediaController.hide(); } return true; } else if (keyCode == KeyEvent.KEYCODE_MEDIA_PLAY) { if (!mMediaPlayer.isPlaying()) { start(); mMediaController.hide(); } return true; } else if (keyCode == KeyEvent.KEYCODE_MEDIA_STOP || keyCode == KeyEvent.KEYCODE_MEDIA_PAUSE) { if (mMediaPlayer.isPlaying()) { pause(); mMediaController.show(); } return true; } else { toggleMediaControlsVisiblity(); } } return super.onKeyDown(keyCode, event); } private void toggleMediaControlsVisiblity() { if (mMediaController.isShowing()) { mMediaController.hide(); } else { mMediaController.show(); } } @Override public void start() { if (isInPlaybackState()) { mMediaPlayer.start(); mCurrentState = STATE_PLAYING; } mTargetState = STATE_PLAYING; } @Override public void pause() { if (isInPlaybackState()) { if (mMediaPlayer.isPlaying()) { mMediaPlayer.pause(); mCurrentState = STATE_PAUSED; } } mTargetState = STATE_PAUSED; } @Override public int getDuration() { if (isInPlaybackState()) { return mMediaPlayer.getDuration(); } return -1; } @Override public int getCurrentPosition() { if (isInPlaybackState()) { return mMediaPlayer.getCurrentPosition(); } return 0; } @Override public void seekTo(int msec) { if (isInPlaybackState()) { mMediaPlayer.seekTo(msec); mSeekWhenPrepared = 0; } else { mSeekWhenPrepared = msec; } } @Override public boolean isPlaying() { return isInPlaybackState() && mMediaPlayer.isPlaying(); } @Override public int getBufferPercentage() { if (mMediaPlayer != null) { return mCurrentBufferPercentage; } return 0; } private boolean isInPlaybackState() { return (mMediaPlayer != null && mCurrentState != STATE_ERROR && mCurrentState != STATE_IDLE && mCurrentState != STATE_PREPARING); }}package com.twitter.sdk.android.core.internal;import com.twitter.sdk.android.core.models.Card;import com.twitter.sdk.android.core.models.ImageValue;import com.twitter.sdk.android.core.models.UserValue;public class VineCardUtils { public static final String PLAYER_CARD = "player"; public static final String VINE_CARD = "vine"; public static final long VINE_USER_ID = 586671909; private VineCardUtils() {} public static boolean isVine(Card card) { return (PLAYER_CARD.equals(card.name) || VINE_CARD.equals(card.name)) && isVineUser(card); } private static boolean isVineUser(Card card) { final UserValue user = card.bindingValues.get("site"); try { if (user != null && Long.parseLong(user.idStr) == VINE_USER_ID) { return true; } } catch (NumberFormatException ex) { return false; } return false; } public static String getPublisherId(Card card) { final UserValue user_value = card.bindingValues.get("site"); return user_value.idStr; } public static String getStreamUrl(Card card) { return card.bindingValues.get("player_stream_url"); } public static String getCallToActionUrl(Card card) { return card.bindingValues.get("card_url"); } public static ImageValue getImageValue(Card card) { return card.bindingValues.get("player_image"); }}package com.twitter.sdk.android.core.identity;class WebViewException extends Exception { private static final long serialVersionUID = -7397331487240298819L; private final int errorCode; private final String failingUrl; public WebViewException(int errorCode, String description, String failingUrl) { super(description); this.errorCode = errorCode; this.failingUrl = failingUrl; } public int getErrorCode() { return errorCode; } public String getDescription() { return getMessage(); } public String getFailingUrl() { return failingUrl; }}package com twitter sdk android core services;import com twitter sdk android core models User;import retrofit2 Call;import retrofit2 http GET;import retrofit2 http Query;public interface AccountService {  @GET("/1 1/account/verify_credentials json") Call<User> verifyCredentials(@Query("include_entities") Boolean includeEntities, @Query("skip_status") Boolean skipStatus);}package com twitter sdk android tweetui internal;import android animation Animator;import android animation AnimatorListenerAdapter;import android view View;import android view ViewPropertyAnimator;class AnimationUtils { public static ViewPropertyAnimator fadeOut(final View from, int duration) { if (from getVisibility() == View VISIBLE) { from clearAnimation(); final ViewPropertyAnimator animator = from animate(); animator alpha(0f)  setDuration(duration)  setListener(new AnimatorListenerAdapter() { @Override public void onAnimationEnd(Animator animation) { from setVisibility(View INVISIBLE); from setAlpha(1f); } }); return animator; } return null; } public static ViewPropertyAnimator fadeIn(View to, int duration) { if (to getVisibility() != View VISIBLE) { to setAlpha(0f); to setVisibility(View VISIBLE); } to clearAnimation(); final ViewPropertyAnimator animator = to animate(); animator alpha(1f)  setDuration(duration)  setListener(null); return animator; }}package com twitter sdk android core models;import com google gson annotations SerializedName;public class ApiError { @SerializedName("message") public final String message; @SerializedName("code") public final int code; public ApiError(String message, int code) { this message = message; this code = code; }}package com twitter sdk android core models;import com google gson annotations SerializedName;import java util List;public class ApiErrors { @SerializedName("errors") public final List<ApiError> errors; public ApiErrors(List<ApiError> errors) { this errors = errors; }}package com twitter sdk android tweetcomposer;import android content Context;import android net Uri;import android util AttributeSet;import android view ViewGroup;import android widget ImageView;import android widget LinearLayout;import android widget TextView;import com squareup picasso Picasso;import com squareup picasso Transformation;public class AppCardView extends LinearLayout { ImageView appImageView; ViewGroup appInfoLayout; TextView appInstallButton; TextView appNameView; TextView appStoreNameView; public AppCardView(Context context) { this(context, null); } public AppCardView(Context context, AttributeSet attrs) { super(context, attrs); init(context); } public AppCardView(Context context, AttributeSet attrs, int defStyle) { super(context, attrs, defStyle); init(context); } void init(Context context) { setOrientation(LinearLayout VERTICAL); inflate(context, R layout tw__app_card, this); findSubviews(); setButtonColor(); } void findSubviews() { appImageView = (ImageView) findViewById(R id tw__app_image); appNameView = (TextView) findViewById(R id tw__app_name); appStoreNameView = (TextView) findViewById(R id tw__app_store_name); appInstallButton = (TextView) findViewById(R id tw__app_install_button); appInfoLayout = (ViewGroup) findViewById(R id tw__app_info_layout); } void setCard(Card card) { setImage(Uri parse(card imageUri)); setAppName(card appName); } void setImage(Uri uri) { final int radius = getResources() getDimensionPixelSize(R dimen tw__card_radius_medium); final Transformation transformation = new RoundedCornerTransformation Builder()  setRadii(radius, radius, 0, 0)  build(); Picasso with(getContext())  load(uri)  transform(transformation)  fit()  centerCrop()  into(appImageView); } void setAppName(String name) { appNameView setText(name); } @Override protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) { final int maxWidth = getResources() getDimensionPixelSize(R dimen tw__card_maximum_width); // Adjust width if required final int measuredWidth = MeasureSpec getSize(widthMeasureSpec); if (maxWidth > 0 && maxWidth < measuredWidth) { final int measureMode = MeasureSpec getMode(widthMeasureSpec); widthMeasureSpec = MeasureSpec makeMeasureSpec(maxWidth, measureMode); } super onMeasure(widthMeasureSpec, heightMeasureSpec); } void setButtonColor() { final int buttonTextColor = getResources() getColor(R color tw__composer_blue_text); appInstallButton setTextColor(buttonTextColor); }}package com twitter sdk android core internal util;import android content Context;import android content res TypedArray;import android util AttributeSet;import android widget ImageView;import com twitter sdk android core R;public class AspectRatioImageView extends ImageView { private static final float DEFAULT_ASPECT_RATIO = 1 0f; private static final int DEFAULT_ADJUST_DIMENSION = 0; // defined by attrs xml enum static final int ADJUST_DIMENSION_HEIGHT = 0; static final int ADJUST_DIMENSION_WIDTH = 1; private double aspectRatio; // width to height ratio private int dimensionToAdjust; // ADJUST_DIMENSION_HEIGHT or ADJUST_DIMENSION_WIDTH public AspectRatioImageView(Context context) { this(context, null); } public AspectRatioImageView(Context context, AttributeSet attrs) { super(context, attrs); final TypedArray a = context obtainStyledAttributes(attrs, R styleable tw__AspectRatioImageView); try { aspectRatio = a getFloat(R styleable tw__AspectRatioImageView_tw__image_aspect_ratio, DEFAULT_ASPECT_RATIO); dimensionToAdjust = a getInt(R styleable tw__AspectRatioImageView_tw__image_dimension_to_adjust, DEFAULT_ADJUST_DIMENSION); } finally { a recycle(); } } public double getAspectRatio() { return aspectRatio; } public int getDimensionToAdjust() { return dimensionToAdjust; }  public void setAspectRatio(final double aspectRatio) { this aspectRatio = aspectRatio; }  public void resetSize() { if (getMeasuredWidth() == 0 && getMeasuredHeight() == 0) { return; } measure(MeasureSpec makeMeasureSpec(0, MeasureSpec EXACTLY), MeasureSpec makeMeasureSpec(0, MeasureSpec EXACTLY)); layout(0, 0, 0, 0); } @Override protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) { super onMeasure(widthMeasureSpec, heightMeasureSpec); int width = getMeasuredWidth(); int height = getMeasuredHeight(); if (dimensionToAdjust == ADJUST_DIMENSION_HEIGHT) { height = calculateHeight(width, aspectRatio); } else { width = calculateWidth(height, aspectRatio); } setMeasuredDimension(width, height); }  int calculateHeight(int width, double ratio) { if (ratio == 0) { return 0; } return (int) Math round(width / ratio); }  int calculateWidth(int height, double ratio) { return (int) Math round(height * ratio); }}package com twitter sdk android core internal util;import android test AndroidTestCase;import android view LayoutInflater;import android view View;import android view ViewGroup;import android widget LinearLayout;import com twitter sdk android core R;public class AspectRatioImageViewTest extends AndroidTestCase { private static final double TEST_ASPECT_RATIO = 2 0; private static final float DELTA = 0 001f; private AspectRatioImageView getHeightAdjustedView() { return (AspectRatioImageView) getInflatedLayout() findViewById(R id height_adjusted_view); } private AspectRatioImageView getWidthAdjustedView() { return (AspectRatioImageView) getInflatedLayout() findViewById(R id width_adjusted_view); } public void testHeightAdjusted() { final AspectRatioImageView imageView = getHeightAdjustedView(); assertEquals(1 6, imageView getAspectRatio(), DELTA); assertEquals(AspectRatioImageView ADJUST_DIMENSION_HEIGHT, imageView getDimensionToAdjust()); } public void testWidthAdjusted() { final AspectRatioImageView imageView = getWidthAdjustedView(); assertEquals(1 2, imageView getAspectRatio(), DELTA); assertEquals(AspectRatioImageView ADJUST_DIMENSION_WIDTH, imageView getDimensionToAdjust()); } private View getInflatedLayout() { final ViewGroup group = new LinearLayout(getContext()); return LayoutInflater from(getContext()) inflate( R layout activity_aspect_ratio_image_view_test, group, true); } public void testSetAspectRatio() { final AspectRatioImageView av = new AspectRatioImageView(getContext()); av setAspectRatio(TEST_ASPECT_RATIO); assertEquals(TEST_ASPECT_RATIO, av getAspectRatio()); } public void testSetAspectRatio_xml() { final AspectRatioImageView av = getHeightAdjustedView(); av setAspectRatio(TEST_ASPECT_RATIO); assertEquals(TEST_ASPECT_RATIO, av getAspectRatio()); } public void testCalculateHeight() { final AspectRatioImageView av = new AspectRatioImageView(getContext()); assertEquals(400, av calculateHeight(600, 1 5)); assertEquals(600, av calculateHeight(300, 0 5)); assertEquals(300, av calculateHeight(300, 1 0)); assertEquals(0, av calculateHeight(0, 1 3)); assertEquals(0, av calculateHeight(100, 0)); // sub-pixel space for images mean aspect ratios cannot be respected assertEquals(1, av calculateHeight(10, 15 0)); } public void testCalculateWidth() { final AspectRatioImageView av = new AspectRatioImageView(getContext()); assertEquals(300, av calculateWidth(200, 1 5)); assertEquals(201, av calculateWidth(401, 0 5)); assertEquals(200, av calculateWidth(200, 1 0)); assertEquals(0, av calculateWidth(0, 1 3)); assertEquals(0, av calculateWidth(100, 0)); // sub-pixel space for images mean aspect ratios cannot be respected assertEquals(1, av calculateWidth(10, 0 05)); }}package com twitter sdk android core identity;import android app Activity;import android content Intent;import com twitter sdk android core Callback;import com twitter sdk android core Result;import com twitter sdk android core TwitterAuthConfig;import com twitter sdk android core TwitterAuthException;import com twitter sdk android core TwitterAuthToken;import com twitter sdk android core TwitterSession;public abstract class AuthHandler { static final String EXTRA_TOKEN = "tk"; static final String EXTRA_TOKEN_SECRET = "ts"; static final String EXTRA_SCREEN_NAME = "screen_name"; static final String EXTRA_USER_ID = "user_id"; static final String EXTRA_AUTH_ERROR = "auth_error"; static final int RESULT_CODE_ERROR = Activity RESULT_FIRST_USER; protected final int requestCode; private final TwitterAuthConfig config; private final Callback<TwitterSession> callback;  AuthHandler(TwitterAuthConfig authConfig, Callback<TwitterSession> callback, int requestCode) { config = authConfig; this callback = callback; this requestCode = requestCode; } TwitterAuthConfig getAuthConfig() { return config; } Callback<TwitterSession> getCallback() { return callback; }  public abstract boolean authorize(Activity activity);  public boolean handleOnActivityResult(int requestCode, int resultCode, Intent data) { if (this requestCode != requestCode) { return false; } final Callback<TwitterSession> callback = getCallback(); if (callback != null) { if (resultCode == Activity RESULT_OK) { final String token = data getStringExtra(EXTRA_TOKEN); final String tokenSecret = data getStringExtra(EXTRA_TOKEN_SECRET); final String screenName = data getStringExtra(EXTRA_SCREEN_NAME); final long userId = data getLongExtra(EXTRA_USER_ID, 0L); callback success(new Result<>(new TwitterSession( new TwitterAuthToken(token, tokenSecret), userId, screenName), null)); } else if (data != null && data hasExtra(EXTRA_AUTH_ERROR)) { callback failure( (TwitterAuthException) data getSerializableExtra(EXTRA_AUTH_ERROR)); } else { callback failure(new TwitterAuthException("Authorize failed ")); } } return true; }}package com twitter sdk android core identity;import android app Activity;import com twitter sdk android core TwitterCore;import java util concurrent atomic AtomicReference;import io fabric sdk android Fabric;class AuthState { final AtomicReference<AuthHandler> authHandlerRef = new AtomicReference<>(null); public boolean beginAuthorize(Activity activity, AuthHandler authHandler) { boolean result = false; if (isAuthorizeInProgress()) { Fabric getLogger() w(TwitterCore TAG, "Authorize already in progress"); } else if (authHandler authorize(activity)) { result = authHandlerRef compareAndSet(null, authHandler); if (!result) { Fabric getLogger() w(TwitterCore TAG, "Failed to update authHandler, authorize" + " already in progress "); } } return result; } public void endAuthorize() { authHandlerRef set(null); } public boolean isAuthorizeInProgress() { return authHandlerRef get() != null; } public AuthHandler getAuthHandler() { return authHandlerRef get(); }}package com twitter sdk android core;import com google gson annotations SerializedName;public abstract class AuthToken {  @SerializedName("created_at") protected final long createdAt; public AuthToken() { createdAt = System currentTimeMillis(); } protected AuthToken(long createdAt) { this createdAt = createdAt; }  public abstract boolean isExpired();}package com twitter sdk android core;import com google gson Gson;import com google gson JsonDeserializationContext;import com google gson JsonDeserializer;import com google gson JsonElement;import com google gson JsonObject;import com google gson JsonParseException;import com google gson JsonPrimitive;import com google gson JsonSerializationContext;import com google gson JsonSerializer;import com twitter sdk android core internal oauth GuestAuthToken;import com twitter sdk android core internal oauth OAuth2Token;import java lang reflect Type;import java util HashMap;import java util Map;public class AuthTokenAdapter implements JsonSerializer<AuthToken>, JsonDeserializer<AuthToken> { private static final String AUTH_TYPE = "auth_type"; private static final String AUTH_TOKEN = "auth_token"; static final Map<String, Class<? extends AuthToken>> authTypeRegistry = new HashMap<>(); static { authTypeRegistry put("oauth1a", TwitterAuthToken class); authTypeRegistry put("oauth2", OAuth2Token class); authTypeRegistry put("guest", GuestAuthToken class); } private final Gson gson; public AuthTokenAdapter() { this gson = new Gson(); } @Override public JsonElement serialize(AuthToken src, Type typeOfSrc, JsonSerializationContext context) { final JsonObject jsonObject = new JsonObject(); jsonObject addProperty(AUTH_TYPE, getAuthTypeString(src getClass())); jsonObject add(AUTH_TOKEN, gson toJsonTree(src)); return jsonObject; } @Override public AuthToken deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context) throws JsonParseException { final JsonObject jsonObject = json getAsJsonObject(); final JsonPrimitive jsonAuthType = jsonObject getAsJsonPrimitive(AUTH_TYPE); final String authType = jsonAuthType getAsString(); final JsonElement jsonAuthToken = jsonObject get(AUTH_TOKEN); return gson fromJson(jsonAuthToken, authTypeRegistry get(authType)); } static String getAuthTypeString(Class<? extends AuthToken> authTokenClass) { for (Map Entry<String, Class<? extends AuthToken>> entry : authTypeRegistry entrySet()) { if (entry getValue() equals(authTokenClass)) { return entry getKey(); } } return ""; }}package com twitter sdk android tweetui;import com twitter sdk android core Callback;import com twitter sdk android core Result;import com twitter sdk android core TwitterException;import com twitter sdk android core models Tweet;import java util List;abstract class BaseTimeline { protected final TweetUi tweetUi; BaseTimeline(TweetUi tweetUi) { if (tweetUi == null) { throw new IllegalArgumentException("TweetUi instance must not be null"); } this tweetUi = tweetUi; scribeImpression(); } abstract String getTimelineType(); private void scribeImpression() { tweetUi scribe( ScribeConstants getSyndicatedSdkTimelineNamespace(getTimelineType()), ScribeConstants getTfwClientTimelineNamespace(getTimelineType()) ); }  static Long decrementMaxId(Long maxId) { return maxId == null ? null : maxId - 1; }  static class TweetsCallback extends Callback<List<Tweet>> { final Callback<TimelineResult<Tweet>> cb;  TweetsCallback(Callback<TimelineResult<Tweet>> cb) { this cb = cb; } @Override public void success(Result<List<Tweet>> result) { final List<Tweet> tweets = result data; final TimelineResult<Tweet> timelineResult = new TimelineResult<>(new TimelineCursor(tweets), tweets); if (cb != null) { cb success(new Result<>(timelineResult, result response)); } } @Override public void failure(TwitterException exception) { if (cb != null) { cb failure(exception); } } }}package com twitter sdk android tweetui;import com twitter sdk android core Callback;import com twitter sdk android core models Tweet;class BaseTweetAction { protected Callback<Tweet> actionCallback; BaseTweetAction(Callback<Tweet> actionCallback) { this actionCallback = actionCallback; } Callback<Tweet> getActionCallback() { return actionCallback; }}package com twitter sdk android tweetui;import android annotation TargetApi;import android content Context;import android content Intent;import android content res TypedArray;import android graphics Color;import android graphics drawable ColorDrawable;import android net Uri;import android os Build;import android text TextUtils;import android util AttributeSet;import android view LayoutInflater;import android view View;import android widget FrameLayout;import android widget ImageView;import android widget LinearLayout;import android widget RelativeLayout;import android widget TextView;import com squareup picasso Picasso;import io fabric sdk android Fabric;import com twitter sdk android core Callback;import com twitter sdk android core IntentUtils;import com twitter sdk android core Result;import com twitter sdk android core TwitterException;import com twitter sdk android core internal VineCardUtils;import com twitter sdk android core internal scribe ScribeItem;import com twitter sdk android core models Card;import com twitter sdk android core models ImageValue;import com twitter sdk android core models MediaEntity;import com twitter sdk android core models Tweet;import com twitter sdk android core models TweetBuilder;import com twitter sdk android core internal UserUtils;import com twitter sdk android core models VideoInfo;import com twitter sdk android tweetui internal MediaBadgeView;import com twitter sdk android tweetui internal SpanClickHandler;import com twitter sdk android tweetui internal TweetMediaUtils;import com twitter sdk android tweetui internal TweetMediaView;import java text DateFormat;import java util Date;import java util Locale;@SuppressWarnings({"TooManyMethods", "TooManyFields"})public abstract class BaseTweetView extends LinearLayout { private static final String TAG = TweetUi LOGTAG; private static final int DEFAULT_STYLE = R style tw__TweetLightStyle; private static final String EMPTY_STRING = ""; static final double DEFAULT_ASPECT_RATIO = 16 0 / 9 0; static final double SECONDARY_TEXT_COLOR_LIGHT_OPACITY = 0 4; static final double SECONDARY_TEXT_COLOR_DARK_OPACITY = 0 35; static final double MEDIA_BG_LIGHT_OPACITY = 0 08; static final double MEDIA_BG_DARK_OPACITY = 0 12; static final long INVALID_ID = -1L; // Dependency Provider final DependencyProvider dependencyProvider; // attributes private LinkClickListener linkClickListener; TweetLinkClickListener tweetLinkClickListener; TweetMediaClickListener tweetMediaClickListener; private Uri permalinkUri; Tweet tweet; // for testing int styleResId; // layout views RelativeLayout containerView; ImageView avatarView; TextView fullNameView; TextView screenNameView; ImageView verifiedCheckView; FrameLayout mediaContainerView; TweetMediaView mediaView; TextView contentView; TextView timestampView; ImageView twitterLogoView; TextView retweetedByView; TweetActionBarView tweetActionBarView; MediaBadgeView mediaBadgeView; View bottomSeparator; // color values int containerBgColor; int primaryTextColor; int secondaryTextColor; int actionColor; int actionHighlightColor; int mediaBgColor; // resource id's int photoErrorResId; int birdLogoResId; int retweetIconResId; boolean tweetActionsEnabled; // styled drawables for images ColorDrawable mediaBg;  BaseTweetView(Context context, Tweet tweet) { this(context, tweet, DEFAULT_STYLE); }  BaseTweetView(Context context, Tweet tweet, int styleResId) { this(context, tweet, styleResId, new DependencyProvider()); }  BaseTweetView(Context context, Tweet tweet, int styleResId, DependencyProvider dependencyProvider) { super(context, null); this dependencyProvider = dependencyProvider; initAttributes(styleResId); inflateView(context); findSubviews(); applyStyles(); if (!isTweetUiEnabled()) return; initTweetActions(); setTweet(tweet); }   public BaseTweetView(Context context, AttributeSet attrs) { this(context, attrs, new DependencyProvider()); }  BaseTweetView(Context context, AttributeSet attrs, DependencyProvider dependencyProvider) { super(context, attrs); this dependencyProvider = dependencyProvider; initXmlAttributes(context, attrs); inflateView(context); }  public BaseTweetView(Context context, AttributeSet attrs, int defStyle) { this(context, attrs, defStyle, new DependencyProvider()); }  BaseTweetView(Context context, AttributeSet attrs, int defStyle, DependencyProvider dependencyProvider) { super(context, attrs, defStyle); this dependencyProvider = dependencyProvider; initXmlAttributes(context, attrs); inflateView(context); }  private void initAttributes(int styleResId) { this styleResId = styleResId; final TypedArray a = getContext() getTheme() obtainStyledAttributes(styleResId, R styleable tw__TweetView); try { setStyleAttributes(a); } finally { a recycle(); } }  private void initXmlAttributes(Context context, AttributeSet attrs) { if (attrs == null) return; // parse the xml attributes by resolving resource references final TypedArray a = context getTheme() obtainStyledAttributes(attrs, R styleable tw__TweetView, 0, 0); try { setXmlDataAttributes(a); setStyleAttributes(a); } finally { a recycle(); } }  private void setXmlDataAttributes(TypedArray a) { final long tweetId = Utils numberOrDefault( a getString(R styleable tw__TweetView_tw__tweet_id), INVALID_ID); if (tweetId <= 0) { throw new IllegalArgumentException("Invalid tw__tweet_id"); } // XML special case  The screen_name is not known yet  A permalink can be constructed and // followed  Permalink should be updated once the loadTweet call receives the Tweet  setPermalinkUri(null, tweetId); this tweet = new TweetBuilder() setId(tweetId) build(); }  private void setStyleAttributes(TypedArray a) { // Styled via attributes containerBgColor = a getColor(R styleable tw__TweetView_tw__container_bg_color, getResources() getColor(R color tw__tweet_light_container_bg_color)); primaryTextColor = a getColor(R styleable tw__TweetView_tw__primary_text_color, getResources() getColor(R color tw__tweet_light_primary_text_color)); actionColor = a getColor( R styleable tw__TweetView_tw__action_color, getResources() getColor(R color tw__tweet_action_color)); actionHighlightColor = a getColor( R styleable tw__TweetView_tw__action_highlight_color, getResources() getColor(R color tw__tweet_action_light_highlight_color)); tweetActionsEnabled = a getBoolean(R styleable tw__TweetView_tw__tweet_actions_enabled, false); // Calculated colors final boolean isLightBg = ColorUtils isLightColor(containerBgColor); if (isLightBg) { photoErrorResId = R drawable tw__ic_tweet_photo_error_light; birdLogoResId = R drawable tw__ic_logo_blue; retweetIconResId = R drawable tw__ic_retweet_light; } else { photoErrorResId = R drawable tw__ic_tweet_photo_error_dark; birdLogoResId = R drawable tw__ic_logo_white; retweetIconResId = R drawable tw__ic_retweet_dark; } // offset from white when background is light secondaryTextColor = ColorUtils calculateOpacityTransform( isLightBg ? SECONDARY_TEXT_COLOR_LIGHT_OPACITY : SECONDARY_TEXT_COLOR_DARK_OPACITY, isLightBg ? Color WHITE : Color BLACK, primaryTextColor ); // offset from black when background is light mediaBgColor = ColorUtils calculateOpacityTransform( isLightBg ? MEDIA_BG_LIGHT_OPACITY : MEDIA_BG_DARK_OPACITY, isLightBg ? Color BLACK : Color WHITE, containerBgColor ); mediaBg = new ColorDrawable(mediaBgColor); }  private void inflateView(Context context) { final LayoutInflater localInflater = LayoutInflater from(context); final View v = localInflater inflate(getLayout(), null, false); // work around a bug(?) in Android that makes it so that our inflated view doesn't // pick up layout params correctly from its style final LayoutParams layoutParams = new LayoutParams(LayoutParams MATCH_PARENT, LayoutParams WRAP_CONTENT); v setLayoutParams(layoutParams); this addView(v); }  @Override protected void onFinishInflate() { super onFinishInflate(); if (!isTweetUiEnabled()) return; findSubviews(); applyStyles(); initTweetActions(); loadTweet(); }  private void initTweetActions() { setTweetActionsEnabled(tweetActionsEnabled); // Tweet actions buttons setTweet and clear cache after successful actions  tweetActionBarView setOnActionCallback(new ResetTweetCallback(this, dependencyProvider getTweetUi() getTweetRepository(), null)); }  boolean isTweetUiEnabled() { // in edit mode, halt view creation if (isInEditMode()) return false; try { dependencyProvider getTweetUi(); } catch (IllegalStateException e) { Fabric getLogger() e(TAG, e getMessage()); // TweetUi kit instance not available, halt view creation and disable setEnabled(false); return false; } return true; }  void findSubviews() { // Tweet attribution (avatar, name, screen name, etc ) containerView = (RelativeLayout) findViewById(R id tw__tweet_view); avatarView = (ImageView) findViewById(R id tw__tweet_author_avatar); fullNameView = (TextView) findViewById(R id tw__tweet_author_full_name); screenNameView = (TextView) findViewById(R id tw__tweet_author_screen_name); verifiedCheckView = (ImageView) findViewById(R id tw__tweet_author_verified); mediaContainerView = (FrameLayout) findViewById(R id tw__tweet_media_container); mediaView = (TweetMediaView) findViewById(R id tw__tweet_media); contentView = (TextView) findViewById(R id tw__tweet_text); timestampView = (TextView) findViewById(R id tw__tweet_timestamp); twitterLogoView = (ImageView) findViewById(R id tw__twitter_logo); retweetedByView = (TextView) findViewById(R id tw__tweet_retweeted_by); tweetActionBarView = (TweetActionBarView) findViewById(R id tw__tweet_action_bar); mediaBadgeView = (MediaBadgeView) findViewById(R id tw__tweet_media_badge); bottomSeparator = findViewById(R id bottom_separator); }  abstract int getLayout();  abstract String getViewTypeName();  public long getTweetId() { if (tweet == null) { return INVALID_ID; } return tweet id; }  public void setTweet(Tweet tweet) { this tweet = tweet; render(); }  public Tweet getTweet() { return tweet; }  public void setOnActionCallback(Callback<Tweet> actionCallback) { tweetActionBarView setOnActionCallback(new ResetTweetCallback(this, dependencyProvider getTweetUi() getTweetRepository(), actionCallback)); tweetActionBarView setTweet(tweet); }  public void setTweetMediaClickListener(TweetMediaClickListener tweetMediaClickListener) { this tweetMediaClickListener = tweetMediaClickListener; }  public void setTweetLinkClickListener(TweetLinkClickListener tweetLinkClickListener) { this tweetLinkClickListener = tweetLinkClickListener; }  void render() { final Tweet displayTweet = TweetUtils getDisplayTweet(tweet); setProfilePhotoView(displayTweet); setName(displayTweet); setScreenName(displayTweet); setTimestamp(displayTweet); setTweetMedia(displayTweet); setText(displayTweet); setContentDescription(displayTweet); setTweetActions(tweet); showRetweetedBy(tweet); // set permalink if tweet id and screen name are available if (TweetUtils isTweetResolvable(tweet)) { setPermalinkUri(tweet user screenName, getTweetId()); } else { permalinkUri = null; } // set or update the permalink launcher with the current permalinkUri setPermalinkLauncher(); scribeImpression(); }  private void loadTweet() { final long tweetId = getTweetId(); // create a callback to setTweet on the view or log a failure to load the Tweet final Callback<Tweet> repoCb = new Callback<Tweet>() { @Override public void success(Result<Tweet> result) { setTweet(result data); } @Override public void failure(TwitterException exception) { Fabric getLogger() d(TAG, String format(Locale ENGLISH, TweetUtils LOAD_TWEET_DEBUG, tweetId)); } }; dependencyProvider getTweetUi() getTweetRepository() loadTweet(getTweetId(), repoCb); } Uri getPermalinkUri() { return permalinkUri; } void setPermalinkUri(String screenName, Long tweetId) { if (tweetId <= 0) return; permalinkUri = TweetUtils getPermalink(screenName, tweetId); } private void setPermalinkLauncher() { final OnClickListener listener = new PermalinkClickListener(); this setOnClickListener(listener); }  void showRetweetedBy(Tweet tweet) { if (tweet == null || tweet retweetedStatus == null) { retweetedByView setVisibility(GONE); } else { retweetedByView setText( getResources() getString(R string tw__retweeted_by_format, tweet user name)); retweetedByView setVisibility(VISIBLE); } } void launchPermalink() { final Intent intent = new Intent(Intent ACTION_VIEW, getPermalinkUri()); if (!IntentUtils safeStartActivity(getContext(), intent)) { Fabric getLogger() e(TweetUi LOGTAG, "Activity cannot be found to open permalink URI"); } } void scribeImpression() { if (tweet != null) { dependencyProvider getTweetScribeClient() impression(tweet, getViewTypeName(), tweetActionsEnabled); } } void scribePermalinkClick() { if (tweet != null) { dependencyProvider getTweetScribeClient() click(tweet, getViewTypeName()); } } void scribeCardImpression(Long tweetId, Card card) { final ScribeItem scribeItem = ScribeItem fromTweetCard(tweetId, card); dependencyProvider getVideoScribeClient() impression(scribeItem); } void scribeMediaEntityImpression(long tweetId, MediaEntity mediaEntity) { final ScribeItem scribeItem = ScribeItem fromMediaEntity(tweetId, mediaEntity); dependencyProvider getVideoScribeClient() impression(scribeItem); }  protected void applyStyles() { containerView setBackgroundColor(containerBgColor); avatarView setImageDrawable(mediaBg); mediaView setImageDrawable(mediaBg); fullNameView setTextColor(primaryTextColor); screenNameView setTextColor(secondaryTextColor); contentView setTextColor(primaryTextColor); timestampView setTextColor(secondaryTextColor); twitterLogoView setImageResource(birdLogoResId); retweetedByView setTextColor(secondaryTextColor); }  private void setName(Tweet displayTweet) { if (displayTweet != null && displayTweet user != null) { fullNameView setText(Utils stringOrEmpty(displayTweet user name)); } else { fullNameView setText(EMPTY_STRING); } }  private void setScreenName(Tweet displayTweet) { if (displayTweet != null && displayTweet user != null) { screenNameView setText(UserUtils formatScreenName( Utils stringOrEmpty(displayTweet user screenName))); } else { screenNameView setText(EMPTY_STRING); } }  @TargetApi(Build VERSION_CODES JELLY_BEAN) private void setText(Tweet displayTweet) { if (Build VERSION SDK_INT >= Build VERSION_CODES JELLY_BEAN) { contentView setImportantForAccessibility(IMPORTANT_FOR_ACCESSIBILITY_NO); } final CharSequence tweetText = Utils charSeqOrEmpty(getLinkifiedText(displayTweet)); SpanClickHandler enableClicksOnSpans(contentView); if (!TextUtils isEmpty(tweetText)) { contentView setText(tweetText); contentView setVisibility(VISIBLE); } else { contentView setText(EMPTY_STRING); contentView setVisibility(GONE); } }  private void setTimestamp(Tweet displayTweet) { final String formattedTimestamp; if (displayTweet != null && displayTweet createdAt != null && TweetDateUtils isValidTimestamp(displayTweet createdAt)) { final Long createdAtTimestamp = TweetDateUtils apiTimeToLong(displayTweet createdAt); final String timestamp = TweetDateUtils getRelativeTimeString(getResources(), System currentTimeMillis(), createdAtTimestamp); formattedTimestamp = TweetDateUtils dotPrefix(timestamp); } else { formattedTimestamp = EMPTY_STRING; } timestampView setText(formattedTimestamp); }  void setProfilePhotoView(Tweet displayTweet) { final Picasso imageLoader = dependencyProvider getImageLoader(); if (imageLoader == null) return; final String url; if (displayTweet == null || displayTweet user == null) { url = null; } else { url = UserUtils getProfileImageUrlHttps(displayTweet user, UserUtils AvatarSize REASONABLY_SMALL); } imageLoader load(url) placeholder(mediaBg) into(avatarView); }  final void setTweetMedia(Tweet displayTweet) { clearMediaView(); if (displayTweet == null) { mediaContainerView setVisibility(ImageView GONE); return; } if (displayTweet card != null && VineCardUtils isVine(displayTweet card)) { final Card vineCard = displayTweet card; mediaContainerView setVisibility(ImageView VISIBLE); mediaView setOverlayDrawable(getContext() getResources()  getDrawable(R drawable tw__player_overlay)); mediaBadgeView setCard(vineCard); setVineCardLauncher(displayTweet id, vineCard); final ImageValue imageValue = VineCardUtils getImageValue(vineCard); if (imageValue != null) { setMediaImage(imageValue url, getAspectRatio(imageValue)); } scribeCardImpression(displayTweet id, vineCard); } else if (TweetMediaUtils hasSupportedVideo(displayTweet)) { final MediaEntity mediaEntity = TweetMediaUtils getVideoEntity(displayTweet); // set the image view to visible before setting via picasso placeholders into so // measurements are done correctly, fixes a bug where the placeholder was a small square // in the corner of the view mediaContainerView setVisibility(ImageView VISIBLE); mediaView setOverlayDrawable(getContext() getResources()  getDrawable(R drawable tw__player_overlay)); mediaBadgeView setMediaEntity(mediaEntity); setAltText(mediaEntity altText); setMediaLauncher(displayTweet, mediaEntity); setMediaImage(mediaEntity mediaUrlHttps, getAspectRatio(mediaEntity)); scribeMediaEntityImpression(displayTweet id, mediaEntity); } else if (TweetMediaUtils hasPhoto(displayTweet)) { final MediaEntity mediaEntity = TweetMediaUtils getPhotoEntity(displayTweet); // set the image view to visible before setting via picasso placeholders into so // measurements are done correctly, fixes a bug where the placeholder was a small square // in the corner of the view mediaContainerView setVisibility(ImageView VISIBLE); mediaBadgeView setMediaEntity(mediaEntity); setAltText(mediaEntity altText); setPhotoLauncher(displayTweet, mediaEntity); setMediaImage(mediaEntity mediaUrlHttps, getAspectRatio(mediaEntity)); } else { mediaContainerView setVisibility(ImageView GONE); } } void setAltText(String description) { if (!TextUtils isEmpty(description)) { mediaView setContentDescription(description); } } private void setMediaLauncher(final Tweet displayTweet, final MediaEntity entity) { mediaView setOnClickListener(new OnClickListener() { @Override public void onClick(View view) { if (tweetMediaClickListener != null) { tweetMediaClickListener onMediaEntityClick(tweet, entity); } else { final VideoInfo Variant variant = TweetMediaUtils getSupportedVariant(entity); if (variant != null) { final Intent intent = new Intent(getContext(), PlayerActivity class); final boolean looping = TweetMediaUtils isLooping(entity); final String url = TweetMediaUtils getSupportedVariant(entity) url; final PlayerActivity PlayerItem item = new PlayerActivity PlayerItem(url, looping); intent putExtra(PlayerActivity PLAYER_ITEM, item); IntentUtils safeStartActivity(getContext(), intent); } } } }); } private void setPhotoLauncher(final Tweet displayTweet, final MediaEntity entity) { mediaView setOnClickListener(new OnClickListener() { @Override public void onClick(View view) { if (tweetMediaClickListener != null) { tweetMediaClickListener onMediaEntityClick(tweet, entity); } else { final Intent intent = new Intent(getContext(), GalleryActivity class); intent putExtra(GalleryActivity MEDIA_ENTITY, entity); intent putExtra(GalleryActivity TWEET_ID, displayTweet id); IntentUtils safeStartActivity(getContext(), intent); } } }); } private void setVineCardLauncher(final Long tweetId, final Card vineCard) { mediaView setOnClickListener(new OnClickListener() { @Override public void onClick(View view) { final Intent intent = new Intent(getContext(), PlayerActivity class); final String playerStreamUrl = VineCardUtils getStreamUrl(vineCard); final String callToActionUrl = VineCardUtils getCallToActionUrl(vineCard); final String callToActionText = getContext() getResources() getString(R string tw__cta_text); final PlayerActivity PlayerItem playerItem = new PlayerActivity PlayerItem(playerStreamUrl, true, callToActionText, callToActionUrl); intent putExtra(PlayerActivity PLAYER_ITEM, playerItem); final ScribeItem scribeItem = ScribeItem fromTweetCard(tweetId, vineCard); intent putExtra(PlayerActivity SCRIBE_ITEM, scribeItem); IntentUtils safeStartActivity(getContext(), intent); } }); } void setMediaImage(String imagePath, double aspectRatio) { final Picasso imageLoader = dependencyProvider getImageLoader(); if (imageLoader == null) return; // Picasso fit is a deferred call to resize(w,h) which waits until the target has a // non-zero width or height and resizes the bitmap to the target's width and height  // For recycled targets, which already have a width and (stale) height, reset the size // target to zero so Picasso fit works correctly  mediaView resetSize(); mediaView setAspectRatio(aspectRatio); imageLoader load(imagePath)  placeholder(mediaBg)  fit()  centerCrop()  into(mediaView, new PicassoCallback()); } protected double getAspectRatio(MediaEntity photoEntity) { if (photoEntity == null || photoEntity sizes == null || photoEntity sizes medium == null || photoEntity sizes medium w == 0 || photoEntity sizes medium h == 0) { return DEFAULT_ASPECT_RATIO; } return (double) photoEntity sizes medium w / photoEntity sizes medium h; } protected double getAspectRatio(ImageValue imageValue) { if (imageValue == null || imageValue width == 0 || imageValue height == 0) { return DEFAULT_ASPECT_RATIO; } return (double) imageValue width / imageValue height; } @TargetApi(Build VERSION_CODES JELLY_BEAN) protected void clearMediaView() { // Clear out the background behind any potential error images that we had if (Build VERSION SDK_INT >= Build VERSION_CODES JELLY_BEAN) { mediaView setBackground(null); } else { mediaView setBackgroundDrawable(null); } mediaView setOverlayDrawable(null); mediaView setOnClickListener(null); mediaView setClickable(false); mediaView setContentDescription(getResources() getString(R string tw__tweet_media)); }  class PicassoCallback implements com squareup picasso Callback { @Override public void onSuccess() {  } @Override public void onError() { setErrorImage(); } } protected void setErrorImage() { // async load the error image and set the proper background color behind it once it's loaded // this does incur the necessity of clearing the background on each load of an image however final Picasso imageLoader = dependencyProvider getImageLoader(); if (imageLoader == null) return; imageLoader load(photoErrorResId)  into(mediaView, new com squareup picasso Callback() { @Override public void onSuccess() { mediaView setBackgroundColor(mediaBgColor); } @Override public void onError() {  } }); }  protected CharSequence getLinkifiedText(Tweet displayTweet) { final FormattedTweetText formattedText = dependencyProvider getTweetUi()  getTweetRepository() formatTweetText(displayTweet); if (formattedText == null) return null; final boolean stripPhotoEntity = TweetMediaUtils hasPhoto(displayTweet); return TweetTextLinkifier linkifyUrls(formattedText, getLinkClickListener(), stripPhotoEntity, actionColor, actionHighlightColor); } void setContentDescription(Tweet displayTweet) { if (!TweetUtils isTweetResolvable(displayTweet)) { setContentDescription(getResources() getString(R string tw__loading_tweet)); return; } final FormattedTweetText formattedTweetText = dependencyProvider getTweetUi()  getTweetRepository() formatTweetText(displayTweet); String tweetText = null; if (formattedTweetText != null) tweetText = formattedTweetText text; final long createdAt = TweetDateUtils apiTimeToLong(displayTweet createdAt); String timestamp = null; if (createdAt != TweetDateUtils INVALID_DATE) { timestamp = DateFormat getDateInstance() format(new Date(createdAt)); } setContentDescription(getResources() getString(R string tw__tweet_content_description, Utils stringOrEmpty(displayTweet user name), Utils stringOrEmpty(tweetText), Utils stringOrEmpty(timestamp))); } void setTweetActions(Tweet tweet) { tweetActionBarView setTweet(tweet); }  public void setTweetActionsEnabled(boolean enabled) { tweetActionsEnabled = enabled; if (tweetActionsEnabled) { tweetActionBarView setVisibility(View VISIBLE); bottomSeparator setVisibility(View GONE); } else { tweetActionBarView setVisibility(View GONE); bottomSeparator setVisibility(View VISIBLE); } } protected LinkClickListener getLinkClickListener() { if (linkClickListener == null) { linkClickListener = new LinkClickListener() { @Override public void onUrlClicked(String url) { if (TextUtils isEmpty(url)) return; if (tweetLinkClickListener != null) { tweetLinkClickListener onLinkClick(tweet, url); } else { final Intent intent = new Intent(Intent ACTION_VIEW, Uri parse(url)); if (!IntentUtils safeStartActivity(getContext(), intent)) { Fabric getLogger() e(TweetUi LOGTAG, "Activity cannot be found to open URL"); } } } @Override public void onPhotoClicked(MediaEntity mediaEntity) { // Does nothing } }; } return linkClickListener; } class PermalinkClickListener implements OnClickListener { @Override public void onClick(View v) { if (getPermalinkUri() == null) return; scribePermalinkClick(); launchPermalink(); } }  static class DependencyProvider { TweetScribeClient tweetScribeClient; VideoScribeClient videoScribeClient;  TweetUi getTweetUi() { return TweetUi getInstance(); } TweetScribeClient getTweetScribeClient() { if (tweetScribeClient == null) { tweetScribeClient = new TweetScribeClientImpl(getTweetUi()); } return tweetScribeClient; } VideoScribeClient getVideoScribeClient() { if (videoScribeClient == null) { videoScribeClient = new VideoScribeClientImpl(getTweetUi()); } return videoScribeClient; }  Picasso getImageLoader() { return TweetUi getInstance() getImageLoader(); } }}package com twitter sdk android core models;import java util Collections;import java util Map;public class BindingValues { private final Map<String, Object> bindingValues; public BindingValues() { this(Collections EMPTY_MAP); } public BindingValues(Map<String, Object> bindingValues) { this bindingValues = Collections unmodifiableMap(bindingValues); }  public boolean containsKey(String key) { return bindingValues containsKey(key); }  public <T> T get(String key) { try { return (T) bindingValues get(key); } catch (ClassCastException ex){ return null; } }}package com twitter sdk android core models;import com google gson JsonDeserializationContext;import com google gson JsonDeserializer;import com google gson JsonElement;import com google gson JsonObject;import com google gson JsonParseException;import com google gson JsonSerializationContext;import com google gson JsonSerializer;import java lang reflect Type;import java util HashMap;import java util Map;import java util Set;public class BindingValuesAdapter implements JsonSerializer<BindingValues>, JsonDeserializer<BindingValues> { private static final String STRING_TYPE = "STRING"; private static final String IMAGE_TYPE = "IMAGE"; private static final String USER_TYPE = "USER"; private static final String BOOLEAN_TYPE = "BOOLEAN"; private static final String TYPE_MEMBER = "type"; private static final String TYPE_VALUE_MEMBER = "string_value"; private static final String IMAGE_VALUE_MEMBER = "image_value"; private static final String USER_VALUE_MEMBER = "user_value"; private static final String BOOLEAN_MEMBER = "boolean_value"; @Override public JsonElement serialize(BindingValues src, Type typeOfSrc, JsonSerializationContext context) { return null; } @Override public BindingValues deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context) throws JsonParseException { if (!json isJsonObject()) { return new BindingValues(); } final JsonObject obj = json getAsJsonObject(); final Set<Map Entry<String, JsonElement>> members = obj entrySet(); final Map<String, Object> bindingHash = new HashMap<>(32); for (Map Entry<String, JsonElement> member : members) { final String key = member getKey(); final JsonObject memberObj = member getValue() getAsJsonObject(); final Object value = getValue(memberObj, context); bindingHash put(key, value); } return new BindingValues(bindingHash); } Object getValue(JsonObject obj, JsonDeserializationContext context) { final JsonElement typeObj = obj get(TYPE_MEMBER); if (typeObj == null || !typeObj isJsonPrimitive()) { return null; } switch (typeObj getAsString()) { case STRING_TYPE: return context deserialize(obj get(TYPE_VALUE_MEMBER), String class); case IMAGE_TYPE: return context deserialize(obj get(IMAGE_VALUE_MEMBER), ImageValue class); case USER_TYPE: return context deserialize(obj get(USER_VALUE_MEMBER), UserValue class); case BOOLEAN_TYPE: return context deserialize(obj get(BOOLEAN_MEMBER), Boolean class); default: return null; } }}package com twitter sdk android core;import retrofit2 Call;import retrofit2 Response;public abstract class Callback<T> implements retrofit2 Callback<T> { @Override public final void onResponse(Call<T> call, Response<T> response){ if (response isSuccessful()) { success(new Result<>(response body(), response)); } else { failure(new TwitterApiException(response)); } } @Override public final void onFailure(Call<T> call, Throwable t) { failure(new TwitterException("Request Failure", t)); }  public abstract void success(Result<T> result);  public abstract void failure(TwitterException exception);}package com twitter sdk android tweetcomposer;import android content Context;import android net Uri;import java io Serializable;public class Card implements Serializable { public static final String APP_CARD_TYPE = "promo_image_app"; final String cardType; final String imageUri; final String appName; final String appIPadId; final String appIPhoneId; final String appGooglePlayId; Card(String cardType, String imageUri, String appName, String appIPhoneId, String appIPadId, String appGooglePlayId) { this cardType = cardType; this imageUri = imageUri; this appName = appName; this appIPadId = appIPadId; this appIPhoneId = appIPhoneId; this appGooglePlayId = appGooglePlayId; }  public String getCardType() { return cardType; }  static boolean isAppCard(Card card) { return card != null && card getCardType() != null && card getCardType() equals(APP_CARD_TYPE); }  public static class AppCardBuilder { private String appName; private Uri imageUri; private String appIPhoneId; private String appIPadId; private String appGooglePlayId;  public AppCardBuilder(Context context) { appName = getApplicationName(context); appGooglePlayId = getPackageName(context); }  public AppCardBuilder imageUri(Uri imageUri) { this imageUri = imageUri; return this; }  public AppCardBuilder iPhoneId(String appIPhoneId) { this appIPhoneId = appIPhoneId; return this; }  public AppCardBuilder iPadId(String appIPadId) { this appIPadId = appIPadId; return this; }  public AppCardBuilder googlePlayId(String appGooglePlayId) { this appGooglePlayId = appGooglePlayId; return this; }  public Card build() { if (imageUri == null) { throw new IllegalStateException("App Card requires a non-null imageUri"); } return new Card(APP_CARD_TYPE, imageUri toString(), appName, appIPhoneId, appIPadId, appGooglePlayId); } } private static String getApplicationName(Context context) { return context getApplicationInfo() loadLabel(context getPackageManager()) toString(); } private static String getPackageName(Context context) { return context getPackageName(); }}package com twitter sdk android tweetcomposer internal;import com google gson annotations SerializedName;public class CardCreate { @SerializedName("card_uri") public final String cardUri; @SerializedName("status") public final String status; public CardCreate(String cardUri, String status) { this cardUri = cardUri; this status = status; }}package com twitter sdk android tweetcomposer internal;import com google gson Gson;import com google gson annotations SerializedName;public class CardData { private static Serializer serializer; private CardData(String card, String image, String site, String description, String cardData, String callToAction, String ctaKey, String deviceId, String appIPhoneId, String appIPadId, String appGooglePlayId, String appCountry) { this card = card; this image = image; this site = site; this description = description; this cardData = cardData; this callToAction = callToAction; this ctaKey = ctaKey; this deviceId = deviceId; this appIPhoneId = appIPhoneId; this appIPadId = appIPadId; this appGooglePlayId = appGooglePlayId; this appCountry = appCountry; } @SerializedName("twitter:card") public final String card; @SerializedName("twitter:image") public final String image; @SerializedName("twitter:site") public final String site; @SerializedName("twitter:description") public final String description; @SerializedName("twitter:card_data") public final String cardData; @SerializedName("twitter:text:cta") public final String callToAction; @SerializedName("twitter:cta_key") public final String ctaKey; @SerializedName("twitter:text:did_value") public final String deviceId; @SerializedName("twitter:app:id:iphone") public final String appIPhoneId; @SerializedName("twitter:app:id:ipad") public final String appIPadId; @SerializedName("twitter:app:id:googleplay") public final String appGooglePlayId; @SerializedName("twitter:app:country") public final String appCountry; Serializer getSerializer() { if (serializer == null) { serializer = new Serializer(); } return serializer; } @Override public String toString() { // Required bc the Cards API accepts form-urlencoded requests with nested CardData JSON // Retrofit converts @Fields to strings, without using registered Converters  // https://github com/square/retrofit/blob/master/retrofit/src/main/java/retrofit/http/Field java#L28 return getSerializer() serialize(this); } static class Serializer { private final Gson gson; Serializer() { this gson = new Gson(); } String serialize(CardData data) { return this gson toJson(data); } }  public static class Builder { private String card; private String image; private String site; private String description; private String cardData; private String callToAction; private String ctaKey; private String deviceId; private String appIPhoneId; private String appIPadId; private String appGooglePlayId; private String appCountry; public Builder card(String card) { this card = card; return this; } public Builder image(String image) { this image = image; return this; } public Builder site(String site) { this site = site; return this; } public Builder description(String description) { this description = description; return this; } public Builder cardData(String data) { this cardData = data; return this; } public Builder callToAction(String callToAction) { this callToAction = callToAction; return this; } public Builder ctaKey(String ctaKey) { this ctaKey = ctaKey; return this; } public Builder deviceId(String deviceId) { this deviceId = deviceId; return this; } public Builder appIPhoneId(String appIPhoneId) { this appIPhoneId = appIPhoneId; return this; } public Builder appIPadId(String appIPadId) { this appIPadId = appIPadId; return this; } public Builder appGooglePlayId(String appGooglePlayId) { this appGooglePlayId = appGooglePlayId; return this; } public Builder appCountry(String appCountry) { this appCountry = appCountry; return this; } public CardData build() { return new CardData(card, image, site, description, cardData, callToAction, ctaKey, deviceId, appIPhoneId, appIPadId, appGooglePlayId, appCountry); } }}package com twitter sdk android tweetcomposer;import com twitter sdk android tweetcomposer internal CardData;class CardDataFactory { static final String APP_CARD_TYPE = "promo_image_app"; static final String APP_CARD_CTA_KEY = "open"; private static final String MEDIA_SCHEME = "media://";  static CardData createAppCardData(Card card, Long mediaId, String advertisingId) { return new CardData Builder()  card(APP_CARD_TYPE)  image(getCardMedia(mediaId))  appIPhoneId(card appIPhoneId)  appIPadId(card appIPadId)  appGooglePlayId(card appGooglePlayId)  cardData("{}")  ctaKey(APP_CARD_CTA_KEY)  deviceId(advertisingId)  build(); }  static String getCardMedia(Long mediaId) { return MEDIA_SCHEME + Long toString(mediaId); }}package com twitter sdk android tweetcomposer internal;import retrofit2 Call;import retrofit2 http Field;import retrofit2 http FormUrlEncoded;import retrofit2 http POST;public interface CardService {  @FormUrlEncoded @POST("https://caps twitter com/v2/cards/create json") Call<CardCreate> create(@Field("card_data") CardData data);}package com twitter sdk android tweetcomposer;import android content Context;import android view View;class CardViewFactory {  View createCard(Context context, Card card) { if (card cardType equals(Card APP_CARD_TYPE)) { final AppCardView cardView = new AppCardView(context); cardView setCard(card); return cardView; } return null; }}package com twitter sdk android tweetui internal;import android graphics Color;import android text TextPaint;import android text style ClickableSpan;public abstract class ClickableLinkSpan extends ClickableSpan implements HighlightedClickableSpan { public final int linkColor; private final int selectedColor; private final boolean colored; private final boolean underlined; private boolean selected; public ClickableLinkSpan(int selectedColor) { this(selectedColor, 0, false, false); } public ClickableLinkSpan(int selectedColor, int linkColor, boolean underlined) { this(selectedColor, linkColor, true, underlined); } ClickableLinkSpan(int selectedColor, int linkColor, boolean colored, boolean underlined) { this selectedColor = selectedColor; this linkColor = linkColor; this colored = colored; this underlined = underlined; } @Override public void updateDrawState(TextPaint ds) { if (colored) { ds setColor(linkColor); } else { ds setColor(ds linkColor); } if (selected) { ds bgColor = selectedColor; } else { ds bgColor = Color TRANSPARENT; } if (underlined) { ds setUnderlineText(true); } } @Override public void select(boolean selected) { this selected = selected; } @Override public boolean isSelected() { return selected; }}package com twitter sdk android core services;import com twitter sdk android core internal TwitterCollection;import retrofit2 Call;import retrofit2 http GET;import retrofit2 http Query;public interface CollectionService {  @GET("/1 1/collections/entries json?" + "tweet_mode=extended&include_cards=true&cards_platform=TwitterKit-13") Call<TwitterCollection> collection(@Query("id") String id, @Query("count") Integer count, @Query("max_position") Long maxPosition, @Query("min_position") Long minPosition);}package com twitter sdk android tweetui;import com twitter sdk android core Callback;import com twitter sdk android core TwitterCore;import com twitter sdk android core internal TwitterCollection;import com twitter sdk android core Result;import com twitter sdk android core TwitterException;import com twitter sdk android core models Tweet;import com twitter sdk android core models TweetBuilder;import com twitter sdk android core models User;import java util ArrayList;import java util Collections;import java util HashMap;import java util List;import java util Map;import retrofit2 Call;public class CollectionTimeline extends BaseTimeline implements Timeline<Tweet> { static final String COLLECTION_PREFIX = "custom-"; private static final String SCRIBE_SECTION = "collection"; final String collectionIdentifier; final Integer maxItemsPerRequest; CollectionTimeline(TweetUi tweetUi, Long collectionId, Integer maxItemsPerRequest) { super(tweetUi); // prefix the collection id with the collection prefix if (collectionId == null) { this collectionIdentifier = null; } else { this collectionIdentifier = COLLECTION_PREFIX + Long toString(collectionId); } this maxItemsPerRequest = maxItemsPerRequest; }  @Override public void next(Long minPosition, Callback<TimelineResult<Tweet>> cb) { createCollectionRequest(minPosition, null) enqueue(new CollectionCallback(cb)); }  @Override public void previous(Long maxPosition, Callback<TimelineResult<Tweet>> cb) { createCollectionRequest(null, maxPosition) enqueue(new CollectionCallback(cb)); } @Override String getTimelineType() { return SCRIBE_SECTION; } Call<TwitterCollection> createCollectionRequest(final Long minPosition, final Long maxPosition) { return TwitterCore getInstance() getApiClient() getCollectionService()  collection(collectionIdentifier, maxItemsPerRequest, maxPosition, minPosition); }  class CollectionCallback extends Callback<TwitterCollection> { final Callback<TimelineResult<Tweet>> cb;  CollectionCallback(Callback<TimelineResult<Tweet>> cb) { this cb = cb; } @Override public void success(Result<TwitterCollection> result) { final TimelineCursor timelineCursor = getTimelineCursor(result data); final List<Tweet> tweets = getOrderedTweets(result data); final TimelineResult<Tweet> timelineResult; if (timelineCursor != null) { timelineResult = new TimelineResult<>(timelineCursor, tweets); } else { timelineResult = new TimelineResult<>(null, Collections <Tweet>emptyList()); } if (cb != null) { cb success(new Result(timelineResult, result response)); } } @Override public void failure(TwitterException exception) { if (cb != null) { cb failure(exception); } } } static List<Tweet> getOrderedTweets(TwitterCollection collection) { if (collection == null || collection contents == null || collection contents tweetMap == null || collection contents userMap == null || collection metadata == null || collection metadata timelineItems == null || collection metadata position == null) { return Collections emptyList(); } final List<Tweet> tweets = new ArrayList<>(); final Map<Long, Tweet> tweetMap = new HashMap<>(); for (Tweet trimmedTweet: collection contents tweetMap values()) { // read user id from the trimmed Tweet final Long userId = trimmedTweet user id; // lookup User in the collection response's UserMap final User user = collection contents userMap get(userId); // build the Tweet with the hydrated User final Tweet tweet = new TweetBuilder() copy(trimmedTweet) setUser(user) build(); tweetMap put(tweet id, tweet); } for (TwitterCollection TimelineItem item: collection metadata timelineItems) { final Tweet tweet = tweetMap get(item tweetItem id); tweets add(tweet); } return tweets; } static TimelineCursor getTimelineCursor(TwitterCollection twitterCollection) { if (twitterCollection == null || twitterCollection metadata == null || twitterCollection metadata position == null) { return null; } final Long minPosition = twitterCollection metadata position minPosition; final Long maxPosition = twitterCollection metadata position maxPosition; return new TimelineCursor(minPosition, maxPosition); }  public static class Builder { private final TweetUi tweetUi; private Long collectionId; private Integer maxItemsPerRequest = 30;  public Builder() { this(TweetUi getInstance()); }  public Builder(TweetUi tweetUi) { if (tweetUi == null) { throw new IllegalArgumentException("TweetUi instance must not be null"); } this tweetUi = tweetUi; }  public Builder id(Long collectionId) { this collectionId = collectionId; return this; }  public Builder maxItemsPerRequest(Integer maxItemsPerRequest) { this maxItemsPerRequest = maxItemsPerRequest; return this; }  public CollectionTimeline build() { if (collectionId == null) { throw new IllegalStateException("collection id must not be null"); } return new CollectionTimeline(tweetUi, collectionId, maxItemsPerRequest); } }}package com twitter sdk android tweetui;import android graphics Color;final class ColorUtils { private ColorUtils() {}  static int calculateOpacityTransform(final double opacity, final int overlayColor, final int primaryColor) { final int redPrimary = Color red(primaryColor); final int redOverlay = Color red(overlayColor); final int greenPrimary = Color green(primaryColor); final int greenOverlay = Color green(overlayColor); final int bluePrimary = Color blue(primaryColor); final int blueOverlay = Color blue(overlayColor); final int redCalculated = (int) ((1 - opacity) * redPrimary + opacity * redOverlay); final int greenCalculated = (int) ((1 - opacity) * greenPrimary + opacity * greenOverlay); final int blueCalculated = (int) ((1 - opacity) * bluePrimary + opacity * blueOverlay); return Color rgb(redCalculated, greenCalculated, blueCalculated); }  static boolean isLightColor(final int color) { final int r = Color red(color); final int g = Color green(color); final int b = Color blue(color); final double threshold = 0 21 * r + 0 72 * g + 0 07 * b; return threshold > 128; }}package com twitter sdk android mopub;import android graphics Color;import org junit Test;import org junit runner RunWith;import org robolectric RobolectricGradleTestRunner;import org robolectric annotation Config;import static org junit Assert assertEquals;import static org junit Assert assertFalse;import static org junit Assert assertTrue;@RunWith(RobolectricGradleTestRunner class)@Config(constants = BuildConfig class, sdk = 21)public class ColorUtilsTest { @Test public void testIsLightColor_black() { assertFalse(ColorUtils isLightColor(Color BLACK)); } @Test public void testIsLightColor_white() { assertTrue(ColorUtils isLightColor(Color WHITE)); } @Test public void testDefaultCtaButtonIsDarkColor() { assertFalse(ColorUtils isLightColor(R color tw__ad_cta_default)); } @Test public void testCtaTextColorIsLightForDarkBgColor() { assertEquals(Color WHITE, ColorUtils calculateCtaTextColor(R color tw__ad_cta_default)); assertEquals(Color WHITE, ColorUtils calculateCtaTextColor(Color BLACK)); assertEquals(Color WHITE, ColorUtils calculateCtaTextColor(Color DKGRAY)); } @Test public void testCtaTextColorIsDarkForLightBgColor() { assertTrue(Color WHITE != ColorUtils calculateCtaTextColor(Color WHITE)); assertTrue(Color WHITE != ColorUtils calculateCtaTextColor(Color LTGRAY)); } @Test public void testCTAOnTapColorIsLighterForDarkBgColor() { final int darkColor = Color BLACK; final int originalRed = Color red(darkColor); final int originalGreen = Color green(darkColor); final int originalBlue = Color blue(darkColor); final int lighterColor = ColorUtils calculateCtaOnTapColor(darkColor); final int lighterRed = Color red(lighterColor); final int lighterGreen = Color green(lighterColor); final int lighterBlue = Color blue(lighterColor); assertTrue(lighterRed > originalRed && lighterGreen > originalGreen && lighterBlue > originalBlue); } @Test public void testCTAOnTapColorIsDarkerForLightBgColor() { final int lightColor = Color WHITE; final int originalRed = Color red(lightColor); final int originalGreen = Color green(lightColor); final int originalBlue = Color blue(lightColor); final int darkerColor = ColorUtils calculateCtaOnTapColor(lightColor); final int darkerRed = Color red(darkerColor); final int darkerGreen = Color green(darkerColor); final int darkerBlue = Color blue(darkerColor); assertTrue(originalRed > darkerRed && originalGreen > darkerGreen && originalBlue > darkerBlue); } @Test public void testContrastColorForDarkColor() { final int darkColor = Color BLACK; final int contrastingLightColor = ColorUtils calculateContrastingColor(darkColor); assertTrue(ColorUtils isLightColor(contrastingLightColor)); } @Test public void testContrastColorForLightColor() { final int lightColor = Color WHITE; final int contrastingDarkColor = ColorUtils calculateContrastingColor(lightColor); assertFalse(ColorUtils isLightColor(contrastingDarkColor)); }}package com twitter sdk android tweetui;import android content Context;import android util AttributeSet;import com twitter sdk android core models MediaEntity;import com twitter sdk android core models Tweet;public class CompactTweetView extends BaseTweetView { private static final String VIEW_TYPE_NAME = "compact"; private static final double SQUARE_ASPECT_RATIO = 1 0; private static final double MAX_LANDSCAPE_ASPECT_RATIO = 3 0; private static final double MIN_LANDSCAPE_ASPECT_RATIO = 4 0 / 3 0; public CompactTweetView(Context context, Tweet tweet) { super(context, tweet); } public CompactTweetView(Context context, Tweet tweet, int styleResId) { super(context, tweet, styleResId); } CompactTweetView(Context context, Tweet tweet, int styleResId, DependencyProvider dependencyProvider) { super(context, tweet, styleResId, dependencyProvider); } public CompactTweetView(Context context, AttributeSet attrs) { super(context, attrs); } public CompactTweetView(Context context, AttributeSet attrs, int defStyle) { super(context, attrs, defStyle); } @Override protected int getLayout() { return R layout tw__tweet_compact; } @Override void render() { super render(); // Redraw screen name on recycle screenNameView requestLayout(); }  @Override protected double getAspectRatio(MediaEntity photoEntity) { final double ratio = super getAspectRatio(photoEntity); if (ratio <= SQUARE_ASPECT_RATIO) { // portrait (tall) photos should be cropped to be square aspect ratio return SQUARE_ASPECT_RATIO; } else if (ratio > MAX_LANDSCAPE_ASPECT_RATIO) { // the widest landscape photos allowed are 3:1 return MAX_LANDSCAPE_ASPECT_RATIO; } else if (ratio < MIN_LANDSCAPE_ASPECT_RATIO) { // the tallest landscape photos allowed are 4:3 return MIN_LANDSCAPE_ASPECT_RATIO; } else { // landscape photos between 3:1 to 4:3 present the original width to height ratio return ratio; } } @Override String getViewTypeName() { return VIEW_TYPE_NAME; }}package com twitter sdk android tweetcomposer;import android app Activity;import android content Context;import android content Intent;import android os Bundle;import com twitter Regex;import com twitter sdk android core TwitterAuthToken;import com twitter sdk android core TwitterSession;public class ComposerActivity extends Activity { static final String EXTRA_USER_TOKEN = "EXTRA_USER_TOKEN"; static final String EXTRA_CARD = "EXTRA_CARD"; static final String EXTRA_THEME = "EXTRA_THEME"; static final String EXTRA_HASHTAGS = "EXTRA_HASHTAGS"; private static final int PLACEHOLDER_ID = -1; private static final String PLACEHOLDER_SCREEN_NAME = ""; @Override protected void onCreate(Bundle savedInstanceState) { super onCreate(savedInstanceState); final Intent intent = getIntent(); final TwitterAuthToken token = intent getParcelableExtra(EXTRA_USER_TOKEN); final TwitterSession session = new TwitterSession(token, PLACEHOLDER_ID, PLACEHOLDER_SCREEN_NAME); final Card card = (Card) intent getSerializableExtra(EXTRA_CARD); final String hashtags = intent getStringExtra(EXTRA_HASHTAGS); final int themeResId = intent getIntExtra(EXTRA_THEME, R style ComposerLight); setTheme(themeResId); setContentView(R layout tw__activity_composer); final ComposerView composerView = (ComposerView) findViewById(R id tw__composer_view); new ComposerController(composerView, session, card, hashtags, new FinisherImpl()); } interface Finisher { void finish(); } // FinisherImpl allows sub-components to finish the host Activity  class FinisherImpl implements Finisher { @Override public void finish() { ComposerActivity this finish(); } } public static class Builder { private final Context context; private TwitterAuthToken token; private int themeResId = R style ComposerLight; private Card card; private String hashtags; public Builder(Context context) { if (context == null) { throw new IllegalArgumentException("Context must not be null"); } this context = context; } public Builder session(TwitterSession session) { if (session == null) { throw new IllegalArgumentException("TwitterSession must not be null"); } final TwitterAuthToken token = session getAuthToken(); if (token == null) { throw new IllegalArgumentException("TwitterSession token must not be null"); } // session passed via the parcelable auth token this token = token; return this; } public Builder card(Card card) { this card = card; return this; } public Builder hashtags(String    hashtags) { if (hashtags == null) return this; final StringBuilder sb = new StringBuilder(); for (String hashtag : hashtags) { final boolean isValid = Regex VALID_HASHTAG matcher(hashtag) find(); if (isValid) { sb append(" ") append(hashtag); } } this hashtags = sb length() == 0 ? null : sb toString(); return this; } public Builder darkTheme() { themeResId = R style ComposerDark; return this; } public Intent createIntent() { if (token == null) { throw new IllegalStateException("Must set a TwitterSession"); } final Intent intent = new Intent(context, ComposerActivity class); intent putExtra(EXTRA_USER_TOKEN, token); intent putExtra(EXTRA_CARD, card); intent putExtra(EXTRA_THEME, themeResId); intent putExtra(EXTRA_HASHTAGS, hashtags); return intent; } }}package com twitter sdk android tweetcomposer;import com twitter sdk android core TwitterApiClient;import com twitter sdk android core TwitterSession;import com twitter sdk android tweetcomposer internal CardService;class ComposerApiClient extends TwitterApiClient { ComposerApiClient(TwitterSession session) { super(session); }  StatusesService getComposerStatusesService() { return getService(StatusesService class); }  CardService getCardService() { return getService(CardService class); }}package com twitter sdk android tweetcomposer;import android content Intent;import android text TextUtils;import android view View;import com twitter Validator;import com twitter sdk android core Callback;import com twitter sdk android core Result;import com twitter sdk android core TwitterApiClient;import com twitter sdk android core TwitterCore;import com twitter sdk android core TwitterException;import com twitter sdk android core TwitterSession;import com twitter sdk android core internal TwitterApiConstants;import com twitter sdk android core models User;class ComposerController { final ComposerView composerView; final TwitterSession session; final Card card; final ComposerActivity Finisher finisher; final DependencyProvider dependencyProvider; ComposerController(final ComposerView composerView, TwitterSession session, Card card, String hashtags, ComposerActivity Finisher finisher) { this(composerView, session, card, hashtags, finisher, new DependencyProvider()); } // testing purposes ComposerController(final ComposerView composerView, TwitterSession session, Card card, String hashtags, ComposerActivity Finisher finisher, DependencyProvider dependencyProvider) { this composerView = composerView; this session = session; this card = card; this finisher = finisher; this dependencyProvider = dependencyProvider; composerView setCallbacks(new ComposerCallbacksImpl()); composerView setTweetText(hashtags); setProfilePhoto(); setCardView(card); dependencyProvider getScribeClient() impression(card); } void setProfilePhoto() { dependencyProvider getApiClient(session) getAccountService() verifyCredentials(false, true)  enqueue(new Callback<User>() { @Override public void success(Result<User> result) { composerView setProfilePhotoView(result data); } @Override public void failure(TwitterException exception) { // show placeholder background color composerView setProfilePhotoView(null); } }); } void setCardView(Card card) { if (card != null) { final CardViewFactory cardViewFactory = dependencyProvider getCardViewFactory(); final View view = cardViewFactory createCard(composerView getContext(), card); composerView setCardView(view); } } public interface ComposerCallbacks { void onTextChanged(String text); void onTweetPost(String text); void onCloseClick(); } class ComposerCallbacksImpl implements ComposerCallbacks { @Override public void onTextChanged(String text) { final int charCount = tweetTextLength(text); composerView setCharCount(remainingCharCount(charCount)); // character count overflow red color if (isTweetTextOverflow(charCount)) { composerView setCharCountTextStyle(R style tw__ComposerCharCountOverflow); } else { composerView setCharCountTextStyle(R style tw__ComposerCharCount); } // Tweet post button enable/disable composerView postTweetEnabled(isPostEnabled(charCount)); } @Override public void onTweetPost(String text) { dependencyProvider getScribeClient() click(card, ScribeConstants SCRIBE_TWEET_ELEMENT); final Intent intent = new Intent(composerView getContext(), TweetUploadService class); intent putExtra(TweetUploadService EXTRA_USER_TOKEN, session getAuthToken()); intent putExtra(TweetUploadService EXTRA_TWEET_TEXT, text); intent putExtra(TweetUploadService EXTRA_TWEET_CARD, card); composerView getContext() startService(intent); finisher finish(); } @Override public void onCloseClick() { dependencyProvider getScribeClient() click(card, ScribeConstants SCRIBE_CANCEL_ELEMENT); finisher finish(); } } int tweetTextLength(String text) { if (TextUtils isEmpty(text)) { return 0; } return dependencyProvider getTweetValidator() getTweetLength(text); } static int remainingCharCount(int charCount) { return TwitterApiConstants MAX_TWEET_CHARS - charCount; }  static boolean isPostEnabled(int charCount) { return charCount > 0 && charCount <= TwitterApiConstants MAX_TWEET_CHARS; }  static boolean isTweetTextOverflow(int charCount) { return charCount > TwitterApiConstants MAX_TWEET_CHARS; }  static class DependencyProvider { final CardViewFactory cardViewFactory = new CardViewFactory(); final Validator tweetValidator = new Validator(); TwitterApiClient getApiClient(TwitterSession session) { return TwitterCore getInstance() getApiClient(session); } CardViewFactory getCardViewFactory() { return cardViewFactory; } Validator getTweetValidator() { return tweetValidator; } ComposerScribeClient getScribeClient() { return new ComposerScribeClientImpl(TweetComposer getInstance() getScribeClient()); } }}package com twitter sdk android tweetcomposer;interface ComposerScribeClient {  void impression(Card card);  void click(Card card, String element);}package com twitter sdk android tweetcomposer;import com twitter sdk android core internal scribe EventNamespace;import com twitter sdk android core internal scribe ScribeItem;import java util ArrayList;import java util List;class ComposerScribeClientImpl implements ComposerScribeClient { private final ScribeClient scribeClient; ComposerScribeClientImpl(ScribeClient scribeClient) { if (scribeClient == null) { throw new NullPointerException("scribeClient must not be null"); } this scribeClient = scribeClient; } @Override public void impression(Card card) { final EventNamespace ns = ScribeConstants ComposerEventBuilder  setComponent(ScribeConstants SCRIBE_COMPONENT)  setElement(ScribeConstants SCRIBE_IMPRESSION_ELEMENT)  setAction(ScribeConstants SCRIBE_IMPRESSION_ACTION)  builder(); final List<ScribeItem> items = new ArrayList<>(); items add(ScribeConstants newCardScribeItem(card)); scribeClient scribe(ns, items); } @Override public void click(Card card, String element) { final EventNamespace ns = ScribeConstants ComposerEventBuilder  setComponent(ScribeConstants SCRIBE_COMPONENT)  setElement(element)  setAction(ScribeConstants SCRIBE_CLICK_ACTION)  builder(); final List<ScribeItem> items = new ArrayList<>(); items add(ScribeConstants newCardScribeItem(card)); scribeClient scribe(ns, items); }}package com twitter sdk android tweetcomposer;import android content Context;import android graphics drawable ColorDrawable;import android text Editable;import android text TextWatcher;import android util AttributeSet;import android view KeyEvent;import android view View;import android view ViewGroup;import android widget Button;import android widget EditText;import android widget ImageView;import android widget LinearLayout;import android widget TextView;import com squareup picasso Picasso;import com twitter sdk android core internal UserUtils;import com twitter sdk android core internal util ObservableScrollView;import com twitter sdk android core models User;import java util Locale;public class ComposerView extends LinearLayout { ImageView avatarView; ImageView closeView; EditText tweetEditView; TextView charCountView; Button tweetButton; ObservableScrollView scrollView; View divider; // styled drawables for images ColorDrawable mediaBg; // callbacks ViewGroup cardView; ComposerController ComposerCallbacks callbacks; private Picasso imageLoader; public ComposerView(Context context) { this(context, null); } public ComposerView(Context context, AttributeSet attrs) { super(context, attrs); init(context); } public ComposerView(Context context, AttributeSet attrs, int defStyle) { super(context, attrs, defStyle); init(context); } private void init(Context context) { imageLoader = Picasso with(getContext()); // TODO: make color vary depending on the style mediaBg = new ColorDrawable(context getResources()  getColor(R color tw__composer_light_gray)); inflate(context, R layout tw__composer_view, this); } @Override protected void onFinishInflate() { super onFinishInflate(); findSubviews(); closeView setOnClickListener(new OnClickListener() { @Override public void onClick(View view) { callbacks onCloseClick(); } }); tweetButton setOnClickListener(new OnClickListener() { @Override public void onClick(View view) { callbacks onTweetPost(getTweetText()); } }); tweetEditView setOnEditorActionListener(new TextView OnEditorActionListener() { @Override public boolean onEditorAction(TextView textView, int i, KeyEvent keyEvent) { callbacks onTweetPost(getTweetText()); return true; } }); tweetEditView addTextChangedListener(new TextWatcher() { @Override public void beforeTextChanged(CharSequence charSequence, int i, int i1, int i2) { } @Override public void onTextChanged(CharSequence charSequence, int i, int i1, int i2) { } @Override public void afterTextChanged(Editable editable) { callbacks onTextChanged(getTweetText()); } }); scrollView setScrollViewListener(new ObservableScrollView ScrollViewListener() { @Override public void onScrollChanged(int scrollY) { if (scrollY > 0) { divider setVisibility(View VISIBLE); } else { divider setVisibility(View INVISIBLE); } } }); } void findSubviews() { avatarView = (ImageView) findViewById(R id tw__author_avatar); closeView = (ImageView) findViewById(R id tw__composer_close); tweetEditView = (EditText) findViewById(R id tw__edit_tweet); charCountView = (TextView) findViewById(R id tw__char_count); tweetButton = (Button) findViewById(R id tw__post_tweet); scrollView = (ObservableScrollView) findViewById(R id tw__composer_scroll_view); divider = findViewById(R id tw__composer_profile_divider); cardView = (ViewGroup) findViewById(R id tw__card_view); } void setCallbacks(ComposerController ComposerCallbacks callbacks) { this callbacks = callbacks; }  void setProfilePhotoView(User user) { final String url = UserUtils getProfileImageUrlHttps(user, UserUtils AvatarSize REASONABLY_SMALL); if (imageLoader != null) { // Passing null url will not trigger any request, but will set the placeholder bg imageLoader load(url) placeholder(mediaBg) into(avatarView); } } String getTweetText() { return tweetEditView getText() toString(); } void setTweetText(String text) { tweetEditView setText(text); } void setCharCount(int remainingCount) { charCountView setText(String format(Locale getDefault(), "%d", remainingCount)); } void setCharCountTextStyle(int textStyleResId) { charCountView setTextAppearance(getContext(), textStyleResId); } void postTweetEnabled(boolean enabled) { tweetButton setEnabled(enabled); } void setCardView(View card) { cardView addView(card); cardView setVisibility(View VISIBLE); }}package com twitter sdk android core models;import com google gson annotations SerializedName;import java util List;public class Configuration {  @SerializedName("dm_text_character_limit") public final int dmTextCharacterLimit;  @SerializedName("non_username_paths") public final List<String> nonUsernamePaths;  @SerializedName("photo_size_limit") public final long photoSizeLimit;  @SerializedName("photo_sizes") public final MediaEntity Sizes photoSizes;  @SerializedName("short_url_length_https") public final int shortUrlLengthHttps; public Configuration(int dmTextCharacterLimit, List<String> nonUsernamePaths, long photoSizeLimit, MediaEntity Sizes photoSizes, int shortUrlLengthHttps) { this dmTextCharacterLimit = dmTextCharacterLimit; this nonUsernamePaths = nonUsernamePaths; this photoSizeLimit = photoSizeLimit; this photoSizes = photoSizes; this shortUrlLengthHttps = shortUrlLengthHttps; }}package com twitter sdk android core services;import com twitter sdk android core models Configuration;import retrofit2 Call;import retrofit2 http GET;public interface ConfigurationService {  @GET("/1 1/help/configuration json") Call<Configuration> configuration();}package com twitter sdk android core models;import com google gson annotations SerializedName;import java util ArrayList;import java util List;public class Coordinates { public static final int INDEX_LONGITUDE = 0; public static final int INDEX_LATITUDE = 1;  @SerializedName("coordinates") public final List<Double> coordinates;  @SerializedName("type") public final String type; public Coordinates(Double longitude, Double latitude, String type) { final List<Double> coords = new ArrayList<>(2); coords add(INDEX_LONGITUDE, longitude); coords add(INDEX_LATITUDE, latitude); this coordinates = coords; this type = type; } public Double getLongitude() { return coordinates get(INDEX_LONGITUDE); } public Double getLatitude() { return coordinates get(INDEX_LATITUDE); }}package com twitter sdk android core internal scribe;import android os Build;import android text TextUtils;import com google gson FieldNamingPolicy;import com google gson Gson;import com google gson GsonBuilder;import com twitter sdk android core BuildConfig;import com twitter sdk android core GuestSession;import com twitter sdk android core GuestSessionProvider;import com twitter sdk android core Session;import com twitter sdk android core SessionManager;import com twitter sdk android core TwitterAuthToken;import com twitter sdk android core TwitterCore;import java util Collections;import java util List;import java util concurrent ScheduledExecutorService;import io fabric sdk android Kit;import io fabric sdk android services common ExecutorUtils;import io fabric sdk android services common IdManager;import io fabric sdk android services settings Settings;import io fabric sdk android services settings SettingsData;public class DefaultScribeClient extends ScribeClient {  private static final String SCRIBE_URL = "https://syndication twitter com"; private static final String SCRIBE_PATH_VERSION = "i"; private static final String SCRIBE_PATH_TYPE = "sdk"; private static final String DEBUG_BUILD = "debug"; private static volatile ScheduledExecutorService executor; private final Kit kit; private final SessionManager<? extends Session<TwitterAuthToken>> sessionManager; private final String advertisingId; public DefaultScribeClient(Kit kit, String kitName, SessionManager<? extends Session<TwitterAuthToken>> sessionManager, GuestSessionProvider guestSessionProvider, IdManager idManager) { this(kit, kitName, getGson(), sessionManager, guestSessionProvider, idManager); } DefaultScribeClient(Kit kit, String kitName, Gson gson, SessionManager<? extends Session<TwitterAuthToken>> sessionManager, GuestSessionProvider guestSessionProvider, IdManager idManager) { super(kit, getExecutor(), getScribeConfig(Settings getInstance() awaitSettingsData(), getUserAgent(kitName, kit)), new ScribeEvent Transform(gson), TwitterCore getInstance() getAuthConfig(), sessionManager, guestSessionProvider, TwitterCore getInstance() getSSLSocketFactory(), idManager); this sessionManager = sessionManager; this kit = kit; this advertisingId = idManager getAdvertisingId(); } public void scribe(EventNamespace    namespaces) { for (EventNamespace ns : namespaces) { scribe(ns, Collections <ScribeItem>emptyList()); } } public void scribe(EventNamespace namespace, List<ScribeItem> items) { final String language = getLanguageFromKit(); final long timestamp = System currentTimeMillis();  scribe(ScribeEventFactory newScribeEvent(namespace, "", timestamp, language, advertisingId, items)); } public void scribe(ScribeEvent event) { super scribe(event, getScribeSessionId(getActiveSession())); } public void scribe(EventNamespace namespace, String eventInfo) { final String language = getLanguageFromKit(); final long timestamp = System currentTimeMillis();  scribe(ScribeEventFactory newScribeEvent(namespace, eventInfo, timestamp, language, advertisingId, Collections <ScribeItem>emptyList())); } // visible for tests Session getActiveSession() { return sessionManager getActiveSession(); } // visible for tests long getScribeSessionId(Session activeSession) { final long scribeSessionId; if (activeSession != null) { scribeSessionId = activeSession getId(); } else { // It's possible that we're attempting to load a tweet before we have a valid // session  Store the scribe event locally with the logged out user id so that we can // send it up at a later time with the logged out session  scribeSessionId = GuestSession LOGGED_OUT_USER_ID; } return scribeSessionId; } private String getLanguageFromKit(){ final String language; if (kit getContext() != null) { language = kit getContext() getResources() getConfiguration() locale getLanguage(); } else { language = ""; } return language; } private static Gson getGson() { return new GsonBuilder()  setFieldNamingPolicy(FieldNamingPolicy LOWER_CASE_WITH_UNDERSCORES)  create(); } private static ScheduledExecutorService getExecutor() { if (executor == null) { synchronized (DefaultScribeClient class) { if (executor == null) { executor = ExecutorUtils buildSingleThreadScheduledExecutorService("scribe"); } } } return executor; } static ScribeConfig getScribeConfig(SettingsData settingsData, String userAgent) { // Get scribe configuration using analytics settings, which is used by crashlytics for // configuring Answers  This is temporary until we have can get our scribe settings from the // backend  If analytics settings are not available, fallback to defaults  final int maxFilesToKeep; final int sendIntervalSeconds; if (settingsData != null && settingsData analyticsSettingsData != null) { maxFilesToKeep = settingsData analyticsSettingsData maxPendingSendFileCount; sendIntervalSeconds = settingsData analyticsSettingsData flushIntervalSeconds; } else { maxFilesToKeep = ScribeConfig DEFAULT_MAX_FILES_TO_KEEP; sendIntervalSeconds = ScribeConfig DEFAULT_SEND_INTERVAL_SECONDS; } final String scribeUrl = getScribeUrl(SCRIBE_URL, BuildConfig SCRIBE_ENDPOINT_OVERRIDE); return new ScribeConfig(isEnabled(), scribeUrl, SCRIBE_PATH_VERSION, SCRIBE_PATH_TYPE, BuildConfig SCRIBE_SEQUENCE, userAgent, maxFilesToKeep, sendIntervalSeconds); }  private static boolean isEnabled() { return !BuildConfig BUILD_TYPE equals(DEBUG_BUILD); } static String getUserAgent(String kitName, Kit kit) { return new StringBuilder()  append("Fabric/")  append(kit getFabric() getVersion())  append(" (Android ")  append(Build VERSION SDK_INT)  append(") ")  append(kitName)  append("/")  append(kit getVersion())  toString(); } // visible for tests static String getScribeUrl(String defaultUrl, String overrideUrl) { if (!TextUtils isEmpty(overrideUrl)) { return overrideUrl; } else { return defaultUrl; } }}package com twitter sdk android core internal scribe;import android os Build;import io fabric sdk android Fabric;import io fabric sdk android FabricAndroidTestCase;import io fabric sdk android FabricTestUtils;import io fabric sdk android Kit;import io fabric sdk android services common IdManager;import io fabric sdk android services settings AnalyticsSettingsData;import io fabric sdk android services settings Settings;import io fabric sdk android services settings SettingsData;import io fabric sdk android services settings TestSettingsController;import com twitter sdk android core BuildConfig;import com twitter sdk android core GuestSessionProvider;import com twitter sdk android core Session;import com twitter sdk android core SessionManager;import com twitter sdk android core TwitterAuthConfig;import com twitter sdk android core TwitterCore;import com twitter sdk android core TwitterSession;import java util Locale;import static org mockito Mockito mock;import static org mockito Mockito when;public class DefaultScribeClientTest extends FabricAndroidTestCase { private static final int TEST_SEND_INTERVAL_SECONDS = 6000000 * 60; // 6 million minutes private static final int TEST_MAX_FILES_TO_KEEP = 100000; private static final String TEST_USER_AGENT = "user-agent"; private static final String TEST_DEFAULT_SCRIBE_URL = "https://syndication twitter com"; private static final String TEST_OVERRIDE_SCRIBE_URL = "http://api twitter com"; private static final String TEST_SCRIBE_USER_AGENT_FORMAT = "Fabric/%s (Android %s) ExampleKit/%s"; private static final String TEST_SCRIBE_KIT_NAME = "ExampleKit"; private static final String TEST_KIT_VERSION = "1000"; private static final String ANY_KIT_IDENTIFIER = ":)"; private static final String REQUIRED_SCRIBE_URL_COMPONENT = "https://syndication twitter com"; private static final long REQUIRED_LOGGED_OUT_USER_ID = 0L; private static final long TEST_ACTIVE_SESSION_ID = 1L; private static final String DEBUG_BUILD_TYPE = "debug"; private ExampleKit testKit; private DefaultScribeClient scribeClient; private SessionManager<TwitterSession> mockTwitterSessionManager; private GuestSessionProvider mockGuestSessionProvider; @Override public void setUp() throws Exception { super setUp(); FabricTestUtils resetFabric(); Settings getInstance() setSettingsController(new TestSettingsController()); Fabric with(getContext(), new TwitterCore(new TwitterAuthConfig("", "")), new ExampleKit()); testKit = Fabric getKit(ExampleKit class); mockTwitterSessionManager = mock(SessionManager class); mockGuestSessionProvider = mock(GuestSessionProvider class); scribeClient = new DefaultScribeClient(testKit, TEST_SCRIBE_KIT_NAME, mockTwitterSessionManager, mockGuestSessionProvider, mock(IdManager class)); } @Override protected void tearDown() throws Exception { super tearDown(); FabricTestUtils resetFabric(); } private class ExampleKit extends Kit { @Override public String getIdentifier() { return ANY_KIT_IDENTIFIER; } @Override public String getVersion() { return TEST_KIT_VERSION; } @Override protected Object doInBackground() { return null; } } public void testGetScribeConfig_settingsDataNull() { final ScribeConfig scribeConfig = DefaultScribeClient getScribeConfig(null, TEST_USER_AGENT); assertScribeConfig(TEST_USER_AGENT, ScribeConfig DEFAULT_MAX_FILES_TO_KEEP, ScribeConfig DEFAULT_SEND_INTERVAL_SECONDS, scribeConfig); } public void testGetScribeConfig_settingsDataAnalyticsSettingsDataNull() { final SettingsData settingsData = new SettingsData(0L, null, null, null, null, null, null, 0, 0); final ScribeConfig scribeConfig = DefaultScribeClient getScribeConfig(settingsData, TEST_USER_AGENT); assertScribeConfig(TEST_USER_AGENT, ScribeConfig DEFAULT_MAX_FILES_TO_KEEP, ScribeConfig DEFAULT_SEND_INTERVAL_SECONDS, scribeConfig); } public void testGetScribeConfig_settingsDataValid() { final AnalyticsSettingsData analyticsSettingsData = new AnalyticsSettingsData(null, TEST_SEND_INTERVAL_SECONDS, 0, 0, TEST_MAX_FILES_TO_KEEP, true); final SettingsData settingsData = new SettingsData(0L, null, null, null, null, analyticsSettingsData, null, 0, 0); final ScribeConfig scribeConfig = DefaultScribeClient getScribeConfig(settingsData, TEST_USER_AGENT); assertScribeConfig(TEST_USER_AGENT, TEST_MAX_FILES_TO_KEEP, TEST_SEND_INTERVAL_SECONDS, scribeConfig); } public void testGetScribeUrl_nullOverride() { final String scribeUrl = DefaultScribeClient getScribeUrl(TEST_DEFAULT_SCRIBE_URL, null); assertEquals(TEST_DEFAULT_SCRIBE_URL, scribeUrl); } public void testGetScribeUrl_emptyOverride() { final String scribeUrl = DefaultScribeClient getScribeUrl(TEST_DEFAULT_SCRIBE_URL, ""); assertEquals(TEST_DEFAULT_SCRIBE_URL, scribeUrl); } public void testGetScribeUrl_override() { final String scribeUrl = DefaultScribeClient getScribeUrl(TEST_DEFAULT_SCRIBE_URL, TEST_OVERRIDE_SCRIBE_URL); assertEquals(TEST_OVERRIDE_SCRIBE_URL, scribeUrl); } private void assertScribeConfig(String expectedUserAgent, int expectedMaxFilesToKeep, int expectedSendIntervalSeconds, ScribeConfig scribeConfig) { assertEquals(!BuildConfig BUILD_TYPE equals(DEBUG_BUILD_TYPE), scribeConfig isEnabled); assertEquals(REQUIRED_SCRIBE_URL_COMPONENT, scribeConfig baseUrl); assertEquals(BuildConfig SCRIBE_SEQUENCE, scribeConfig sequence); assertEquals(expectedUserAgent, scribeConfig userAgent); assertEquals(expectedMaxFilesToKeep, scribeConfig maxFilesToKeep); assertEquals(expectedSendIntervalSeconds, scribeConfig sendIntervalSeconds); } public void testGetScribeUserAgent() { Fabric with(getContext(), new ExampleKit()); final Kit kit = Fabric getKit(ExampleKit class); final String userAgent = String format(Locale ENGLISH, TEST_SCRIBE_USER_AGENT_FORMAT, kit getFabric() getVersion(), Build VERSION SDK_INT, kit getVersion()); assertEquals(userAgent, DefaultScribeClient getUserAgent(TEST_SCRIBE_KIT_NAME, kit)); } public void testGetActiveSession_activeSessionDoesNotExist() { assertNull(scribeClient getActiveSession()); } public void testGetActiveSession_activeSessionFirstManager() { final TwitterSession mockSession = mock(TwitterSession class); when(mockTwitterSessionManager getActiveSession()) thenReturn(mockSession); assertSame(mockSession, scribeClient getActiveSession()); } public void testGetScribeSessionId_nullSession() { assertEquals(REQUIRED_LOGGED_OUT_USER_ID, scribeClient getScribeSessionId(null)); } public void testGetScribeSessionId_activeSession() { final DefaultScribeClient scribeClient = new DefaultScribeClient(testKit, TEST_SCRIBE_KIT_NAME, mockTwitterSessionManager, mockGuestSessionProvider, mock(IdManager class)); final Session mockSession = mock(Session class); when(mockSession getId()) thenReturn(TEST_ACTIVE_SESSION_ID); assertEquals(TEST_ACTIVE_SESSION_ID, scribeClient getScribeSessionId(mockSession)); }}package com twitter sdk android core internal scribe;import android content Context;import io fabric sdk android services events EnabledEventsStrategy;import io fabric sdk android services events FilesSender;import java util concurrent ScheduledExecutorService;class EnabledScribeStrategy extends EnabledEventsStrategy<ScribeEvent> { private final FilesSender filesSender; public EnabledScribeStrategy(Context context, ScheduledExecutorService executorService, ScribeFilesManager filesManager, ScribeConfig config, ScribeFilesSender filesSender) { super(context, executorService, filesManager); this filesSender = filesSender; configureRollover(config sendIntervalSeconds); } @Override public FilesSender getFilesSender() { return filesSender; }}package com twitter sdk android core models;import com google gson annotations SerializedName;import java io Serializable;import java util ArrayList;import java util Collections;import java util List;class Entity implements Serializable { private static final int START_INDEX = 0; private static final int END_INDEX = 1;  @SerializedName("indices") public final List<Integer> indices; public Entity(int start, int end) { final List<Integer> temp = new ArrayList<>(2); temp add(START_INDEX, start); temp add(END_INDEX, end); indices = Collections unmodifiableList(temp); } public int getStart() { return indices get(START_INDEX); } public int getEnd() { return indices get(END_INDEX); }}package com twitter sdk android core internal scribe;import com google gson annotations SerializedName;public class EventNamespace { @SerializedName("client") public final String client; @SerializedName("page") public final String page; @SerializedName("section") public final String section; @SerializedName("component") public final String component; @SerializedName("element") public final String element; @SerializedName("action") public final String action; public EventNamespace(String client, String page, String section, String component, String element, String action) { this client = client; this page = page; this section = section; this component = component; this element = element; this action = action; } @Override public String toString() { return new StringBuilder()  append("client=") append(client)  append(", page=") append(page)  append(", section=") append(section)  append(", component=") append(component)  append(", element=") append(element)  append(", action=") append(action)  toString(); } @Override public boolean equals(Object o) { if (this == o) return true; if (o == null || getClass() != o getClass()) return false; final EventNamespace that = (EventNamespace) o; if (action != null ? !action equals(that action) : that action != null) return false; if (client != null ? !client equals(that client) : that client != null) return false; if (component != null ? !component equals(that component) : that component != null) { return false; } if (element != null ? !element equals(that element) : that element != null) { return false; } if (page != null ? !page equals(that page) : that page != null) return false; if (section != null ? !section equals(that section) : that section != null) { return false; } return true; } @Override public int hashCode() { int result = client != null ? client hashCode() : 0; result = 31 * result + (page != null ? page hashCode() : 0); result = 31 * result + (section != null ? section hashCode() : 0); result = 31 * result + (component != null ? component hashCode() : 0); result = 31 * result + (element != null ? element hashCode() : 0); result = 31 * result + (action != null ? action hashCode() : 0); return result; } public static class Builder { private String client; private String page; private String section; private String component; private String element; private String action; public Builder setClient(String client) { this client = client; return this; } public Builder setPage(String page) { this page = page; return this; } public Builder setSection(String section) { this section = section; return this; } public Builder setComponent(String component) { this component = component; return this; } public Builder setElement(String element) { this element = element; return this; } public Builder setAction(String action) { this action = action; return this; } public EventNamespace builder() { return new EventNamespace(client, page, section, component, element, action); } }}package com twitter sdk android core services;import com twitter sdk android core models Tweet;import java util List;import retrofit2 Call;import retrofit2 http Field;import retrofit2 http FormUrlEncoded;import retrofit2 http GET;import retrofit2 http POST;import retrofit2 http Query;public interface FavoriteService {  @GET("/1 1/favorites/list json?" + "tweet_mode=extended&include_cards=true&cards_platform=TwitterKit-13") Call<List<Tweet>> list(@Query("user_id") Long userId, @Query("screen_name") String screenName, @Query("count") Integer count, @Query("since_id") String sinceId, @Query("max_id") String maxId, @Query("include_entities") Boolean includeEntities);  @FormUrlEncoded @POST("/1 1/favorites/destroy json?" + "tweet_mode=extended&include_cards=true&cards_platform=TwitterKit-13") Call<Tweet> destroy(@Field("id") Long id, @Field("include_entities") Boolean includeEntities);  @FormUrlEncoded @POST("/1 1/favorites/create json?" + "tweet_mode=extended&include_cards=true&cards_platform=TwitterKit-13") Call<Tweet> create(@Field("id") Long id, @Field("include_entities") Boolean includeEntities);}package com twitter sdk android tweetcomposer;import android annotation TargetApi;import android content ContentResolver;import android content Context;import android database Cursor;import android net Uri;import android os Build;import android provider DocumentsContract;import android provider MediaStore;import android text TextUtils;import android webkit MimeTypeMap;import java io File;class FileUtils { private static final String MEDIA_SCHEME = "com android providers media documents"; @TargetApi(Build VERSION_CODES KITKAT) static String getPath(final Context context, final Uri uri) { final boolean isKitKat = Build VERSION SDK_INT >= Build VERSION_CODES KITKAT; if (isKitKat && isMediaDocumentAuthority(uri)) { final String documentId = DocumentsContract getDocumentId(uri); // e g  "image:1234" final String[] parts = documentId split(":"); final String type = parts[0]; Uri contentUri; if ("image" equals(type)) { contentUri = MediaStore Images Media EXTERNAL_CONTENT_URI; } else { // reject video or audio documents return null; } // query content resolver for MediaStore id column final String selection = "_id=?"; final String[] args = new String[] { parts[1] }; return resolveFilePath(context, contentUri, selection, args); } else if (isContentScheme(uri)) { return resolveFilePath(context, uri, null, null); } else if (isFileScheme(uri)) { return uri getPath(); } return null; } public static boolean isMediaDocumentAuthority(Uri uri) { return MEDIA_SCHEME equalsIgnoreCase(uri getAuthority()); } public static boolean isContentScheme(Uri uri) { return ContentResolver SCHEME_CONTENT equalsIgnoreCase(uri getScheme()); } public static boolean isFileScheme(Uri uri) { return ContentResolver SCHEME_FILE equalsIgnoreCase(uri getScheme()); } static String resolveFilePath(Context context, Uri uri, String selection, String[] args) { Cursor cursor = null; final String[] projection = {MediaStore Images Media DATA}; try { cursor = context getContentResolver() query(uri, projection, selection, args, null); if (cursor != null && cursor moveToFirst()) { final int i = cursor getColumnIndexOrThrow(MediaStore Images Media DATA); return cursor getString(i); } } finally { if (cursor != null) { cursor close(); } } return null; }  static String getMimeType(File file) { final String ext = getExtension(file getName()); if (!TextUtils isEmpty(ext)) { return MimeTypeMap getSingleton() getMimeTypeFromExtension(ext); } // default from https://dev twitter com/rest/public/uploading-media return "application/octet-stream"; }  static String getExtension(String filename) { if (filename == null) { return null; } final int i = filename lastIndexOf(" "); return i < 0 ? "" : filename substring(i + 1); }}package com twitter sdk android tweetui;import com twitter sdk android core Callback;import com twitter sdk android core Result;import com twitter sdk android core models Tweet;import java util ArrayList;import java util Collections;import java util List;public class FixedTweetTimeline extends BaseTimeline implements Timeline<Tweet> { private static final String SCRIBE_SECTION = "fixed"; List<Tweet> tweets; FixedTweetTimeline(TweetUi tweetUi, List<Tweet> tweets) { super(tweetUi); this tweets = tweets == null ? new ArrayList<Tweet>() : tweets; } @Override public void next(Long minPosition, Callback<TimelineResult<Tweet>> cb) { // always return the same fixed set of 'latest' Tweets final TimelineResult<Tweet> timelineResult = new TimelineResult<>(new TimelineCursor(tweets), tweets); cb success(new Result(timelineResult, null)); } @Override public void previous(Long maxPosition, Callback<TimelineResult<Tweet>> cb) { final List<Tweet> empty = Collections emptyList(); final TimelineResult<Tweet> timelineResult = new TimelineResult<>(new TimelineCursor(empty), empty); cb success(new Result(timelineResult, null)); } @Override String getTimelineType() { return SCRIBE_SECTION; }  public static class Builder { private final TweetUi tweetUi; private List<Tweet> tweets;  public Builder() { this(TweetUi getInstance()); }  public Builder(TweetUi tweetUi) { if (tweetUi == null) { throw new IllegalArgumentException("TweetUi instance must not be null"); } this tweetUi = tweetUi; }  public Builder setTweets(List<Tweet> tweets) { this tweets = tweets; return this; }  public FixedTweetTimeline build() { return new FixedTweetTimeline(tweetUi, tweets); } }}package com twitter sdk android tweetui;import com twitter sdk android core models MediaEntity;class FormattedMediaEntity extends FormattedUrlEntity { final String type; final String mediaUrlHttps; FormattedMediaEntity(MediaEntity entity) { super(entity); this type = entity type; this mediaUrlHttps = entity mediaUrlHttps; }}package com twitter sdk android tweetui;import java util ArrayList;import java util List;class FormattedTweetText { String text; final List<FormattedUrlEntity> urlEntities; final List<FormattedMediaEntity> mediaEntities; FormattedTweetText() { urlEntities = new ArrayList<>(); mediaEntities = new ArrayList<>(); }}package com twitter sdk android tweetui;import com twitter sdk android core models UrlEntity;class FormattedUrlEntity { int start; int end; final String displayUrl; final String url; FormattedUrlEntity(UrlEntity entity) { this start = entity getStart(); this end = entity getEnd(); this displayUrl = entity displayUrl; this url = entity url; }}package com twitter sdk android tweetui;import android app Activity;import android os Bundle;import com squareup picasso Picasso;import com twitter sdk android core models MediaEntity;import com twitter sdk android tweetui internal MultiTouchImageView;public class GalleryActivity extends Activity { static final String MEDIA_ENTITY = "MEDIA_ENTITY"; static final String TWEET_ID = "TWEET_ID"; @Override protected void onCreate(Bundle savedInstanceState) { super onCreate(savedInstanceState); setContentView(R layout tw__gallery_activity); final MediaEntity entity = (MediaEntity) getIntent() getSerializableExtra(MEDIA_ENTITY); final MultiTouchImageView imageView = (MultiTouchImageView) findViewById(R id image_view); Picasso with(this) load(entity mediaUrlHttps) into(imageView); }}package com twitter sdk android core services params;public class Geocode { public enum Distance { MILES("mi"), KILOMETERS("km"); public final String identifier; Distance(String identifier) { this identifier = identifier; } } public final double latitude; public final double longitude; public final int radius; public final Distance distance; public Geocode(double latitude, double longitude, int radius, Distance distance) { this latitude = latitude; this longitude = longitude; this radius = radius; this distance = distance; } @Override public String toString() { return latitude + "," + longitude + "," + radius + distance identifier; }}package com twitter sdk android core internal network;import com twitter sdk android core GuestSession;import com twitter sdk android core GuestSessionProvider;import com twitter sdk android core internal oauth GuestAuthToken;import com twitter sdk android core internal oauth OAuthConstants;import java io IOException;import okhttp3 Authenticator;import okhttp3 Request;import okhttp3 Response;import okhttp3 Route;public class GuestAuthenticator implements Authenticator { static final int MAX_RETRIES = 2; final GuestSessionProvider guestSessionProvider; public GuestAuthenticator(GuestSessionProvider guestSessionProvider) { this guestSessionProvider = guestSessionProvider; } @Override public Request authenticate(Route route, Response response) throws IOException { return reauth(response); } Request reauth(Response response) { if (canRetry(response)) { final GuestSession session = guestSessionProvider  refreshCurrentSession(new GuestSession(getExpiredToken(response))); final GuestAuthToken token = session == null ? null : session getAuthToken(); if (token != null) { return resign(response request(), token); } } return null; } GuestAuthToken getExpiredToken(Response response) { final String auth = response request() header(OAuthConstants HEADER_AUTHORIZATION); final String guest = response request() header(OAuthConstants HEADER_GUEST_TOKEN); return new GuestAuthToken("bearer", auth replace("bearer ", ""), guest); } Request resign(Request request, GuestAuthToken token) { final Request Builder builder = request newBuilder(); GuestAuthInterceptor addAuthHeaders(builder, token); return builder build(); } boolean canRetry(Response response) { int responseCount = 1; while ((response = response priorResponse()) != null) { responseCount++; } return responseCount < MAX_RETRIES; }}package com twitter sdk android core internal network;import com twitter sdk android core GuestSession;import com twitter sdk android core GuestSessionProvider;import com twitter sdk android core internal oauth GuestAuthToken;import com twitter sdk android core internal oauth OAuthConstants;import java io IOException;import okhttp3 Interceptor;import okhttp3 Request;import okhttp3 Response;public class GuestAuthInterceptor implements Interceptor { final GuestSessionProvider guestSessionProvider; public GuestAuthInterceptor(GuestSessionProvider guestSessionProvider) { this guestSessionProvider = guestSessionProvider; } @Override public Response intercept(Chain chain) throws IOException { final Request request = chain request(); final GuestSession session = guestSessionProvider getCurrentSession(); final GuestAuthToken token = session == null ? null : session getAuthToken(); if (token != null) { final Request Builder builder = request newBuilder(); addAuthHeaders(builder, token); return chain proceed(builder build()); } return chain proceed(request); } static void addAuthHeaders(Request Builder builder, GuestAuthToken token) { final String authHeader = token getTokenType() + " " + token getAccessToken(); builder header(OAuthConstants HEADER_AUTHORIZATION, authHeader); builder header(OAuthConstants HEADER_GUEST_TOKEN, token getGuestToken()); }}package com twitter sdk android core internal network;import java io IOException;import okhttp3 Interceptor;import okhttp3 Response;public class GuestAuthNetworkInterceptor implements Interceptor { @Override public Response intercept(Chain chain) throws IOException { Response response = chain proceed(chain request()); if (response code() == 403) { response = response newBuilder() code(401) build(); } return response; }}package com twitter sdk android core internal oauth;import android text format DateUtils;import com google gson annotations SerializedName;public class GuestAuthToken extends OAuth2Token { public static final String HEADER_GUEST_TOKEN = "x-guest-token";  private static final long EXPIRES_IN_MS = DateUtils HOUR_IN_MILLIS * 3; @SerializedName("guest_token") private final String guestToken; public GuestAuthToken(String tokenType, String accessToken, String guestToken) { super(tokenType, accessToken); this guestToken = guestToken; } public GuestAuthToken(String tokenType, String accessToken, String guestToken, long createdAt) { super(tokenType, accessToken, createdAt); this guestToken = guestToken; } public String getGuestToken() { return guestToken; } // Passbird maintains guest tokens for at least 1 hour, but no more than 3 hours  Tokens // older than 3 hours are known to have expired and should not be reused  @Override public boolean isExpired() { return System currentTimeMillis() >= this createdAt + EXPIRES_IN_MS; } @Override public boolean equals(Object o) { if (this == o) return true; if (o == null || getClass() != o getClass()) return false; if (!super equals(o)) return false; final GuestAuthToken that = (GuestAuthToken) o; if (guestToken != null ? !guestToken equals(that guestToken) : that guestToken != null) return false; return true; } @Override public int hashCode() { int result = super hashCode(); result = 31 * result + (guestToken != null ? guestToken hashCode() : 0); return result; }}package com twitter sdk android core;import android text TextUtils;import com google gson Gson;import com google gson GsonBuilder;import com twitter sdk android core internal oauth GuestAuthToken;import io fabric sdk android Fabric;import io fabric sdk android services persistence SerializationStrategy;public class GuestSession extends Session<GuestAuthToken> { public static final long LOGGED_OUT_USER_ID = 0L;  public GuestSession(GuestAuthToken authToken) { super(authToken, LOGGED_OUT_USER_ID); } static public class Serializer implements SerializationStrategy<GuestSession> { private final Gson gson; public Serializer() { this gson = new GsonBuilder()  registerTypeAdapter(GuestAuthToken class, new AuthTokenAdapter())  create(); } @Override public String serialize(GuestSession session) { if (session != null && session getAuthToken() != null) { try { return gson toJson(session); } catch (Exception e) { Fabric getLogger() d(TwitterCore TAG, "Failed to serialize session " + e getMessage()); } } return ""; } @Override public GuestSession deserialize(String serializedSession) { if (!TextUtils isEmpty(serializedSession)) { try { return gson fromJson(serializedSession, GuestSession class); } catch (Exception e) { Fabric getLogger() d(TwitterCore TAG, "Failed to deserialize session " + e getMessage()); } } return null; } }}package com twitter sdk android core;import com twitter sdk android core internal oauth GuestAuthToken;import com twitter sdk android core internal oauth OAuth2Service;import java util concurrent CountDownLatch;import io fabric sdk android Fabric;public class GuestSessionProvider { private final OAuth2Service oAuth2Service; private final SessionManager<GuestSession> sessionManager; public GuestSessionProvider(OAuth2Service oAuth2Service, SessionManager<GuestSession> sessionManager) { this oAuth2Service = oAuth2Service; this sessionManager = sessionManager; } public synchronized GuestSession getCurrentSession() { final GuestSession session = sessionManager getActiveSession(); if (isSessionValid(session)) { return session; } refreshToken(); return sessionManager getActiveSession(); } public synchronized GuestSession refreshCurrentSession(GuestSession expiredSession) { final GuestSession session = sessionManager getActiveSession(); if (expiredSession != null && expiredSession equals(session)) { refreshToken(); } return sessionManager getActiveSession(); } void refreshToken() { Fabric getLogger() d("GuestSessionProvider", "Refreshing expired guest session "); final CountDownLatch latch = new CountDownLatch(1); oAuth2Service requestGuestAuthToken(new Callback<GuestAuthToken>() { @Override public void success(Result<GuestAuthToken> result) { sessionManager setActiveSession(new GuestSession(result data)); latch countDown(); } @Override public void failure(TwitterException exception) { sessionManager clearSession(GuestSession LOGGED_OUT_USER_ID); latch countDown(); } }); try { latch await(); } catch (InterruptedException e) { sessionManager clearSession(GuestSession LOGGED_OUT_USER_ID); } } boolean isSessionValid(GuestSession session) { return session != null && session getAuthToken() != null && !session getAuthToken() isExpired(); }}package com twitter sdk android core internal oauth;import com google gson annotations SerializedName;class GuestTokenResponse { @SerializedName("guest_token") public final String guestToken; public GuestTokenResponse(String guestToken) { this guestToken = guestToken; }}package com twitter sdk android core models;import com google gson annotations SerializedName;public class HashtagEntity extends Entity {  @SerializedName("text") public final String text; public HashtagEntity(String text, int start, int end) { super(start, end); this text = text; }}package com twitter sdk android tweetui internal;import android view View;public interface HighlightedClickableSpan {  void onClick(View view);  void select(boolean selected);  boolean isSelected();}package com twitter sdk android tweetui internal util;import java util ArrayList;import java util HashMap;import java util Map;import java util TreeMap;public class HtmlEntities {  // public static final Entities XML;  // public static final Entities HTML32;  public static final HtmlEntities HTML40;  // package scoped for testing static final String[][] ISO8859_1_ARRAY = { { "nbsp", "160" }, // non-breaking space { "iexcl", "161" }, // inverted exclamation mark { "cent", "162" }, // cent sign { "pound", "163" }, // pound sign { "curren", "164" }, // currency sign { "yen", "165" }, // yen sign = yuan sign { "brvbar", "166" }, // broken bar = broken vertical bar { "sect", "167" }, // section sign { "uml", "168" }, // diaeresis = spacing diaeresis { "copy", "169" }, // - copyright sign { "ordf", "170" }, // feminine ordinal indicator { "laquo", "171" }, // left-pointing double angle quotation mark = left pointing // guillemet { "not", "172" }, // not sign { "shy", "173" }, // soft hyphen = discretionary hyphen { "reg", "174" }, // - registered trademark sign { "macr", "175" }, // macron = spacing macron = overline = APL overbar { "deg", "176" }, // degree sign { "plusmn", "177" }, // plus-minus sign = plus-or-minus sign { "sup2", "178" }, // superscript two = superscript digit two = squared { "sup3", "179" }, // superscript three = superscript digit three = cubed { "acute", "180" }, // acute accent = spacing acute { "micro", "181" }, // micro sign { "para", "182" }, // pilcrow sign = paragraph sign { "middot", "183" }, // middle dot = Georgian comma = Greek middle dot { "cedil", "184" }, // cedilla = spacing cedilla { "sup1", "185" }, // superscript one = superscript digit one { "ordm", "186" }, // masculine ordinal indicator { "raquo", "187" }, // right-pointing double angle quotation mark = right pointing // guillemet { "frac14", "188" }, // vulgar fraction one quarter = fraction one quarter { "frac12", "189" }, // vulgar fraction one half = fraction one half { "frac34", "190" }, // vulgar fraction three quarters = fraction three quarters { "iquest", "191" }, // inverted question mark = turned question mark { "Agrave", "192" }, // - uppercase A, grave accent { "Aacute", "193" }, // - uppercase A, acute accent { "Acirc", "194" }, // - uppercase A, circumflex accent { "Atilde", "195" }, // - uppercase A, tilde { "Auml", "196" }, // - uppercase A, umlaut { "Aring", "197" }, // - uppercase A, ring { "AElig", "198" }, // - uppercase AE { "Ccedil", "199" }, // - uppercase C, cedilla { "Egrave", "200" }, // - uppercase E, grave accent { "Eacute", "201" }, // - uppercase E, acute accent { "Ecirc", "202" }, // - uppercase E, circumflex accent { "Euml", "203" }, // - uppercase E, umlaut { "Igrave", "204" }, // - uppercase I, grave accent { "Iacute", "205" }, // - uppercase I, acute accent { "Icirc", "206" }, // - uppercase I, circumflex accent { "Iuml", "207" }, // - uppercase I, umlaut { "ETH", "208" }, // - uppercase Eth, Icelandic { "Ntilde", "209" }, // - uppercase N, tilde { "Ograve", "210" }, // - uppercase O, grave accent { "Oacute", "211" }, // - uppercase O, acute accent { "Ocirc", "212" }, // - uppercase O, circumflex accent { "Otilde", "213" }, // - uppercase O, tilde { "Ouml", "214" }, // - uppercase O, umlaut { "times", "215" }, // multiplication sign { "Oslash", "216" }, // - uppercase O, slash { "Ugrave", "217" }, // - uppercase U, grave accent { "Uacute", "218" }, // - uppercase U, acute accent { "Ucirc", "219" }, // - uppercase U, circumflex accent { "Uuml", "220" }, // - uppercase U, umlaut { "Yacute", "221" }, // - uppercase Y, acute accent { "THORN", "222" }, // - uppercase THORN, Icelandic { "szlig", "223" }, // - lowercase sharps, German { "agrave", "224" }, // - lowercase a, grave accent { "aacute", "225" }, // - lowercase a, acute accent { "acirc", "226" }, // - lowercase a, circumflex accent { "atilde", "227" }, // - lowercase a, tilde { "auml", "228" }, // - lowercase a, umlaut { "aring", "229" }, // - lowercase a, ring { "aelig", "230" }, // - lowercase ae { "ccedil", "231" }, // - lowercase c, cedilla { "egrave", "232" }, // - lowercase e, grave accent { "eacute", "233" }, // - lowercase e, acute accent { "ecirc", "234" }, // - lowercase e, circumflex accent { "euml", "235" }, // - lowercase e, umlaut { "igrave", "236" }, // - lowercase i, grave accent { "iacute", "237" }, // - lowercase i, acute accent { "icirc", "238" }, // - lowercase i, circumflex accent { "iuml", "239" }, // - lowercase i, umlaut { "eth", "240" }, // - lowercase eth, Icelandic { "ntilde", "241" }, // - lowercase n, tilde { "ograve", "242" }, // - lowercase o, grave accent { "oacute", "243" }, // - lowercase o, acute accent { "ocirc", "244" }, // - lowercase o, circumflex accent { "otilde", "245" }, // - lowercase o, tilde { "ouml", "246" }, // - lowercase o, umlaut { "divide", "247" }, // division sign { "oslash", "248" }, // - lowercase o, slash { "ugrave", "249" }, // - lowercase u, grave accent { "uacute", "250" }, // - lowercase u, acute accent { "ucirc", "251" }, // - lowercase u, circumflex accent { "uuml", "252" }, // - lowercase u, umlaut { "yacute", "253" }, // - lowercase y, acute accent { "thorn", "254" }, // - lowercase thorn, Icelandic { "yuml", "255" }, // - lowercase y, umlaut }; // http://www w3 org/TR/REC-html40/sgml/entities html // package scoped for testing static final String[][] HTML40_ARRAY = { // <!-- Latin Extended-B --> { "fnof", "402" }, // latin small f with hook = function= florin, U+0192 ISOtech --> // <!-- Greek --> { "Alpha", "913" }, // greek capital letter alpha, U+0391 --> { "Beta", "914" }, // greek capital letter beta, U+0392 --> { "Gamma", "915" }, // greek capital letter gamma,U+0393 ISOgrk3 --> { "Delta", "916" }, // greek capital letter delta,U+0394 ISOgrk3 --> { "Epsilon", "917" }, // greek capital letter epsilon, U+0395 --> { "Zeta", "918" }, // greek capital letter zeta, U+0396 --> { "Eta", "919" }, // greek capital letter eta, U+0397 --> { "Theta", "920" }, // greek capital letter theta,U+0398 ISOgrk3 --> { "Iota", "921" }, // greek capital letter iota, U+0399 --> { "Kappa", "922" }, // greek capital letter kappa, U+039A --> { "Lambda", "923" }, // greek capital letter lambda,U+039B ISOgrk3 --> { "Mu", "924" }, // greek capital letter mu, U+039C --> { "Nu", "925" }, // greek capital letter nu, U+039D --> { "Xi", "926" }, // greek capital letter xi, U+039E ISOgrk3 --> { "Omicron", "927" }, // greek capital letter omicron, U+039F --> { "Pi", "928" }, // greek capital letter pi, U+03A0 ISOgrk3 --> { "Rho", "929" }, // greek capital letter rho, U+03A1 --> // <!-- there is no Sigmaf, and no U+03A2 character either --> { "Sigma", "931" }, // greek capital letter sigma,U+03A3 ISOgrk3 --> { "Tau", "932" }, // greek capital letter tau, U+03A4 --> { "Upsilon", "933" }, // greek capital letter upsilon,U+03A5 ISOgrk3 --> { "Phi", "934" }, // greek capital letter phi,U+03A6 ISOgrk3 --> { "Chi", "935" }, // greek capital letter chi, U+03A7 --> { "Psi", "936" }, // greek capital letter psi,U+03A8 ISOgrk3 --> { "Omega", "937" }, // greek capital letter omega,U+03A9 ISOgrk3 --> { "alpha", "945" }, // greek small letter alpha,U+03B1 ISOgrk3 --> { "beta", "946" }, // greek small letter beta, U+03B2 ISOgrk3 --> { "gamma", "947" }, // greek small letter gamma,U+03B3 ISOgrk3 --> { "delta", "948" }, // greek small letter delta,U+03B4 ISOgrk3 --> { "epsilon", "949" }, // greek small letter epsilon,U+03B5 ISOgrk3 --> { "zeta", "950" }, // greek small letter zeta, U+03B6 ISOgrk3 --> { "eta", "951" }, // greek small letter eta, U+03B7 ISOgrk3 --> { "theta", "952" }, // greek small letter theta,U+03B8 ISOgrk3 --> { "iota", "953" }, // greek small letter iota, U+03B9 ISOgrk3 --> { "kappa", "954" }, // greek small letter kappa,U+03BA ISOgrk3 --> { "lambda", "955" }, // greek small letter lambda,U+03BB ISOgrk3 --> { "mu", "956" }, // greek small letter mu, U+03BC ISOgrk3 --> { "nu", "957" }, // greek small letter nu, U+03BD ISOgrk3 --> { "xi", "958" }, // greek small letter xi, U+03BE ISOgrk3 --> { "omicron", "959" }, // greek small letter omicron, U+03BF NEW --> { "pi", "960" }, // greek small letter pi, U+03C0 ISOgrk3 --> { "rho", "961" }, // greek small letter rho, U+03C1 ISOgrk3 --> { "sigmaf", "962" }, // greek small letter final sigma,U+03C2 ISOgrk3 --> { "sigma", "963" }, // greek small letter sigma,U+03C3 ISOgrk3 --> { "tau", "964" }, // greek small letter tau, U+03C4 ISOgrk3 --> { "upsilon", "965" }, // greek small letter upsilon,U+03C5 ISOgrk3 --> { "phi", "966" }, // greek small letter phi, U+03C6 ISOgrk3 --> { "chi", "967" }, // greek small letter chi, U+03C7 ISOgrk3 --> { "psi", "968" }, // greek small letter psi, U+03C8 ISOgrk3 --> { "omega", "969" }, // greek small letter omega,U+03C9 ISOgrk3 --> { "thetasym", "977" }, // greek small letter theta symbol,U+03D1 NEW --> { "upsih", "978" }, // greek upsilon with hook symbol,U+03D2 NEW --> { "piv", "982" }, // greek pi symbol, U+03D6 ISOgrk3 --> // <!-- General Punctuation --> { "bull", "8226" }, // bullet = black small circle,U+2022 ISOpub --> // <!-- bullet is NOT the same as bullet operator, U+2219 --> { "hellip", "8230" }, // horizontal ellipsis = three dot leader,U+2026 ISOpub --> { "prime", "8242" }, // prime = minutes = feet, U+2032 ISOtech --> { "Prime", "8243" }, // double prime = seconds = inches,U+2033 ISOtech --> { "oline", "8254" }, // overline = spacing overscore,U+203E NEW --> { "frasl", "8260" }, // fraction slash, U+2044 NEW --> // <!-- Letterlike Symbols --> { "weierp", "8472" }, // script capital P = power set= Weierstrass p, U+2118 ISOamso // --> { "image", "8465" }, // blackletter capital I = imaginary part,U+2111 ISOamso --> { "real", "8476" }, // blackletter capital R = real part symbol,U+211C ISOamso --> { "trade", "8482" }, // trade mark sign, U+2122 ISOnum --> { "alefsym", "8501" }, // alef symbol = first transfinite cardinal,U+2135 NEW --> // <!-- alef symbol is NOT the same as hebrew letter alef,U+05D0 // although the same glyph could be used to depict both characters // --> // <!-- Arrows --> { "larr", "8592" }, // leftwards arrow, U+2190 ISOnum --> { "uarr", "8593" }, // upwards arrow, U+2191 ISOnum--> { "rarr", "8594" }, // rightwards arrow, U+2192 ISOnum --> { "darr", "8595" }, // downwards arrow, U+2193 ISOnum --> { "harr", "8596" }, // left right arrow, U+2194 ISOamsa --> { "crarr", "8629" }, // downwards arrow with corner leftwards= carriage return, U+21B5 // NEW --> { "lArr", "8656" }, // leftwards double arrow, U+21D0 ISOtech --> // <!-- ISO 10646 does not say that lArr is the same as the 'is // implied by' arrowbut also does not have any other character for // that function  So ? lArr canbe used for 'is implied by' as // ISOtech suggests --> { "uArr", "8657" }, // upwards double arrow, U+21D1 ISOamsa --> { "rArr", "8658" }, // rightwards double arrow,U+21D2 ISOtech --> // <!-- ISO 10646 does not say this is the 'implies' character but // does not have another character with this function so ?rArr can // be used for 'implies' as ISOtech suggests --> { "dArr", "8659" }, // downwards double arrow, U+21D3 ISOamsa --> { "hArr", "8660" }, // left right double arrow,U+21D4 ISOamsa --> // <!-- Mathematical Operators --> { "forall", "8704" }, // for all, U+2200 ISOtech --> { "part", "8706" }, // partial differential, U+2202 ISOtech --> { "exist", "8707" }, // there exists, U+2203 ISOtech --> { "empty", "8709" }, // empty set = null set = diameter,U+2205 ISOamso --> { "nabla", "8711" }, // nabla = backward difference,U+2207 ISOtech --> { "isin", "8712" }, // element of, U+2208 ISOtech --> { "notin", "8713" }, // not an element of, U+2209 ISOtech --> { "ni", "8715" }, // contains as member, U+220B ISOtech --> // <!-- should there be a more memorable name than 'ni'? --> { "prod", "8719" }, // n-ary product = product sign,U+220F ISOamsb --> // <!-- prod is NOT the same character as U+03A0 'greek capital // letter pi' though the same glyph might be used for both --> { "sum", "8721" }, // n-ary summation, U+2211 ISOamsb --> // <!-- sum is NOT the same character as U+03A3 'greek capital // letter sigma' though the same glyph might be used for both --> { "minus", "8722" }, // minus sign, U+2212 ISOtech --> { "lowast", "8727" }, // asterisk operator, U+2217 ISOtech --> { "radic", "8730" }, // square root = radical sign,U+221A ISOtech --> { "prop", "8733" }, // proportional to, U+221D ISOtech --> { "infin", "8734" }, // infinity, U+221E ISOtech --> { "ang", "8736" }, // angle, U+2220 ISOamso --> { "and", "8743" }, // logical and = wedge, U+2227 ISOtech --> { "or", "8744" }, // logical or = vee, U+2228 ISOtech --> { "cap", "8745" }, // intersection = cap, U+2229 ISOtech --> { "cup", "8746" }, // union = cup, U+222A ISOtech --> { "int", "8747" }, // integral, U+222B ISOtech --> { "there4", "8756" }, // therefore, U+2234 ISOtech --> { "sim", "8764" }, // tilde operator = varies with = similar to,U+223C ISOtech --> // <!-- tilde operator is NOT the same character as the tilde, // U+007E,although the same glyph might be used to represent both // --> { "cong", "8773" }, // approximately equal to, U+2245 ISOtech --> { "asymp", "8776" }, // almost equal to = asymptotic to,U+2248 ISOamsr --> { "ne", "8800" }, // not equal to, U+2260 ISOtech --> { "equiv", "8801" }, // identical to, U+2261 ISOtech --> { "le", "8804" }, // less-than or equal to, U+2264 ISOtech --> { "ge", "8805" }, // greater-than or equal to,U+2265 ISOtech --> { "sub", "8834" }, // subset of, U+2282 ISOtech --> { "sup", "8835" }, // superset of, U+2283 ISOtech --> // <!-- note that nsup, 'not a superset of, U+2283' is not covered // by the Symbol font encoding and is not included  Should it be, // for symmetry?It is in ISOamsn --> <!ENTITY nsub", "8836"}, //not // a subset of, U+2284 ISOamsn --> { "sube", "8838" }, // subset of or equal to, U+2286 ISOtech --> { "supe", "8839" }, // superset of or equal to,U+2287 ISOtech --> { "oplus", "8853" }, // circled plus = direct sum,U+2295 ISOamsb --> { "otimes", "8855" }, // circled times = vector product,U+2297 ISOamsb --> { "perp", "8869" }, // up tack = orthogonal to = perpendicular,U+22A5 ISOtech --> { "sdot", "8901" }, // dot operator, U+22C5 ISOamsb --> // <!-- dot operator is NOT the same character as U+00B7 middle dot // --> // <!-- Miscellaneous Technical --> { "lceil", "8968" }, // left ceiling = apl upstile,U+2308 ISOamsc --> { "rceil", "8969" }, // right ceiling, U+2309 ISOamsc --> { "lfloor", "8970" }, // left floor = apl downstile,U+230A ISOamsc --> { "rfloor", "8971" }, // right floor, U+230B ISOamsc --> { "lang", "9001" }, // left-pointing angle bracket = bra,U+2329 ISOtech --> // <!-- lang is NOT the same character as U+003C 'less than' or // U+2039 'single left-pointing angle quotation mark' --> { "rang", "9002" }, // right-pointing angle bracket = ket,U+232A ISOtech --> // <!-- rang is NOT the same character as U+003E 'greater than' or // U+203A 'single right-pointing angle quotation mark' --> // <!-- Geometric Shapes --> { "loz", "9674" }, // lozenge, U+25CA ISOpub --> // <!-- Miscellaneous Symbols --> { "spades", "9824" }, // black spade suit, U+2660 ISOpub --> // <!-- black here seems to mean filled as opposed to hollow --> { "clubs", "9827" }, // black club suit = shamrock,U+2663 ISOpub --> { "hearts", "9829" }, // black heart suit = valentine,U+2665 ISOpub --> { "diams", "9830" }, // black diamond suit, U+2666 ISOpub --> // <!-- Latin Extended-A --> { "OElig", "338" }, // -- latin capital ligature OE,U+0152 ISOlat2 --> { "oelig", "339" }, // -- latin small ligature oe, U+0153 ISOlat2 --> // <!-- ligature is a misnomer, this is a separate character in some // languages --> { "Scaron", "352" }, // -- latin capital letter S with caron,U+0160 ISOlat2 --> { "scaron", "353" }, // -- latin small letter s with caron,U+0161 ISOlat2 --> { "Yuml", "376" }, // -- latin capital letter Y with diaeresis,U+0178 ISOlat2 --> // <!-- Spacing Modifier Letters --> { "circ", "710" }, // -- modifier letter circumflex accent,U+02C6 ISOpub --> { "tilde", "732" }, // small tilde, U+02DC ISOdia --> // <!-- General Punctuation --> { "ensp", "8194" }, // en space, U+2002 ISOpub --> { "emsp", "8195" }, // em space, U+2003 ISOpub --> { "thinsp", "8201" }, // thin space, U+2009 ISOpub --> { "zwnj", "8204" }, // zero width non-joiner,U+200C NEW RFC 2070 --> { "zwj", "8205" }, // zero width joiner, U+200D NEW RFC 2070 --> { "lrm", "8206" }, // left-to-right mark, U+200E NEW RFC 2070 --> { "rlm", "8207" }, // right-to-left mark, U+200F NEW RFC 2070 --> { "ndash", "8211" }, // en dash, U+2013 ISOpub --> { "mdash", "8212" }, // em dash, U+2014 ISOpub --> { "lsquo", "8216" }, // left single quotation mark,U+2018 ISOnum --> { "rsquo", "8217" }, // right single quotation mark,U+2019 ISOnum --> { "sbquo", "8218" }, // single low-9 quotation mark, U+201A NEW --> { "ldquo", "8220" }, // left double quotation mark,U+201C ISOnum --> { "rdquo", "8221" }, // right double quotation mark,U+201D ISOnum --> { "bdquo", "8222" }, // double low-9 quotation mark, U+201E NEW --> { "dagger", "8224" }, // dagger, U+2020 ISOpub --> { "Dagger", "8225" }, // double dagger, U+2021 ISOpub --> { "permil", "8240" }, // per mille sign, U+2030 ISOtech --> { "lsaquo", "8249" }, // single left-pointing angle quotation mark,U+2039 ISO proposed // --> // <!-- lsaquo is proposed but not yet ISO standardized --> { "rsaquo", "8250" }, // single right-pointing angle quotation mark,U+203A ISO proposed // --> // <!-- rsaquo is proposed but not yet ISO standardized --> { "euro", "8364" }, // -- euro sign, U+20AC NEW --> }; private static final String[][] BASIC_ARRAY = { { "quot", "34" }, // " - double-quote { "amp", "38" }, // & - ampersand { "lt", "60" }, // < - less-than { "gt", "62" }, // > - greater-than }; // package scoped for testing final EntityMap map = new HtmlEntities LookupEntityMap();   static { HTML40 = new HtmlEntities(); fillWithHtml40Entities(HTML40); } static void fillWithHtml40Entities(HtmlEntities entities) { entities addEntities(BASIC_ARRAY); entities addEntities(ISO8859_1_ARRAY); entities addEntities(HTML40_ARRAY); } interface EntityMap { void add(String name, int value); String name(int value); int value(String name); } static class PrimitiveEntityMap implements EntityMap { @SuppressWarnings("unchecked") private final Map mapNameToValue = new HashMap(); private final IntHashMap mapValueToName = new IntHashMap(); @SuppressWarnings("unchecked") public void add(String name, int value) { mapNameToValue put(name, value); mapValueToName put(value, name); } public String name(int value) { return (String) mapValueToName get(value); } public int value(String name) { final Object value = mapNameToValue get(name); if (value == null) { return -1; } return ((Integer) value) intValue(); } } abstract static class MapIntMap implements EntityMap { @SuppressWarnings("unchecked") protected Map mapNameToValue; @SuppressWarnings("unchecked") protected Map mapValueToName; @SuppressWarnings("unchecked") public void add(String name, int value) { mapNameToValue put(name, value); mapValueToName put(value, name); } public String name(int value) { return (String) mapValueToName get(value); } public int value(String name) { final Object value = mapNameToValue get(name); if (value == null) { return -1; } return ((Integer) value) intValue(); } } static class HashEntityMap extends MapIntMap { @SuppressWarnings("unchecked") public HashEntityMap() { mapNameToValue = new HashMap(); mapValueToName = new HashMap(); } } static class TreeEntityMap extends MapIntMap { @SuppressWarnings("unchecked") public TreeEntityMap() { mapNameToValue = new TreeMap(); mapValueToName = new TreeMap(); } } static class LookupEntityMap extends PrimitiveEntityMap { private static final int LOOKUP_TABLE_SIZE = 256; private String[] lookupTable; @Override public String name(int value) { if (value < LOOKUP_TABLE_SIZE) { return lookupTable()[value]; } return super name(value); } private String[] lookupTable() { if (lookupTable == null) { createLookupTable(); } return lookupTable; } private void createLookupTable() { lookupTable = new String[LOOKUP_TABLE_SIZE]; for (int i = 0; i < LOOKUP_TABLE_SIZE; ++i) { lookupTable[i] = super name(i); } } } static class ArrayEntityMap implements EntityMap { protected int growBy = 100; protected int size = 0; protected String[] names; protected int[] values; public ArrayEntityMap() { names = new String[growBy]; values = new int[growBy]; } public ArrayEntityMap(int growBy) { this growBy = growBy; names = new String[growBy]; values = new int[growBy]; } public void add(String name, int value) { ensureCapacity(size + 1); names[size] = name; values[size] = value; size++; } protected void ensureCapacity(int capacity) { if (capacity > names length) { final int newSize = Math max(capacity, size + growBy); final String[] newNames = new String[newSize]; System arraycopy(names, 0, newNames, 0, size); names = newNames; final int[] newValues = new int[newSize]; System arraycopy(values, 0, newValues, 0, size); values = newValues; } } public String name(int value) { for (int i = 0; i < size; ++i) { if (values[i] == value) { return names[i]; } } return null; } public int value(String name) { for (int i = 0; i < size; ++i) { if (names[i] equals(name)) { return values[i]; } } return -1; } } static class BinaryEntityMap extends ArrayEntityMap { public BinaryEntityMap() {} public BinaryEntityMap(int growBy) { super(growBy); } // based on code in java util Arrays private int binarySearch(int key) { int low = 0; int high = size - 1; while (low <= high) { final int mid = (low + high) >>> 1; final int midVal = values[mid]; if (midVal < key) { low = mid + 1; } else if (midVal > key) { high = mid - 1; } else { return mid; // key found } } return -(low + 1); // key not found  } @Override public void add(String name, int value) { ensureCapacity(size + 1); int insertAt = binarySearch(value); if (insertAt > 0) { return; // note: this means you can't insert the same value // twice } insertAt = -(insertAt + 1); // binarySearch returns it negative and // off-by-one System arraycopy(values, insertAt, values, insertAt + 1, size - insertAt); values[insertAt] = value; System arraycopy(names, insertAt, names, insertAt + 1, size - insertAt); names[insertAt] = name; size++; } @Override public String name(int value) { final int index = binarySearch(value); if (index < 0) { return null; } return names[index]; } }  public static final class Unescaped { public final String unescaped; // An ordered list of start/end indices public final ArrayList<int[]> indices; public Unescaped(String unescaped, ArrayList<int[]> indices) { this unescaped = unescaped; this indices = indices; } } public void addEntities(String[][] entityArray) { for (String[] anEntityArray : entityArray) { addEntity(anEntityArray[0], Integer parseInt(anEntityArray[1])); } } public void addEntity(String name, int value) { map add(name, value); } public String entityName(int value) { return map name(value); } public int entityValue(String name) { return map value(name); }  public Unescaped unescape(String str) { final int length = str length(); final StringBuilder buf = new StringBuilder(length); final ArrayList<int[]> indices = new ArrayList<>(5); int i; for (i = 0; i < length; ++i) { final char ch = str charAt(i); if (ch == '&') { final int semi = str indexOf(';', i + 1); if (semi == -1) { buf append(ch); continue; } final String entityName = str substring(i + 1, semi); final int entityNameLength = entityName length(); int entityValue = -1; if (entityNameLength > 0) { if (entityName charAt(0) == '#' && entityNameLength > 1) { final char charAt1 = entityName charAt(1); try { if (charAt1 == 'x' || charAt1 == 'X') { if (entityNameLength > 2) { entityValue = Integer valueOf(entityName substring(2), 16)  intValue(); } } else { entityValue = Integer parseInt(entityName substring(1)); } } catch (Exception ignore) { } } else { entityValue = this entityValue(entityName); } } if (entityValue == -1) { buf append('&'); final int amp = entityName indexOf('&'); if (amp == -1) { buf append(entityName); buf append(';'); i = semi; } } else { buf append((char) (entityValue)); indices add(new int[] { i, semi }); i = semi; } } else { buf append(ch); } } return new Unescaped(buf toString(), indices); }}package com twitter sdk android core models;public interface Identifiable {  long getId();}package com twitter sdk android core models;import com google gson annotations SerializedName;public class Image { @SerializedName("w") public final int w; @SerializedName("h") public final int h; @SerializedName("image_type") public final String imageType; public Image(int w, int h, String imageType) { this w = w; this h = h; this imageType = imageType; }}package com twitter sdk android core models;import com google gson annotations SerializedName;public class ImageValue { @SerializedName("height") public final int height; @SerializedName("width") public final int width; @SerializedName("url") public final String url; @SerializedName("alt") public final String alt; public ImageValue(int height, int width, String url, String alt) { this height = height; this width = width; this url = url; this alt = alt; }}package com twitter sdk android core;import android content Context;import android content Intent;import android content pm PackageManager;import android content pm ResolveInfo;import java util List;public class IntentUtils {  public static boolean isActivityAvailable(Context context, Intent intent) { final PackageManager packageManager = context getPackageManager(); final List<ResolveInfo> activities = packageManager queryIntentActivities(intent, 0); return !activities isEmpty(); }  public static boolean safeStartActivity(Context context, Intent intent) { if (isActivityAvailable(context, intent)) { context startActivity(intent); return true; } return false; }}package com twitter sdk android core;import android content Intent;import io fabric sdk android FabricAndroidTestCase;public class IntentUtilsTest extends FabricAndroidTestCase { public void testIsActivityAvailable_noActivitiesAvailable() { final Intent intent = new Intent("io fabric is awesome"); assertFalse(IntentUtils isActivityAvailable(getContext(), intent)); } public void testIsActivityAvailable_activitiesAvailable() { final Intent intent = new Intent(android provider Settings ACTION_SETTINGS); assertTrue(IntentUtils isActivityAvailable(getContext(), intent)); } public void testSafeStartActivity() { final Intent intent = new Intent("io fabric is awesome"); assertFalse(IntentUtils safeStartActivity(getContext(), intent)); }}package com twitter sdk android tweetui internal util;public class IntHashMap {  private Entry[] table;  private int count;  private int threshold;  private float loadFactor;  private static class Entry { public final int hash; @SuppressWarnings("unused") public int key; public Object value; public Entry next;  protected Entry(int hash, int key, Object value, Entry next) { this hash = hash; this key = key; this value = value; this next = next; } }  public IntHashMap() { this(20, 0 75f); }  public IntHashMap(int initialCapacity) { this(initialCapacity, 0 75f); }  public IntHashMap(int initialCapacity, float loadFactor) { super(); if (initialCapacity < 0) { throw new IllegalArgumentException("Illegal Capacity: " + initialCapacity); } if (loadFactor <= 0) { throw new IllegalArgumentException("Illegal Load: " + loadFactor); } if (initialCapacity == 0) { initialCapacity = 1; } this loadFactor = loadFactor; table = new Entry[initialCapacity]; threshold = (int) (initialCapacity * loadFactor); }  public int size() { return count; }  public boolean isEmpty() { return count == 0; }  public boolean contains(Object value) { if (value == null) { throw new NullPointerException(); } final Entry[] tab = table; for (int i = tab length; i-- > 0;) { for (Entry e = tab[i]; e != null; e = e next) { if (e value equals(value)) { return true; } } } return false; }  public boolean containsValue(Object value) { return contains(value); }  public boolean containsKey(int key) { final Entry[] tab = table; final int hash = key; final int index = (hash & 0x7FFFFFFF) % tab length; for (Entry e = tab[index]; e != null; e = e next) { if (e hash == hash) { return true; } } return false; }  public Object get(int key) { final Entry[] tab = table; final int hash = key; final int index = (hash & 0x7FFFFFFF) % tab length; for (Entry e = tab[index]; e != null; e = e next) { if (e hash == hash) { return e value; } } return null; }  protected void rehash() { final int oldCapacity = table length; final Entry[] oldMap = table; final int newCapacity = oldCapacity * 2 + 1; final Entry[] newMap = new Entry[newCapacity]; threshold = (int) (newCapacity * loadFactor); table = newMap; for (int i = oldCapacity; i-- > 0;) { for (Entry old = oldMap[i]; old != null;) { final Entry e = old; old = old next; final int index = (e hash & 0x7FFFFFFF) % newCapacity; e next = newMap[index]; newMap[index] = e; } } }  public Object put(int key, Object value) { // Makes sure the key is not already in the hashtable  Entry[] tab = table; final int hash = key; int index = (hash & 0x7FFFFFFF) % tab length; for (Entry e = tab[index]; e != null; e = e next) { if (e hash == hash) { final Object old = e value; e value = value; return old; } } if (count >= threshold) { // Rehash the table if the threshold is exceeded rehash(); tab = table; index = (hash & 0x7FFFFFFF) % tab length; } // Creates the new entry  final Entry e = new Entry(hash, key, value, tab[index]); tab[index] = e; count++; return null; }  public Object remove(int key) { final Entry[] tab = table; final int hash = key; final int index = (hash & 0x7FFFFFFF) % tab length; for (Entry e = tab[index], prev = null; e != null; prev = e, e = e next) { if (e hash == hash) { if (prev != null) { prev next = e next; } else { tab[index] = e next; } count--; final Object oldValue = e value; e value = null; return oldValue; } } return null; }  public synchronized void clear() { final Entry[] tab = table; for (int index = tab length; --index >= 0;) { tab[index] = null; } count = 0; }}package com twitter sdk android tweetui;import android view View;import com twitter sdk android core Callback;import com twitter sdk android core Result;import com twitter sdk android core TwitterApiException;import com twitter sdk android core TwitterException;import com twitter sdk android core internal TwitterApiConstants;import com twitter sdk android core models Tweet;import com twitter sdk android core models TweetBuilder;class LikeTweetAction extends BaseTweetAction implements View OnClickListener { final Tweet tweet; final TweetRepository tweetRepository; final TweetUi tweetUi; final TweetScribeClient tweetScribeClient; LikeTweetAction(Tweet tweet, TweetUi tweetUi, Callback<Tweet> cb) { this(tweet, tweetUi, cb, new TweetScribeClientImpl(tweetUi)); } // For testing only LikeTweetAction(Tweet tweet, TweetUi tweetUi, Callback<Tweet> cb, TweetScribeClient tweetScribeClient) { super(cb); this tweet = tweet; this tweetUi = tweetUi; this tweetScribeClient = tweetScribeClient; this tweetRepository = tweetUi getTweetRepository(); } @Override public void onClick(View view) { if (view instanceof ToggleImageButton) { final ToggleImageButton toggleImageButton = (ToggleImageButton) view; if (tweet favorited) { scribeUnFavoriteAction(); tweetRepository unfavorite(tweet id, new LikeCallback(toggleImageButton, tweet, getActionCallback())); } else { scribeFavoriteAction(); tweetRepository favorite(tweet id, new LikeCallback(toggleImageButton, tweet, getActionCallback())); } } } void scribeFavoriteAction() { tweetScribeClient favorite(tweet); } void scribeUnFavoriteAction() { tweetScribeClient unfavorite(tweet); }  static class LikeCallback extends Callback<Tweet> { ToggleImageButton button; Tweet tweet; Callback<Tweet> cb;  LikeCallback(ToggleImageButton button, Tweet tweet, Callback<Tweet> cb) { this button = button; this tweet = tweet; this cb = cb; } @Override public void success(Result<Tweet> result) { cb success(result); } @Override public void failure(TwitterException exception) { if (exception instanceof TwitterApiException) { final TwitterApiException apiException = (TwitterApiException) exception; final int errorCode = apiException getErrorCode(); switch (errorCode) { case TwitterApiConstants Errors ALREADY_FAVORITED: final Tweet favorited = new TweetBuilder() copy(tweet) setFavorited(true)  build(); cb success(new Result<>(favorited, null)); return; case TwitterApiConstants Errors ALREADY_UNFAVORITED: final Tweet unfavorited = new TweetBuilder() copy(tweet) setFavorited(false)  build(); cb success(new Result<>(unfavorited, null)); return; default: // reset the toggle state back to match the Tweet button setToggledOn(tweet favorited); cb failure(exception); return; } } // reset the toggle state back to match the Tweet button setToggledOn(tweet favorited); cb failure(exception); } }}package com twitter sdk android tweetui;import com twitter sdk android core models MediaEntity;interface LinkClickListener {  void onUrlClicked(String url);  void onPhotoClicked(MediaEntity mediaEntity);}package com twitter sdk android core services;import com twitter sdk android core models Tweet;import java util List;import retrofit2 Call;import retrofit2 http GET;import retrofit2 http Query;public interface ListService {  @GET("/1 1/lists/statuses json?" + "tweet_mode=extended&include_cards=true&cards_platform=TwitterKit-13") Call<List<Tweet>> statuses(@Query("list_id") Long listId, @Query("slug") String slug, @Query("owner_screen_name") String ownerScreenName, @Query("owner_id") Long ownerId, @Query("since_id") Long sinceId, @Query("max_id") Long maxId, @Query("count") Integer count, @Query("include_entities") Boolean includeEntities, @Query("include_rts") Boolean includeRetweets);}package com twitter sdk android tweetui;import com twitter sdk android core Callback;import com twitter sdk android core TwitterException;import io fabric sdk android Logger;abstract class LoggingCallback<T> extends Callback<T> { // Wrapped cb generic type is unknown, concrete subclass responsible for implementing // success(Result<T> result) and unpacking result to call cb with proper type checking private final Callback cb; private final Logger logger;  LoggingCallback(Callback cb, Logger logger) { this cb = cb; this logger = logger; } @Override public void failure(TwitterException exception) { logger e(TweetUi LOGTAG, exception getMessage(), exception); if (cb != null) { cb failure(exception); } }}package com twitter sdk android unity;import android app Activity;import android content Intent;import android os Bundle;import com twitter sdk android core Callback;import com twitter sdk android core Result;import com twitter sdk android core TwitterException;import com twitter sdk android core TwitterSession;import com twitter sdk android core TwitterSessionHelper;import com twitter sdk android core identity TwitterAuthClient;public class LoginActivity extends Activity { TwitterAuthClient authClient; @Override public void onCreate(Bundle savedInstanceState) { super onCreate(savedInstanceState); authClient = new TwitterAuthClient(); authClient authorize(this, new Callback<TwitterSession>() { @Override public void success(Result<TwitterSession> result) { final String session = TwitterSessionHelper serialize(result data); final UnityMessage message = new UnityMessage Builder()  setMethod("LoginComplete")  setData(session)  build(); message send(); finish(); } @Override public void failure(TwitterException ex) { final String error = new ApiError Serializer()  serialize(new ApiError(0, ex getMessage())); final UnityMessage message = new UnityMessage Builder()  setMethod("LoginFailed")  setData(error)  build(); message send(); finish(); } }); } @Override protected void onActivityResult(int requestCode, int resultCode, Intent data) { super onActivityResult(requestCode, resultCode, data); authClient onActivityResult(requestCode, resultCode, data); }}package com twitter sdk android core models;import com google gson annotations SerializedName;public class Media { @SerializedName("media_id") public final long mediaId; @SerializedName("media_id_string") public final String mediaIdString; @SerializedName("size") public final long size; @SerializedName("image") public final Image image; public Media(long mediaID, String mediaIdString, long size, Image image) { this mediaId = mediaID; this mediaIdString = mediaIdString; this size = size; this image = image; }}package com twitter sdk android tweetui internal;import android content Context;import android graphics drawable Drawable;import android util AttributeSet;import android view LayoutInflater;import android view View;import android widget FrameLayout;import android widget ImageView;import android widget TextView;import com twitter sdk android core internal VineCardUtils;import com twitter sdk android core models Card;import com twitter sdk android core models MediaEntity;import com twitter sdk android tweetui R;public class MediaBadgeView extends FrameLayout { TextView videoDuration; ImageView badge; public MediaBadgeView(Context context) { this(context, null); } public MediaBadgeView(Context context, AttributeSet attrs) { this(context, attrs, 0); } public MediaBadgeView(Context context, AttributeSet attrs, int defStyleAttr) { super(context, attrs, defStyleAttr); initSubViews(context); } void initSubViews(Context context) { final LayoutInflater inflater = (LayoutInflater) context  getSystemService(Context LAYOUT_INFLATER_SERVICE); final View view = inflater inflate(R layout tw__media_badge, this, true); videoDuration = (TextView) view findViewById(R id tw__video_duration); badge = (ImageView) view findViewById(R id tw__gif_badge); } public void setMediaEntity(MediaEntity entity) { if (TweetMediaUtils GIF_TYPE equals(entity type)) { setBadge(getResources() getDrawable(R drawable tw__gif_badge)); } else if (TweetMediaUtils VIDEO_TYPE equals(entity type)) { final long duration = entity videoInfo == null ? 0 : entity videoInfo durationMillis; setText(duration); } else { setEmpty(); } } public void setCard(Card card) { if (VineCardUtils isVine(card)) { setBadge(getResources() getDrawable(R drawable tw__vine_badge)); } else { setEmpty(); } } void setText(long duration) { videoDuration setVisibility(View VISIBLE); badge setVisibility(View GONE); videoDuration setText(MediaTimeUtils getPlaybackTime(duration)); } void setBadge(Drawable drawable) { badge setVisibility(View VISIBLE); videoDuration setVisibility(View GONE); badge setImageDrawable(drawable); } void setEmpty() { videoDuration setVisibility(View GONE); badge setVisibility(View GONE); }}package com twitter sdk android core models;import com google gson annotations SerializedName;import java io Serializable;public class MediaEntity extends UrlEntity {  @SerializedName("id") public final long id;  @SerializedName("id_str") public final String idStr;  @SerializedName("media_url") public final String mediaUrl;  @SerializedName("media_url_https") public final String mediaUrlHttps;  @SerializedName("sizes") public final Sizes sizes;  @SerializedName("source_status_id") public final long sourceStatusId;  @SerializedName("source_status_id_str") public final String sourceStatusIdStr;  @SerializedName("type") public final String type;  @SerializedName("video_info") public final VideoInfo videoInfo; @SerializedName("ext_alt_text") public final String altText; public MediaEntity(String url, String expandedUrl, String displayUrl, int start, int end, long id, String idStr, String mediaUrl, String mediaUrlHttps, Sizes sizes, long sourceStatusId, String sourceStatusIdStr, String type, VideoInfo videoInfo, String altText) { super(url, expandedUrl, displayUrl, start, end); this id = id; this idStr = idStr; this mediaUrl = mediaUrl; this mediaUrlHttps = mediaUrlHttps; this sizes = sizes; this sourceStatusId = sourceStatusId; this sourceStatusIdStr = sourceStatusIdStr; this type = type; this videoInfo = videoInfo; this altText = altText; } public static class Sizes implements Serializable {  @SerializedName("medium") public final Size medium;  @SerializedName("thumb") public final Size thumb;  @SerializedName("small") public final Size small;  @SerializedName("large") public final Size large; public Sizes(Size thumb, Size small, Size medium, Size large) { this thumb = thumb; this small = small; this medium = medium; this large = large; } } public static class Size implements Serializable {  @SerializedName("w") public final int w;  @SerializedName("h") public final int h;  @SerializedName("resize") public final String resize; public Size(int w, int h, String resize) { this w = w; this h = h; this resize = resize; } }}package com twitter sdk android core services;import com twitter sdk android core models Media;import okhttp3 RequestBody;import retrofit2 Call;import retrofit2 http Multipart;import retrofit2 http POST;import retrofit2 http Part;public interface MediaService {  @Multipart @POST("https://upload twitter com/1 1/media/upload json") Call<Media> upload(@Part("media") RequestBody media, @Part("media_data") RequestBody mediaData, @Part("additional_owners") RequestBody additionalOwners);}package com twitter sdk android tweetui internal;import java util Locale;final class MediaTimeUtils { private static final String TIME_FORMAT_LONG = "%1$d:%2$02d:%3$02d"; private static final String TIME_FORMAT_SHORT = "%1$d:%2$02d"; private MediaTimeUtils() {} static String getPlaybackTime(long timeMillis) { final int timeSeconds = (int) (timeMillis / 1000); final int seconds = timeSeconds % 60; final int minutes = (timeSeconds / 60) % 60; final int hours = timeSeconds / 3600; if (hours > 0) { return String format(Locale getDefault(), TIME_FORMAT_LONG, hours, minutes, seconds); } else { return String format(Locale getDefault(), TIME_FORMAT_SHORT, minutes, seconds); } }}package com twitter sdk android core models;import com google gson annotations SerializedName;public class MentionEntity extends Entity {  @SerializedName("id") public final long id;  @SerializedName("id_str") public final String idStr;  @SerializedName("name") public final String name;  @SerializedName("screen_name") public final String screenName; public MentionEntity(long id, String idStr, String name, String screenName, int start, int end) { super(start, end); this id = id; this idStr = idStr; this name = name; this screenName = screenName; }}package com twitter sdk android core internal;import android content Context;import java io File;import java io FilenameFilter;import java util Arrays;import java util Comparator;public class MigrationHelper { private static final String SHARED_PREFS_DIR = "shared_prefs"; public void migrateSessionStore(Context context, String prefixMatch, String expectedFileName) { final File sharedPrefsDir = getSharedPreferencesDir(context); // shared_prefs dir has not been created, do nothing if (!sharedPrefsDir exists() || !sharedPrefsDir isDirectory()) { return; } // if shared prefs already exist, do nothing final File expectedSharedPrefsFile = new File(sharedPrefsDir, expectedFileName); if (expectedSharedPrefsFile exists()) { return; } // rename latest final File oldPrefsharedPrefsFile = getLatestFile(sharedPrefsDir, prefixMatch); if (oldPrefsharedPrefsFile != null) { oldPrefsharedPrefsFile renameTo(expectedSharedPrefsFile); } } File getSharedPreferencesDir(Context context) { return new File(context getApplicationInfo() dataDir, SHARED_PREFS_DIR); } File getLatestFile(File sharedPrefsDir, String prefix) { final File[] files = sharedPrefsDir listFiles(new PrefixFileNameFilter(prefix)); Arrays sort(files, new FileLastModifiedComparator()); return files length > 0 ? files[0] : null; } static class FileLastModifiedComparator implements Comparator<File> { @Override public int compare(File file1, File file2) { return Long valueOf(file2 lastModified()) compareTo(file1 lastModified()); } } static class PrefixFileNameFilter implements FilenameFilter { final String prefix; public PrefixFileNameFilter(String prefix) { this prefix = prefix; } @Override public boolean accept(File file, String filename) { return filename startsWith(prefix); } }}package com twitter sdk android core internal;import android content Context;import com twitter sdk android core TwitterCoreTest;import java io File;import java io FilenameFilter;import java io IOException;import java util Comparator;import static org mockito Mockito mock;import static org mockito Mockito when;public class MigrationHelperTests extends TwitterCoreTest { private static final String SHARED_PREFS_DIR = "shared_prefs"; private static final String KIT_IDENTIFIER = "com foo test:test"; private static final String EXPECTED_PREFERENCE = KIT_IDENTIFIER + ":test xml"; private static final String TEST_PREFERENCE = KIT_IDENTIFIER + ":a b c xml"; MigrationHelper migrationHelper; @Override public void setUp() throws Exception { super setUp(); migrationHelper = new MigrationHelper(); } public void testMigrateSessionStore_emptyDirectory() throws Exception { final File sharedPrefsDir = getSharedPreferencesDir(getContext()); clearSharePrefs(sharedPrefsDir); createSharedPrefsFolder(sharedPrefsDir); migrationHelper migrateSessionStore(getContext(), KIT_IDENTIFIER, EXPECTED_PREFERENCE); assertEquals(0, sharedPrefsDir listFiles() length); } public void testMigrateSessionStore_noSharedPrefDirectory() throws Exception { final File sharedPrefsDir = getSharedPreferencesDir(getContext()); clearSharePrefs(sharedPrefsDir); deleteSharedPrefsFolder(sharedPrefsDir); migrationHelper migrateSessionStore(getContext(), KIT_IDENTIFIER, EXPECTED_PREFERENCE); assertFalse(sharedPrefsDir exists()); } public void testMigrateSessionStore_notMigrated() throws Exception { final File sharedPrefsDir = getSharedPreferencesDir(getContext()); clearSharePrefs(sharedPrefsDir); createSharedPrefsFolder(sharedPrefsDir); createFile(sharedPrefsDir, TEST_PREFERENCE); migrationHelper migrateSessionStore(getContext(), KIT_IDENTIFIER, EXPECTED_PREFERENCE); final File expected = new File(sharedPrefsDir, EXPECTED_PREFERENCE); assertTrue(expected exists()); final File oldPrefFile = new File(sharedPrefsDir, TEST_PREFERENCE); assertFalse(oldPrefFile exists()); } public void testMigrateSessionStore_alreadyMigrated() throws Exception { final File sharedPrefsDir = getSharedPreferencesDir(getContext()); clearSharePrefs(sharedPrefsDir); createSharedPrefsFolder(sharedPrefsDir); createFile(sharedPrefsDir, TEST_PREFERENCE); createFile(sharedPrefsDir, EXPECTED_PREFERENCE); migrationHelper migrateSessionStore(getContext(), KIT_IDENTIFIER, EXPECTED_PREFERENCE); final File expected = new File(sharedPrefsDir, EXPECTED_PREFERENCE); assertTrue(expected exists()); final File oldPrefFile = new File(sharedPrefsDir, TEST_PREFERENCE); assertTrue(oldPrefFile exists()); } public void testPrefixFileNameFilter() throws Exception { final FilenameFilter filter = new MigrationHelper PrefixFileNameFilter(KIT_IDENTIFIER); assertFalse(filter accept(null, "foo xml")); assertTrue(filter accept(null, KIT_IDENTIFIER + "foo xml")); } public void testFileLastModifiedComparator() { final Comparator<File> comparator = new MigrationHelper FileLastModifiedComparator(); final File file1 = mock(File class); when(file1 lastModified()) thenReturn(100L); final File file2 = mock(File class); when(file2 lastModified()) thenReturn(200L); assertEquals(1, comparator compare(file1, file2)); assertEquals(-1, comparator compare(file2, file1)); } private void clearSharePrefs(File sharedPrefsFolder) { final File[] files = sharedPrefsFolder listFiles(); if (files == null) { return; } for (File file : files) { file delete(); } } private void createSharedPrefsFolder(File sharedPrefsFolder) { if (!sharedPrefsFolder exists()) { sharedPrefsFolder mkdir(); } } private void deleteSharedPrefsFolder(File sharedPrefsFolder) { if (sharedPrefsFolder exists()) { sharedPrefsFolder delete(); } } private File getSharedPreferencesDir(Context context) { return new File(context getApplicationInfo() dataDir, SHARED_PREFS_DIR); } private File createFile(File sharedPrefsFolder, String name) { final File result = new File(sharedPrefsFolder, name); try { result createNewFile(); } catch (IOException e) { // Ignore } return result; }}package com twitter sdk android tweetui internal;import android animation ValueAnimator;import android content Context;import android graphics Matrix;import android graphics RectF;import android graphics drawable Drawable;import android util AttributeSet;import android view GestureDetector;import android view MotionEvent;import android view ScaleGestureDetector;import android view animation AccelerateDecelerateInterpolator;import android widget ImageView;public class MultiTouchImageView extends ImageView { private final static long SCALE_ANIMATION_DURATION = 300L; private final static float DOUBLE_TAP_SCALE_FACTOR = 2 0f; private final static float MINIMUM_SCALE_FACTOR = 1 0f; final ScaleGestureDetector scaleGestureDetector; final GestureDetector gestureDetector; final Matrix drawMatrix = new Matrix(); final Matrix baseMatrix = new Matrix(); final Matrix updateMatrix = new Matrix(); final RectF viewRect = new RectF(); // Used to avoid allocating new objects final RectF drawRect = new RectF(); final float[] matrixValues = new float[9]; public MultiTouchImageView(Context context) { this(context, null); } public MultiTouchImageView(Context context, AttributeSet attrs) { this(context, attrs, 0); } public MultiTouchImageView(Context context, AttributeSet attrs, int defStyleAttr) { super(context, attrs, defStyleAttr); scaleGestureDetector = new ScaleGestureDetector(context, new ScaleGestureDetector  SimpleOnScaleGestureListener() { @Override public boolean onScale(ScaleGestureDetector scaleGestureDetector) { setScale(scaleGestureDetector getScaleFactor(), scaleGestureDetector getFocusX(), scaleGestureDetector getFocusY()); setImageMatrix(); return true; } @Override public void onScaleEnd(ScaleGestureDetector detector) { if (getScale() < MINIMUM_SCALE_FACTOR) { reset(); setImageMatrix(); } } }); gestureDetector = new GestureDetector(context, new GestureDetector  SimpleOnGestureListener() { @Override public boolean onScroll(MotionEvent e1, MotionEvent e2, float dx, float dy) { setTranslate(-dx, -dy); setImageMatrix(); return true; } @Override public boolean onDoubleTap(MotionEvent e) { if (getScale() > MINIMUM_SCALE_FACTOR) { animateScale(getScale(), MINIMUM_SCALE_FACTOR, e getX(), e getY()); } else { animateScale(getScale(), DOUBLE_TAP_SCALE_FACTOR, e getX(), e getY()); } return true; } }); } boolean isInitializationComplete() { final Drawable drawable = getDrawable(); return drawable != null && drawable getIntrinsicWidth() > 0; } @Override protected void onLayout(boolean changed, int left, int top, int right, int bottom) { super onLayout(changed, left, top, right, bottom); if (isInitializationComplete()) { initializeViewRect(); initializeBaseMatrix(getDrawable()); setImageMatrix(); } } void initializeViewRect() { viewRect set(getPaddingLeft(), getPaddingTop(), getWidth() - getPaddingRight(), getHeight() - getPaddingBottom()); } void initializeBaseMatrix(Drawable drawable) { final int drawableWidth = drawable getIntrinsicWidth(); final int drawableHeight = drawable getIntrinsicHeight(); final RectF srcRect = new RectF(0, 0, drawableWidth, drawableHeight); baseMatrix reset(); baseMatrix setRectToRect(srcRect, viewRect, Matrix ScaleToFit CENTER); } @Override public boolean onTouchEvent(MotionEvent event) { if (!isInitializationComplete()) { return false; } // Do not allow touch events to be intercepted (usually for gallery swipes) by default getParent() requestDisallowInterceptTouchEvent(true); boolean retVal = scaleGestureDetector onTouchEvent(event); retVal = gestureDetector onTouchEvent(event) || retVal; return retVal || super onTouchEvent(event); } void setScale(float ds, float px, float py) { updateMatrix postScale(ds, ds, px, py); } float getScale() { updateMatrix getValues(matrixValues); return matrixValues[Matrix MSCALE_X]; } void setTranslate(float dx, float dy) { updateMatrix postTranslate(dx, dy); } void reset() { updateMatrix reset(); } void updateMatrixBounds() { final RectF rect = getDrawRect(getDrawMatrix()); float dy = 0; float dx = 0; if (rect height() <= viewRect height()) { dy = (viewRect height() - rect height()) / 2 - rect top; } else if (rect top > 0) { dy = -rect top; } else if (rect bottom < viewRect height()) { dy = viewRect height() - rect bottom; } if (rect width() <= viewRect width()) { dx = (viewRect width() - rect width()) / 2 - rect left; } else if (rect left > 0) { dx = -rect left; } else if (rect right < viewRect width()) { dx = viewRect width() - rect right; } setTranslate(dx, dy); } RectF getDrawRect(Matrix matrix) { final Drawable drawable = getDrawable(); if (drawable != null) { drawRect set(0, 0, drawable getIntrinsicWidth(), drawable getIntrinsicHeight()); matrix mapRect(drawRect); } return drawRect; } Matrix getDrawMatrix() { drawMatrix set(baseMatrix); drawMatrix postConcat(updateMatrix); return drawMatrix; } void setImageMatrix() { updateMatrixBounds(); setScaleType(ScaleType MATRIX); setImageMatrix(getDrawMatrix()); } void animateScale(float start, float end, final float px, final float py) { final ValueAnimator animator = ValueAnimator ofFloat(start, end); animator setDuration(SCALE_ANIMATION_DURATION); animator setInterpolator(new AccelerateDecelerateInterpolator()); animator addUpdateListener(new ValueAnimator AnimatorUpdateListener() { @Override public void onAnimationUpdate(ValueAnimator valueAnimator) { final float scale = (float) valueAnimator getAnimatedValue(); final float ds = scale / getScale(); setScale(ds, px, py); setImageMatrix(); } }); animator start(); }}package com twitter sdk android core internal oauth;import com twitter sdk android core TwitterAuthConfig;import com twitter sdk android core TwitterAuthToken;import java util HashMap;import java util Map;public class OAuth1aHeaders { public static final String HEADER_AUTH_SERVICE_PROVIDER = "X-Auth-Service-Provider"; public static final String HEADER_AUTH_CREDENTIALS = "X-Verify-Credentials-Authorization";  public String getAuthorizationHeader(TwitterAuthConfig authConfig, TwitterAuthToken authToken, String callback, String method, String url, Map<String, String> postParams) { final OAuth1aParameters oAuth1aParameters = getOAuth1aParameters(authConfig, authToken, callback, method, url, postParams); return oAuth1aParameters getAuthorizationHeader(); }  public Map<String, String> getOAuthEchoHeaders(TwitterAuthConfig authConfig, TwitterAuthToken authToken, String callback, String method, String url, Map<String, String> postParams) { final Map<String, String> headers = new HashMap<>(2); final String authorizationHeader = getAuthorizationHeader(authConfig, authToken, callback, method, url, postParams); headers put(HEADER_AUTH_CREDENTIALS, authorizationHeader); headers put(HEADER_AUTH_SERVICE_PROVIDER, url); return headers; } OAuth1aParameters getOAuth1aParameters(TwitterAuthConfig authConfig, TwitterAuthToken authToken, String callback, String method, String url, Map<String, String> postParams) { return new OAuth1aParameters(authConfig, authToken, callback, method, url, postParams); }}package com twitter sdk android core internal network;import com twitter sdk android core Session;import com twitter sdk android core TwitterAuthConfig;import com twitter sdk android core TwitterAuthToken;import com twitter sdk android core internal oauth OAuth1aHeaders;import com twitter sdk android core internal oauth OAuthConstants;import java io IOException;import java util HashMap;import java util Locale;import java util Map;import io fabric sdk android services network UrlUtils;import okhttp3 FormBody;import okhttp3 HttpUrl;import okhttp3 Interceptor;import okhttp3 Request;import okhttp3 RequestBody;import okhttp3 Response;public class OAuth1aInterceptor implements Interceptor { final Session<? extends TwitterAuthToken> session; final TwitterAuthConfig authConfig; public OAuth1aInterceptor(Session<? extends TwitterAuthToken> session, TwitterAuthConfig authConfig) { this session = session; this authConfig = authConfig; } @Override public Response intercept(Chain chain) throws IOException { final Request request = chain request(); final Request hackRequest = request newBuilder()  url(urlWorkaround(request url()))  build(); final Request newRequest = hackRequest  newBuilder()  header(OAuthConstants HEADER_AUTHORIZATION, getAuthorizationHeader(hackRequest))  build(); return chain proceed(newRequest); } HttpUrl urlWorkaround(HttpUrl url) { final HttpUrl Builder builder = url newBuilder() query(null); final int size = url querySize(); for (int i = 0; i < size; i++) { builder addEncodedQueryParameter(UrlUtils percentEncode(url queryParameterName(i)), UrlUtils percentEncode(url queryParameterValue(i))); } return builder build(); } String getAuthorizationHeader(Request request) throws IOException { return new OAuth1aHeaders() getAuthorizationHeader(authConfig, session getAuthToken(), null, request method(), request url() toString(), getPostParams(request)); } Map<String, String> getPostParams(Request request) throws IOException { final Map<String, String> params = new HashMap<>(); if ("POST" equals(request method() toUpperCase(Locale US))) { final RequestBody output = request body(); if (output instanceof FormBody) { final FormBody body = (FormBody) output; for (int i = 0; i < body size(); i++) { params put(body encodedName(i), body value(i)); } } } return params; }}package com twitter sdk android core internal oauth;import io fabric sdk android Fabric;import io fabric sdk android services network HttpRequest;import io fabric sdk android services network UrlUtils;import com twitter sdk android core TwitterAuthConfig;import com twitter sdk android core TwitterAuthToken;import com twitter sdk android core TwitterCore;import java io UnsupportedEncodingException;import java net URI;import java security InvalidKeyException;import java security NoSuchAlgorithmException;import java security SecureRandom;import java util Locale;import java util Map;import java util TreeMap;import javax crypto Mac;import javax crypto SecretKey;import javax crypto spec SecretKeySpec;class OAuth1aParameters { private static final String VERSION = "1 0"; private static final String SIGNATURE_METHOD = "HMAC-SHA1";  private static final SecureRandom RAND = new SecureRandom(); private final TwitterAuthConfig authConfig; private final TwitterAuthToken authToken; private final String callback; private final String method; private final String url; private final Map<String, String> postParams; public OAuth1aParameters(TwitterAuthConfig authConfig, TwitterAuthToken authToken, String callback, String method, String url, Map<String, String> postParams) { this authConfig = authConfig; this authToken = authToken; this callback = callback; this method = method; this url = url; this postParams = postParams; }  public String getAuthorizationHeader() { final String nonce = getNonce(); final String timestamp = getTimestamp(); final String signatureBase = constructSignatureBase(nonce, timestamp); final String signature = calculateSignature(signatureBase); return constructAuthorizationHeader(nonce, timestamp, signature); } private String getNonce() { return String valueOf(System nanoTime()) + String valueOf(Math abs(RAND nextLong())); } private String getTimestamp() { final long secondsFromEpoch = System currentTimeMillis() / 1000; return Long toString(secondsFromEpoch); } String constructSignatureBase(String nonce, String timestamp) { // Get query parameters from request  final URI uri = URI create(url); final TreeMap<String, String> params = UrlUtils getQueryParams(uri, true); if (postParams != null) { params putAll(postParams); } // Add OAuth parameters  if (callback != null) { params put(OAuthConstants PARAM_CALLBACK, callback); } params put(OAuthConstants PARAM_CONSUMER_KEY, authConfig getConsumerKey()); params put(OAuthConstants PARAM_NONCE, nonce); params put(OAuthConstants PARAM_SIGNATURE_METHOD, SIGNATURE_METHOD); params put(OAuthConstants PARAM_TIMESTAMP, timestamp); if (authToken != null && authToken token != null) { params put(OAuthConstants PARAM_TOKEN, authToken token); } params put(OAuthConstants PARAM_VERSION, VERSION); // Construct the signature base  final String baseUrl = uri getScheme() + "://" + uri getHost() + uri getPath(); final StringBuilder sb = new StringBuilder()  append(method toUpperCase(Locale ENGLISH))  append('&')  append(UrlUtils percentEncode(baseUrl))  append('&')  append(getEncodedQueryParams(params)); return sb toString(); } private String getEncodedQueryParams(TreeMap<String, String> params) { final StringBuilder paramsBuf = new StringBuilder(); final int numParams = params size(); int current = 0; for (Map Entry<String, String> entry : params entrySet()) { paramsBuf append(UrlUtils percentEncode(UrlUtils percentEncode(entry getKey())))  append("%3D")  append(UrlUtils percentEncode(UrlUtils percentEncode(entry getValue()))); current += 1; if (current < numParams) { paramsBuf append("%26"); } } return paramsBuf toString(); } String calculateSignature(String signatureBase) { try { final String key = getSigningKey(); // Calculate the signature by passing both the signature base and signing key to the // HMAC-SHA1 hashing algorithm final byte[] signatureBaseBytes = signatureBase getBytes(UrlUtils UTF8); final byte[] keyBytes = key getBytes(UrlUtils UTF8); final SecretKey secretKey = new SecretKeySpec(keyBytes, "HmacSHA1"); final Mac mac = Mac getInstance("HmacSHA1"); mac init(secretKey); final byte[] signatureBytes = mac doFinal(signatureBaseBytes); return new String( HttpRequest Base64 encodeBytesToBytes(signatureBytes, 0, signatureBytes length), UrlUtils UTF8); } catch (InvalidKeyException e) { Fabric getLogger() e(TwitterCore TAG, "Failed to calculate signature", e); return ""; } catch (NoSuchAlgorithmException e) { Fabric getLogger() e(TwitterCore TAG, "Failed to calculate signature", e); return ""; } catch (UnsupportedEncodingException e) { Fabric getLogger() e(TwitterCore TAG, "Failed to calculate signature", e); return ""; } } private String getSigningKey() { final String tokenSecret = authToken != null ? authToken secret : null; return new StringBuilder()  append(UrlUtils urlEncode(authConfig getConsumerSecret()))  append('&')  append(UrlUtils urlEncode(tokenSecret))  toString(); } String constructAuthorizationHeader(String nonce, String timestamp, String signature) { final StringBuilder sb = new StringBuilder("OAuth"); appendParameter(sb, OAuthConstants PARAM_CALLBACK, callback); appendParameter(sb, OAuthConstants PARAM_CONSUMER_KEY, authConfig getConsumerKey()); appendParameter(sb, OAuthConstants PARAM_NONCE, nonce); appendParameter(sb, OAuthConstants PARAM_SIGNATURE, signature); appendParameter(sb, OAuthConstants PARAM_SIGNATURE_METHOD, SIGNATURE_METHOD); appendParameter(sb, OAuthConstants PARAM_TIMESTAMP, timestamp); final String token = authToken != null ? authToken token : null; appendParameter(sb, OAuthConstants PARAM_TOKEN, token); appendParameter(sb, OAuthConstants PARAM_VERSION, VERSION); // Remove the extra ',' at the end  return sb substring(0, sb length() - 1); } private void appendParameter(StringBuilder sb, String name, String value) { if (value != null) { sb append(' ')  append(UrlUtils percentEncode(name)) append("=\"")  append(UrlUtils percentEncode(value)) append("\","); } }}package com twitter sdk android core internal oauth;import android net Uri;import io fabric sdk android services network UrlUtils;import com twitter sdk android core Callback;import com twitter sdk android core Result;import com twitter sdk android core TwitterCore;import com twitter sdk android core TwitterAuthConfig;import com twitter sdk android core TwitterAuthException;import com twitter sdk android core TwitterAuthToken;import com twitter sdk android core TwitterException;import com twitter sdk android core internal TwitterApi;import java io BufferedReader;import java io IOException;import java io InputStreamReader;import java util TreeMap;import javax net ssl SSLSocketFactory;import okhttp3 ResponseBody;import retrofit2 Call;import retrofit2 http Header;import retrofit2 http POST;import retrofit2 http Query;public class OAuth1aService extends OAuthService { interface OAuthApi { @POST("/oauth/request_token") Call<ResponseBody> getTempToken(@Header(OAuthConstants HEADER_AUTHORIZATION) String auth); @POST("/oauth/access_token") Call<ResponseBody> getAccessToken(@Header(OAuthConstants HEADER_AUTHORIZATION) String auth, @Query(OAuthConstants PARAM_VERIFIER) String verifier); } private static final String RESOURCE_OAUTH = "oauth"; private static final String CALLBACK_URL = "twittersdk://callback"; private static final String PARAM_SCREEN_NAME = "screen_name"; private static final String PARAM_USER_ID = "user_id"; OAuthApi api; public OAuth1aService(TwitterCore twitterCore, SSLSocketFactory sslSocketFactory, TwitterApi api) { super(twitterCore, sslSocketFactory, api); this api = getRetrofit() create(OAuthApi class); }  public void requestTempToken(final Callback<OAuthResponse> callback) { final TwitterAuthConfig config = getTwitterCore() getAuthConfig(); final String url = getTempTokenUrl(); api getTempToken(new OAuth1aHeaders() getAuthorizationHeader(config, null, buildCallbackUrl(config), "POST", url, null)) enqueue(getCallbackWrapper(callback)); } String getTempTokenUrl() { return getApi() getBaseHostUrl() + "/oauth/request_token"; }  public String buildCallbackUrl(TwitterAuthConfig authConfig) { return Uri parse(CALLBACK_URL) buildUpon()  appendQueryParameter("version", getTwitterCore() getVersion())  appendQueryParameter("app", authConfig getConsumerKey())  build()  toString(); }  public void requestAccessToken(final Callback<OAuthResponse> callback, TwitterAuthToken requestToken, String verifier) { final String url = getAccessTokenUrl(); final String authHeader = new OAuth1aHeaders() getAuthorizationHeader(getTwitterCore()  getAuthConfig(), requestToken, null, "POST", url, null); api getAccessToken(authHeader, verifier) enqueue(getCallbackWrapper(callback)); } String getAccessTokenUrl() { return getApi() getBaseHostUrl() + "/oauth/access_token"; }  public String getAuthorizeUrl(TwitterAuthToken requestToken) { // https://api twitter com/oauth/authorize?oauth_token=%s return getApi() buildUponBaseHostUrl(RESOURCE_OAUTH, "authorize")  appendQueryParameter(OAuthConstants PARAM_TOKEN, requestToken token)  build()  toString(); }  public static OAuthResponse parseAuthResponse(String response) { final TreeMap<String, String> params = UrlUtils getQueryParams(response, false); final String token = params get(OAuthConstants PARAM_TOKEN); final String secret = params get(OAuthConstants PARAM_TOKEN_SECRET); final String userName = params get(PARAM_SCREEN_NAME); final long userId; if (params containsKey(PARAM_USER_ID)) { userId = Long parseLong(params get(PARAM_USER_ID)); } else { userId = 0L; } if (token == null || secret == null) { return null; } else { return new OAuthResponse(new TwitterAuthToken(token, secret), userName, userId); } } Callback<ResponseBody> getCallbackWrapper(final Callback<OAuthResponse> callback) { return new Callback<ResponseBody>() { @Override public void success(Result<ResponseBody> result) { //Try to get response body BufferedReader reader = null; final StringBuilder sb = new StringBuilder(); try { try { reader = new BufferedReader( new InputStreamReader(result data byteStream())); String line; while ((line = reader readLine()) != null) { sb append(line); } } finally { if (reader != null) { reader close(); } } final String responseAsStr = sb toString(); final OAuthResponse authResponse = parseAuthResponse(responseAsStr); if (authResponse == null) { callback failure(new TwitterAuthException( "Failed to parse auth response: " + responseAsStr)); } else { callback success(new Result<>(authResponse, null)); } } catch (IOException e) { callback failure(new TwitterAuthException(e getMessage(), e)); } } @Override public void failure(TwitterException exception) { callback failure(exception); } }; }}package com twitter sdk android core internal oauth;import io fabric sdk android Fabric;import io fabric sdk android services network HttpRequest;import io fabric sdk android services network UrlUtils;import com twitter sdk android core Callback;import com twitter sdk android core Result;import com twitter sdk android core TwitterCore;import com twitter sdk android core TwitterAuthConfig;import com twitter sdk android core TwitterException;import com twitter sdk android core internal TwitterApi;import javax net ssl SSLSocketFactory;import retrofit2 Call;import retrofit2 http Field;import retrofit2 http FormUrlEncoded;import retrofit2 http Header;import retrofit2 http Headers;import retrofit2 http POST;public class OAuth2Service extends OAuthService { OAuth2Api api; interface OAuth2Api { @POST("/1 1/guest/activate json") Call<GuestTokenResponse> getGuestToken( @Header(OAuthConstants HEADER_AUTHORIZATION) String auth); @Headers("Content-Type: application/x-www-form-urlencoded;charset=UTF-8") @FormUrlEncoded @POST("/oauth2/token") Call<OAuth2Token> getAppAuthToken(@Header(OAuthConstants HEADER_AUTHORIZATION) String auth, @Field(OAuthConstants PARAM_GRANT_TYPE) String grantType); } public OAuth2Service(TwitterCore twitterCore, SSLSocketFactory sslSocketFactory, TwitterApi api) { super(twitterCore, sslSocketFactory, api); this api = getRetrofit() create(OAuth2Api class); }  public void requestGuestAuthToken(final Callback<GuestAuthToken> callback) { final Callback<OAuth2Token> appAuthCallback = new Callback<OAuth2Token>() { @Override public void success(Result<OAuth2Token> result) { final OAuth2Token appAuthToken = result data; // Got back an app auth token, now request a guest auth token  final Callback<GuestTokenResponse> guestTokenCallback = new Callback<GuestTokenResponse>() { @Override public void success(Result<GuestTokenResponse> result) { // Return a GuestAuthToken that includes the guestToken  final GuestAuthToken guestAuthToken = new GuestAuthToken( appAuthToken getTokenType(), appAuthToken getAccessToken(), result data guestToken); callback success(new Result<>(guestAuthToken, null)); } @Override public void failure(TwitterException error) { Fabric getLogger() e(TwitterCore TAG, "Your app may not allow guest auth  Please talk to us " + "regarding upgrading your consumer key ", error); callback failure(error); } }; requestGuestToken(guestTokenCallback, appAuthToken); } @Override public void failure(TwitterException error) { Fabric getLogger() e(TwitterCore TAG, "Failed to get app auth token", error); if (callback != null) { callback failure(error); } } }; requestAppAuthToken(appAuthCallback); }  void requestAppAuthToken(final Callback<OAuth2Token> callback) { api getAppAuthToken(getAuthHeader(), OAuthConstants GRANT_TYPE_CLIENT_CREDENTIALS)  enqueue(callback); }  void requestGuestToken(final Callback<GuestTokenResponse> callback, OAuth2Token appAuthToken) { api getGuestToken(getAuthorizationHeader(appAuthToken)) enqueue(callback); }  private String getAuthorizationHeader(OAuth2Token token) { return OAuthConstants AUTHORIZATION_BEARER + " " + token getAccessToken(); } private String getAuthHeader() { final TwitterAuthConfig authConfig = getTwitterCore() getAuthConfig(); return OAuthConstants AUTHORIZATION_BASIC + " " + HttpRequest Base64 encode( UrlUtils percentEncode(authConfig getConsumerKey()) + ":" + UrlUtils percentEncode(authConfig getConsumerSecret())); }}package com twitter sdk android core internal oauth;import android os Parcel;import android os Parcelable;import com google gson annotations SerializedName;import com twitter sdk android core AuthToken;public class OAuth2Token extends AuthToken implements Parcelable { public static final String TOKEN_TYPE_BEARER = "bearer"; public static final Parcelable Creator<OAuth2Token> CREATOR = new Parcelable Creator<OAuth2Token>() { public OAuth2Token createFromParcel(Parcel in) { return new OAuth2Token(in); } public OAuth2Token[] newArray(int size) { return new OAuth2Token[size]; } }; @SerializedName("token_type") private final String tokenType; @SerializedName("access_token") private final String accessToken; public OAuth2Token(String tokenType, String accessToken) { super(); this tokenType = tokenType; this accessToken = accessToken; } public OAuth2Token(String tokenType, String accessToken, long createdAt) { super(createdAt); this tokenType = tokenType; this accessToken = accessToken; } private OAuth2Token(Parcel in) { super(); tokenType = in readString(); accessToken = in readString(); } public String getTokenType() { return tokenType; } public String getAccessToken() { return accessToken; } @Override public boolean isExpired() { // Oauth 2 0 tokens do not have a common expiration policy  Returning false indicates // the token is not known to have expired  App auth tokens only expire when manually // invalidated, while guest auth tokens are known to have expired after 3 hours  return false; } @Override public int describeContents() { return 0; } @Override public void writeToParcel(Parcel out, int flags) { out writeString(tokenType); out writeString(accessToken); } @Override public boolean equals(Object o) { if (this == o) return true; if (o == null || getClass() != o getClass()) return false; final OAuth2Token that = (OAuth2Token) o; if (accessToken != null ? !accessToken equals(that accessToken) : that accessToken != null) return false; if (tokenType != null ? !tokenType equals(that tokenType) : that tokenType != null) return false; return true; } @Override public int hashCode() { int result = tokenType != null ? tokenType hashCode() : 0; result = 31 * result + (accessToken != null ? accessToken hashCode() : 0); return result; }}package com twitter sdk android core identity;import android app Activity;import android content Intent;import android os Bundle;import android view View;import android webkit WebView;import android widget ProgressBar;import com twitter sdk android core R;import com twitter sdk android core TwitterAuthConfig;import com twitter sdk android core TwitterAuthException;import com twitter sdk android core TwitterCore;import com twitter sdk android core internal TwitterApi;import com twitter sdk android core internal oauth OAuth1aService;// This activity assumes it will handle configuration changes itself and MUST have the// following attribute defined in the AndroidManifest xml// file: android:configChanges="orientation|screenSize"public class OAuthActivity extends Activity implements OAuthController Listener { static final String EXTRA_AUTH_CONFIG = "auth_config"; private static final String STATE_PROGRESS = "progress"; OAuthController oAuthController; private ProgressBar spinner; private WebView webView; @Override protected void onCreate(Bundle savedInstanceState) { super onCreate(savedInstanceState); setContentView(R layout tw__activity_oauth); spinner = (ProgressBar) findViewById(R id tw__spinner); webView = (WebView) findViewById(R id tw__web_view); final boolean showProgress; if (savedInstanceState != null) { showProgress = savedInstanceState getBoolean(STATE_PROGRESS, false); } else { showProgress = true; } spinner setVisibility(showProgress ? View VISIBLE : View GONE); final TwitterCore kit = TwitterCore getInstance(); oAuthController = new OAuthController(spinner, webView, (TwitterAuthConfig) getIntent() getParcelableExtra(EXTRA_AUTH_CONFIG), new OAuth1aService(kit, kit getSSLSocketFactory(), new TwitterApi()), this); oAuthController startAuth(); } @Override protected void onSaveInstanceState(Bundle outState) { if (spinner getVisibility() == View VISIBLE) { outState putBoolean(STATE_PROGRESS, true); } super onSaveInstanceState(outState); } @Override public void onBackPressed() { oAuthController handleAuthError(RESULT_CANCELED, new TwitterAuthException("Authorization failed, request was canceled ")); } @Override public void onComplete(int resultCode, Intent data) { setResult(resultCode, data); finish(); }}package com twitter sdk android core identity;import android app Activity;import android content Context;import android content Intent;import io fabric sdk android FabricActivityTestCase;import io fabric sdk android FabricTestUtils;import com twitter sdk android core TwitterAuthConfig;import com twitter sdk android core TwitterAuthException;import com twitter sdk android core TwitterCore;import org mockito ArgumentCaptor;import static org mockito Mockito *;public class OAuthActivityTest extends FabricActivityTestCase<OAuthActivity> { private Context context; private TwitterCore twitterCore; private OAuthController mockController; public OAuthActivityTest() { super(OAuthActivity class); } @Override protected void setUp() throws Exception { super setUp(); context = getInstrumentation() getTargetContext(); twitterCore = new TwitterCore(new TwitterAuthConfig("", "")); mockController = mock(TestOAuthController class); FabricTestUtils resetFabric(); FabricTestUtils with(context, twitterCore); } @Override protected void tearDown() throws Exception { FabricTestUtils resetFabric(); super tearDown(); } private void init() { final Intent intent = new Intent(context, OAuthActivity class)  putExtra(OAuthActivity EXTRA_AUTH_CONFIG, twitterCore getAuthConfig()); final OAuthActivity activity = startActivity(intent, null, null); activity oAuthController = mockController; } public void testOnBackPressed() { init(); getActivity() onBackPressed(); final ArgumentCaptor<TwitterAuthException> exceptionArgCaptor = ArgumentCaptor forClass(TwitterAuthException class); verify(mockController) handleAuthError(eq(Activity RESULT_CANCELED), exceptionArgCaptor capture()); assertEquals("Authorization failed, request was canceled ", exceptionArgCaptor getValue() getMessage()); } public void testOnComplete() { init(); getActivity() onComplete(Activity RESULT_OK, new Intent()); assertTrue(isFinishCalled()); }}package com twitter sdk android core internal oauth;public class OAuthConstants { public static final String HEADER_AUTHORIZATION = "Authorization"; public static final String HEADER_GUEST_TOKEN = "x-guest-token"; // OAuth1 0a parameter constants  public static final String PARAM_CALLBACK = "oauth_callback"; public static final String PARAM_CONSUMER_KEY = "oauth_consumer_key"; public static final String PARAM_NONCE = "oauth_nonce"; public static final String PARAM_SIGNATURE_METHOD = "oauth_signature_method"; public static final String PARAM_TIMESTAMP = "oauth_timestamp"; public static final String PARAM_TOKEN = "oauth_token"; public static final String PARAM_TOKEN_SECRET = "oauth_token_secret"; public static final String PARAM_VERSION = "oauth_version"; public static final String PARAM_SIGNATURE = "oauth_signature"; public static final String PARAM_VERIFIER = "oauth_verifier"; // OAuth2 public static final String AUTHORIZATION_BASIC = "Basic"; public static final String AUTHORIZATION_BEARER = "Bearer"; public static final String PARAM_GRANT_TYPE = "grant_type"; public static final String GRANT_TYPE_CLIENT_CREDENTIALS = "client_credentials";}package com twitter sdk android core identity;import android app Activity;import android content Intent;import android os Bundle;import android view View;import android webkit WebChromeClient;import android webkit WebSettings;import android webkit WebView;import android webkit WebViewClient;import android widget ProgressBar;import io fabric sdk android Fabric;import com twitter sdk android core Callback;import com twitter sdk android core Result;import com twitter sdk android core TwitterAuthConfig;import com twitter sdk android core TwitterAuthException;import com twitter sdk android core TwitterAuthToken;import com twitter sdk android core TwitterCore;import com twitter sdk android core TwitterException;import com twitter sdk android core internal oauth OAuth1aService;import com twitter sdk android core internal oauth OAuthConstants;import com twitter sdk android core internal oauth OAuthResponse;class OAuthController implements OAuthWebViewClient Listener { interface Listener { void onComplete(int resultCode, Intent data); } final Listener listener; TwitterAuthToken requestToken; private final ProgressBar spinner; private final WebView webView; private final TwitterAuthConfig authConfig; private final OAuth1aService oAuth1aService; OAuthController(ProgressBar spinner, WebView webView, TwitterAuthConfig authConfig, OAuth1aService oAuth1aService, Listener listener) { this spinner = spinner; this webView = webView; this authConfig = authConfig; this oAuth1aService = oAuth1aService; this listener = listener; } void startAuth() { // Step 1  Obtain a request token to start the sign in flow  Fabric getLogger() d(TwitterCore TAG, "Obtaining request token to start the sign in flow"); oAuth1aService requestTempToken(newRequestTempTokenCallback()); }  Callback<OAuthResponse> newRequestTempTokenCallback() { return new Callback<OAuthResponse>() { @Override public void success(Result<OAuthResponse> result) { requestToken = result data authToken; final String authorizeUrl = oAuth1aService getAuthorizeUrl(requestToken); // Step 2  Redirect user to web view to complete authorization flow  Fabric getLogger() d(TwitterCore TAG, "Redirecting user to web view to complete authorization flow"); setUpWebView(webView, new OAuthWebViewClient(oAuth1aService buildCallbackUrl(authConfig), OAuthController this), authorizeUrl, new OAuthWebChromeClient()); } @Override public void failure(TwitterException error) { Fabric getLogger() e(TwitterCore TAG, "Failed to get request token", error); // Create new exception that can be safely serialized since Retrofit errors may // throw a NotSerializableException  handleAuthError(AuthHandler RESULT_CODE_ERROR, new TwitterAuthException("Failed to get request token")); } }; } protected void handleAuthError(int resultCode, TwitterAuthException error) { final Intent data = new Intent(); data putExtra(AuthHandler EXTRA_AUTH_ERROR, error); listener onComplete(resultCode, data); }  void setUpWebView(WebView webView, WebViewClient webViewClient, String url, WebChromeClient webChromeClient) { final WebSettings webSettings = webView getSettings(); webSettings setAllowFileAccess(false); webSettings setJavaScriptEnabled(false); webSettings setSaveFormData(false); webView setVerticalScrollBarEnabled(false); webView setHorizontalScrollBarEnabled(false); webView setWebViewClient(webViewClient); webView loadUrl(url); webView setVisibility(View INVISIBLE); webView setWebChromeClient(webChromeClient); } private void handleWebViewSuccess(Bundle bundle) { Fabric getLogger() d(TwitterCore TAG, "OAuth web view completed successfully"); if (bundle != null) { final String verifier = bundle getString(OAuthConstants PARAM_VERIFIER); if (verifier != null) { // Step 3  Convert the request token to an access token  Fabric getLogger() d(TwitterCore TAG, "Converting the request token to an access token "); oAuth1aService requestAccessToken(newRequestAccessTokenCallback(), requestToken, verifier); return; } } // If we get here, we failed to complete authorization  Fabric getLogger() e(TwitterCore TAG, "Failed to get authorization, bundle incomplete " + bundle, null); handleAuthError(AuthHandler RESULT_CODE_ERROR, new TwitterAuthException("Failed to get authorization, bundle incomplete")); }  Callback<OAuthResponse> newRequestAccessTokenCallback() { return new Callback<OAuthResponse>() { @Override public void success(Result<OAuthResponse> result) { final Intent data = new Intent(); final OAuthResponse response = result data; data putExtra(AuthHandler EXTRA_SCREEN_NAME, response userName); data putExtra(AuthHandler EXTRA_USER_ID, response userId); data putExtra(AuthHandler EXTRA_TOKEN, response authToken token); data putExtra(AuthHandler EXTRA_TOKEN_SECRET, response authToken secret); listener onComplete(Activity RESULT_OK, data); } @Override public void failure(TwitterException error) { Fabric getLogger() e(TwitterCore TAG, "Failed to get access token", error); // Create new exception that can be safely serialized since Retrofit errors may // throw a NotSerializableException  handleAuthError(AuthHandler RESULT_CODE_ERROR, new TwitterAuthException("Failed to get access token")); } }; } private void handleWebViewError(WebViewException error) { Fabric getLogger() e(TwitterCore TAG, "OAuth web view completed with an error", error); handleAuthError(AuthHandler RESULT_CODE_ERROR, new TwitterAuthException("OAuth web view completed with an error")); } private void dismissWebView() { webView stopLoading(); dismissSpinner(); } private void dismissSpinner() { spinner setVisibility(View GONE); } @Override public void onPageFinished(WebView webView, String url) { dismissSpinner(); webView setVisibility(View VISIBLE); } @Override public void onSuccess(Bundle bundle) { handleWebViewSuccess(bundle); dismissWebView(); } @Override public void onError(WebViewException exception) { handleWebViewError(exception); dismissWebView(); }}package com twitter sdk android core identity;import android app Activity;import android content Intent;import com twitter sdk android core Callback;import com twitter sdk android core TwitterAuthConfig;import com twitter sdk android core TwitterSession;class OAuthHandler extends AuthHandler {  public OAuthHandler(TwitterAuthConfig authConfig, Callback<TwitterSession> callback, int requestCode) { super(authConfig, callback, requestCode); } @Override public boolean authorize(Activity activity) { activity startActivityForResult(newIntent(activity), requestCode); return true; } Intent newIntent(Activity activity) { final Intent intent = new Intent(activity, OAuthActivity class); intent putExtra(OAuthActivity EXTRA_AUTH_CONFIG, getAuthConfig()); return intent; }}package com twitter sdk android core internal oauth;import android os Parcel;import android os Parcelable;import com twitter sdk android core TwitterAuthToken;public class OAuthResponse implements Parcelable { public static final Parcelable Creator<OAuthResponse> CREATOR = new Parcelable Creator<OAuthResponse>() { public OAuthResponse createFromParcel(Parcel in) { return new OAuthResponse(in); } public OAuthResponse[] newArray(int size) { return new OAuthResponse[size]; } };  public final TwitterAuthToken authToken;  public final String userName;  public final long userId; public OAuthResponse(TwitterAuthToken authToken, String userName, long userId) { this authToken = authToken; this userName = userName; this userId = userId; } private OAuthResponse(Parcel in) { this authToken = in readParcelable(TwitterAuthToken class getClassLoader()); this userName = in readString(); this userId = in readLong(); } @Override public String toString() { return new StringBuilder()  append("authToken=") append(authToken)  append(",userName=") append(userName)  append(",userId=") append(userId)  toString(); } @Override public int describeContents() { return 0; } @Override public void writeToParcel(Parcel out, int flags) { out writeParcelable(this authToken, flags); out writeString(this userName); out writeLong(this userId); }}package com twitter sdk android core internal oauth;import com twitter sdk android core TwitterCore;import com twitter sdk android core internal TwitterApi;import java io IOException;import javax net ssl SSLSocketFactory;import okhttp3 Interceptor;import okhttp3 OkHttpClient;import okhttp3 Request;import okhttp3 Response;import retrofit2 Retrofit;import retrofit2 converter gson GsonConverterFactory;abstract class OAuthService { private static final String CLIENT_NAME = "TwitterAndroidSDK"; private final TwitterCore twitterCore; private final TwitterApi api; private final String userAgent; private final Retrofit retrofit; OAuthService(TwitterCore twitterCore, SSLSocketFactory sslSocketFactory, TwitterApi api) { this twitterCore = twitterCore; this api = api; userAgent = TwitterApi buildUserAgent(CLIENT_NAME, twitterCore getVersion()); if (sslSocketFactory == null) { throw new IllegalArgumentException("sslSocketFactory must not be null"); } final OkHttpClient client = new OkHttpClient Builder()  sslSocketFactory(sslSocketFactory)  addInterceptor(new Interceptor() { @Override public Response intercept(Chain chain) throws IOException { final Request request = chain request() newBuilder()  header("User-Agent", getUserAgent())  build(); return chain proceed(request); } })  build(); retrofit = new Retrofit Builder()  baseUrl(getApi() getBaseHostUrl())  client(client)  addConverterFactory(GsonConverterFactory create())  build(); } protected TwitterCore getTwitterCore() { return twitterCore; } protected TwitterApi getApi() { return api; } protected String getUserAgent() { return userAgent; } protected Retrofit getRetrofit() { return retrofit; }}package com twitter sdk android core;import io fabric sdk android services network HttpMethod;import com twitter sdk android core internal TwitterApi;import com twitter sdk android core internal oauth OAuth1aHeaders;import java util Map;public class OAuthSigning { static final String VERIFY_CREDENTIALS_URL = TwitterApi BASE_HOST_URL + "/1 1/account/verify_credentials json"; final TwitterAuthConfig authConfig; final TwitterAuthToken authToken; final OAuth1aHeaders oAuth1aHeaders;  public OAuthSigning(TwitterAuthConfig authConfig, TwitterAuthToken authToken) { this(authConfig, authToken, new OAuth1aHeaders()); } OAuthSigning(TwitterAuthConfig authConfig, TwitterAuthToken authToken, OAuth1aHeaders oAuth1aHeaders) { if (authConfig == null) { throw new IllegalArgumentException("authConfig must not be null"); } if (authToken == null) { throw new IllegalArgumentException("authToken must not be null"); } this authConfig = authConfig; this authToken = authToken; this oAuth1aHeaders = oAuth1aHeaders; }  public String getAuthorizationHeader(String method, String url, Map<String, String> postParams) { return oAuth1aHeaders getAuthorizationHeader(authConfig, authToken, null, method, url, postParams); }  public Map<String, String> getOAuthEchoHeaders(String method, String url, Map<String, String> postParams) { return oAuth1aHeaders getOAuthEchoHeaders(authConfig, authToken, null, method, url, postParams); }  public Map<String, String> getOAuthEchoHeadersForVerifyCredentials() { return oAuth1aHeaders getOAuthEchoHeaders(authConfig, authToken, null, HttpMethod GET name(), VERIFY_CREDENTIALS_URL, null); }}package com twitter sdk android core identity;import android webkit ConsoleMessage;import android webkit WebChromeClient;class OAuthWebChromeClient extends WebChromeClient { @Override public boolean onConsoleMessage(ConsoleMessage consoleMessage) { //Do not log return true; }}package com twitter sdk android core identity;import android net http SslError;import android os Bundle;import android webkit SslErrorHandler;import android webkit WebView;import android webkit WebViewClient;import java net URI;import java util TreeMap;import io fabric sdk android services network UrlUtils;class OAuthWebViewClient extends WebViewClient { interface Listener { void onPageFinished(WebView webView, String url); void onSuccess(Bundle bundle); void onError(WebViewException exception); } private final String completeUrl; private final Listener listener; public OAuthWebViewClient(String completeUrl, Listener listener) { this completeUrl = completeUrl; this listener = listener; } @Override public void onPageFinished(WebView view, String url) { super onPageFinished(view, url); listener onPageFinished(view, url); } @Override public boolean shouldOverrideUrlLoading(WebView view, String url) { if (url startsWith(completeUrl)) { final TreeMap<String, String> params = UrlUtils getQueryParams(URI create(url), false); final Bundle bundle = new Bundle(params size()); for (TreeMap Entry<String, String> entry : params entrySet()) { bundle putString(entry getKey(), entry getValue()); } listener onSuccess(bundle); return true; } return super shouldOverrideUrlLoading(view, url); } @Override public void onReceivedError(WebView view, int errorCode, String description, String failingUrl) { super onReceivedError(view, errorCode, description, failingUrl); listener onError(new WebViewException(errorCode, description, failingUrl)); } @Override public void onReceivedSslError(WebView view, SslErrorHandler handler, SslError error) { super onReceivedSslError(view, handler, error); listener onError(new WebViewException(error getPrimaryError(), null, null)); }}package com twitter sdk android core internal util;import android annotation TargetApi;import android content Context;import android os Build;import android util AttributeSet;import android widget ScrollView;public class ObservableScrollView extends ScrollView { ScrollViewListener scrollViewListener; public ObservableScrollView(Context context) { super(context); } public ObservableScrollView(Context context, AttributeSet attrs) { super(context, attrs); } public ObservableScrollView(Context context, AttributeSet attrs, int defStyleAttr) { super(context, attrs, defStyleAttr); } @TargetApi(Build VERSION_CODES LOLLIPOP) public ObservableScrollView(Context context, AttributeSet attrs, int defStyleAttr, int defStyleRes) { super(context, attrs, defStyleAttr, defStyleRes); } @Override protected void onScrollChanged(int currentX, int currentY, int oldX, int oldY) { super onScrollChanged(currentX, currentY, oldX, oldY); if (scrollViewListener != null) { scrollViewListener onScrollChanged(currentY); } } public void setScrollViewListener(ScrollViewListener scrollViewListener) { this scrollViewListener = scrollViewListener; } public interface ScrollViewListener { void onScrollChanged(int scrollY); }}package com twitter sdk android core internal util;import android test AndroidTestCase;import static org mockito Mockito mock;import static org mockito Mockito verify;public class ObservableScrollViewTest extends AndroidTestCase { static final int TEST_SCROLL_X = 10; public void testOnScrollChanged() { final ObservableScrollView scrollView = new ObservableScrollView(getContext()); final ObservableScrollView ScrollViewListener listener = mock(ObservableScrollView ScrollViewListener class); scrollView setScrollViewListener(listener); scrollView onScrollChanged(0, TEST_SCROLL_X, 0, 0); verify(listener) onScrollChanged(TEST_SCROLL_X); }}package com twitter sdk android core internal network;import com twitter sdk android core GuestSessionProvider;import com twitter sdk android core Session;import com twitter sdk android core TwitterAuthConfig;import com twitter sdk android core TwitterAuthToken;import javax net ssl SSLSocketFactory;import okhttp3 OkHttpClient;public class OkHttpClientHelper { public static OkHttpClient getOkHttpClient(GuestSessionProvider guestSessionProvider, SSLSocketFactory sslSocketFactory) { return getOkHttpClientBuilder(guestSessionProvider, sslSocketFactory) build(); } public static OkHttpClient Builder getOkHttpClientBuilder( GuestSessionProvider guestSessionProvider, SSLSocketFactory sslSocketFactory) { return new OkHttpClient Builder()  sslSocketFactory(sslSocketFactory)  authenticator(new GuestAuthenticator(guestSessionProvider))  addInterceptor(new GuestAuthInterceptor(guestSessionProvider))  addNetworkInterceptor(new GuestAuthNetworkInterceptor()); } public static OkHttpClient getOkHttpClient(Session<? extends TwitterAuthToken> session, TwitterAuthConfig authConfig, SSLSocketFactory sslSocketFactory) { return getOkHttpClientBuilder(session, authConfig, sslSocketFactory) build(); } public static OkHttpClient Builder getOkHttpClientBuilder( Session<? extends TwitterAuthToken> session, TwitterAuthConfig authConfig, SSLSocketFactory sslSocketFactory) { if (session == null) { throw new IllegalArgumentException("Session must not be null "); } return new OkHttpClient Builder()  sslSocketFactory(sslSocketFactory)  addInterceptor(new OAuth1aInterceptor(session, authConfig)); }}package com twitter sdk android core;import io fabric sdk android services persistence PreferenceStore;import io fabric sdk android services persistence PreferenceStoreStrategy;import io fabric sdk android services persistence SerializationStrategy;import java util Collections;import java util Map;import java util concurrent ConcurrentHashMap;import java util concurrent atomic AtomicReference;public class PersistedSessionManager<T extends Session> implements SessionManager<T> { private static final int NUM_SESSIONS = 1; private final PreferenceStore preferenceStore; private final SerializationStrategy<T> serializer; private final ConcurrentHashMap<Long, T> sessionMap; private final ConcurrentHashMap<Long, PreferenceStoreStrategy<T>> storageMap; private final PreferenceStoreStrategy<T> activeSessionStorage; private final AtomicReference<T> activeSessionRef; private final String prefKeySession; private volatile boolean restorePending = true; public PersistedSessionManager(PreferenceStore preferenceStore, SerializationStrategy<T> serializer, String prefKeyActiveSession, String prefKeySession) { this(preferenceStore, serializer, new ConcurrentHashMap<Long, T>(NUM_SESSIONS), new ConcurrentHashMap<Long, PreferenceStoreStrategy<T>>(NUM_SESSIONS), new PreferenceStoreStrategy<>(preferenceStore, serializer, prefKeyActiveSession), prefKeySession); } PersistedSessionManager(PreferenceStore preferenceStore, SerializationStrategy<T> serializer, ConcurrentHashMap<Long, T> sessionMap, ConcurrentHashMap<Long, PreferenceStoreStrategy<T>> storageMap, PreferenceStoreStrategy<T> activesSessionStorage, String prefKeySession) { this preferenceStore = preferenceStore; this serializer = serializer; this sessionMap = sessionMap; this storageMap = storageMap; this activeSessionStorage = activesSessionStorage; this activeSessionRef = new AtomicReference<>(); this prefKeySession = prefKeySession; } void restoreAllSessionsIfNecessary() { // Only restore once if (restorePending) { restoreAllSessions(); } } private synchronized void restoreAllSessions() { if (restorePending) { restoreActiveSession(); restoreSessions(); restorePending = false; } } private void restoreSessions() { T session; final Map<String, ?> preferences = preferenceStore get() getAll(); for (Map Entry<String, ?> entry : preferences entrySet()) { if (isSessionPreferenceKey(entry getKey())) { session = serializer deserialize((String) entry getValue()); if (session != null) { internalSetSession(session getId(), session, false); } } } } private void restoreActiveSession() { final T session = activeSessionStorage restore(); if (session != null) { internalSetSession(session getId(), session, false); } } boolean isSessionPreferenceKey(String preferenceKey) { return preferenceKey startsWith(prefKeySession); }  @Override public T getActiveSession() { restoreAllSessionsIfNecessary(); return activeSessionRef get(); }  @Override public void setActiveSession(T session) { if (session == null) { throw new IllegalArgumentException("Session must not be null!"); } restoreAllSessionsIfNecessary(); internalSetSession(session getId(), session, true); }  @Override public void clearActiveSession() { restoreAllSessionsIfNecessary(); if (activeSessionRef get() != null) { clearSession(activeSessionRef get() getId()); } }  @Override public T getSession(long id) { restoreAllSessionsIfNecessary(); return sessionMap get(id); }  @Override public void setSession(long id, T session) { if (session == null) { throw new IllegalArgumentException("Session must not be null!"); } restoreAllSessionsIfNecessary(); internalSetSession(id, session, false); } @Override public Map<Long, T> getSessionMap() { restoreAllSessionsIfNecessary(); return Collections unmodifiableMap(sessionMap); } private void internalSetSession(long id, T session, boolean forceUpdate) { sessionMap put(id, session); PreferenceStoreStrategy<T> storage = storageMap get(id); if (storage == null) { storage = new PreferenceStoreStrategy<>(preferenceStore, serializer, getPrefKey(id)); storageMap putIfAbsent(id, storage); } storage save(session); final T activeSession = activeSessionRef get(); if (activeSession == null || activeSession getId() == id || forceUpdate) { synchronized (this) { activeSessionRef compareAndSet(activeSession, session); activeSessionStorage save(session); } } } String getPrefKey(long id) { return prefKeySession + "_" + id; }  @Override public void clearSession(long id) { restoreAllSessionsIfNecessary(); if (activeSessionRef get() != null && activeSessionRef get() getId() == id) { synchronized (this) { activeSessionRef set(null); activeSessionStorage clear(); } } sessionMap remove(id); final PreferenceStoreStrategy<T> storage = storageMap remove(id); if (storage != null) { storage clear(); } }}package com twitter sdk android core models;import com google gson annotations SerializedName;import java util List;import java util Map;public class Place {  @SerializedName("attributes") public final Map<String, String> attributes;  @SerializedName("bounding_box") public final BoundingBox boundingBox;  @SerializedName("country") public final String country;  @SerializedName("country_code") public final String countryCode;  @SerializedName("full_name") public final String fullName;  @SerializedName("id") public final String id;  @SerializedName("name") public final String name;  @SerializedName("place_type") public final String placeType;  @SerializedName("url") public final String url; public Place(Map<String, String> attributes, BoundingBox boundingBox, String country, String countryCode, String fullName, String id, String name, String placeType, String url) { this attributes = attributes; this boundingBox = boundingBox; this country = country; this countryCode = countryCode; this fullName = fullName; this id = id; this name = name; this placeType = placeType; this url = url; } public static class BoundingBox {  @SerializedName("coordinates") public final List<List<List<Double>>> coordinates;  @SerializedName("type") public final String type; public BoundingBox(List<List<List<Double>>> coordinates, String type) { this coordinates = coordinates; this type = type; } }}package com twitter sdk android tweetui;import android app Activity;import android os Bundle;import android view View;import com twitter sdk android core internal scribe ScribeItem;import java io Serializable;public class PlayerActivity extends Activity { static final String PLAYER_ITEM = "PLAYER_ITEM"; static final String SCRIBE_ITEM = "SCRIBE_ITEM"; static final VideoScribeClient videoScribeClient = new VideoScribeClientImpl(TweetUi getInstance()); PlayerController playerController; @Override public void onCreate(Bundle savedInstanceState) { super onCreate(savedInstanceState); setContentView(R layout tw__player_activity); final PlayerItem item = (PlayerItem) getIntent() getSerializableExtra(PLAYER_ITEM); final View rootView = findViewById(android R id content); playerController = new PlayerController(rootView); playerController prepare(item); final ScribeItem scribeItem = (ScribeItem) getIntent() getSerializableExtra(SCRIBE_ITEM); scribeCardPlayImpression(scribeItem); } @Override protected void onResume() { super onResume(); playerController onResume(); } @Override protected void onPause() { playerController onPause(); super onPause(); } @Override public void onDestroy() { playerController onDestroy(); super onDestroy(); } private void scribeCardPlayImpression(ScribeItem scribeItem) { videoScribeClient play(scribeItem); } public static class PlayerItem implements Serializable { public String url; public boolean looping; public String callToActionUrl; public String callToActionText; public PlayerItem(String url, boolean looping) { this url = url; this looping = looping; } public PlayerItem(String url, boolean looping, String callToActionText, String callToActionUrl) { this url = url; this looping = looping; this callToActionText = callToActionText; this callToActionUrl = callToActionUrl; } }}package com twitter sdk android tweetui;import android content Intent;import android media MediaPlayer;import android net Uri;import android view View;import android widget ProgressBar;import android widget TextView;import com twitter sdk android core IntentUtils;import com twitter sdk android tweetui internal VideoControlView;import com twitter sdk android tweetui internal VideoView;import io fabric sdk android Fabric;class PlayerController { private static final String TAG = "PlayerController"; final VideoView videoView; final VideoControlView videoControlView; final ProgressBar videoProgressView; final TextView callToActionView; View rootView; int seekPosition = 0; boolean isPlaying = true; PlayerController(View rootView) { this rootView = rootView; this videoView = (VideoView) rootView findViewById(R id video_view); this videoControlView = (VideoControlView) rootView findViewById(R id video_control_view); this videoProgressView = (ProgressBar) rootView findViewById(R id video_progress_view); this callToActionView = (TextView) rootView findViewById(R id call_to_action_view); } // Unit testing purposes PlayerController(View rootView, VideoView videoView, VideoControlView videoControlView, ProgressBar videoProgressView, TextView callToActionView) { this rootView = rootView; this videoView = videoView; this videoControlView = videoControlView; this videoProgressView = videoProgressView; this callToActionView = callToActionView; } void prepare(PlayerActivity PlayerItem item) { try { setUpCallToAction(item); setUpMediaControl(item looping); videoView setOnPreparedListener(new MediaPlayer OnPreparedListener() { @Override public void onPrepared(MediaPlayer mediaPlayer) { videoProgressView setVisibility(View GONE); } }); videoView setOnInfoListener(new MediaPlayer OnInfoListener() { @Override public boolean onInfo(MediaPlayer mediaPlayer, int what, int extra) { if (what == MediaPlayer MEDIA_INFO_BUFFERING_END) { videoProgressView setVisibility(View GONE); return true; } else if (what == MediaPlayer MEDIA_INFO_BUFFERING_START) { videoProgressView setVisibility(View VISIBLE); return true; } return false; } }); final Uri uri = Uri parse(item url); videoView setVideoURI(uri, item looping); videoView requestFocus(); } catch (Exception e) { Fabric getLogger() e(TAG, "Error occurred during video playback", e); } } void onResume() { if (seekPosition != 0) { videoView seekTo(seekPosition); } if (isPlaying) { videoView start(); videoControlView update(); } } void onPause() { isPlaying = videoView isPlaying(); seekPosition = videoView getCurrentPosition(); videoView pause(); } void onDestroy() { videoView stopPlayback(); } void setUpMediaControl(boolean looping) { if (looping) { setUpLoopControl(); } else { setUpMediaControl(); } } void setUpLoopControl() { videoControlView setVisibility(View INVISIBLE); videoView setOnClickListener(new View OnClickListener() { @Override public void onClick(View view) { if (videoView isPlaying()) { videoView pause(); } else { videoView start(); } } }); } void setUpMediaControl() { videoView setMediaController(videoControlView); } void setUpCallToAction(PlayerActivity PlayerItem item) { if (item callToActionText != null && item callToActionUrl != null) { callToActionView setVisibility(View VISIBLE); callToActionView setText(item callToActionText); setUpCallToActionListener(item callToActionUrl); setUpRootViewOnClickListener(); } } void setUpCallToActionListener(final String callToActionUrl) { callToActionView setOnClickListener(new View OnClickListener() { @Override public void onClick(View v) { final Uri uri = Uri parse(callToActionUrl); final Intent intent = new Intent(Intent ACTION_VIEW, uri); IntentUtils safeStartActivity(callToActionView getContext(), intent); } }); } void setUpRootViewOnClickListener() { rootView setOnClickListener(new View OnClickListener() { @Override public void onClick(View v) { if (callToActionView getVisibility() == View VISIBLE) { callToActionView setVisibility(View GONE); } else { callToActionView setVisibility(View VISIBLE); } } }); }}package com twitter sdk android unity;import android app Activity;import android content Intent;import android os Bundle;import com twitter sdk android core Callback;import com twitter sdk android core Result;import com twitter sdk android core TwitterException;import com twitter sdk android core TwitterSession;import com twitter sdk android core TwitterSessionHelper;import com twitter sdk android core identity TwitterAuthClient;public class RequestEmailActivity extends Activity { TwitterAuthClient authClient; @Override protected void onCreate(Bundle savedInstanceState) { super onCreate(savedInstanceState); final String session = getIntent() getStringExtra(TwitterKit EXTRA_TWITTER_SESSION); final TwitterSession twitterSession = TwitterSessionHelper deserialize(session); new TwitterAuthClient() requestEmail(twitterSession, new Callback<String>() { @Override public void success(Result<String> result) { final UnityMessage message = new UnityMessage Builder()  setMethod("RequestEmailComplete")  setData(result data)  build(); message send(); finish(); } @Override public void failure(TwitterException ex) { final String error = new ApiError Serializer()  serialize(new ApiError(0, ex getMessage())); final UnityMessage message = new UnityMessage Builder()  setMethod("RequestEmailFailed")  setData(error)  build(); message send(); finish(); } }); } @Override protected void onActivityResult(int requestCode, int resultCode, Intent data) { super onActivityResult(requestCode, resultCode, data); authClient onActivityResult(requestCode, resultCode, data); }}package com twitter sdk android tweetui;import com twitter sdk android core Callback;import com twitter sdk android core Result;import com twitter sdk android core TwitterException;import com twitter sdk android core models Tweet;class ResetTweetCallback extends Callback<Tweet> { BaseTweetView baseTweetView; TweetRepository tweetRepository; Callback<Tweet> cb; ResetTweetCallback(BaseTweetView baseTweetView, TweetRepository tweetRepository, Callback<Tweet> cb) { this baseTweetView = baseTweetView; this tweetRepository = tweetRepository; this cb = cb; } @Override public void success(Result<Tweet> result) { tweetRepository updateCache(result data); baseTweetView setTweet(result data); if (cb != null) { cb success(result); } } @Override public void failure(TwitterException exception) { if (cb != null) { cb failure(exception); } }}package com twitter sdk android core;import retrofit2 Response;public class Result<T> { public final T data; public final Response response; public Result(T data, Response response) { this data = data; this response = response; }}package com twitter sdk android tweetcomposer;import android graphics Bitmap;import android graphics BitmapShader;import android graphics Canvas;import android graphics Paint;import android graphics Path;import android graphics RectF;import android graphics Shader;import com squareup picasso Transformation;import java util Arrays;import static android graphics Bitmap createBitmap;class RoundedCornerTransformation implements Transformation { final float[] radii; RoundedCornerTransformation(float[] radii) { this radii = radii; } @Override public Bitmap transform(Bitmap source) { final RectF rect = new RectF(0, 0, source getWidth(), source getHeight()); final Bitmap result = createBitmap(source getWidth(), source getHeight(), source getConfig()); final BitmapShader bitmapShader = new BitmapShader(source, Shader TileMode CLAMP, Shader TileMode CLAMP); final Paint paint = new Paint(); paint setAntiAlias(true); paint setShader(bitmapShader); final Path path = new Path(); path addRoundRect(rect, radii, Path Direction CCW); final Canvas canvas = new Canvas(result); canvas drawPath(path, paint); source recycle(); return result; } @Override public String key() { return "RoundedCornerTransformation(" + Arrays toString(radii) + ")"; } public static class Builder { int topLeftRadius; int topRightRadius; int bottomRightRadius; int bottomLeftRadius; public Builder setRadius(int radius) { topLeftRadius = radius; topRightRadius = radius; bottomRightRadius = radius; bottomLeftRadius = radius; return this; } public Builder setRadii(int topLeftRadius, int topRightRadius, int bottomRightRadius, int bottomLeftRadius) { this topLeftRadius = topLeftRadius; this topRightRadius = topRightRadius; this bottomRightRadius = bottomRightRadius; this bottomLeftRadius = bottomLeftRadius; return this; } RoundedCornerTransformation build() { if (topLeftRadius < 0 || topRightRadius < 0 || bottomRightRadius < 0 || bottomLeftRadius < 0) { throw new IllegalStateException("Radius must not be negative"); } final float[] radii = {topLeftRadius, topLeftRadius, topRightRadius, topRightRadius, bottomRightRadius, bottomRightRadius, bottomLeftRadius, bottomLeftRadius}; return new RoundedCornerTransformation(radii); } }}package com twitter sdk android mopub internal;import android content Context;import android graphics Bitmap;import android graphics BitmapShader;import android graphics Canvas;import android graphics Paint;import android graphics Path;import android graphics RectF;import android graphics Shader;import android graphics drawable BitmapDrawable;import android util AttributeSet;import android widget ImageView;import static android graphics Bitmap createBitmap;public class RoundedImageView extends ImageView { private float[] roundedCornerRadii; public RoundedImageView(Context context, AttributeSet attrs) { super(context, attrs, 0); setDefaultCornerRadii(); } public RoundedImageView(Context context, AttributeSet attrs, int styleResId) { super(context, attrs, styleResId); setDefaultCornerRadii(); } private void setDefaultCornerRadii() { setCornerRadii(0, 0, 0, 0); }  public void setCornerRadii(int topLeftRadius, int topRightRadius, int bottomLeftRadius, int bottomRightRadius) { if (topLeftRadius < 0 || topRightRadius < 0 || bottomRightRadius < 0 || bottomLeftRadius < 0) { throw new IllegalStateException("Radius must not be negative"); } roundedCornerRadii = new float[]{ topLeftRadius, topLeftRadius, topRightRadius, topRightRadius, bottomLeftRadius, bottomLeftRadius, bottomRightRadius, bottomRightRadius}; } @Override public void setImageBitmap(Bitmap bitmap) { setImageDrawable(new BitmapDrawable(getResources(), transform(bitmap))); } private Bitmap transform(Bitmap source) { final RectF rect = new RectF(0, 0, source getWidth(), source getHeight()); final Bitmap result = createBitmap(source getWidth(), source getHeight(), source getConfig()); final BitmapShader bitmapShader = new BitmapShader(source, Shader TileMode CLAMP, Shader TileMode CLAMP); final Paint paint = new Paint(); paint setAntiAlias(true); paint setShader(bitmapShader); final Path path = new Path(); path addRoundRect(rect, roundedCornerRadii, Path Direction CCW); final Canvas canvas = new Canvas(result); canvas drawPath(path, paint); return result; }}package com twitter sdk android core models;import com google gson Gson;import com google gson TypeAdapter;import com google gson TypeAdapterFactory;import com google gson reflect TypeToken;import com google gson stream JsonReader;import com google gson stream JsonWriter;import java io IOException;import java util Collections;import java util List;public class SafeListAdapter implements TypeAdapterFactory { @Override public <T> TypeAdapter<T> create(final Gson gson, final TypeToken<T> tokenType) { final TypeAdapter<T> delegate = gson getDelegateAdapter(this, tokenType); return new TypeAdapter<T>() { @Override public void write(JsonWriter out, T value) throws IOException { delegate write(out, value); } @Override public T read(JsonReader arg0) throws IOException { final T t = delegate read(arg0); if (List class isAssignableFrom(tokenType getRawType())) { if (t == null) { return (T) Collections EMPTY_LIST; } final List<?> list = (List<?>) t; return (T) Collections unmodifiableList(list); } return t; } }; }}package com twitter sdk android core models;import com google gson Gson;import com google gson TypeAdapter;import com google gson TypeAdapterFactory;import com google gson reflect TypeToken;import com google gson stream JsonReader;import com google gson stream JsonWriter;import java io IOException;import java util Collections;import java util Map;public class SafeMapAdapter implements TypeAdapterFactory { @Override public <T> TypeAdapter<T> create(final Gson gson, final TypeToken<T> tokenType) { final TypeAdapter<T> delegate = gson getDelegateAdapter(this, tokenType); return new TypeAdapter<T>() { @Override public void write(JsonWriter out, T value) throws IOException { delegate write(out, value); } @Override public T read(JsonReader arg0) throws IOException { final T t = delegate read(arg0); if (Map class isAssignableFrom(tokenType getRawType())) { if (t == null) { return (T) Collections EMPTY_MAP; } final Map<?, ?> map = (Map<?, ?>) t; return (T) Collections unmodifiableMap(map); } return t; } }; }}package com twitter sdk android tweetcomposer;import com twitter sdk android core internal scribe EventNamespace;import com twitter sdk android core internal scribe ScribeItem;import java util List;interface ScribeClient { void scribe(EventNamespace eventNamespace, List<ScribeItem> items);}package com twitter sdk android tweetcomposer;import com twitter sdk android core internal scribe DefaultScribeClient;import com twitter sdk android core internal scribe EventNamespace;import com twitter sdk android core internal scribe ScribeItem;import java util List;class ScribeClientImpl implements ScribeClient { private final DefaultScribeClient scribeClient; public ScribeClientImpl(DefaultScribeClient scribeClient) { this scribeClient = scribeClient; } @Override public void scribe(EventNamespace eventNamespace, List<ScribeItem> items) { if (scribeClient != null) { scribeClient scribe(eventNamespace, items); } }}package com twitter sdk android core internal scribe;public class ScribeConfig { public static final String BASE_URL = "https://api twitter com"; public static final int DEFAULT_MAX_FILES_TO_KEEP = 100; public static final int DEFAULT_SEND_INTERVAL_SECONDS = 10 * 60; // 10 minutes  public final boolean isEnabled;  public final String baseUrl;  public final String pathVersion;  public final String pathType;  public final String sequence;  public final String userAgent;  public final int maxFilesToKeep;  public final int sendIntervalSeconds; public ScribeConfig(boolean isEnabled, String baseUrl, String pathVersion, String pathType, String sequence, String userAgent, int maxFilesToKeep, int sendIntervalSeconds) { this isEnabled = isEnabled; this baseUrl = baseUrl; this pathVersion = pathVersion; this pathType = pathType; this sequence = sequence; this userAgent = userAgent; this maxFilesToKeep = maxFilesToKeep; this sendIntervalSeconds = sendIntervalSeconds; }}package com twitter sdk android tweetcomposer;import com twitter sdk android core internal scribe EventNamespace;import com twitter sdk android core internal scribe ScribeItem;final class ScribeConstants { private ScribeConstants() {} // namespaces with client "tfw" become SyndicationClientEvent scribes to /logs/tfw_client_event static final String SCRIBE_TFW_CLIENT = "tfw"; static final String SCRIBE_PAGE = "android"; static final String SCRIBE_SECTION = "composer"; static final String SCRIBE_COMPONENT = ""; static final String SCRIBE_IMPRESSION_ELEMENT = ""; static final String SCRIBE_TWEET_ELEMENT = "tweet"; static final String SCRIBE_CANCEL_ELEMENT = "cancel"; static final String SCRIBE_IMPRESSION_ACTION = "impression"; static final String SCRIBE_CLICK_ACTION = "click"; static final int SCRIBE_PROMO_APP_CARD_TYPE = 8; static final EventNamespace Builder ComposerEventBuilder = new EventNamespace Builder()  setClient(SCRIBE_TFW_CLIENT)  setPage(SCRIBE_PAGE)  setSection(SCRIBE_SECTION);  static ScribeItem newCardScribeItem(Card card) { // promo app card is currently the only type of Card return new ScribeItem Builder()  setItemType(ScribeItem TYPE_TWEET)  setCardEvent(new ScribeItem CardEvent(SCRIBE_PROMO_APP_CARD_TYPE))  build(); }}package com twitter sdk android core internal scribe;import android text TextUtils;import com google gson Gson;import com google gson annotations SerializedName;import io fabric sdk android services events EventTransform;import java io IOException;import java util Collections;import java util List;public class ScribeEvent {  private static final String CURRENT_FORMAT_VERSION = "2";  @SerializedName("event_namespace") final EventNamespace eventNamespace;  @SerializedName("ts") final String timestamp;  @SerializedName("format_version") final String formatVersion; @SerializedName("_category_") final String category; @SerializedName("items") final List<ScribeItem> items; public ScribeEvent(String category, EventNamespace eventNamespace, long timestamp) { this(category, eventNamespace, timestamp, Collections <ScribeItem>emptyList()); } public ScribeEvent(String category, EventNamespace eventNamespace, long timestamp, List<ScribeItem> items) { this category = category; this eventNamespace = eventNamespace; this timestamp = String valueOf(timestamp); this formatVersion = CURRENT_FORMAT_VERSION; this items = Collections unmodifiableList(items); } @Override public String toString() { return new StringBuilder()  append("event_namespace=") append(eventNamespace)  append(", ts=") append(timestamp)  append(", format_version=") append(formatVersion)  append(", _category_=") append(category)  append(", items=") append("[" + TextUtils join(", ", items) + "]")  toString(); } @Override public boolean equals(Object o) { if (this == o) return true; if (o == null || getClass() != o getClass()) return false; final ScribeEvent that = (ScribeEvent) o; if (category != null ? !category equals(that category) : that category != null) { return false; } if (eventNamespace != null ? !eventNamespace equals(that eventNamespace) : that eventNamespace != null) { return false; } if (formatVersion != null ? !formatVersion equals(that formatVersion) : that formatVersion != null) { return false; } if (timestamp != null ? !timestamp equals(that timestamp) : that timestamp != null) { return false; } if (items != null ? !items equals(that items) : that items != null) { return false; } return true; } @Override public int hashCode() { int result = eventNamespace != null ? eventNamespace hashCode() : 0; result = 31 * result + (timestamp != null ? timestamp hashCode() : 0); result = 31 * result + (formatVersion != null ? formatVersion hashCode() : 0); result = 31 * result + (category != null ? category hashCode() : 0); result = 31 * result + (items != null ? items hashCode() : 0); return result; } public static class Transform implements EventTransform<ScribeEvent> { private final Gson gson; public Transform(Gson gson) { this gson = gson; } @Override public byte[] toBytes(ScribeEvent event) throws IOException { return gson toJson(event) getBytes("UTF-8"); } }}package com twitter sdk android core internal scribe;import java util Collections;import java util List;public class ScribeEventFactory { public static ScribeEvent newScribeEvent(EventNamespace ns, long timestamp, String language, String advertisingId) { return newScribeEvent(ns, "", timestamp, language, advertisingId, Collections <ScribeItem>emptyList()); } public static ScribeEvent newScribeEvent(EventNamespace ns, String eventInfo, long timestamp, String language, String advertisingId, List<ScribeItem> items) { switch (ns client) { case SyndicationClientEvent CLIENT_NAME: return new SyndicationClientEvent(ns, eventInfo, timestamp, language, advertisingId, items); default: return new SyndicatedSdkImpressionEvent(ns, timestamp, language, advertisingId, items); } }}package com twitter sdk android core internal scribe;import io fabric sdk android FabricAndroidTestCase;import io fabric sdk android services common CommonUtils;import com google gson GsonBuilder;import java io IOException;import java io InputStream;import java util Arrays;import java util List;public class ScribeEventTransformTest extends FabricAndroidTestCase { static final String TEST_MESSAGE = "TEST MESSAGE"; static final String TEST_ITEM_TYPE = "\"item_type\":6"; static final String TEST_DESCRIPTION = "\"description\":\"TEST MESSAGE\""; private ScribeEvent Transform transform; private EventNamespace eventNamespace; private String scribeEventJsonString; @Override protected void setUp() throws Exception { super setUp(); transform = new ScribeEvent Transform(new GsonBuilder() create()); eventNamespace = new EventNamespace Builder()  setClient("testclient")  setPage("testpage")  setSection("testsection")  setComponent("testcomponent")  setElement("testelement")  setAction("testaction")  builder(); InputStream is = null; try { is = getContext() getAssets() open("scribe_event json"); scribeEventJsonString = CommonUtils streamToString(is) trim(); } finally { CommonUtils closeQuietly(is); } } public void testToBytes() throws IOException { final ScribeEvent scribeEvent = new ScribeEvent("testcategory", eventNamespace, 1404426136717L); final byte[] bytes = transform toBytes(scribeEvent); assertEquals(scribeEventJsonString, new String(bytes, "UTF-8")); } public void testToBytes_withItems() throws IOException { final ScribeItem scribeItem = ScribeItem fromMessage(TEST_MESSAGE); final List<ScribeItem> itemList = Arrays asList(scribeItem); final ScribeEvent scribeEvent = new ScribeEvent("testcategory", eventNamespace, 1404426136717L, itemList); final byte[] bytes = transform toBytes(scribeEvent); assertTrue(new String(bytes, "UTF-8") contains(TEST_ITEM_TYPE)); assertTrue(new String(bytes, "UTF-8") contains(TEST_DESCRIPTION)); }}package com twitter sdk android core internal scribe;import android content Context;import io fabric sdk android services common CurrentTimeProvider;import io fabric sdk android services events EventTransform;import io fabric sdk android services events EventsFilesManager;import io fabric sdk android services events QueueFileEventStorage;import java io IOException;import java util UUID;class ScribeFilesManager extends EventsFilesManager<ScribeEvent> { static final String FILE_PREFIX = "se"; static final String FILE_EXTENSION = " tap"; public ScribeFilesManager(Context context, EventTransform<ScribeEvent> transform, CurrentTimeProvider currentTimeProvider, QueueFileEventStorage eventsStorage, int defaultMaxFilesToKeep) throws IOException { super(context, transform, currentTimeProvider, eventsStorage, defaultMaxFilesToKeep); } @Override protected String generateUniqueRollOverFileName() { final UUID targetUUIDComponent = UUID randomUUID(); return new StringBuilder()  append(FILE_PREFIX)  append(ROLL_OVER_FILE_NAME_SEPARATOR)  append(targetUUIDComponent toString())  append(ROLL_OVER_FILE_NAME_SEPARATOR)  append(currentTimeProvider getCurrentTimeMillis())  append(FILE_EXTENSION)  toString(); }}package com twitter sdk android core internal scribe;import android content Context;import android text TextUtils;import io fabric sdk android services common CommonUtils;import io fabric sdk android services common IdManager;import io fabric sdk android services common QueueFile;import io fabric sdk android services events FilesSender;import com twitter sdk android core GuestSessionProvider;import com twitter sdk android core Session;import com twitter sdk android core SessionManager;import com twitter sdk android core TwitterAuthConfig;import com twitter sdk android core TwitterAuthToken;import com twitter sdk android core internal network GuestAuthInterceptor;import com twitter sdk android core internal network OAuth1aInterceptor;import java io ByteArrayOutputStream;import java io File;import java io IOException;import java io InputStream;import java net HttpURLConnection;import java util List;import java util concurrent ExecutorService;import java util concurrent atomic AtomicReference;import javax net ssl SSLSocketFactory;import okhttp3 Interceptor;import okhttp3 OkHttpClient;import okhttp3 Request;import okhttp3 ResponseBody;import retrofit2 Call;import retrofit2 Response;import retrofit2 Retrofit;import retrofit2 http Field;import retrofit2 http FormUrlEncoded;import retrofit2 http Headers;import retrofit2 http POST;import retrofit2 http Path;class ScribeFilesSender implements FilesSender { private static final String SEND_FILE_FAILURE_ERROR = "Failed sending files";  private static final byte[] START_JSON_ARRAY = {'['};  private static final byte[] COMMA = {','};  private static final byte[] END_JSON_ARRAY = {']'}; private final Context context; private final ScribeConfig scribeConfig; private final long ownerId; private final TwitterAuthConfig authConfig; private final SessionManager<? extends Session<TwitterAuthToken>> sessionManager; private final GuestSessionProvider guestSessionProvider; private final SSLSocketFactory sslSocketFactory; private final AtomicReference<ScribeService> scribeService; private final ExecutorService executorService; private final IdManager idManager; public ScribeFilesSender(Context context, ScribeConfig scribeConfig, long ownerId, TwitterAuthConfig authConfig, SessionManager<? extends Session<TwitterAuthToken>> sessionManager, GuestSessionProvider guestSessionProvider, SSLSocketFactory sslSocketFactory, ExecutorService executorService, IdManager idManager) { this context = context; this scribeConfig = scribeConfig; this ownerId = ownerId; this authConfig = authConfig; this sessionManager = sessionManager; this guestSessionProvider = guestSessionProvider; this sslSocketFactory = sslSocketFactory; this executorService = executorService; this idManager = idManager; this scribeService = new AtomicReference<>(); } @Override public boolean send(List<File> files) { if (hasApiAdapter()) { try { final String scribeEvents = getScribeEventsAsJsonArrayString(files); CommonUtils logControlled(context, scribeEvents); final Response<ResponseBody> response = upload(scribeEvents); if (response code() == HttpURLConnection HTTP_OK) { return true; } else { CommonUtils logControlledError(context, SEND_FILE_FAILURE_ERROR, null); if (response code() == HttpURLConnection HTTP_INTERNAL_ERROR || response code() == HttpURLConnection HTTP_BAD_REQUEST) { return true; } } } catch (Exception e) { CommonUtils logControlledError(context, SEND_FILE_FAILURE_ERROR, e); } } else { CommonUtils logControlled(context, "Cannot attempt upload at this time"); } return false; } String getScribeEventsAsJsonArrayString(List<File> files) throws IOException { final ByteArrayOutputStream out = new ByteArrayOutputStream(1024); final boolean[] appendComma = new boolean[1]; out write(START_JSON_ARRAY); for (File f : files) { QueueFile qf = null; try { qf = new QueueFile(f); qf forEach(new QueueFile ElementReader() { @Override public void read(InputStream in, int length) throws IOException { final byte[] buf = new byte[length]; in read(buf); if (appendComma[0]) { out write(COMMA); } else { // First time through we don't append comma, but subsequent times we do appendComma[0] = true; } out write(buf); } }); } finally { CommonUtils closeQuietly(qf); } } out write(END_JSON_ARRAY); return out toString("UTF-8"); }  private boolean hasApiAdapter() { return getScribeService() != null; }  void setScribeService(ScribeService restAdapter) { scribeService set(restAdapter); }  synchronized ScribeService getScribeService() { if (scribeService get() == null) { final Session session = getSession(ownerId); OkHttpClient client; if (isValidSession(session)) { client = new OkHttpClient Builder()  sslSocketFactory(sslSocketFactory)  addInterceptor(new ConfigRequestInterceptor(scribeConfig, idManager))  addInterceptor(new OAuth1aInterceptor(session, authConfig))  build(); } else { client = new OkHttpClient Builder()  sslSocketFactory(sslSocketFactory)  addInterceptor(new ConfigRequestInterceptor(scribeConfig, idManager))  addInterceptor(new GuestAuthInterceptor(guestSessionProvider))  build(); } final Retrofit retrofit = new Retrofit Builder()  baseUrl(scribeConfig baseUrl)  client(client)  build(); scribeService compareAndSet(null, retrofit create(ScribeService class)); } return scribeService get(); } private Session getSession(long ownerId) { return sessionManager getSession(ownerId); } private boolean isValidSession(Session session) { return session != null && session getAuthToken() != null; }  Response<ResponseBody> upload(String scribeEvents) throws IOException { final ScribeService service = getScribeService(); if (!TextUtils isEmpty(scribeConfig sequence)) { return service uploadSequence(scribeConfig sequence, scribeEvents) execute(); } else { return service upload(scribeConfig pathVersion, scribeConfig pathType, scribeEvents)  execute(); } } interface ScribeService { @Headers("Content-Type: application/x-www-form-urlencoded;charset=UTF-8") @FormUrlEncoded @POST("/{version}/jot/{type}") Call<ResponseBody> upload(@Path("version") String version, @Path("type") String type, @Field("log[]") String logs); @Headers("Content-Type: application/x-www-form-urlencoded;charset=UTF-8") @FormUrlEncoded @POST("/scribe/{sequence}") Call<ResponseBody> uploadSequence(@Path("sequence") String sequence, @Field("log[]") String logs); } // At a certain point we might need to allow either a custom RequestInterceptor to be set // by the user of the ScribeClient or a custom map of headers to be supplied  static class ConfigRequestInterceptor implements Interceptor { private static final String USER_AGENT_HEADER = "User-Agent"; private static final String CLIENT_UUID_HEADER = "X-Client-UUID"; private static final String POLLING_HEADER = "X-Twitter-Polling"; private static final String POLLING_HEADER_VALUE = "true"; private final ScribeConfig scribeConfig; private final IdManager idManager; ConfigRequestInterceptor(ScribeConfig scribeConfig, IdManager idManager) { this scribeConfig = scribeConfig; this idManager = idManager; } @Override public okhttp3 Response intercept(Chain chain) throws IOException { final Request Builder builder = chain request() newBuilder(); if (!TextUtils isEmpty(scribeConfig userAgent)) { builder header(USER_AGENT_HEADER, scribeConfig userAgent); }  if (!TextUtils isEmpty(idManager getDeviceUUID())) { builder header(CLIENT_UUID_HEADER, idManager getDeviceUUID()); }  builder header(POLLING_HEADER, POLLING_HEADER_VALUE); return chain proceed(builder build()); } }}package com twitter sdk android core internal scribe;import android content Context;import io fabric sdk android services events DisabledEventsStrategy;import io fabric sdk android services events EventsFilesManager;import io fabric sdk android services events EventsHandler;import io fabric sdk android services events EventsStrategy;import java util concurrent ScheduledExecutorService;class ScribeHandler extends EventsHandler<ScribeEvent> { public ScribeHandler(Context context, EventsStrategy<ScribeEvent> strategy, EventsFilesManager filesManager, ScheduledExecutorService executorService) { super(context, strategy, filesManager, executorService); }  public void scribe(ScribeEvent event) { recordEventAsync(event, false); }  public void scribeAndFlush(ScribeEvent event) { recordEventAsync(event, true); } @Override protected EventsStrategy<ScribeEvent> getDisabledEventsStrategy() { return new DisabledEventsStrategy<>(); }}package com twitter sdk android core internal scribe;import com google gson annotations SerializedName;import com twitter sdk android core internal VineCardUtils;import com twitter sdk android core models Card;import com twitter sdk android core models MediaEntity;import com twitter sdk android core models Tweet;import com twitter sdk android core models User;import java io Serializable;public class ScribeItem implements Serializable {  public static final int TYPE_TWEET = 0; public static final int TYPE_USER = 3; public static final int TYPE_MESSAGE = 6;  @SerializedName("item_type") public final Integer itemType;  @SerializedName("id") public final Long id;  @SerializedName("description") public final String description;  @SerializedName("card_event") public final CardEvent cardEvent;  @SerializedName("media_details") public final MediaDetails mediaDetails; private ScribeItem(Integer itemType, Long id, String description, CardEvent cardEvent, MediaDetails mediaDetails) { this itemType = itemType; this id = id; this description = description; this cardEvent = cardEvent; this mediaDetails = mediaDetails; } public static ScribeItem fromTweet(Tweet tweet) { return new ScribeItem Builder()  setItemType(TYPE_TWEET)  setId(tweet id)  build(); } public static ScribeItem fromUser(User user) { return new ScribeItem Builder()  setItemType(TYPE_USER)  setId(user id)  build(); } public static ScribeItem fromMessage(String message) { return new ScribeItem Builder()  setItemType(TYPE_MESSAGE)  setDescription(message)  build(); } public static ScribeItem fromTweetCard(long tweetId, Card card) { return new ScribeItem Builder()  setItemType(ScribeItem TYPE_TWEET)  setId(tweetId)  setMediaDetails(createCardDetails(tweetId, card))  build(); } public static ScribeItem fromMediaEntity(long tweetId, MediaEntity mediaEntity) { return new ScribeItem Builder()  setItemType(ScribeItem TYPE_TWEET)  setId(tweetId)  setMediaDetails(createMediaDetails(tweetId, mediaEntity))  build(); } static ScribeItem MediaDetails createMediaDetails(long tweetId, MediaEntity mediaEntity) { return new ScribeItem MediaDetails(tweetId, getMediaType(mediaEntity), mediaEntity id); } static ScribeItem MediaDetails createCardDetails(long tweetId, Card card) { return new ScribeItem MediaDetails(tweetId, MediaDetails TYPE_VINE, Long valueOf(VineCardUtils getPublisherId(card))); } static int getMediaType(MediaEntity mediaEntity) { if (MediaDetails GIF_TYPE equals(mediaEntity type)) { return ScribeItem MediaDetails TYPE_ANIMATED_GIF; } else { return ScribeItem MediaDetails TYPE_CONSUMER; } } @Override public boolean equals(Object o) { if (this == o) return true; if (o == null || getClass() != o getClass()) return false; final ScribeItem that = (ScribeItem) o; if (itemType != null ? !itemType equals(that itemType) : that itemType != null) return false; if (id != null ? !id equals(that id) : that id != null) return false; if (description != null ? !description equals(that description) : that description != null) return false; if (cardEvent != null ? !cardEvent equals(that cardEvent) : that cardEvent != null) return false; return !(mediaDetails != null ? !mediaDetails equals(that mediaDetails) : that  mediaDetails != null); } @Override public int hashCode() { int result = itemType != null ? itemType hashCode() : 0; result = 31 * result + (id != null ? id hashCode() : 0); result = 31 * result + (description != null ? description hashCode() : 0); result = 31 * result + (cardEvent != null ? cardEvent hashCode() : 0); result = 31 * result + (mediaDetails != null ? mediaDetails hashCode() : 0); return result; }  public static class CardEvent implements Serializable { public CardEvent(int cardType) { promotionCardType = cardType; } @SerializedName("promotion_card_type") final int promotionCardType; @Override public boolean equals(Object o) { if (this == o) return true; if (o == null || getClass() != o getClass()) return false; final CardEvent cardEvent = (CardEvent) o; return promotionCardType == cardEvent promotionCardType; } @Override public int hashCode() { return promotionCardType; } }  public static class MediaDetails implements Serializable { public static final int TYPE_CONSUMER = 1; public static final int TYPE_AMPLIFY = 2; public static final int TYPE_ANIMATED_GIF = 3; public static final int TYPE_VINE = 4; public static final String GIF_TYPE = "animated_gif"; @SerializedName("content_id") public final long contentId; @SerializedName("media_type") public final int mediaType; @SerializedName("publisher_id") public final long publisherId; public MediaDetails(long contentId, int mediaType, long publisherId) { this contentId = contentId; this mediaType = mediaType; this publisherId = publisherId; } @Override public boolean equals(Object o) { if (this == o) return true; if (o == null || getClass() != o getClass()) return false; final MediaDetails that = (MediaDetails) o; if (contentId != that contentId) return false; if (mediaType != that mediaType) return false; return publisherId == that publisherId; } @Override public int hashCode() { int result = (int) (contentId ^ (contentId >>> 32)); result = 31 * result + mediaType; result = 31 * result + (int) (publisherId ^ (publisherId >>> 32)); return result; } } public static class Builder { private Integer itemType; private Long id; private String description; private CardEvent cardEvent; private MediaDetails mediaDetails; public Builder setItemType(int itemType) { this itemType = itemType; return this; } public Builder setId(long id) { this id = id; return this; } public Builder setDescription(String description) { this description = description; return this; } public Builder setCardEvent(CardEvent cardEvent) { this cardEvent = cardEvent; return this; } public Builder setMediaDetails(MediaDetails mediaDetails) { this mediaDetails = mediaDetails; return this; } public ScribeItem build() { return new ScribeItem(itemType, id, description, cardEvent, mediaDetails); } }}package com twitter sdk android core models;import com google gson annotations SerializedName;import java util List;public class Search { @SerializedName("statuses") public final List<Tweet> tweets; @SerializedName("search_metadata") public final SearchMetadata searchMetadata; public Search(List<Tweet> tweets, SearchMetadata searchMetadata) { this tweets = tweets; this searchMetadata = searchMetadata; }}package com twitter sdk android core models;import com google gson annotations SerializedName;public class SearchMetadata { @SerializedName("max_id") public final long maxId; @SerializedName("since_id") public final long sinceId; @SerializedName("refresh_url") public final String refreshUrl; @SerializedName("next_results") public final String nextResults; @SerializedName("count") public final long count; @SerializedName("completed_in") public final double completedIn; @SerializedName("since_id_str") public final String sinceIdStr; @SerializedName("query") public final String query; @SerializedName("max_id_str") public final String maxIdStr; public SearchMetadata(int maxId, int sinceId, String refreshUrl, String nextResults, int count, double completedIn, String sinceIdStr, String query, String maxIdStr) { this maxId = maxId; this sinceId = sinceId; this refreshUrl = refreshUrl; this nextResults = nextResults; this count = count; this completedIn = completedIn; this sinceIdStr = sinceIdStr; this query = query; this maxIdStr = maxIdStr; }}package com twitter sdk android core services;import com twitter sdk android core services params Geocode;import com twitter sdk android core models Search;import retrofit2 Call;import retrofit2 http GET;import retrofit2 http Query;public interface SearchService {  @GET("/1 1/search/tweets json?" + "tweet_mode=extended&include_cards=true&cards_platform=TwitterKit-13") Call<Search> tweets(@Query("q") String query, //EncodedQuery protects commas from encode @Query(value = "geocode", encoded = true) Geocode geocode, @Query("lang") String lang, @Query("locale") String locale, @Query("result_type") String resultType, @Query("count") Integer count, @Query("until") String until, @Query("since_id") Long sinceId, @Query("max_id") Long maxId, @Query("include_entities") Boolean includeEntities);}package com twitter sdk android tweetui;import com twitter sdk android core Callback;import com twitter sdk android core Result;import com twitter sdk android core TwitterCore;import com twitter sdk android core TwitterException;import com twitter sdk android core models Search;import com twitter sdk android core models Tweet;import java util List;import retrofit2 Call;public class SearchTimeline extends BaseTimeline implements Timeline<Tweet> { static final String FILTER_RETWEETS = " -filter:retweets"; // leading whitespace intentional private static final String SCRIBE_SECTION = "search"; final String query; final String resultType; final String languageCode; final Integer maxItemsPerRequest; SearchTimeline(TweetUi tweetUi, String query, String resultType, String languageCode, Integer maxItemsPerRequest) { super(tweetUi); this languageCode = languageCode; this maxItemsPerRequest = maxItemsPerRequest; this resultType = resultType; // if the query is non-null append the filter Retweets modifier this query = query == null ? null : query + FILTER_RETWEETS; }  @Override public void next(Long sinceId, Callback<TimelineResult<Tweet>> cb) { createSearchRequest(sinceId, null) enqueue(new SearchCallback(cb)); }  @Override public void previous(Long maxId, Callback<TimelineResult<Tweet>> cb) { // api quirk: search api provides results that are inclusive of the maxId iff // FILTER_RETWEETS is added to the query (which we currently always add), decrement the // maxId to get exclusive results createSearchRequest(null, decrementMaxId(maxId)) enqueue(new SearchCallback(cb)); } @Override String getTimelineType() { return SCRIBE_SECTION; } Call<Search> createSearchRequest(final Long sinceId, final Long maxId) { return TwitterCore getInstance() getApiClient() getSearchService() tweets(query, null, languageCode, null, resultType, maxItemsPerRequest, null, sinceId, maxId, true); }  class SearchCallback extends Callback<Search> { final Callback<TimelineResult<Tweet>> cb;  SearchCallback(Callback<TimelineResult<Tweet>> cb) { this cb = cb; } @Override public void success(Result<Search> result) { final List<Tweet> tweets = result data tweets; final TimelineResult<Tweet> timelineResult = new TimelineResult<>(new TimelineCursor(tweets), tweets); if (cb != null) { cb success(new Result<>(timelineResult, result response)); } } @Override public void failure(TwitterException exception) { if (cb != null) { cb failure(exception); } } } public enum ResultType { RECENT("recent"), POPULAR("popular"), MIXED("mixed"), FILTERED("filtered"); final String type; ResultType(String type) { this type = type; } }  public static class Builder { private TweetUi tweetUi; private String query; private String lang; private String resultType = ResultType FILTERED type; private Integer maxItemsPerRequest = 30;  public Builder() { this(TweetUi getInstance()); }  public Builder(TweetUi tweetUi) { if (tweetUi == null) { throw new IllegalArgumentException("TweetUi instance must not be null"); } this tweetUi = tweetUi; }  public Builder query(String query) { this query = query; return this; }  public Builder resultType(ResultType resultType) { this resultType = resultType type; return this; }  public Builder languageCode(String languageCode) { this lang = languageCode; return this; }  public Builder maxItemsPerRequest(Integer maxItemsPerRequest) { this maxItemsPerRequest = maxItemsPerRequest; return this; }  public SearchTimeline build() { if (query == null) { throw new IllegalStateException("query must not be null"); } return new SearchTimeline(tweetUi, query, resultType, lang, maxItemsPerRequest); } }}package com twitter sdk android core;import com google gson annotations SerializedName;public class Session<T extends AuthToken> { @SerializedName("auth_token") private final T authToken; @SerializedName("id") private final long id; public Session(T authToken, long id) { if (authToken == null) { throw new IllegalArgumentException("AuthToken must not be null "); } this authToken = authToken; this id = id; } public T getAuthToken() { return authToken; } public long getId() { return id; } @Override public boolean equals(Object o) { if (this == o) return true; if (o == null || getClass() != o getClass()) return false; final Session session = (Session) o; if (id != session id) return false; return authToken != null ? authToken equals(session authToken) : session authToken == null; } @Override public int hashCode() { int result = authToken != null ? authToken hashCode() : 0; result = 31 * result + (int) (id ^ (id >>> 32)); return result; }}package com twitter sdk android core;import java util Map;public interface SessionManager<T extends Session> {  T getActiveSession();  void setActiveSession(T session);  void clearActiveSession();  T getSession(long id);  void setSession(long id, T session);  void clearSession(long id);  Map<Long, T> getSessionMap();}package com twitter sdk android core internal;import android app Activity;import android text format DateUtils;import io fabric sdk android ActivityLifecycleManager;import io fabric sdk android services common SystemCurrentTimeProvider;import com twitter sdk android core Session;import com twitter sdk android core SessionManager;import java util Calendar;import java util TimeZone;import java util concurrent ExecutorService;public class SessionMonitor<T extends Session> { protected final MonitorState monitorState; private final SystemCurrentTimeProvider time; private final SessionManager<T> sessionManager; private final ExecutorService executorService; private final SessionVerifier sessionVerifier;  public SessionMonitor(SessionManager<T> sessionManager, ExecutorService executorService, SessionVerifier<T> sessionVerifier) { this(sessionManager, new SystemCurrentTimeProvider(), executorService, new MonitorState(), sessionVerifier); } SessionMonitor(SessionManager<T> sessionManager, SystemCurrentTimeProvider time, ExecutorService executorService, MonitorState monitorState, SessionVerifier sessionVerifier) { this time = time; this sessionManager = sessionManager; this executorService = executorService; this monitorState = monitorState; this sessionVerifier = sessionVerifier; }  public void monitorActivityLifecycle(ActivityLifecycleManager activityLifecycleManager) { activityLifecycleManager registerCallbacks(new ActivityLifecycleManager Callbacks() { @Override public void onActivityStarted(Activity activity) { triggerVerificationIfNecessary(); } }); }  public void triggerVerificationIfNecessary() { final Session session = sessionManager getActiveSession(); final long currentTime = time getCurrentTimeMillis(); final boolean startVerification = session != null && monitorState beginVerification(currentTime); if (startVerification) { executorService submit(new Runnable() { @Override public void run() { verifyAll(); } }); } } protected void verifyAll() { for (T session : sessionManager getSessionMap() values()) { sessionVerifier verifySession(session); } monitorState endVerification(time getCurrentTimeMillis()); }  protected static class MonitorState { private static final long TIME_THRESHOLD_IN_MILLIS = 6 * DateUtils HOUR_IN_MILLIS; public boolean verifying; public long lastVerification; private final Calendar utcCalendar; public MonitorState() { this utcCalendar = Calendar getInstance(TimeZone getTimeZone("UTC")); } public synchronized boolean beginVerification(long currentTime) { final boolean isPastThreshold = currentTime - lastVerification > TIME_THRESHOLD_IN_MILLIS; final boolean dayHasChanged = !isOnSameDate(currentTime, lastVerification); if (!verifying && (isPastThreshold || dayHasChanged)) { return verifying = true; } return false; } public synchronized void endVerification(long currentTime) { verifying = false; lastVerification = currentTime; } private boolean isOnSameDate(long timeA, long timeB) { utcCalendar setTimeInMillis(timeA); final int dayA = utcCalendar get(Calendar DAY_OF_YEAR); final int yearA = utcCalendar get(Calendar YEAR); utcCalendar setTimeInMillis(timeB); final int dayB = utcCalendar get(Calendar DAY_OF_YEAR); final int yearB = utcCalendar get(Calendar YEAR); return dayA == dayB && yearA == yearB; } }}package com twitter sdk android core internal;import com twitter sdk android core Session;public interface SessionVerifier<T extends Session> { void verifySession(T session);}package com twitter sdk android core identity;import android app Activity;import android content Context;import android content Intent;import android content pm PackageManager;import android os Bundle;import android os ResultReceiver;import android view View;import android widget TextView;import com twitter sdk android core R;import com twitter sdk android core TwitterCore;import com twitter sdk android core TwitterSession;import io fabric sdk android Fabric;public class ShareEmailActivity extends Activity { static final String EXTRA_RESULT_RECEIVER = "result_receiver"; static final String EXTRA_SESSION_ID = "session_id";  ShareEmailController controller; private TwitterSession session; @Override protected void onCreate(Bundle savedInstanceState) { super onCreate(savedInstanceState); setContentView(R layout tw__activity_share_email); try { final Intent startIntent = getIntent(); final ResultReceiver resultReceiver = getResultReceiver(startIntent); session = getSession(startIntent); controller = new ShareEmailController(new ShareEmailClient(session), resultReceiver); final TextView shareEmailDescView = (TextView) findViewById(R id tw__share_email_desc); setUpShareEmailDesc(this, shareEmailDescView); } catch (IllegalArgumentException e) { Fabric getLogger() e(TwitterCore TAG, "Failed to create ShareEmailActivity ", e); finish(); } } private ResultReceiver getResultReceiver(Intent intent) { final ResultReceiver resultReceiver = intent getParcelableExtra(EXTRA_RESULT_RECEIVER); if (resultReceiver == null) { throw new IllegalArgumentException("ResultReceiver must not be null  This activity " + "should not be started directly "); } return resultReceiver; } private TwitterSession getSession(Intent intent) { // TODO: Make session parcelable and pass actual session  final long sessionId = intent getLongExtra(EXTRA_SESSION_ID, TwitterSession UNKNOWN_USER_ID); final TwitterSession session = TwitterCore getInstance() getSessionManager()  getSession(sessionId); if (session == null) { throw new IllegalArgumentException("No TwitterSession for id:" + sessionId); } return session; } void setUpShareEmailDesc(Context context, TextView shareEmailDescView) { final PackageManager packageManager = context getPackageManager(); shareEmailDescView setText(getResources() getString(R string tw__share_email_desc, packageManager getApplicationLabel(context getApplicationInfo()), session getUserName())); } public void onClickNotNow(View view) { controller cancelRequest(); finish(); } public void onClickAllow(View view) { controller executeRequest(); finish(); } @Override public void onBackPressed() { controller cancelRequest(); super onBackPressed(); }}package com twitter sdk android core identity;import android content Context;import android content Intent;import android content pm ApplicationInfo;import android content pm PackageManager;import android widget Button;import android widget TextView;import io fabric sdk android FabricActivityTestCase;import io fabric sdk android FabricTestUtils;import com twitter sdk android core Callback;import com twitter sdk android core R;import com twitter sdk android core SessionManager;import com twitter sdk android core TwitterAuthConfig;import com twitter sdk android core TwitterCore;import com twitter sdk android core TwitterSession;import static org mockito Matchers any;import static org mockito Mockito mock;import static org mockito Mockito verify;import static org mockito Mockito when;public class ShareEmailActivityTest extends FabricActivityTestCase<ShareEmailActivity> { private static final String TEST_APP_NAME = "app name"; private static final String TEST_USER_NAME = "user name"; private static final long TEST_SESSION_ID = 1L; private static final long TEST_SESSION_ID2 = 2L; private Context context; private TwitterSession mockSession; private ShareEmailController mockController; public ShareEmailActivityTest() { super(ShareEmailActivity class); } @Override protected void setUp() throws Exception { super setUp(); context = getInstrumentation() getTargetContext(); final TwitterCore twitterCore = new TwitterCore(new TwitterAuthConfig("", "")); FabricTestUtils resetFabric(); FabricTestUtils with(context, twitterCore); mockSession = mock(TwitterSession class); when(mockSession getUserName()) thenReturn(TEST_USER_NAME); when(mockSession getId()) thenReturn(TEST_SESSION_ID); mockController = mock(TestShareEmailController class); final SessionManager<TwitterSession> sessionManager = TwitterCore getInstance()  getSessionManager(); sessionManager setActiveSession(mockSession); } @Override protected void tearDown() throws Exception { FabricTestUtils resetFabric(); super tearDown(); } private void init() { final ShareEmailResultReceiver resultReceiver = new ShareEmailResultReceiver(mock(Callback class)); final Intent intent = new Intent(context, ShareEmailActivity class)  putExtra(ShareEmailActivity EXTRA_RESULT_RECEIVER, resultReceiver)  putExtra(ShareEmailActivity EXTRA_SESSION_ID, TEST_SESSION_ID); init(intent); } private void init(Intent intent) { final ShareEmailActivity activity = startActivity(intent, null, null); activity controller = mockController; } public void testOnCreate_extraResultReceiverMissing() { final Intent intent = new Intent(context, ShareEmailActivity class); init(intent); assertTrue(isFinishCalled()); } public void testOnCreate_extraSessionIdMissing() { final ShareEmailResultReceiver resultReceiver = new ShareEmailResultReceiver(mock(Callback class)); final Intent intent = new Intent(context, ShareEmailActivity class)  putExtra(ShareEmailActivity EXTRA_RESULT_RECEIVER, resultReceiver); init(intent); assertTrue(isFinishCalled()); } public void testOnCreate_extraSessionIdUnknown() { final ShareEmailResultReceiver resultReceiver = new ShareEmailResultReceiver(mock(Callback class)); final Intent intent = new Intent(context, ShareEmailActivity class)  putExtra(ShareEmailActivity EXTRA_RESULT_RECEIVER, resultReceiver)  putExtra(ShareEmailActivity EXTRA_SESSION_ID, TwitterSession UNKNOWN_USER_ID); init(intent); assertTrue(isFinishCalled()); } public void testOnCreate_extraSessionIdNotFound() { final ShareEmailResultReceiver resultReceiver = new ShareEmailResultReceiver(mock(Callback class)); final Intent intent = new Intent(context, ShareEmailActivity class)  putExtra(ShareEmailActivity EXTRA_RESULT_RECEIVER, resultReceiver)  putExtra(ShareEmailActivity EXTRA_SESSION_ID, TEST_SESSION_ID2); init(intent); assertTrue(isFinishCalled()); } public void testOnClickNotNow() { init(); final Button button = (Button) getActivity() findViewById(R id tw__not_now_btn); button performClick(); verify(mockController) cancelRequest(); } public void testOnClickAllow() { init(); final Button button = (Button) getActivity() findViewById(R id tw__allow_btn); button performClick(); verify(mockController) executeRequest(); } public void testSetUpShareEmailDesc() { init(); final TextView textView = new TextView(context); final Context mockContext = mock(Context class); final PackageManager mockPackageManager = mock(PackageManager class); when(mockContext getPackageManager()) thenReturn(mockPackageManager); when(mockPackageManager getApplicationLabel(any(ApplicationInfo class)))  thenReturn(TEST_APP_NAME); getActivity() setUpShareEmailDesc(mockContext, textView); assertEquals(context getString(R string tw__share_email_desc, TEST_APP_NAME, TEST_USER_NAME), textView getText() toString()); } public void testOnBackPressed() { init(); getActivity() onBackPressed(); verify(mockController) cancelRequest(); }}package com twitter sdk android core identity;import android app Activity;import com twitter sdk android core Callback;import com twitter sdk android core TwitterApiClient;import com twitter sdk android core TwitterSession;import com twitter sdk android core models User;import retrofit2 Call;import retrofit2 http GET;import retrofit2 http Query;class ShareEmailClient extends TwitterApiClient { static final int RESULT_CODE_CANCELED = Activity RESULT_CANCELED; static final int RESULT_CODE_OK = Activity RESULT_OK; static final int RESULT_CODE_ERROR = Activity RESULT_FIRST_USER; static final String RESULT_DATA_EMAIL = "email"; static final String RESULT_DATA_MSG = "msg"; static final String RESULT_DATA_ERROR = "error"; ShareEmailClient(TwitterSession session) { super(session); }  protected void getEmail(Callback<User> callback) { getService(EmailService class) verifyCredentials(true, true) enqueue(callback); } interface EmailService { @GET("/1 1/account/verify_credentials json?include_email=true") Call<User> verifyCredentials( @Query("include_entities") Boolean includeEntities, @Query("skip_status") Boolean skipStatus); }}package com twitter sdk android core identity;import io fabric sdk android FabricAndroidTestCase;import io fabric sdk android FabricTestUtils;import retrofit2 Call;import com twitter sdk android core Callback;import com twitter sdk android core TestFixtures;import com twitter sdk android core TwitterAuthConfig;import com twitter sdk android core TwitterCore;import com twitter sdk android core TwitterSession;import com twitter sdk android core models User;import static org mockito Matchers anyBoolean;import static org mockito Matchers eq;import static org mockito Mockito mock;import static org mockito Mockito verify;import static org mockito Mockito when;public class ShareEmailClientTest extends FabricAndroidTestCase { private ShareEmailClient EmailService mockEmailService; private ShareEmailClient shareEmailClient; public void setUp() throws Exception { super setUp(); FabricTestUtils resetFabric(); FabricTestUtils with(getContext(), new TwitterCore(new TwitterAuthConfig(TestFixtures KEY, TestFixtures SECRET))); mockEmailService = mock(ShareEmailClient EmailService class); when(mockEmailService verifyCredentials(anyBoolean(), anyBoolean()))  thenReturn(mock(Call class)); shareEmailClient = new ShareEmailClient(mock(TwitterSession class)) { @Override protected <T> T getService(Class<T> cls) { if (cls equals(EmailService class)) { return (T) mockEmailService; } else { return super getService(cls); } } }; } @Override protected void tearDown() throws Exception { FabricTestUtils resetFabric(); super tearDown(); } public void testGetEmail() throws Exception { final Callback<User> mockCallback = mock(Callback class); shareEmailClient getEmail(mockCallback); verify(mockEmailService) verifyCredentials(eq(true), eq(true)); }}package com twitter sdk android core identity;import android os Bundle;import android os ResultReceiver;import com twitter sdk android core Callback;import com twitter sdk android core Result;import com twitter sdk android core TwitterCore;import com twitter sdk android core TwitterException;import com twitter sdk android core models User;import io fabric sdk android Fabric;class ShareEmailController { private static final String EMPTY_EMAIL = ""; private final ShareEmailClient emailClient; private final ResultReceiver resultReceiver; public ShareEmailController(ShareEmailClient emailClient, ResultReceiver resultReceiver) { this emailClient = emailClient; this resultReceiver = resultReceiver; } public void executeRequest() { emailClient getEmail(newCallback()); } Callback<User> newCallback() { return new Callback<User>() { @Override public void success(Result<User> result) { handleSuccess(result data); } @Override public void failure(TwitterException exception) { Fabric getLogger() e(TwitterCore TAG, "Failed to get email address ", exception); // Create new exception that can be safely serialized since Retrofit errors may // throw a NotSerializableException  sendResultCodeError(new TwitterException("Failed to get email address ")); } }; } void handleSuccess(User user) { if (user email == null) { sendResultCodeError(new TwitterException("Your application may not have access to" + " email addresses or the user may not have an email address  To request" + " access, please visit https://support twitter com/forms/platform ")); } else if (EMPTY_EMAIL equals(user email)) { sendResultCodeError(new TwitterException("This user does not have an email address ")); } else { sendResultCodeOk(user email); } } void sendResultCodeOk(String email) { final Bundle bundle = new Bundle(); bundle putString(ShareEmailClient RESULT_DATA_EMAIL, email); resultReceiver send(ShareEmailClient RESULT_CODE_OK, bundle); } void sendResultCodeError(TwitterException exception) { final Bundle bundle = new Bundle(); bundle putSerializable(ShareEmailClient RESULT_DATA_ERROR, exception); resultReceiver send(ShareEmailClient RESULT_CODE_ERROR, bundle); } public void cancelRequest() { final Bundle bundle = new Bundle(); bundle putSerializable(ShareEmailClient RESULT_DATA_MSG, "The user chose not to share their email address at this time "); resultReceiver send(ShareEmailClient RESULT_CODE_CANCELED, bundle); }}package com twitter sdk android core identity;import android os Bundle;import android os ResultReceiver;import com twitter sdk android core Callback;import com twitter sdk android core Result;import com twitter sdk android core TwitterException;class ShareEmailResultReceiver extends ResultReceiver { private final Callback<String> callback; public ShareEmailResultReceiver(Callback<String> callback) { super(null); if (callback == null) { throw new IllegalArgumentException("Callback must not be null"); } this callback = callback; } @Override public void onReceiveResult(int resultCode, Bundle resultData) { switch (resultCode) { case ShareEmailClient RESULT_CODE_OK: { callback success(new Result<>( resultData getString(ShareEmailClient RESULT_DATA_EMAIL), null)); break; } case ShareEmailClient RESULT_CODE_CANCELED: { callback failure(new TwitterException(resultData getString( ShareEmailClient RESULT_DATA_MSG))); break; } case ShareEmailClient RESULT_CODE_ERROR: { callback failure((TwitterException) resultData getSerializable( ShareEmailClient RESULT_DATA_ERROR)); break; } default: { throw new IllegalArgumentException("Invalid result code " + resultCode); } } }}package com twitter sdk android tweetui;import android content Context;import android content Intent;import android content res Resources;import android view View;import com twitter sdk android core IntentUtils;import com twitter sdk android core models Tweet;import io fabric sdk android Fabric;class ShareTweetAction implements View OnClickListener { final Tweet tweet; final TweetUi tweetUi; final TweetScribeClient tweetScribeClient; ShareTweetAction(Tweet tweet, TweetUi tweetUi) { this(tweet, tweetUi, new TweetScribeClientImpl(tweetUi)); } // For testing only ShareTweetAction(Tweet tweet, TweetUi tweetUi, TweetScribeClient tweetScribeClient) { super(); this tweet = tweet; this tweetUi = tweetUi; this tweetScribeClient = tweetScribeClient; } @Override public void onClick(View v) { onClick(v getContext(), v getResources()); } void scribeShareAction() { tweetScribeClient share(tweet); } void onClick(Context context, Resources resources) { if (tweet == null || tweet user == null) return; scribeShareAction(); final String shareSubject = getShareSubject(resources); final String shareContent = getShareContent(resources); final Intent shareIntent = getShareIntent(shareSubject, shareContent); final String shareText = resources getString(R string tw__share_tweet); final Intent chooser = Intent createChooser(shareIntent, shareText); launchShareIntent(chooser, context); } String getShareContent(Resources resources) { return resources getString(R string tw__share_content_format, tweet user screenName, tweet id); } String getShareSubject(Resources resources) { return resources getString(R string tw__share_subject_format, tweet user name, tweet user screenName); } void launchShareIntent(Intent chooser, Context context) { if (!IntentUtils safeStartActivity(context, chooser)) { Fabric getLogger() e(TweetUi LOGTAG, "Activity cannot be found to handle share intent"); } } Intent getShareIntent(String subject, String content) { final Intent intent = new Intent(); intent setAction(Intent ACTION_SEND); intent putExtra(Intent EXTRA_SUBJECT, subject); intent putExtra(Intent EXTRA_TEXT, content); intent setType("text/plain"); return intent; }}package com twitter sdk android tweetui internal;import android annotation SuppressLint;import android text Layout;import android text Spanned;import android view MotionEvent;import android view View;import android widget TextView;public class SpanClickHandler { private final View view; private Layout layout; private float left; private float top; private HighlightedClickableSpan highlightedClickableSpan; public static void enableClicksOnSpans(TextView textView) { final SpanClickHandler helper = new SpanClickHandler(textView, null); textView setOnTouchListener(new View OnTouchListener() { @SuppressLint("ClickableViewAccessibility") @Override public boolean onTouch(View view, MotionEvent event) { final TextView textView = (TextView) view; final Layout layout = textView getLayout(); if (layout != null) { helper layout = layout; helper left = textView getTotalPaddingLeft() + textView getScrollX(); helper top = textView getTotalPaddingTop() + textView getScrollY(); return helper handleTouchEvent(event); } return false; } }); }  public SpanClickHandler(View view, Layout layout) { this view = view; this layout = layout; }  public void setPosition(float left, float top) { this left = left; this top = top; }  public boolean handleTouchEvent(MotionEvent event) { final CharSequence text = layout getText(); final Spanned spannedText = text instanceof Spanned ? (Spanned) text : null; if (spannedText == null) { return false; } final int action = (event getAction() & MotionEvent ACTION_MASK); final int x = (int) (event getX() - left); final int y = (int) (event getY() - top); if (x < 0 || x >= layout getWidth() || y < 0 || y >= layout getHeight()) { deselectSpan(); return false; } // Get the clicked line and check x is within the text on this line  final int line = layout getLineForVertical(y); if (x < layout getLineLeft(line) || x > layout getLineRight(line)) { deselectSpan(); return false; } if (action == MotionEvent ACTION_DOWN) { final int offset = layout getOffsetForHorizontal(line, x); final HighlightedClickableSpan[] span = spannedText getSpans(offset, offset, HighlightedClickableSpan class); if (span length > 0) { selectSpan(span[0]); return true; } } else if (action == MotionEvent ACTION_UP) { final HighlightedClickableSpan selectedSpan = highlightedClickableSpan; if (selectedSpan != null) { selectedSpan onClick(view); deselectSpan(); return true; } } return false; }  private void selectSpan(HighlightedClickableSpan span) { span select(true); highlightedClickableSpan = span; invalidate(); }  private void deselectSpan() { final HighlightedClickableSpan selectedSpan = highlightedClickableSpan; if (selectedSpan != null && selectedSpan isSelected()) { selectedSpan select(false); highlightedClickableSpan = null; invalidate(); } } private void invalidate() { view invalidate((int) left, (int) top, (int) left + layout getWidth(), (int) top + layout getHeight()); }}package com twitter sdk android core identity;import android app Activity;import android content ComponentName;import android content Context;import android content Intent;import android content pm PackageInfo;import android content pm PackageManager;import android content pm Signature;import io fabric sdk android Fabric;import com twitter sdk android core Callback;import com twitter sdk android core IntentUtils;import com twitter sdk android core TwitterCore;import com twitter sdk android core TwitterAuthConfig;import com twitter sdk android core TwitterSession;class SSOAuthHandler extends AuthHandler { // Package name of the Twitter for Android application  static final String TWITTER_PACKAGE_NAME = "com twitter android"; // Package name of the Twitter Dogfood Android application  static final String DOGFOOD_PACKAGE_NAME = "com twitter android beta"; // Class name of the Activity responsible for Single sign-on flow  static final String SSO_CLASS_NAME = TWITTER_PACKAGE_NAME + " SingleSignOnActivity"; // Twitter for Android application signature static final String TWITTER_SIGNATURE = "3082025d308201c6a00302010202044bd76cce300d06092" + "a864886f70d01010505003073310b3009060355040613025553310b3009060355040813024341311630" + "140603550407130d53616e204672616e636973636f31163014060355040a130d547769747465722c204" + "96e632e310f300d060355040b13064d6f62696c65311630140603550403130d4c656c616e6420526563" + "686973301e170d3130303432373233303133345a170d3438303832353233303133345a3073310b30090" + "60355040613025553310b3009060355040813024341311630140603550407130d53616e204672616e63" + "6973636f31163014060355040a130d547769747465722c20496e632e310f300d060355040b13064d6f6" + "2696c65311630140603550403130d4c656c616e642052656368697330819f300d06092a864886f70d01" + "0101050003818d003081890281810086233c2e51c62232d49cc932e470713d63a6a1106b38f9e442e01" + "bc79ca4f95c72b2cb3f1369ef7dea6036bff7c4b2828cb3787e7657ad83986751ced5b131fcc6f413ef" + "b7334e32ed9787f9e9a249ae108fa66009ac7a7932c25d37e1e07d4f9f66aa494c270dbac87d261c966" + "8d321c2fba4ef2800e46671a597ff2eac5d7f0203010001300d06092a864886f70d0101050500038181" + "003e1f01cb6ea8be8d2cecef5cd2a64c97ba8728aa5f08f8275d00508d64d139b6a72c5716b40a040df" + "0eeeda04de9361107e123ee8d3dc05e70c8a355f46dbadf1235443b0b214c57211afd4edd147451c443" + "d49498d2a7ff27e45a99c39b9e47429a1dae843ba233bf8ca81296dbe1dc5c5434514d995b027924680" + "9392a219b"; // Twitter Android Dogfood application signature static final String DOGFOOD_SIGNATURE = "308203523082023aa00302010202044fd0006b300d06092a864" + "886f70d0101050500306b310b3009060355040613025553310b30090603550408130243413116301406" + "03550407130d53616e204672616e636973636f3110300e060355040a130754776974746572310f300d0" + "60355040b13064d6f62696c65311430120603550403130b4a6f6e617468616e204c65301e170d313230" + "3630373031313431395a170d3339313032343031313431395a306b310b3009060355040613025553310" + "b3009060355040813024341311630140603550407130d53616e204672616e636973636f3110300e0603" + "55040a130754776974746572310f300d060355040b13064d6f62696c65311430120603550403130b4a6" + "f6e617468616e204c6530820122300d06092a864886f70d01010105000382010f003082010a02820101" + "0089e6cbdfed4288a9c0a215d33d4fa978a5bdd20be426ef4b497d358a9fd1c6efec9684f059f6955e6" + "0e5fda1b5910bb2d097e7421a78f9c81e95cd8ef3bf50add7f8d9f073c0478736a6c7fd38c587155978" + "3a76420d37f3f874f2114ec02532e85587791d24037485b1b95ec8cbc75b52042867988b51c7c3589d5" + "b5972fd20a2e8a7c9ced986873f5008a418b2921daa7cfb78afc174eecdb8a79dc0961bea9740d09c46" + "56ac9b8c86263a788e35af1d4a3f86ce053a1aefb5369def91614a390219f896f378712376baa05934a" + "341798950e229f4f735b86004952b259f23cc9fc3b8c1bc8171984884dc92940e91f2e9a78a84a78f0c" + "2946b7e37bbf3b9b0203010001300d06092a864886f70d010105050003820101001cf15250365e66cc8" + "7bb5054de1661266cf87907841016b20dfa1f9f59842020cbc33f9b4d41717db0428d11696a0bade6a4" + "950a48cc4fa8ae56c850647379a5c2d977436b644162c453dd36b7745ccb9ff0b5fc070125024de73da" + "b6dcda5c69372e978a49865f569927199ed0f61d7cbee1839079a7da2e83f8c90f7421a8c81b3f17f1c" + "c05d52aedac9acd6e092ffd9ad572960e779a5b91a78e1aeb2b3c7b24464bd223c745e40abd74fc5863" + "10809520d183443fcca3c6ade3be458afedbd3325df9c0e552636e35bb55b240eb8c0ba3973c4fb8121" + "3f22363be2d70e85014650c2f4fc679747a7ec31ea7b08da7dd9b9ba279a7fbbc1bd440fbe831bf4"; private static final String EXTRA_CONSUMER_KEY = "ck"; private static final String EXTRA_CONSUMER_SECRET = "cs"; public SSOAuthHandler(TwitterAuthConfig authConfig, Callback<TwitterSession> callback, int requestCode) { super(authConfig, callback, requestCode); } @Override public boolean authorize(Activity activity) { return startAuthActivityForResult(activity); } private boolean startAuthActivityForResult(Activity activity) { final PackageManager pm = activity getPackageManager(); final String packageName = availableSSOPackage(pm); if (packageName == null) { Fabric getLogger() e(TwitterCore TAG, "SSO app signature check failed", null); return false; } final ComponentName ssoActivity = new ComponentName(packageName, SSO_CLASS_NAME); final TwitterAuthConfig authConfig = getAuthConfig(); final Intent intent = new Intent() setComponent(ssoActivity); if (!IntentUtils isActivityAvailable(activity, intent)) { Fabric getLogger() e(TwitterCore TAG, "SSO auth activity not found", null); return false; } intent putExtra(EXTRA_CONSUMER_KEY, authConfig getConsumerKey())  putExtra(EXTRA_CONSUMER_SECRET, authConfig getConsumerSecret()); try { activity startActivityForResult(intent, requestCode); return true; } catch (Exception e) { Fabric getLogger() e(TwitterCore TAG, "SSO exception occurred", e); return false; } }  public static String availableSSOPackage(PackageManager pm) { if (checkAppSignature(pm, TWITTER_PACKAGE_NAME, TWITTER_SIGNATURE)) { return TWITTER_PACKAGE_NAME; } else if (checkAppSignature(pm, DOGFOOD_PACKAGE_NAME, DOGFOOD_SIGNATURE)) { return DOGFOOD_PACKAGE_NAME; } else { return null; } }  public static boolean isAvailable(Context context) { final PackageManager pm = context getPackageManager(); return checkAppSignature(pm, TWITTER_PACKAGE_NAME, TWITTER_SIGNATURE) || checkAppSignature(pm, DOGFOOD_PACKAGE_NAME, DOGFOOD_SIGNATURE); } private static boolean checkAppSignature(PackageManager pm, String packageName, String requiredSignature) { PackageInfo p; try { p = pm getPackageInfo(packageName, PackageManager GET_SIGNATURES); } catch (PackageManager NameNotFoundException e) { return false; } for (Signature s : p signatures) { if (!requiredSignature equals(s toCharsString())) { return false; } } return true; }}package com twitter sdk android tweetcomposer;import com twitter sdk android core models Tweet;import retrofit2 Call;import retrofit2 http Field;import retrofit2 http FormUrlEncoded;import retrofit2 http POST;public interface StatusesService { @FormUrlEncoded @POST("/1 1/statuses/update json") Call<Tweet> update(@Field("status") String status, @Field("card_uri") String cardUri);}package com twitter sdk android core internal scribe;import com google gson annotations SerializedName;import java util Collections;import java util List;public class SyndicatedSdkImpressionEvent extends ScribeEvent { public static final String CLIENT_NAME = "android"; private static final String SCRIBE_CATEGORY = "syndicated_sdk_impression";  @SerializedName("external_ids") public final ExternalIds externalIds;  @SerializedName("device_id_created_at") public final long deviceIdCreatedAt;  @SerializedName("language") public final String language; public SyndicatedSdkImpressionEvent(EventNamespace eventNamespace, long timestamp, String language, String adId) { this(eventNamespace, timestamp, language, adId, Collections <ScribeItem>emptyList()); } public SyndicatedSdkImpressionEvent(EventNamespace eventNamespace, long timestamp, String language, String adId, List<ScribeItem> items) { super(SCRIBE_CATEGORY, eventNamespace, timestamp, items); this language = language; this externalIds = new ExternalIds(adId); this deviceIdCreatedAt = 0; // see field comment } public class ExternalIds {  @SerializedName("AD_ID") public final String adId; public ExternalIds(String adId) { this adId = adId; } }}package com twitter sdk android core internal scribe;import com google gson annotations SerializedName;import java util List;public class SyndicationClientEvent extends ScribeEvent { public static final String CLIENT_NAME = "tfw"; private static final String SCRIBE_CATEGORY = "tfw_client_event";  @SerializedName("language") public final String language;  @SerializedName("event_info") public final String eventInfo;  @SerializedName("external_ids") public final ExternalIds externalIds; public SyndicationClientEvent(EventNamespace eventNamespace, String eventInfo, long timestamp, String language, String adId, List<ScribeItem> items) { super(SCRIBE_CATEGORY, eventNamespace, timestamp, items); this language = language; this eventInfo = eventInfo; externalIds = new ExternalIds(adId); } public class ExternalIds {  @SerializedName("6") public final String adId; public ExternalIds(String adId) { this adId = adId; } }}package com twitter sdk android core identity;public class TestAuthState extends AuthState {}package com twitter sdk android core;public final class TestFixtures { public static final String KEY = "key"; public static final String TOKEN = "token"; public static final String SECRET = "secret"; public static final long USER_ID = 11L;}package com twitter sdk android core identity;import android webkit WebView;import android widget ProgressBar;import com twitter sdk android core TwitterAuthConfig;import com twitter sdk android core internal oauth OAuth1aService;public class TestOAuthController extends OAuthController { TestOAuthController(ProgressBar spinner, WebView webView, TwitterAuthConfig authConfig, OAuth1aService oAuth1aService, Listener listener) { super(spinner, webView, authConfig, oAuth1aService, listener); }}package com twitter sdk android core identity;import com twitter sdk android core TwitterSession;public class TestShareEmailClient extends ShareEmailClient { public TestShareEmailClient(TwitterSession session) { super(session); }}package com twitter sdk android core identity;import android os ResultReceiver;public class TestShareEmailController extends ShareEmailController { public TestShareEmailController(ShareEmailClient emailClient, ResultReceiver resultReceiver) { super(emailClient, resultReceiver); }}package com twitter sdk android core identity;import android content Context;import android content pm PackageInfo;import android content pm PackageManager;import android content pm Signature;import static org mockito Mockito *;public final class TestUtils { private TestUtils() { // Private constructor } public static void setupTwitterInstalled(Context mockContext) throws PackageManager NameNotFoundException { setupTwitterInstalled(mockContext, SSOAuthHandler TWITTER_SIGNATURE); } public static void setupTwitterInstalled(Context mockContext, String signature) throws PackageManager NameNotFoundException { final PackageManager mockPm = mock(PackageManager class); final PackageInfo mockPackageInfo = mock(PackageInfo class); mockPackageInfo signatures = new Signature[] { new Signature(signature) }; when(mockContext getPackageManager()) thenReturn(mockPm); when(mockPm getPackageInfo(SSOAuthHandler TWITTER_PACKAGE_NAME, PackageManager GET_SIGNATURES)) thenReturn(mockPackageInfo); when(mockPm getPackageInfo(SSOAuthHandler DOGFOOD_PACKAGE_NAME, PackageManager GET_SIGNATURES))  thenThrow(new PackageManager NameNotFoundException()); } public static void setupNoSSOAppInstalled(Context mockContext) throws PackageManager NameNotFoundException { final PackageManager mockPm = mock(PackageManager class); when(mockContext getPackageManager()) thenReturn(mockPm); when(mockPm getPackageInfo(SSOAuthHandler TWITTER_PACKAGE_NAME, PackageManager GET_SIGNATURES))  thenThrow(new PackageManager NameNotFoundException()); when(mockPm getPackageInfo(SSOAuthHandler DOGFOOD_PACKAGE_NAME, PackageManager GET_SIGNATURES))  thenThrow(new PackageManager NameNotFoundException()); }}package com twitter sdk android tweetui;import com twitter sdk android core Callback;public interface Timeline<T> {  void next(Long minPosition, final Callback<TimelineResult<T>> cb);  void previous(Long maxPosition, final Callback<TimelineResult<T>> cb);}package com twitter sdk android tweetui;import com twitter sdk android core models Identifiable;import java util List;public class TimelineCursor { public final Long minPosition; public final Long maxPosition;  public TimelineCursor(Long minPosition, Long maxPosition) { this minPosition = minPosition; this maxPosition = maxPosition; }  TimelineCursor(List<? extends Identifiable> items) { this minPosition = items size() > 0 ? items get(items size() - 1) getId() : null; this maxPosition = items size() > 0 ? items get(0) getId() : null; }}package com twitter sdk android tweetui internal;import android database DataSetObservable;import android database DataSetObserver;import com twitter sdk android core Callback;import com twitter sdk android core Result;import com twitter sdk android core TwitterException;import com twitter sdk android core models Identifiable;import com twitter sdk android tweetui Timeline;import com twitter sdk android tweetui TimelineResult;import java util ArrayList;import java util List;public class TimelineDelegate<T extends Identifiable> { // once capacity is exceeded, additional items will not be loaded static final long CAPACITY = 200L; // timeline that next and previous items are loaded from final Timeline<T> timeline; // Observable for Adapter DataSetObservers (for ListViews) final DataSetObservable listAdapterObservable; final TimelineStateHolder timelineStateHolder; List<T> itemList;  public TimelineDelegate(Timeline<T> timeline) { this(timeline, null, null); } TimelineDelegate(Timeline<T> timeline, DataSetObservable observable, List<T> items) { if (timeline == null) { throw new IllegalArgumentException("Timeline must not be null"); } this timeline = timeline; this timelineStateHolder = new TimelineStateHolder(); if (observable == null) { listAdapterObservable = new DataSetObservable(); } else { listAdapterObservable = observable; } if (items == null) { itemList = new ArrayList<>(); } else { itemList = items; } }  public void refresh(Callback<TimelineResult<T>> developerCb) { // reset scrollStateHolder cursors to be null, loadNext will get latest items timelineStateHolder resetCursors(); // load latest timeline items and replace existing items loadNext(timelineStateHolder positionForNext(), new RefreshCallback(developerCb, timelineStateHolder)); }  public void next(Callback<TimelineResult<T>> developerCb) { loadNext(timelineStateHolder positionForNext(), new NextCallback(developerCb, timelineStateHolder)); }  public void previous() { loadPrevious(timelineStateHolder positionForPrevious(), new PreviousCallback(timelineStateHolder)); }  public int getCount() { return itemList size(); }  public T getItem(int position) { if (isLastPosition(position)) { previous(); } return itemList get(position); }  public long getItemId(int position) { final Identifiable item = itemList get(position); return item getId(); }  public void setItemById(T item) { for (int i = 0; i < itemList size(); i++) { if (item getId() == itemList get(i) getId()) { itemList set(i, item); } } notifyDataSetChanged(); }  boolean withinMaxCapacity() { return itemList size() < CAPACITY; }  boolean isLastPosition(int position) { return position == (itemList size() - 1); }  void loadNext(Long minPosition, Callback<TimelineResult<T>> cb) { if (withinMaxCapacity()) { if (timelineStateHolder startTimelineRequest()) { timeline next(minPosition, cb); } else { cb failure(new TwitterException("Request already in flight")); } } else { cb failure(new TwitterException("Max capacity reached")); } }  void loadPrevious(Long maxPosition, Callback<TimelineResult<T>> cb) { if (withinMaxCapacity()) { if (timelineStateHolder startTimelineRequest()) { timeline previous(maxPosition, cb); } else { cb failure(new TwitterException("Request already in flight")); } } else { cb failure(new TwitterException("Max capacity reached")); } }  class DefaultCallback extends Callback<TimelineResult<T>> { final Callback<TimelineResult<T>> developerCallback; final TimelineStateHolder timelineStateHolder; DefaultCallback(Callback<TimelineResult<T>> developerCb, TimelineStateHolder timelineStateHolder) { this developerCallback = developerCb; this timelineStateHolder = timelineStateHolder; } @Override public void success(Result<TimelineResult<T>> result) { timelineStateHolder finishTimelineRequest(); if (developerCallback != null) { developerCallback success(result); } } @Override public void failure(TwitterException exception) { timelineStateHolder finishTimelineRequest(); if (developerCallback != null) { developerCallback failure(exception); } } }  class NextCallback extends DefaultCallback { NextCallback(Callback<TimelineResult<T>> developerCb, TimelineStateHolder timelineStateHolder) { super(developerCb, timelineStateHolder); } @Override public void success(Result<TimelineResult<T>> result) { if (result data items size() > 0) { final ArrayList<T> receivedItems = new ArrayList<>(result data items); receivedItems addAll(itemList); itemList = receivedItems; notifyDataSetChanged(); timelineStateHolder setNextCursor(result data timelineCursor); } // do nothing when zero items are received  Subsequent 'next' call does not change  super success(result); } }  class RefreshCallback extends NextCallback { RefreshCallback(Callback<TimelineResult<T>> developerCb, TimelineStateHolder timelineStateHolder) { super(developerCb, timelineStateHolder); } @Override public void success(Result<TimelineResult<T>> result) { if (result data items size() > 0) { itemList clear(); } super success(result); } }  class PreviousCallback extends DefaultCallback { PreviousCallback(TimelineStateHolder timelineStateHolder) { super(null, timelineStateHolder); } @Override public void success(Result<TimelineResult<T>> result) { if (result data items size() > 0) { itemList addAll(result data items); notifyDataSetChanged(); timelineStateHolder setPreviousCursor(result data timelineCursor); } // do nothing when zero items are received  Subsequent 'next' call does not change  super success(result); } }   public void registerDataSetObserver(DataSetObserver observer) { listAdapterObservable registerObserver(observer); }  public void unregisterDataSetObserver(DataSetObserver observer) { listAdapterObservable unregisterObserver(observer); }  public void notifyDataSetChanged() { listAdapterObservable notifyChanged(); }  public void notifyDataSetInvalidated() { listAdapterObservable notifyInvalidated(); }}package com twitter sdk android tweetui;import android content Context;import android database DataSetObserver;import android widget BaseAdapter;import com twitter sdk android core Callback;import com twitter sdk android core models Identifiable;import com twitter sdk android tweetui internal TimelineDelegate;abstract class TimelineListAdapter<T extends Identifiable> extends BaseAdapter { protected final Context context; protected final TimelineDelegate<T> delegate;  public TimelineListAdapter(Context context, Timeline<T> timeline) { this(context, new TimelineDelegate<>(timeline)); } TimelineListAdapter(Context context, TimelineDelegate<T> delegate) { if (context == null) { throw new IllegalArgumentException("Context must not be null"); } this context = context; this delegate = delegate; delegate refresh(null); }  public void refresh(Callback<TimelineResult<T>> cb) { delegate refresh(cb); } @Override public int getCount() { return delegate getCount(); } @Override public T getItem(int position) { return delegate getItem(position); } @Override public long getItemId(int position) { return delegate getItemId(position); } @Override public void registerDataSetObserver(DataSetObserver observer) { delegate registerDataSetObserver(observer); } @Override public void unregisterDataSetObserver(DataSetObserver observer) { delegate unregisterDataSetObserver(observer); } @Override public void notifyDataSetChanged() { delegate notifyDataSetChanged(); } @Override public void notifyDataSetInvalidated() { delegate notifyDataSetInvalidated(); }}package com twitter sdk android tweetui;import java util List;public class TimelineResult<T> { public final TimelineCursor timelineCursor; public final List<T> items;  public TimelineResult(TimelineCursor timelineCursor, List<T> items) { this timelineCursor = timelineCursor; this items = items; }}package com twitter sdk android tweetui internal;import com twitter sdk android tweetui TimelineCursor;import java util concurrent atomic AtomicBoolean;public class TimelineStateHolder { // cursor for Timeline 'next' calls TimelineCursor nextCursor; // cursor for Timeline 'previous' calls TimelineCursor previousCursor; // true while a request is in flight, false otherwise public final AtomicBoolean requestInFlight = new AtomicBoolean(false); public TimelineStateHolder() { // intentionally blank }  public TimelineStateHolder(TimelineCursor nextCursor, TimelineCursor previousCursor) { this nextCursor = nextCursor; this previousCursor = previousCursor; }  public void resetCursors() { nextCursor = null; previousCursor = null; }  public Long positionForNext() { return nextCursor == null ? null : nextCursor maxPosition; }  public Long positionForPrevious() { return previousCursor == null ? null : previousCursor minPosition; }  public void setNextCursor(TimelineCursor timelineCursor) { nextCursor = timelineCursor; setCursorsIfNull(timelineCursor); }  public void setPreviousCursor(TimelineCursor timelineCursor) { previousCursor = timelineCursor; setCursorsIfNull(timelineCursor); }  public void setCursorsIfNull(TimelineCursor timelineCursor) { if (nextCursor == null) { nextCursor = timelineCursor; } if (previousCursor == null) { previousCursor = timelineCursor; } }  public boolean startTimelineRequest() { return requestInFlight compareAndSet(false, true); }  public void finishTimelineRequest() { requestInFlight set(false); }}package com twitter sdk android tweetui;import android content Context;import android content res TypedArray;import android util AttributeSet;import android widget ImageButton;public class ToggleImageButton extends ImageButton { private static final int[] STATE_TOGGLED_ON = {R attr state_toggled_on}; boolean isToggledOn; String contentDescriptionOn; String contentDescriptionOff; final boolean toggleOnClick; public ToggleImageButton(Context context) { this(context, null); } public ToggleImageButton(Context context, AttributeSet attrs) { this(context, attrs, 0); } public ToggleImageButton(Context context, AttributeSet attrs, int defStyle) { super(context, attrs, defStyle); TypedArray a = null; try { a = context getTheme() obtainStyledAttributes(attrs, R styleable ToggleImageButton, defStyle, 0); final String contentDescriptionOn = a getString(R styleable ToggleImageButton_contentDescriptionOn); final String contentDescriptionOff = a getString(R styleable ToggleImageButton_contentDescriptionOff); this contentDescriptionOn = contentDescriptionOn == null ? (String) getContentDescription() : contentDescriptionOn; this contentDescriptionOff = contentDescriptionOff == null ? (String) getContentDescription() : contentDescriptionOff; toggleOnClick = a getBoolean(R styleable ToggleImageButton_toggleOnClick, true); setToggledOn(false); } finally { if (a != null) { a recycle(); } } } @Override public int[] onCreateDrawableState(int extraSpace) { final int[] drawableState = super onCreateDrawableState(extraSpace + 2); if (isToggledOn) { mergeDrawableStates(drawableState, STATE_TOGGLED_ON); } return drawableState; } @Override public boolean performClick() { if (toggleOnClick) { toggle(); } return super performClick(); } public void setToggledOn(boolean isToggledOn) { this isToggledOn = isToggledOn; setContentDescription(isToggledOn ? contentDescriptionOn : contentDescriptionOff); refreshDrawableState(); } public void toggle() { setToggledOn(!isToggledOn); } public boolean isToggledOn() { return isToggledOn; }}package com twitter sdk android core models;import com google gson annotations SerializedName;import java util List;public class Tweet implements Identifiable { public static final long INVALID_ID = -1L;  @SerializedName("coordinates") public final Coordinates coordinates;  @SerializedName("created_at") public final String createdAt;  @SerializedName("current_user_retweet") public final Object currentUserRetweet;  @SerializedName("entities") public final TweetEntities entities;  @SerializedName("extended_entities") public final TweetEntities extendedEtities;  @SerializedName("favorite_count") public final Integer favoriteCount;  @SerializedName("favorited") public final boolean favorited;  @SerializedName("filter_level") public final String filterLevel;  @SerializedName("id") public final long id;  @SerializedName("id_str") public final String idStr;  @SerializedName("in_reply_to_screen_name") public final String inReplyToScreenName;  @SerializedName("in_reply_to_status_id") public final long inReplyToStatusId;  @SerializedName("in_reply_to_status_id_str") public final String inReplyToStatusIdStr;  @SerializedName("in_reply_to_user_id") public final long inReplyToUserId;  @SerializedName("in_reply_to_user_id_str") public final String inReplyToUserIdStr;  @SerializedName("lang") public final String lang;  @SerializedName("place") public final Place place;  @SerializedName("possibly_sensitive") public final boolean possiblySensitive;  @SerializedName("scopes") public final Object scopes;  @SerializedName("quoted_status_id") public final long quotedStatusId;  @SerializedName("quoted_status_id_str") public final String quotedStatusIdStr;  @SerializedName("quoted_status") public final Tweet quotedStatus;  @SerializedName("retweet_count") public final int retweetCount;  @SerializedName("retweeted") public final boolean retweeted;  @SerializedName("retweeted_status") public final Tweet retweetedStatus;  @SerializedName("source") public final String source;  @SerializedName(value = "text", alternate = {"full_text"}) public final String text;  @SerializedName("display_text_range") public final List<Integer> displayTextRange;  @SerializedName("truncated") public final boolean truncated;  @SerializedName("user") public final User user;  @SerializedName("withheld_copyright") public final boolean withheldCopyright;  @SerializedName("withheld_in_countries") public final List<String> withheldInCountries;  @SerializedName("withheld_scope") public final String withheldScope;  @SerializedName("card") public final Card card; public Tweet(Coordinates coordinates, String createdAt, Object currentUserRetweet, TweetEntities entities, TweetEntities extendedEtities, Integer favoriteCount, boolean favorited, String filterLevel, long id, String idStr, String inReplyToScreenName, long inReplyToStatusId, String inReplyToStatusIdStr, long inReplyToUserId, String inReplyToUserIdStr, String lang, Place place, boolean possiblySensitive, Object scopes, long quotedStatusId, String quotedStatusIdStr, Tweet quotedStatus, int retweetCount, boolean retweeted, Tweet retweetedStatus, String source, String text, List<Integer> displayTextRange, boolean truncated, User user, boolean withheldCopyright, List<String> withheldInCountries, String withheldScope, Card card) { this coordinates = coordinates; this createdAt = createdAt; this currentUserRetweet = currentUserRetweet; this entities = entities; this extendedEtities = extendedEtities; this favoriteCount = favoriteCount; this favorited = favorited; this filterLevel = filterLevel; this id = id; this idStr = idStr; this inReplyToScreenName = inReplyToScreenName; this inReplyToStatusId = inReplyToStatusId; this inReplyToStatusIdStr = inReplyToStatusIdStr; this inReplyToUserId = inReplyToUserId; this inReplyToUserIdStr = inReplyToUserIdStr; this lang = lang; this place = place; this possiblySensitive = possiblySensitive; this scopes = scopes; this quotedStatusId = quotedStatusId; this quotedStatusIdStr = quotedStatusIdStr; this quotedStatus = quotedStatus; this retweetCount = retweetCount; this retweeted = retweeted; this retweetedStatus = retweetedStatus; this source = source; this text = text; this displayTextRange = displayTextRange; this truncated = truncated; this user = user; this withheldCopyright = withheldCopyright; this withheldInCountries = withheldInCountries; this withheldScope = withheldScope; this card = card; } @Override public long getId() { return this id; } @Override public boolean equals(Object o) { if (o == null) return false; if (!(o instanceof Tweet)) return false; final Tweet other = (Tweet) o; return this id == other id; } @Override public int hashCode() { return (int) this id; }}package com twitter sdk android tweetui;import android content Context;import android util AttributeSet;import android widget ImageButton;import android widget LinearLayout;import com twitter sdk android core Callback;import com twitter sdk android core models Tweet;public class TweetActionBarView extends LinearLayout { final DependencyProvider dependencyProvider; ToggleImageButton likeButton; ImageButton shareButton; Callback<Tweet> actionCallback; public TweetActionBarView(Context context) { this(context, null, new DependencyProvider()); } public TweetActionBarView(Context context, AttributeSet attrs) { this(context, attrs, new DependencyProvider()); } TweetActionBarView(Context context, AttributeSet attrs, DependencyProvider dependencyProvider) { super(context, attrs); this dependencyProvider = dependencyProvider; } @Override protected void onFinishInflate() { super onFinishInflate(); findSubviews(); }  void setOnActionCallback(Callback<Tweet> actionCallback) { this actionCallback = actionCallback; } void findSubviews() { likeButton = (ToggleImageButton) findViewById(R id tw__tweet_like_button); shareButton = (ImageButton) findViewById(R id tw__tweet_share_button); }  void setTweet(Tweet tweet) { setLike(tweet); setShare(tweet); } void setLike(Tweet tweet) { final TweetUi tweetUi = dependencyProvider getTweetUi(); if (tweet != null) { likeButton setToggledOn(tweet favorited); final LikeTweetAction likeTweetAction = new LikeTweetAction(tweet, tweetUi, actionCallback); likeButton setOnClickListener(likeTweetAction); } } void setShare(Tweet tweet) { final TweetUi tweetUi = dependencyProvider getTweetUi(); if (tweet != null) { shareButton setOnClickListener(new ShareTweetAction(tweet, tweetUi)); } }  static class DependencyProvider {  TweetUi getTweetUi() { return TweetUi getInstance(); } }}package com twitter sdk android core models;import java util Collections;import java util List;public class TweetBuilder { private Coordinates coordinates; private String createdAt; private Object currentUserRetweet; private TweetEntities entities; private TweetEntities extendedEtities; private Integer favoriteCount; private boolean favorited; private String filterLevel; private long id = Tweet INVALID_ID; private String idStr; private String inReplyToScreenName; private long inReplyToStatusId; private String inReplyToStatusIdStr; private long inReplyToUserId; private String inReplyToUserIdStr; private String lang; private Place place; private boolean possiblySensitive; private Object scopes; private long quotedStatusId; private String quotedStatusIdStr; private Tweet quotedStatus; private int retweetCount; private boolean retweeted; private Tweet retweetedStatus; private String source; private String text; private List<Integer> displayTextRange = Collections EMPTY_LIST; private boolean truncated; private User user; private boolean withheldCopyright; private List<String> withheldInCountries = Collections EMPTY_LIST; private String withheldScope; private Card card; public TweetBuilder setCoordinates(Coordinates coordinates) { this coordinates = coordinates; return this; } public TweetBuilder setCreatedAt(String createdAt) { this createdAt = createdAt; return this; } public TweetBuilder setCurrentUserRetweet(Object currentUserRetweet) { this currentUserRetweet = currentUserRetweet; return this; } public TweetBuilder setEntities(TweetEntities entities) { this entities = entities; return this; } public TweetBuilder setExtendedEntities(TweetEntities extendedEtities) { this extendedEtities = extendedEtities; return this; } public TweetBuilder setFavoriteCount(Integer favoriteCount) { this favoriteCount = favoriteCount; return this; } public TweetBuilder setFavorited(boolean favorited) { this favorited = favorited; return this; } public TweetBuilder setFilterLevel(String filterLevel) { this filterLevel = filterLevel; return this; } public TweetBuilder setId(long id) { this id = id; return this; } public TweetBuilder setIdStr(String idStr) { this idStr = idStr; return this; } public TweetBuilder setInReplyToScreenName(String inReplyToScreenName) { this inReplyToScreenName = inReplyToScreenName; return this; } public TweetBuilder setInReplyToStatusId(long inReplyToStatusId) { this inReplyToStatusId = inReplyToStatusId; return this; } public TweetBuilder setInReplyToStatusIdStr(String inReplyToStatusIdStr) { this inReplyToStatusIdStr = inReplyToStatusIdStr; return this; } public TweetBuilder setInReplyToUserId(long inReplyToUserId) { this inReplyToUserId = inReplyToUserId; return this; } public TweetBuilder setInReplyToUserIdStr(String inReplyToUserIdStr) { this inReplyToUserIdStr = inReplyToUserIdStr; return this; } public TweetBuilder setLang(String lang) { this lang = lang; return this; } public TweetBuilder setPlace(Place place) { this place = place; return this; } public TweetBuilder setPossiblySensitive(boolean possiblySensitive) { this possiblySensitive = possiblySensitive; return this; } public TweetBuilder setScopes(Object scopes) { this scopes = scopes; return this; } public TweetBuilder setQuotedStatusId(long quotedStatusId) { this quotedStatusId = quotedStatusId; return this; } public TweetBuilder setQuotedStatusIdStr(String quotedStatusIdStr) { this quotedStatusIdStr = quotedStatusIdStr; return this; } public TweetBuilder setQuotedStatus(Tweet quotedStatus) { this quotedStatus = quotedStatus; return this; } public TweetBuilder setRetweetCount(int retweetCount) { this retweetCount = retweetCount; return this; } public TweetBuilder setRetweeted(boolean retweeted) { this retweeted = retweeted; return this; } public TweetBuilder setRetweetedStatus(Tweet retweetedStatus) { this retweetedStatus = retweetedStatus; return this; } public TweetBuilder setSource(String source) { this source = source; return this; } public TweetBuilder setText(String text) { this text = text; return this; } public TweetBuilder setDisplayTextRange(List<Integer> displayTextRange) { this displayTextRange = displayTextRange; return this; } public TweetBuilder setTruncated(boolean truncated) { this truncated = truncated; return this; } public TweetBuilder setUser(User user) { this user = user; return this; } public TweetBuilder setWithheldCopyright(boolean withheldCopyright) { this withheldCopyright = withheldCopyright; return this; } public TweetBuilder setWithheldInCountries(List<String> withheldInCountries) { this withheldInCountries = withheldInCountries; return this; } public TweetBuilder setWithheldScope(String withheldScope) { this withheldScope = withheldScope; return this; } public TweetBuilder setCard(Card card) { this card = card; return this; } public TweetBuilder copy(Tweet tweet) { this coordinates = tweet coordinates; this createdAt = tweet createdAt; this currentUserRetweet = tweet currentUserRetweet; this entities = tweet entities; this extendedEtities = tweet extendedEtities; this favoriteCount = tweet favoriteCount; this favorited = tweet favorited; this filterLevel = tweet filterLevel; this id = tweet id; this idStr = tweet idStr; this inReplyToScreenName = tweet inReplyToScreenName; this inReplyToStatusId = tweet inReplyToStatusId; this inReplyToStatusIdStr = tweet inReplyToStatusIdStr; this inReplyToUserId = tweet inReplyToUserId; this inReplyToUserIdStr = tweet inReplyToStatusIdStr; this lang = tweet lang; this place = tweet place; this possiblySensitive = tweet possiblySensitive; this scopes = tweet scopes; this quotedStatusId = tweet quotedStatusId; this quotedStatusIdStr = tweet quotedStatusIdStr; this quotedStatus = tweet quotedStatus; this retweetCount = tweet retweetCount; this retweeted = tweet retweeted; this retweetedStatus = tweet retweetedStatus; this source = tweet source; this text = tweet text; this displayTextRange = tweet displayTextRange; this truncated = tweet truncated; this user = tweet user; this withheldCopyright = tweet withheldCopyright; this withheldInCountries = tweet withheldInCountries; this withheldScope = tweet withheldScope; this card = tweet card; return this; } public Tweet build() { return new Tweet(coordinates, createdAt, currentUserRetweet, entities, extendedEtities, favoriteCount, favorited, filterLevel, id, idStr, inReplyToScreenName, inReplyToStatusId, inReplyToStatusIdStr, inReplyToUserId, inReplyToUserIdStr, lang, place, possiblySensitive, scopes, quotedStatusId, quotedStatusIdStr, quotedStatus, retweetCount, retweeted, retweetedStatus, source, text, displayTextRange, truncated, user, withheldCopyright, withheldInCountries, withheldScope, card); }}package com twitter sdk android tweetcomposer;import android content Context;import android content Intent;import android content pm PackageManager;import android content pm ResolveInfo;import android net Uri;import android text TextUtils;import com twitter sdk android core GuestSessionProvider;import com twitter sdk android core Session;import com twitter sdk android core SessionManager;import com twitter sdk android core TwitterCore;import com twitter sdk android core TwitterSession;import com twitter sdk android core internal scribe DefaultScribeClient;import io fabric sdk android Fabric;import io fabric sdk android Kit;import io fabric sdk android services concurrency DependsOn;import io fabric sdk android services network UrlUtils;import java net URL;import java util List;import java util concurrent ConcurrentHashMap;@DependsOn(TwitterCore class)public class TweetComposer extends Kit<Void> { private static final String MIME_TYPE_PLAIN_TEXT = "text/plain"; private static final String MIME_TYPE_JPEG = "image/jpeg"; private static final String TWITTER_PACKAGE_NAME = "com twitter android"; private static final String WEB_INTENT = "https://twitter com/intent/tweet?text=%s&url=%s"; private static final String KIT_SCRIBE_NAME = "TweetComposer"; private final ConcurrentHashMap<Session, ComposerApiClient> apiClients; String advertisingId; SessionManager<TwitterSession> sessionManager; GuestSessionProvider guestSessionProvider; private ScribeClient scribeClient; public TweetComposer() { this apiClients = new ConcurrentHashMap<>(); scribeClient = new ScribeClientImpl(null); } @Override public String getVersion() { return BuildConfig VERSION_NAME + " " + BuildConfig BUILD_NUMBER; } protected boolean onPreExecute() { sessionManager = TwitterCore getInstance() getSessionManager(); guestSessionProvider = TwitterCore getInstance() getGuestSessionProvider(); return super onPreExecute(); } @Override protected Void doInBackground() { advertisingId = getIdManager() getAdvertisingId(); scribeClient = new ScribeClientImpl(new DefaultScribeClient(this, KIT_SCRIBE_NAME, sessionManager, guestSessionProvider, getIdManager())); return null; } @Override public String getIdentifier() { return BuildConfig GROUP + ":" + BuildConfig ARTIFACT_ID; } public ComposerApiClient getApiClient(TwitterSession session) { checkInitialized(); if (!apiClients containsKey(session)) { apiClients putIfAbsent(session, new ComposerApiClient(session)); } return apiClients get(session); } public static TweetComposer getInstance() { checkInitialized(); return Fabric getKit(TweetComposer class); } protected ScribeClient getScribeClient() { return scribeClient; } private static void checkInitialized() { if (Fabric getKit(TweetComposer class) == null) { throw new IllegalStateException("Must start Twitter Kit with Fabric with() first"); } } String getAdvertisingId() {  return advertisingId; }  public static class Builder { private final Context context; private String text; private URL url; private Uri imageUri;  public Builder(Context context) { if (context == null) { throw new IllegalArgumentException("Context must not be null "); } this context = context; }  public Builder text(String text) { if (text == null) { throw new IllegalArgumentException("text must not be null "); } if (this text != null) { throw new IllegalStateException("text already set "); } this text = text; return this; }  public Builder url(URL url) { if (url == null) { throw new IllegalArgumentException("url must not be null "); } if (this url != null) { throw new IllegalStateException("url already set "); } this url = url; return this; }  public Builder image(Uri imageUri) { if (imageUri == null) { throw new IllegalArgumentException("imageUri must not be null "); } if (this imageUri != null) { throw new IllegalStateException("imageUri already set "); } this imageUri = imageUri; return this; }  public Intent createIntent() { Intent intent = createTwitterIntent(); if (intent == null) { intent = createWebIntent(); } return intent; } Intent createTwitterIntent() { final Intent intent = new Intent(Intent ACTION_SEND); final StringBuilder builder = new StringBuilder(); if (!TextUtils isEmpty(text)) { builder append(text); } if (url != null) { if (builder length() > 0) { builder append(' '); } builder append(url toString()); } intent putExtra(Intent EXTRA_TEXT, builder toString()); intent setType(MIME_TYPE_PLAIN_TEXT); if (imageUri != null) { intent putExtra(Intent EXTRA_STREAM, imageUri); intent setType(MIME_TYPE_JPEG); } final PackageManager packManager = context getPackageManager(); final List<ResolveInfo> resolvedInfoList = packManager queryIntentActivities(intent, PackageManager MATCH_DEFAULT_ONLY); for (ResolveInfo resolveInfo: resolvedInfoList){ if (resolveInfo activityInfo packageName startsWith(TWITTER_PACKAGE_NAME)){ intent setClassName(resolveInfo activityInfo packageName, resolveInfo activityInfo name); return intent; } } return null; } Intent createWebIntent() { final String url = (this url == null ? "" : this url toString()); final String tweetUrl = String format(WEB_INTENT, UrlUtils urlEncode(text), UrlUtils urlEncode(url)); return new Intent(Intent ACTION_VIEW, Uri parse(tweetUrl)); }  public void show() { final Intent intent = createIntent(); context startActivity(intent); } }}package com twitter sdk android tweetui;import android content res Resources;import android text format DateUtils;import java text ParseException;import java text SimpleDateFormat;import java util Calendar;import java util Date;import java util Locale;// Cribbed from twitter-android-internal, renamed and formatted to our standards// methods here should only be accessed on the main threadfinal class TweetDateUtils { // Sat Mar 14 02:34:20 +0000 2009 static final SimpleDateFormat DATE_TIME_RFC822 = new SimpleDateFormat("EEE MMM dd HH:mm:ss Z yyyy", Locale ENGLISH); static final SimpleDateFormat RELATIVE_DATE_FORMAT = new SimpleDateFormat("MM/dd/yy", Locale ENGLISH); static final long INVALID_DATE = -1; private TweetDateUtils() {} static long apiTimeToLong(String apiTime) { if (apiTime == null) return INVALID_DATE; try { return DATE_TIME_RFC822 parse(apiTime) getTime(); } catch (ParseException e) { return INVALID_DATE; } } static boolean isValidTimestamp(String timestamp) { return TweetDateUtils apiTimeToLong(timestamp) != TweetDateUtils INVALID_DATE; }  public static String dotPrefix(String timestamp) { if (timestamp charAt(0) == ' ') { return timestamp; } return " " + timestamp; }  static String getRelativeTimeString(Resources res, long currentTimeMillis, long timestamp) { final long diff = currentTimeMillis - timestamp; if (diff >= 0) { if (diff < DateUtils MINUTE_IN_MILLIS) { // Less than a minute ago final int secs = (int) (diff / 1000); return res getQuantityString(R plurals tw__time_secs, secs, secs); } else if (diff < DateUtils HOUR_IN_MILLIS) { // Less than an hour ago final int mins = (int) (diff / DateUtils MINUTE_IN_MILLIS); return res getQuantityString(R plurals tw__time_mins, mins, mins); } else if (diff < DateUtils DAY_IN_MILLIS) { // Less than a day ago final int hours = (int) (diff / DateUtils HOUR_IN_MILLIS); return res getQuantityString(R plurals tw__time_hours, hours, hours); } else { final Calendar now = Calendar getInstance(); now setTimeInMillis(currentTimeMillis); final Calendar c = Calendar getInstance(); c setTimeInMillis(timestamp); final Date d = new Date(timestamp); if (now get(Calendar YEAR) == c get(Calendar YEAR)) { // Same year RELATIVE_DATE_FORMAT applyPattern( res getString(R string tw__relative_date_format_short)); } else { // Outside of our year RELATIVE_DATE_FORMAT applyPattern( res getString(R string tw__relative_date_format_long)); } return RELATIVE_DATE_FORMAT format(d); } } RELATIVE_DATE_FORMAT applyPattern(res getString( R string tw__relative_date_format_long)); return RELATIVE_DATE_FORMAT format(new Date(timestamp)); }}package com twitter sdk android core models;import com google gson annotations SerializedName;import java util Collections;import java util List;public class TweetEntities {  @SerializedName("urls") public final List<UrlEntity> urls;  @SerializedName("user_mentions") public final List<MentionEntity> userMentions;  @SerializedName("media") public final List<MediaEntity> media;  @SerializedName("hashtags") public final List<HashtagEntity> hashtags; public TweetEntities(List<UrlEntity> urls, List<MentionEntity> userMentions, List<MediaEntity> media, List<HashtagEntity> hashtags) { this urls = getSafeList(urls); this userMentions = getSafeList(userMentions); this media = getSafeList(media); this hashtags = getSafeList(hashtags); } private <T> List<T> getSafeList(List<T> entities) { // Entities may be null if Gson does not find object to parse  When that happens, make sure // to return an empty list  if (entities == null) { return Collections EMPTY_LIST; } else { return Collections unmodifiableList(entities); } }}package com twitter sdk android tweetui;import com twitter sdk android core models Tweet;public interface TweetLinkClickListener {  void onLinkClick(Tweet tweet, String url);}package com twitter sdk android tweetui;import com twitter sdk android core models MediaEntity;import com twitter sdk android core models Tweet;public interface TweetMediaClickListener {  void onMediaEntityClick(Tweet tweet, MediaEntity entity);}package com twitter sdk android tweetui internal;import android os Build;import com twitter sdk android core models MediaEntity;import com twitter sdk android core models Tweet;import com twitter sdk android core models VideoInfo;import java util ArrayList;import java util List;final public class TweetMediaUtils { public static final String PHOTO_TYPE = "photo"; public static final String VIDEO_TYPE = "video"; public static final String GIF_TYPE = "animated_gif"; private static final String CONTENT_TYPE_MP4 = "video/mp4"; private static final String CONTENT_TYPE_HLS = "application/x-mpegURL"; private TweetMediaUtils() { }  static public MediaEntity getPhotoEntity(Tweet tweet) { final List<MediaEntity> mediaEntityList = getAllMediaEntities(tweet); for (int i = mediaEntityList size() - 1; i >= 0; i--) { final MediaEntity entity = mediaEntityList get(i); if (entity type != null && isPhotoType(entity)) { return entity; } } return null; }  static public boolean hasPhoto(Tweet tweet) { return getPhotoEntity(tweet) != null; }  static public MediaEntity getVideoEntity(Tweet tweet) { for (MediaEntity mediaEntity : getAllMediaEntities(tweet)) { if (mediaEntity type != null && isVideoType(mediaEntity)) { return mediaEntity; } } return null; }  static public boolean hasSupportedVideo(Tweet tweet) { final MediaEntity entity = getVideoEntity(tweet); return entity != null && getSupportedVariant(entity) != null; } static boolean isPhotoType(MediaEntity mediaEntity) { return PHOTO_TYPE equals(mediaEntity type); } static boolean isVideoType(MediaEntity mediaEntity) { return VIDEO_TYPE equals(mediaEntity type) || GIF_TYPE equals(mediaEntity type); } static public VideoInfo Variant getSupportedVariant(MediaEntity mediaEntity) { for (VideoInfo Variant variant : mediaEntity videoInfo variants) { if (isVariantSupported(variant)) { return variant; } } return null; } static public boolean isLooping(MediaEntity mediaEntity) { return GIF_TYPE equals(mediaEntity type); } static boolean isVariantSupported(VideoInfo Variant variant) { if (Build VERSION SDK_INT >= Build VERSION_CODES LOLLIPOP && CONTENT_TYPE_HLS equals(variant contentType)) { return true; } else if (CONTENT_TYPE_MP4 equals(variant contentType)) { return true; } return false; } static List<MediaEntity> getAllMediaEntities(Tweet tweet) { final List<MediaEntity> entities = new ArrayList<>(); if (tweet entities != null && tweet entities media != null) { entities addAll(tweet entities media); } if (tweet extendedEtities != null && tweet extendedEtities media != null) { entities addAll(tweet extendedEtities media); } return entities; }}package com twitter sdk android tweetui internal;import android content Context;import android graphics Canvas;import android graphics drawable Drawable;import android util AttributeSet;import android widget ImageView;import com twitter sdk android core internal util AspectRatioImageView;public class TweetMediaView extends AspectRatioImageView { Overlay overlay = new Overlay(null); public TweetMediaView(Context context) { super(context); } public TweetMediaView(Context context, AttributeSet attrs) { super(context, attrs); } @Override protected void onDraw(Canvas canvas) { super onDraw(canvas); overlay draw(canvas); } @Override protected void drawableStateChanged() { super drawableStateChanged(); overlay setDrawableState(getDrawableState()); } @Override protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) { super onMeasure(widthMeasureSpec, heightMeasureSpec); overlay setDrawableBounds(getMeasuredWidth(), getMeasuredHeight()); } @Override protected void onSizeChanged(int width, int height, int oldWidth, int oldHeight) { super onSizeChanged(width, height, oldWidth, oldHeight); overlay setDrawableBounds(width, height); } @Override public void invalidateDrawable(Drawable drawable) { if (drawable == overlay drawable) { invalidate(); } else { super invalidateDrawable(drawable); } }  public void setOverlayDrawable(Drawable drawable) { overlay cleanupDrawable(this); if (drawable != null) { drawable setCallback(this); } overlay = new Overlay(drawable); overlay setDrawableState(getDrawableState()); requestLayout(); }  static protected class Overlay { final Drawable drawable; Overlay(Drawable drawable) { this drawable = drawable; } protected void cleanupDrawable(ImageView imageView) { if (drawable != null) { drawable setCallback(null); imageView unscheduleDrawable(drawable); } } protected void setDrawableBounds(int width, int height) { if (drawable != null) { drawable setBounds(0, 0, width, height); } } protected void setDrawableState(int[] state) { if (drawable != null && drawable isStateful()) { drawable setState(state); } } protected void draw(Canvas canvas) { if (drawable != null) { drawable draw(canvas); } } }}package com twitter sdk android tweetui;import android os Handler;import android support v4 util LruCache;import android text TextUtils;import com twitter sdk android core Callback;import com twitter sdk android core Result;import com twitter sdk android core SessionManager;import com twitter sdk android core TwitterAuthException;import com twitter sdk android core TwitterCore;import com twitter sdk android core TwitterException;import com twitter sdk android core TwitterSession;import com twitter sdk android core models Tweet;import java util List;import io fabric sdk android Fabric;class TweetRepository { // Cache size units are in number of entries, an average Tweet is roughly 900 bytes in memory private static final int DEFAULT_CACHE_SIZE = 20; private final TwitterCore twitterCore; private final Handler mainHandler; private final SessionManager<TwitterSession> userSessionManagers; // leave this package accessible for testing final LruCache<Long, Tweet> tweetCache; final LruCache<Long, FormattedTweetText> formatCache; TweetRepository(Handler mainHandler, SessionManager<TwitterSession> userSessionManagers) { this(mainHandler, userSessionManagers, TwitterCore getInstance()); } // Testing only TweetRepository(Handler mainHandler, SessionManager<TwitterSession> userSessionManagers, TwitterCore twitterCore) { this twitterCore = twitterCore; this mainHandler = mainHandler; this userSessionManagers = userSessionManagers; tweetCache = new LruCache<>(DEFAULT_CACHE_SIZE); formatCache = new LruCache<>(DEFAULT_CACHE_SIZE); }  FormattedTweetText formatTweetText(final Tweet tweet) { if (tweet == null) return null; final FormattedTweetText cached = formatCache get(tweet id); if (cached != null) return cached; final FormattedTweetText formattedTweetText = TweetTextUtils formatTweetText(tweet); if (formattedTweetText != null && !TextUtils isEmpty(formattedTweetText text)) { formatCache put(tweet id, formattedTweetText); } return formattedTweetText; } void updateCache(final Tweet tweet) { tweetCache put(tweet id, tweet); }  private void deliverTweet(final Tweet tweet, final Callback<Tweet> cb) { if (cb == null) return; mainHandler post(new Runnable() { @Override public void run() { cb success(new Result<>(tweet, null)); } }); } void favorite(final long tweetId, final Callback<Tweet> cb) { getUserSession(new LoggingCallback<TwitterSession>(cb, Fabric getLogger()) { @Override public void success(Result<TwitterSession> result) { twitterCore getApiClient(result data) getFavoriteService() create(tweetId, false)  enqueue(cb); } }); } void unfavorite(final long tweetId, final Callback<Tweet> cb) { getUserSession(new LoggingCallback<TwitterSession>(cb, Fabric getLogger()) { @Override public void success(Result<TwitterSession> result) { twitterCore getApiClient(result data) getFavoriteService() destroy(tweetId, false)  enqueue(cb); } }); } void retweet(final long tweetId, final Callback<Tweet> cb) { getUserSession(new LoggingCallback<TwitterSession>(cb, Fabric getLogger()) { @Override public void success(Result<TwitterSession> result) { twitterCore getApiClient(result data) getStatusesService() retweet(tweetId, false)  enqueue(cb); } }); } void unretweet(final long tweetId, final Callback<Tweet> cb) { getUserSession(new LoggingCallback<TwitterSession>(cb, Fabric getLogger()) { @Override public void success(Result<TwitterSession> result) { twitterCore getApiClient(result data) getStatusesService() unretweet(tweetId, false)  enqueue(cb); } }); } void getUserSession(final Callback<TwitterSession> cb) { final TwitterSession session = userSessionManagers getActiveSession(); if (session == null) { cb failure(new TwitterAuthException("User authorization required")); } else { cb success(new Result<>(session, null)); } }  void loadTweet(final long tweetId, final Callback<Tweet> cb) { final Tweet cachedTweet = tweetCache get(tweetId); if (cachedTweet != null) { deliverTweet(cachedTweet, cb); return; } twitterCore getApiClient() getStatusesService()  show(tweetId, null, null, null) enqueue(new SingleTweetCallback(cb)); }  void loadTweets(final List<Long> tweetIds, final Callback<List<Tweet>> cb) { final String commaSepIds = TextUtils join(",", tweetIds); twitterCore getApiClient() getStatusesService() lookup(commaSepIds, null, null, null)  enqueue(new MultiTweetsCallback(tweetIds, cb)); }  class SingleTweetCallback extends Callback<Tweet> { final Callback<Tweet> cb; SingleTweetCallback(Callback<Tweet> cb) { this cb = cb; } @Override public void success(Result<Tweet> result) { final Tweet tweet = result data; updateCache(tweet); if (cb != null) { cb success(new Result<>(tweet, result response)); } } @Override public void failure(TwitterException exception) { cb failure(exception); } }  class MultiTweetsCallback extends Callback<List<Tweet>> { final Callback<List<Tweet>> cb; final List<Long> tweetIds; MultiTweetsCallback(List<Long> tweetIds, Callback<List<Tweet>> cb) { this cb = cb; this tweetIds = tweetIds; } @Override public void success(Result<List<Tweet>> result) { if (cb != null) { final List<Tweet> sorted = Utils orderTweets(tweetIds, result data); cb success(new Result<>(sorted, result response)); } } @Override public void failure(TwitterException exception) { cb failure(exception); } }}package com twitter sdk android tweetui;import com twitter sdk android core models Tweet;public interface TweetScribeClient { void impression(Tweet tweet, String viewName, boolean actionEnabled); void share(Tweet tweet); void favorite(Tweet tweet); void unfavorite(Tweet tweet); void click(Tweet tweet, String viewName);}package com twitter sdk android tweetui;import com twitter sdk android core internal scribe EventNamespace;import com twitter sdk android core internal scribe ScribeItem;import com twitter sdk android core internal scribe SyndicatedSdkImpressionEvent;import com twitter sdk android core internal scribe SyndicationClientEvent;import com twitter sdk android core models Tweet;import java util ArrayList;import java util List;class TweetScribeClientImpl implements TweetScribeClient { // tfw client event specific names static final String TFW_CLIENT_EVENT_PAGE = "android"; static final String TFW_CLIENT_EVENT_SECTION = "tweet"; static final String TFW_CLIENT_EVENT_ELEMENT = ""; // intentionally blank // syndicated sdk impression specific names static final String SYNDICATED_SDK_IMPRESSION_PAGE = "tweet"; static final String SYNDICATED_SDK_IMPRESSION_COMPONENT = ""; static final String SYNDICATED_SDK_IMPRESSION_ELEMENT = ""; // intentionally blank // general names static final String SCRIBE_CLICK_ACTION = "click"; static final String SCRIBE_IMPRESSION_ACTION = "impression"; static final String SCRIBE_FAVORITE_ACTION = "favorite"; static final String SCRIBE_UNFAVORITE_ACTION = "unfavorite"; static final String SCRIBE_SHARE_ACTION = "share"; static final String SCRIBE_ACTIONS_ELEMENT = "actions"; final TweetUi tweetUi; TweetScribeClientImpl(TweetUi tweetUi) { this tweetUi = tweetUi; } @Override public void impression(Tweet tweet, String viewName, boolean actionEnabled) { final List<ScribeItem> items = new ArrayList<>(); items add(ScribeItem fromTweet(tweet)); tweetUi scribe(getTfwImpressionNamespace(viewName, actionEnabled), items); tweetUi scribe(getSyndicatedImpressionNamespace(viewName), items); } @Override public void share(Tweet tweet) { final List<ScribeItem> items = new ArrayList<>(); items add(ScribeItem fromTweet(tweet)); tweetUi scribe(getTfwShareNamespace(), items); } @Override public void favorite(Tweet tweet) { final List<ScribeItem> items = new ArrayList<>(); items add(ScribeItem fromTweet(tweet)); tweetUi scribe(getTfwFavoriteNamespace(), items); } @Override public void unfavorite(Tweet tweet) { final List<ScribeItem> items = new ArrayList<>(); items add(ScribeItem fromTweet(tweet)); tweetUi scribe(getTfwUnfavoriteNamespace(), items); } @Override public void click(Tweet tweet, String viewName) { final List<ScribeItem> items = new ArrayList<>(); items add(ScribeItem fromTweet(tweet)); tweetUi scribe(getTfwClickNamespace(viewName), items); } static EventNamespace getTfwImpressionNamespace(String viewName, boolean actionEnabled) { return new EventNamespace Builder()  setClient(SyndicationClientEvent CLIENT_NAME)  setPage(TFW_CLIENT_EVENT_PAGE)  setSection(TFW_CLIENT_EVENT_SECTION)  setComponent(viewName)  setElement(actionEnabled ? SCRIBE_ACTIONS_ELEMENT : TFW_CLIENT_EVENT_ELEMENT)  setAction(SCRIBE_IMPRESSION_ACTION)  builder(); } static EventNamespace getTfwUnfavoriteNamespace() { return new EventNamespace Builder()  setClient(SyndicationClientEvent CLIENT_NAME)  setPage(TFW_CLIENT_EVENT_PAGE)  setSection(TFW_CLIENT_EVENT_SECTION)  setElement(SCRIBE_ACTIONS_ELEMENT)  setAction(SCRIBE_UNFAVORITE_ACTION)  builder(); } static EventNamespace getTfwFavoriteNamespace() { return new EventNamespace Builder()  setClient(SyndicationClientEvent CLIENT_NAME)  setPage(TFW_CLIENT_EVENT_PAGE)  setSection(TFW_CLIENT_EVENT_SECTION)  setElement(SCRIBE_ACTIONS_ELEMENT)  setAction(SCRIBE_FAVORITE_ACTION)  builder(); } static EventNamespace getTfwShareNamespace() { return new EventNamespace Builder()  setClient(SyndicationClientEvent CLIENT_NAME)  setPage(TFW_CLIENT_EVENT_PAGE)  setSection(TFW_CLIENT_EVENT_SECTION)  setElement(SCRIBE_ACTIONS_ELEMENT)  setAction(SCRIBE_SHARE_ACTION)  builder(); } static EventNamespace getTfwClickNamespace(String viewName) { return new EventNamespace Builder()  setClient(SyndicationClientEvent CLIENT_NAME)  setPage(TFW_CLIENT_EVENT_PAGE)  setSection(TFW_CLIENT_EVENT_SECTION)  setComponent(viewName)  setElement(TFW_CLIENT_EVENT_ELEMENT)  setAction(SCRIBE_CLICK_ACTION)  builder(); } static EventNamespace getSyndicatedImpressionNamespace(String viewName) { return new EventNamespace Builder()  setClient(SyndicatedSdkImpressionEvent CLIENT_NAME)  setPage(SYNDICATED_SDK_IMPRESSION_PAGE)  setSection(viewName)  setComponent(SYNDICATED_SDK_IMPRESSION_COMPONENT)  setElement(SYNDICATED_SDK_IMPRESSION_ELEMENT)  setAction(SCRIBE_IMPRESSION_ACTION)  builder(); }}package com twitter sdk android tweetui;import android text SpannableStringBuilder;import android text Spanned;import android text TextUtils;import android text style CharacterStyle;import android view View;import com twitter sdk android tweetui internal ClickableLinkSpan;import java util ArrayList;import java util Collections;import java util Comparator;import java util List;final class TweetTextLinkifier { private static final String PHOTO_TYPE = "photo"; private TweetTextLinkifier() {}  static CharSequence linkifyUrls(FormattedTweetText tweetText, final LinkClickListener listener, boolean stripLastPhotoEntity, final int linkColor, final int linkHighlightColor) { if (tweetText == null) return null; if (TextUtils isEmpty(tweetText text)) { return tweetText text; } final SpannableStringBuilder spannable = new SpannableStringBuilder(tweetText text); final List<FormattedUrlEntity> urls = tweetText urlEntities; final List<FormattedMediaEntity> media = tweetText mediaEntities; final FormattedMediaEntity lastPhoto; if (stripLastPhotoEntity) { lastPhoto = getLastPhotoEntity(tweetText); } else { lastPhoto = null; }  final List<FormattedUrlEntity> combined = mergeAndSortEntities(urls, media); addUrlEntities(spannable, combined, lastPhoto, listener, linkColor, linkHighlightColor); return spannable; }  static List<FormattedUrlEntity> mergeAndSortEntities(final List<FormattedUrlEntity> urls, final List<FormattedMediaEntity> media) { if (media == null) return urls; final ArrayList<FormattedUrlEntity> combined = new ArrayList<>(urls); combined addAll(media); Collections sort(combined, new Comparator<FormattedUrlEntity>() { @Override public int compare(FormattedUrlEntity lhs, FormattedUrlEntity rhs) { if (lhs == null && rhs != null) return -1; if (lhs != null && rhs == null) return 1; if (lhs == null && rhs == null) return 0; if (lhs start < rhs start) return -1; if (lhs start > rhs start) return 1; return 0; } }); return combined; }  private static void addUrlEntities(final SpannableStringBuilder spannable, final List<FormattedUrlEntity> entities, final FormattedMediaEntity lastPhoto, final LinkClickListener listener, final int linkColor, final int linkHighlightColor) { if (entities == null || entities isEmpty()) return; int offset = 0; int len; int start; int end; for (final FormattedUrlEntity url : entities) { start = url start - offset; end = url end - offset; if (start >= 0 && end <= spannable length()) { // replace the last photo url with empty string, we can use the start indices as // as simple check, since none of this will work anyways if we have overlapping // entities if (lastPhoto != null && lastPhoto start == url start) { spannable replace(start, end, ""); len = end - start; end -= len; offset += len; } else if (!TextUtils isEmpty(url displayUrl)) { spannable replace(start, end, url displayUrl); len = end - (start + url displayUrl length()); end -= len; offset += len; final CharacterStyle span = new ClickableLinkSpan(linkHighlightColor, linkColor, false) { @Override public void onClick(View widget) { if (listener == null) return; listener onUrlClicked(url url); } }; spannable setSpan(span, start, end, Spanned SPAN_EXCLUSIVE_EXCLUSIVE); } } } } private static FormattedMediaEntity getLastPhotoEntity( final FormattedTweetText formattedTweetText) { if (formattedTweetText == null) return null; final List<FormattedMediaEntity> mediaEntityList = formattedTweetText mediaEntities; if (mediaEntityList isEmpty()) return null; FormattedMediaEntity entity; for (int i = mediaEntityList size() - 1; i >= 0; i--) { entity = mediaEntityList get(i); if (PHOTO_TYPE equals(entity type)) { return entity; } } return null; }}package com twitter sdk android tweetui;import android text TextUtils;import com twitter sdk android core models MediaEntity;import com twitter sdk android core models Tweet;import com twitter sdk android core models UrlEntity;import com twitter sdk android tweetui internal util HtmlEntities;import java util ArrayList;import java util List;final class TweetTextUtils { private TweetTextUtils() {}  static FormattedTweetText formatTweetText(Tweet tweet) { if (tweet == null) return null; final FormattedTweetText adjustedTweet = new FormattedTweetText(); convertEntities(adjustedTweet, tweet); format(adjustedTweet, tweet); return adjustedTweet; }  static void convertEntities(FormattedTweetText formattedTweetText, Tweet tweet) { if (tweet entities == null) return; final List<UrlEntity> coreUrls = tweet entities urls; if (coreUrls != null) { for (UrlEntity entity : coreUrls) { final FormattedUrlEntity formattedUrlEntity = new FormattedUrlEntity(entity); formattedTweetText urlEntities add(formattedUrlEntity); } } final List<MediaEntity> coreMedia = tweet entities media; if (coreMedia != null) { for (MediaEntity entity : coreMedia) { final FormattedMediaEntity formattedMediaEntity = new FormattedMediaEntity(entity); formattedTweetText mediaEntities add(formattedMediaEntity); } } }  static void format(FormattedTweetText formattedTweetText, Tweet tweet) { if (TextUtils isEmpty(tweet text)) return; final HtmlEntities Unescaped u = HtmlEntities HTML40 unescape(tweet text); final StringBuilder result = new StringBuilder(u unescaped); adjustIndicesForEscapedChars(formattedTweetText urlEntities, u indices); adjustIndicesForEscapedChars(formattedTweetText mediaEntities, u indices); adjustIndicesForSupplementaryChars(result, formattedTweetText); formattedTweetText text = result toString(); }  static void adjustIndicesForEscapedChars( List<? extends FormattedUrlEntity> entities, List<int[]> indices) { if (entities == null || indices == null || indices isEmpty()) { return; } final int size = indices size(); int m = 0; // marker int diff = 0; // accumulated difference int inDiff; // end difference for escapes in range int len; // escaped length int start; // escaped start int end; // escaped end int i; // reusable index int[] index; // For each of the entities, update the start and end indices // Note: tweet entities are sorted  for (FormattedUrlEntity entity : entities) { inDiff = 0; // Go through the escaped entities' indices for (i = m; i < size; i++) { index = indices get(i); start = index[0]; end = index[1]; // len is actually (end - start + 1) - 1 len = end - start; if (end < entity start) { // bump position of the next marker diff += len; m++; } else if (end < entity end) { inDiff += len; } } // Once we've accumulated diffs, calc the offset entity start = entity start - diff; entity end = entity end - (diff + inDiff); } }  static void adjustIndicesForSupplementaryChars(StringBuilder content, FormattedTweetText formattedTweetText) { final List<Integer> highSurrogateIndices = new ArrayList<>(); final int len = content length() - 1; for (int i = 0; i < len; ++i) { if (Character isHighSurrogate(content charAt(i)) && Character isLowSurrogate(content charAt(i + 1))) { highSurrogateIndices add(i); } } adjustEntitiesWithOffsets(formattedTweetText urlEntities, highSurrogateIndices); adjustEntitiesWithOffsets(formattedTweetText mediaEntities, highSurrogateIndices); }  static void adjustEntitiesWithOffsets(List<? extends FormattedUrlEntity> entities, List<Integer> indices) { if (entities == null || indices == null) return; for (FormattedUrlEntity entity : entities) { // find all indices <= start and update offsets by that much final int start = entity start; int offset = 0; for (Integer index : indices) { if (index - offset <= start) { offset += 1; } else { break; } } entity start = entity start + offset; entity end = entity end + offset; } }}package com twitter sdk android tweetui;import android content Context;import android view View;import android view ViewGroup;import com twitter sdk android core Callback;import com twitter sdk android core Result;import com twitter sdk android core TwitterException;import com twitter sdk android core models Tweet;import com twitter sdk android tweetui internal TimelineDelegate;public class TweetTimelineListAdapter extends TimelineListAdapter<Tweet> { protected Callback<Tweet> actionCallback; final protected int styleResId;  public TweetTimelineListAdapter(Context context, Timeline<Tweet> timeline) { this(context, timeline, R style tw__TweetLightStyle, null); } TweetTimelineListAdapter(Context context, Timeline<Tweet> timeline, int styleResId, Callback<Tweet> cb) { this(context, new TimelineDelegate<>(timeline), styleResId, cb); } TweetTimelineListAdapter(Context context, TimelineDelegate<Tweet> delegate, int styleResId, Callback<Tweet> cb) { super(context, delegate); this styleResId = styleResId; this actionCallback = new ReplaceTweetCallback(delegate, cb); }  @Override public View getView(int position, View convertView, ViewGroup parent) { View rowView = convertView; final Tweet tweet = getItem(position); if (rowView == null) { final BaseTweetView tv = new CompactTweetView(context, tweet, styleResId); tv setOnActionCallback(actionCallback); rowView = tv; } else { ((BaseTweetView) rowView) setTweet(tweet); } return rowView; }  static class ReplaceTweetCallback extends Callback<Tweet> { TimelineDelegate<Tweet> delegate; Callback<Tweet> cb; ReplaceTweetCallback(TimelineDelegate<Tweet> delegate, Callback<Tweet> cb) { this delegate = delegate; this cb = cb; } @Override public void success(Result<Tweet> result) { delegate setItemById(result data); if (cb != null) { cb success(result); } } @Override public void failure(TwitterException exception) { if (cb != null) { cb failure(exception); } } }  public static class Builder { private Context context; private Timeline<Tweet> timeline; private Callback<Tweet> actionCallback; private int styleResId = R style tw__TweetLightStyle;  public Builder(Context context) { this context = context; }  public Builder setTimeline(Timeline<Tweet> timeline) { this timeline = timeline; return this; }  public Builder setViewStyle(int styleResId) { this styleResId = styleResId; return this; }  public Builder setOnActionCallback(Callback<Tweet> actionCallback) { this actionCallback = actionCallback; return this; }  public TweetTimelineListAdapter build() { return new TweetTimelineListAdapter(context, timeline, styleResId, actionCallback); } }}package com twitter sdk android tweetui;import io fabric sdk android Fabric;import io fabric sdk android Kit;import io fabric sdk android services concurrency DependsOn;import com squareup picasso Picasso;import com twitter sdk android core GuestSessionProvider;import com twitter sdk android core SessionManager;import com twitter sdk android core TwitterCore;import com twitter sdk android core TwitterSession;import com twitter sdk android core internal scribe DefaultScribeClient;import com twitter sdk android core internal scribe EventNamespace;import com twitter sdk android core internal scribe ScribeItem;import java util List;@DependsOn(TwitterCore class)public class TweetUi extends Kit<Boolean> { static final String LOGTAG = "TweetUi"; static final String NOT_STARTED_ERROR = "Must start TweetUi Kit in Fabric with() "; private static final String KIT_SCRIBE_NAME = "TweetUi"; SessionManager<TwitterSession> sessionManager; GuestSessionProvider guestSessionProvider; DefaultScribeClient scribeClient; private TweetRepository tweetRepository; private Picasso imageLoader;  public static TweetUi getInstance() { checkInitialized(); return Fabric getKit(TweetUi class); } @Override public String getIdentifier() { return BuildConfig GROUP + ":" + BuildConfig ARTIFACT_ID; } @Override public String getVersion() { return BuildConfig VERSION_NAME + " " + BuildConfig BUILD_NUMBER; } @Override protected boolean onPreExecute() { super onPreExecute(); final TwitterCore twitterCore = TwitterCore getInstance(); sessionManager = twitterCore getSessionManager(); guestSessionProvider = twitterCore getGuestSessionProvider(); tweetRepository = new TweetRepository(getFabric() getMainHandler(), twitterCore getSessionManager()); return true; } @Override protected Boolean doInBackground() {  imageLoader = Picasso with(getContext()); setUpScribeClient(); return true; }  private static void checkInitialized() { if (Fabric getKit(TweetUi class) == null) { throw new IllegalStateException(NOT_STARTED_ERROR); } } private void setUpScribeClient() { scribeClient = new DefaultScribeClient(this, KIT_SCRIBE_NAME, sessionManager, guestSessionProvider, getIdManager()); } void scribe(EventNamespace    namespaces) { if (scribeClient == null) return; for (EventNamespace ns : namespaces) { scribeClient scribe(ns); } } void scribe(EventNamespace ns, List<ScribeItem> items) { if (scribeClient == null) return; scribeClient scribe(ns, items); } TweetRepository getTweetRepository() { return tweetRepository; } // Testing purposes only void setTweetRepository(TweetRepository tweetRepository) { this tweetRepository = tweetRepository; } Picasso getImageLoader() { return imageLoader; } // Testing purposes only void setImageLoader(Picasso imageLoader) { this imageLoader = imageLoader; }}package com twitter sdk android tweetcomposer;import android app IntentService;import android content Intent;import android net Uri;import com twitter sdk android core Callback;import com twitter sdk android core Result;import com twitter sdk android core TwitterAuthToken;import com twitter sdk android core TwitterException;import com twitter sdk android core TwitterSession;import com twitter sdk android core models Media;import com twitter sdk android core models Tweet;import com twitter sdk android tweetcomposer internal CardCreate;import com twitter sdk android tweetcomposer internal CardData;import java io File;import io fabric sdk android Fabric;import okhttp3 MediaType;import okhttp3 RequestBody;public class TweetUploadService extends IntentService { public static final String UPLOAD_SUCCESS = "com twitter sdk android tweetcomposer UPLOAD_SUCCESS"; public static final String UPLOAD_FAILURE = "com twitter sdk android tweetcomposer UPLOAD_FAILURE"; public static final String EXTRA_TWEET_ID = "EXTRA_TWEET_ID"; public static final String EXTRA_RETRY_INTENT = "EXTRA_RETRY_INTENT"; static final String TAG = "TweetUploadService"; static final String EXTRA_USER_TOKEN = "EXTRA_USER_TOKEN"; static final String EXTRA_TWEET_TEXT = "EXTRA_TWEET_TEXT"; static final String EXTRA_TWEET_CARD = "EXTRA_TWEET_CARD"; private static final int PLACEHOLDER_ID = -1; private static final String PLACEHOLDER_SCREEN_NAME = ""; DependencyProvider dependencyProvider; TwitterSession twitterSession; String tweetText; Card tweetCard; Intent intent; public TweetUploadService() { this(new DependencyProvider()); } // testing purposes TweetUploadService(DependencyProvider dependencyProvider) { super("TweetUploadService"); this dependencyProvider = dependencyProvider; } @Override protected void onHandleIntent(Intent intent) { final TwitterAuthToken token = intent getParcelableExtra(EXTRA_USER_TOKEN); this intent = intent; twitterSession = new TwitterSession(token, PLACEHOLDER_ID, PLACEHOLDER_SCREEN_NAME); tweetText = intent getStringExtra(EXTRA_TWEET_TEXT); tweetCard = (Card) intent getSerializableExtra(EXTRA_TWEET_CARD); if (Card isAppCard(tweetCard)) { uploadAppCardTweet(twitterSession, tweetText, tweetCard); } else { uploadTweet(twitterSession, tweetText); } } void uploadTweet(TwitterSession session, final String text) { final ComposerApiClient client = dependencyProvider getComposerApiClient(session); client getComposerStatusesService() update(text, null) enqueue(new Callback<Tweet>() { @Override public void success(Result<Tweet> result) { sendSuccessBroadcast(result data getId()); stopSelf(); } @Override public void failure(TwitterException exception) { fail(exception); } }); } void uploadAppCardTweet(TwitterSession session, final String text, final Card card) { final ComposerApiClient client = dependencyProvider getComposerApiClient(session); final Uri uri = Uri parse(card imageUri); final String path = FileUtils getPath(TweetUploadService this, uri); if (path == null) { fail(new TwitterException("Uri file path resolved to null")); return; } final File file = new File(path); final String mimeType = FileUtils getMimeType(file); final RequestBody media = RequestBody create(MediaType parse(mimeType), file); client getMediaService() upload(media, null, null) enqueue(new Callback<Media>() { @Override public void success(Result<Media> result) { final CardData cardData = CardDataFactory createAppCardData(card, result data mediaId, dependencyProvider getAdvertisingId()); client getCardService() create(cardData) enqueue(new Callback<CardCreate>() { @Override public void success(Result<CardCreate> result) { final String cardUri = result data cardUri; client getComposerStatusesService() update(text, cardUri) enqueue( new Callback<Tweet>() { @Override public void success(Result<Tweet> result) { sendSuccessBroadcast(result data getId()); stopSelf(); } @Override public void failure(TwitterException exception) { fail(exception); } }); } @Override public void failure(TwitterException exception) { fail(exception); } }); } @Override public void failure(TwitterException exception) { fail(exception); } }); } void fail(TwitterException e) { sendFailureBroadcast(intent); Fabric getLogger() e(TAG, "Post Tweet failed", e); stopSelf(); } void sendSuccessBroadcast(long tweetId) { final Intent intent = new Intent(UPLOAD_SUCCESS); intent putExtra(EXTRA_TWEET_ID, tweetId); sendBroadcast(intent); } void sendFailureBroadcast(Intent original) { final Intent intent = new Intent(UPLOAD_FAILURE); intent putExtra(EXTRA_RETRY_INTENT, original); sendBroadcast(intent); }  static class DependencyProvider { ComposerApiClient getComposerApiClient(TwitterSession session) { return TweetComposer getInstance() getApiClient(session); } String getAdvertisingId() { return TweetComposer getInstance() getAdvertisingId(); } }}package com twitter sdk android tweetui;import android net Uri;import android text TextUtils;import com twitter sdk android core Callback;import com twitter sdk android core Result;import com twitter sdk android core models Tweet;import java util List;import java util Locale;import io fabric sdk android Fabric;public final class TweetUtils { private static final String PERMALINK_FORMAT = "https://twitter com/%s/status/%d"; private static final String UNKNOWN_SCREEN_NAME = "twitter_unknown"; static final String LOAD_TWEET_DEBUG = "loadTweet failure for Tweet Id %d "; private TweetUtils() {}  public static void loadTweet(final long tweetId, final Callback<Tweet> cb) { TweetUi getInstance() getTweetRepository() loadTweet(tweetId, new com twitter sdk android tweetui LoggingCallback<Tweet>(cb, Fabric getLogger()) { @Override public void success(Result<Tweet> result) { if (cb != null) { cb success(result); } } }); }  public static void loadTweets(final List<Long> tweetIds, final Callback<List<Tweet>> cb) { TweetUi getInstance() getTweetRepository() loadTweets(tweetIds, new com twitter sdk android tweetui LoggingCallback<List<Tweet>>(cb, Fabric getLogger()) { @Override public void success(Result<List<Tweet>> result) { if (cb != null) { cb success(result); } } }); }  static boolean isTweetResolvable(Tweet tweet) { return tweet != null && tweet id > 0 && tweet user != null && !TextUtils isEmpty(tweet user screenName); }  static Tweet getDisplayTweet(Tweet tweet) { if (tweet == null || tweet retweetedStatus == null) { return tweet; } else { return tweet retweetedStatus; } }  static Uri getPermalink(String screenName, long tweetId) { if (tweetId <= 0) { return null; } String permalink; if (TextUtils isEmpty(screenName)) { permalink = String format(Locale US, PERMALINK_FORMAT, UNKNOWN_SCREEN_NAME, tweetId); } else { permalink = String format(Locale US, PERMALINK_FORMAT, screenName, tweetId); } return Uri parse(permalink); }}package com twitter sdk android tweetui;import android content Context;import android util AttributeSet;import android widget ImageView;import com twitter sdk android core models Tweet;public class TweetView extends BaseTweetView { private static final String VIEW_TYPE_NAME = "default"; public TweetView(Context context, Tweet tweet) { super(context, tweet); } public TweetView(Context context, Tweet tweet, int styleResId) { super(context, tweet, styleResId); } TweetView(Context context, Tweet tweet, int styleResId, DependencyProvider dependencyProvider) { super(context, tweet, styleResId, dependencyProvider); } public TweetView(Context context, AttributeSet attrs) { super(context, attrs); } public TweetView(Context context, AttributeSet attrs, int defStyle) { super(context, attrs, defStyle); } @Override protected int getLayout() { return R layout tw__tweet; }  @Override void render() { super render(); setVerifiedCheck(tweet); }  private void setVerifiedCheck(Tweet tweet) { if (tweet != null && tweet user != null && tweet user verified) { verifiedCheckView setVisibility(ImageView VISIBLE); } else { verifiedCheckView setVisibility(ImageView GONE); } } @Override String getViewTypeName() { return VIEW_TYPE_NAME; }}package com twitter sdk android;import android app Activity;import com twitter sdk android core Callback;import com twitter sdk android core SessionManager;import com twitter sdk android core TwitterApiClient;import com twitter sdk android core TwitterSession;import com twitter sdk android tweetcomposer TweetComposer;import io fabric sdk android Fabric;import io fabric sdk android Kit;import com twitter sdk android core TwitterCore;import com twitter sdk android core TwitterAuthConfig;import com twitter sdk android tweetui TweetUi;import io fabric sdk android KitGroup;import java util Arrays;import java util Collection;import java util Collections;public class Twitter extends Kit implements KitGroup { public final TwitterCore core; public final TweetUi tweetUi; public final TweetComposer tweetComposer; public final Collection<? extends Kit> kits; public static Twitter getInstance() { return Fabric getKit(Twitter class); } private static void checkInitialized() { if (getInstance() == null) { throw new IllegalStateException("Must start Twitter Kit with Fabric with() first"); } } public Twitter(TwitterAuthConfig config) { core = new TwitterCore(config); tweetUi = new TweetUi(); tweetComposer = new TweetComposer(); kits = Collections unmodifiableCollection(Arrays asList(core, tweetUi, tweetComposer)); } @Override public String getVersion() { return BuildConfig VERSION_NAME + " " + BuildConfig BUILD_NUMBER; } @Override public String getIdentifier() { return BuildConfig GROUP + ":" + BuildConfig ARTIFACT_ID; } @Override public Collection<? extends Kit> getKits() { return kits; } @Override protected Object doInBackground() { //Nothing to do return null; }  public static void logIn(Activity activity, Callback<TwitterSession> callback) { checkInitialized(); getInstance() core logIn(activity, callback); }  public static void logOut() { checkInitialized(); getInstance() core logOut(); }  public static SessionManager<TwitterSession> getSessionManager() { checkInitialized(); return getInstance() core getSessionManager(); }  public static TwitterApiClient getApiClient() { checkInitialized(); return getInstance() core getApiClient(); }  public static TwitterApiClient getApiClient(TwitterSession session) { checkInitialized(); return getInstance() core getApiClient(session); }}package com twitter sdk android core internal;import android net Uri;import android os Build;public class TwitterApi { public static final String BASE_HOST = "api twitter com"; public static final String BASE_HOST_URL = "https://" + BASE_HOST; private final String baseHostUrl; public TwitterApi() { this(BASE_HOST_URL); } public TwitterApi(String baseHostUrl) { this baseHostUrl = baseHostUrl; } public String getBaseHostUrl() { return baseHostUrl; }  public Uri Builder buildUponBaseHostUrl(String    paths) { final Uri Builder builder = Uri parse(getBaseHostUrl()) buildUpon(); if (paths != null) { for (String p : paths) { builder appendPath(p); } } return builder; }  public static String buildUserAgent(String clientName, String version) { final StringBuilder ua = new StringBuilder(clientName)  append('/') append(version) // NOTE: We currently do not provide client_version_code information   append(' ')  append(Build MODEL) append('/') append(Build VERSION RELEASE)  append(" (")  append(Build MANUFACTURER) append(';')  append(Build MODEL) append(';')  append(Build BRAND) append(';')  append(Build PRODUCT) // NOTE: We do not add client_source, preload, or wifi information   append(')'); return ua toString(); }}package com twitter sdk android core;import com twitter sdk android core internal TwitterApi;import com twitter sdk android core internal network OkHttpClientHelper;import com twitter sdk android core models BindingValues;import com twitter sdk android core models BindingValuesAdapter;import com twitter sdk android core models SafeListAdapter;import com twitter sdk android core models SafeMapAdapter;import com twitter sdk android core services AccountService;import com twitter sdk android core services CollectionService;import com twitter sdk android core services ConfigurationService;import com twitter sdk android core services FavoriteService;import com twitter sdk android core services ListService;import com twitter sdk android core services MediaService;import com twitter sdk android core services SearchService;import com twitter sdk android core services StatusesService;import com google gson Gson;import com google gson GsonBuilder;import java util concurrent ConcurrentHashMap;import okhttp3 OkHttpClient;import retrofit2 Retrofit;import retrofit2 converter gson GsonConverterFactory;public class TwitterApiClient { final ConcurrentHashMap<Class, Object> services; final Retrofit retrofit; TwitterApiClient(OkHttpClient client, TwitterApi twitterApi) { this services = new ConcurrentHashMap<>(); final Gson gson = new GsonBuilder()  registerTypeAdapterFactory(new SafeListAdapter())  registerTypeAdapterFactory(new SafeMapAdapter())  registerTypeAdapter(BindingValues class, new BindingValuesAdapter())  create(); retrofit = new Retrofit Builder()  client(client)  baseUrl(twitterApi getBaseHostUrl())  addConverterFactory(GsonConverterFactory create(gson))  build(); } public TwitterApiClient(TwitterSession session) { this(OkHttpClientHelper getOkHttpClient(session, TwitterCore getInstance() getAuthConfig(), TwitterCore getInstance() getSSLSocketFactory()), new TwitterApi()); } public TwitterApiClient() { this(OkHttpClientHelper getOkHttpClient(TwitterCore getInstance() getGuestSessionProvider(), TwitterCore getInstance() getSSLSocketFactory()), new TwitterApi()); }  public AccountService getAccountService() { return getService(AccountService class); }  public FavoriteService getFavoriteService() { return getService(FavoriteService class); }  public StatusesService getStatusesService() { return getService(StatusesService class); }  public SearchService getSearchService() { return getService(SearchService class); }  public ListService getListService() { return getService(ListService class); }  public CollectionService getCollectionService() { return getService(CollectionService class); }  public ConfigurationService getConfigurationService() { return getService(ConfigurationService class); }  public MediaService getMediaService() { return getService(MediaService class); }  @SuppressWarnings("unchecked") protected <T> T getService(Class<T> cls) { if (!services contains(cls)) { services putIfAbsent(cls, retrofit create(cls)); } return (T) services get(cls); }}package com twitter sdk android core;import io fabric sdk android FabricAndroidTestCase;import io fabric sdk android FabricTestUtils;import okhttp3 OkHttpClient;import com twitter sdk android core internal TwitterApi;import com twitter sdk android core services FavoriteService;import com twitter sdk android core services StatusesService;import static org mockito Mockito mock;public class TwitterApiClientTest extends FabricAndroidTestCase { public void testGetService_sdkNotStarted() { try { FabricTestUtils resetFabric(); new TwitterApiClient(mock(TwitterSession class)); fail(); } catch (IllegalStateException ise) { assertEquals("Must Initialize Fabric before using singleton()", ise getMessage()); } } public void testConstructor_noSession() throws Exception { try { final TwitterCore twitterCore = TwitterCoreTestUtils createTwitterCore( new TwitterAuthConfig("", ""), null, null); FabricTestUtils with(getContext(), twitterCore); new TwitterApiClient(null); fail(); } catch (IllegalArgumentException ie) { assertEquals("Session must not be null ", ie getMessage()); } finally { FabricTestUtils resetFabric(); } } public void testGetService_cachedService() throws Exception { final TwitterApiClient client = newTwitterApiClient(); final StatusesService service = client getService(StatusesService class); assertSame(service, client getService(StatusesService class)); } public void testGetService_differentServices() throws Exception { final TwitterApiClient client = newTwitterApiClient(); final FavoriteService service = client getService(FavoriteService class); assertNotSame(service, client getService(StatusesService class)); } private TwitterApiClient newTwitterApiClient() { return new TwitterApiClient(mock(OkHttpClient class), new TwitterApi()); }}package com twitter sdk android core internal;public class TwitterApiConstants { public static final int MAX_TWEET_CHARS = 140; public static class Base { public static final String PARAM_ID = "id"; public static final String FIELD_ID = "id"; } public static class Errors extends Base { public static final String ERRORS = "errors"; // error when app auth token not recognized (such as when expired) public static final int APP_AUTH_ERROR_CODE = 89; // error when a tweet has already been favorited public static final int ALREADY_FAVORITED = 139; // error when a tweet has already been unfavorited public static final int ALREADY_UNFAVORITED = 144; // error when guest auth token not recognized (such as when expired) public static final int GUEST_AUTH_ERROR_CODE = 239; // legacy errors are errors that are returned by the api in a different format, where there // is no array of errors  public static final int LEGACY_ERROR = 0; }}package com twitter sdk android core;public class TwitterApiErrorConstants { //phone normalization errors public static final int DEVICE_REGISTRATION_INVALID_INPUT = 44; public static final int REGISTRATION_INVALID_INPUT = 300; public static final int REGISTRATION_PHONE_NORMALIZATION_FAILED = 303; //device already registered by other user public static final int DEVICE_ALREADY_REGISTERED = 285; //rate limit for sms exceeded public static final int RATE_LIMIT_EXCEEDED = 88; //registration general error public static final int REGISTRATION_GENERAL_ERROR = 284; public static final int REGISTRATION_OPERATION_FAILED = 302; //spammer phone number public static final int SPAMMER = 240; public static final int COULD_NOT_AUTHENTICATE = 32; public static final int CLIENT_NOT_PRIVILEGED = 87; public static final int UNKNOWN_ERROR = -1; //Unrecoverable errors public static final int OPERATOR_UNSUPPORTED = 286; public static final int USER_IS_NOT_SDK_USER = 269; public static final int EXPIRED_LOGIN_VERIFICATION_REQUEST = 235; public static final int MISSING_LOGIN_VERIFICATION_REQUEST = 237; public static final int DEVICE_REGISTRATION_RATE_EXCEEDED = 299; public static final int PAGE_NOT_EXIST = 34; public static final int EMAIL_ALREADY_REGISTERED = 120;}package com twitter sdk android core;import android text TextUtils;import com google gson Gson;import com google gson JsonSyntaxException;import com twitter sdk android core models ApiError;import com twitter sdk android core models ApiErrors;import io fabric sdk android Fabric;import retrofit2 Response;public class TwitterApiException extends TwitterException { public static final int DEFAULT_ERROR_CODE = 0; private final ApiError apiError; private final TwitterRateLimit twitterRateLimit; private final int code; private final Response response; public TwitterApiException(Response response) { this(response, readApiError(response), readApiRateLimit(response), response code()); } TwitterApiException(Response response, ApiError apiError, TwitterRateLimit twitterRateLimit, int code) { super(createExceptionMessage(code)); this apiError = apiError; this twitterRateLimit = twitterRateLimit; this code = code; this response = response; } public int getStatusCode() { return code; }  public int getErrorCode() { return apiError == null ? DEFAULT_ERROR_CODE : apiError code; }  public String getErrorMessage() { return apiError == null ? null : apiError message; } public TwitterRateLimit getTwitterRateLimit() { return twitterRateLimit; } public Response getResponse() { return response; } public static TwitterRateLimit readApiRateLimit(Response response) { return new TwitterRateLimit(response headers()); } public static ApiError readApiError(Response response) { try { // The response buffer can only be read once, so we clone the underlying buffer so the // response can be consumed down stream if necessary  final String body = response errorBody() source() buffer() clone() readUtf8(); if (!TextUtils isEmpty(body)) { return parseApiError(body); } } catch (Exception e) { Fabric getLogger() e(TwitterCore TAG, "Unexpected response", e); } return null; } static ApiError parseApiError(String body) { final Gson gson = new Gson(); try { final ApiErrors apiErrors = gson fromJson(body, ApiErrors class); if (!apiErrors errors isEmpty()) { return apiErrors errors get(0); } } catch (JsonSyntaxException e) { Fabric getLogger() e(TwitterCore TAG, "Invalid json: " + body, e); } return null; } static String createExceptionMessage(int code) { return "HTTP request failed, Status: " + code; }}package com twitter sdk android core identity;import android app Activity;import android content Context;import android content Intent;import io fabric sdk android Fabric;import com twitter sdk android core Callback;import com twitter sdk android core Result;import com twitter sdk android core SessionManager;import com twitter sdk android core TwitterAuthException;import com twitter sdk android core TwitterCore;import com twitter sdk android core TwitterAuthConfig;import com twitter sdk android core TwitterException;import com twitter sdk android core TwitterSession;import com twitter sdk android core internal scribe DefaultScribeClient;import com twitter sdk android core internal scribe EventNamespace;import com twitter sdk android core internal scribe TwitterCoreScribeClientHolder;public class TwitterAuthClient { private static class AuthStateLazyHolder { private static final AuthState INSTANCE = new AuthState(); } private static final String SCRIBE_CLIENT = "android"; private static final String SCRIBE_LOGIN_PAGE = "login"; private static final String SCRIBE_SHARE_EMAIL_PAGE = "shareemail"; private static final String SCRIBE_SECTION = ""; // intentionally blank private static final String SCRIBE_COMPONENT = ""; // intentionally blank private static final String SCRIBE_ELEMENT = ""; // intentionally blank private static final String SCRIBE_ACTION = "impression"; final AuthState authState; final SessionManager<TwitterSession> sessionManager; private final Context context; private final TwitterAuthConfig authConfig; public int getRequestCode() { return authConfig getRequestCode(); }  public TwitterAuthClient() { this(TwitterCore getInstance() getContext(), TwitterCore getInstance() getAuthConfig(), TwitterCore getInstance() getSessionManager(), AuthStateLazyHolder INSTANCE); } TwitterAuthClient(Context context, TwitterAuthConfig authConfig, SessionManager<TwitterSession> sessionManager, AuthState authState) { this authState = authState; this context = context; this authConfig = authConfig; this sessionManager = sessionManager; }  public void authorize(Activity activity, Callback<TwitterSession> callback) { if (activity == null) { throw new IllegalArgumentException("Activity must not be null "); } if (callback == null) { throw new IllegalArgumentException("Callback must not be null "); } if (activity isFinishing()) { Fabric getLogger() e(TwitterCore TAG, "Cannot authorize, activity is finishing ", null); } else { handleAuthorize(activity, callback); } } private void handleAuthorize(Activity activity, Callback<TwitterSession> callback) { scribeAuthorizeImpression(); final CallbackWrapper callbackWrapper = new CallbackWrapper(sessionManager, callback); if (!authorizeUsingSSO(activity, callbackWrapper) && !authorizeUsingOAuth(activity, callbackWrapper)) { callbackWrapper failure(new TwitterAuthException("Authorize failed ")); } } private boolean authorizeUsingSSO(Activity activity, CallbackWrapper callbackWrapper) { if (SSOAuthHandler isAvailable(activity)) { Fabric getLogger() d(TwitterCore TAG, "Using SSO"); return authState beginAuthorize(activity, new SSOAuthHandler(authConfig, callbackWrapper, authConfig getRequestCode())); } else { return false; } } private boolean authorizeUsingOAuth(Activity activity, CallbackWrapper callbackWrapper) { Fabric getLogger() d(TwitterCore TAG, "Using OAuth"); return authState beginAuthorize(activity, new OAuthHandler(authConfig, callbackWrapper, authConfig getRequestCode())); } private void scribeAuthorizeImpression() { final DefaultScribeClient scribeClient = getScribeClient(); if (scribeClient == null) return; final EventNamespace ns = new EventNamespace Builder()  setClient(SCRIBE_CLIENT)  setPage(SCRIBE_LOGIN_PAGE)  setSection(SCRIBE_SECTION)  setComponent(SCRIBE_COMPONENT)  setElement(SCRIBE_ELEMENT)  setAction(SCRIBE_ACTION)  builder(); scribeClient scribe(ns); }  public void onActivityResult(int requestCode, int resultCode, Intent data) { Fabric getLogger() d(TwitterCore TAG, "onActivityResult called with " + requestCode + " " + resultCode); if (!authState isAuthorizeInProgress()) { Fabric getLogger() e(TwitterCore TAG, "Authorize not in progress", null); } else { final AuthHandler authHandler = authState getAuthHandler(); if (authHandler != null && authHandler handleOnActivityResult(requestCode, resultCode, data)) { authState endAuthorize(); } } }  public void requestEmail(TwitterSession session, Callback<String> callback) { if (session == null) { throw new IllegalArgumentException("Session must not be null "); } if (callback == null) { throw new IllegalArgumentException("Callback must not be null "); } scribeRequestEmail(); context startActivity(newShareEmailIntent(session, callback)); } protected DefaultScribeClient getScribeClient() { return TwitterCoreScribeClientHolder getScribeClient(); } private void scribeRequestEmail() { final DefaultScribeClient scribeClient = getScribeClient(); if (scribeClient == null) return; final EventNamespace ns = new EventNamespace Builder()  setClient(SCRIBE_CLIENT)  setPage(SCRIBE_SHARE_EMAIL_PAGE)  setSection(SCRIBE_SECTION)  setComponent(SCRIBE_COMPONENT)  setElement(SCRIBE_ELEMENT)  setAction(SCRIBE_ACTION)  builder(); scribeClient scribe(ns); } Intent newShareEmailIntent(TwitterSession session, Callback<String> callback) { return new Intent(context, ShareEmailActivity class)  setFlags(Intent FLAG_ACTIVITY_NEW_TASK)  putExtra(ShareEmailActivity EXTRA_SESSION_ID, session getId())  putExtra(ShareEmailActivity EXTRA_RESULT_RECEIVER, new ShareEmailResultReceiver(callback)); } static class CallbackWrapper extends Callback<TwitterSession> { private final SessionManager<TwitterSession> sessionManager; private final Callback<TwitterSession> callback; public CallbackWrapper(SessionManager<TwitterSession> sessionManager, Callback<TwitterSession> callback) { this sessionManager = sessionManager; this callback = callback; } @Override public void success(Result<TwitterSession> result) { Fabric getLogger() d(TwitterCore TAG, "Authorization completed successfully"); sessionManager setActiveSession(result data); callback success(result); } @Override public void failure(TwitterException exception) { Fabric getLogger() e(TwitterCore TAG, "Authorization completed with an error", exception); callback failure(exception); } }}package com twitter sdk android core identity;import android app Activity;import android content ComponentName;import android content Context;import android content Intent;import android content pm PackageManager;import io fabric sdk android FabricAndroidTestCase;import io fabric sdk android FabricTestUtils;import io fabric sdk android KitStub;import com twitter sdk android core Callback;import com twitter sdk android core Result;import com twitter sdk android core SessionManager;import com twitter sdk android core TestFixtures;import com twitter sdk android core TwitterAuthConfig;import com twitter sdk android core TwitterAuthException;import com twitter sdk android core TwitterSession;import com twitter sdk android core internal scribe DefaultScribeClient;import com twitter sdk android core internal scribe EventNamespace;import org mockito ArgumentCaptor;import static org mockito Mockito *;public class TwitterAuthClientTest extends FabricAndroidTestCase { private static final int TEST_REQUEST_CODE = 100; private Context mockContext; private TwitterAuthConfig mockAuthConfig; private SessionManager<TwitterSession> mockSessionManager; private AuthState mockAuthState; private Callback<TwitterSession> mockCallback; private DefaultScribeClient mockScribeClient; private TwitterAuthClient authClient; @Override protected void setUp() throws Exception { super setUp(); mockContext = mock(Context class); when(mockContext getPackageName()) thenReturn(getClass() getPackage() toString()); mockAuthConfig = mock(TwitterAuthConfig class); when(mockAuthConfig getRequestCode()) thenReturn(TEST_REQUEST_CODE); mockSessionManager = mock(SessionManager class); mockAuthState = mock(TestAuthState class); mockCallback = mock(Callback class); mockScribeClient = mock(DefaultScribeClient class); authClient = new TwitterAuthClient(mockContext, mockAuthConfig, mockSessionManager, mockAuthState); } public void testConstructor_noParameters() throws Exception { FabricTestUtils with(getContext(), new KitStub()); try { new TwitterAuthClient(); fail("Expected IllegalStateException to be thrown"); } catch (IllegalStateException e) { assertEquals("Must start Twitter Kit with Fabric with() first", e getMessage()); } finally { FabricTestUtils resetFabric(); } } public void testGetRequestCode() { assertEquals(TEST_REQUEST_CODE, authClient getRequestCode()); } public void testAuthorize_activityNull() { try { authClient authorize(null, mock(Callback class)); fail("Expected IllegalArgumentException to be thrown"); } catch (IllegalArgumentException e) { assertEquals("Activity must not be null ", e getMessage()); } } public void testAuthorize_activityIsFinishing() { final Activity mockActivity = mock(Activity class); when(mockActivity isFinishing()) thenReturn(true); // Verify that when activity is finishing, no further work is done  authClient authorize(mockActivity, mockCallback); verifyZeroInteractions(mockAuthState); } public void testAuthorize_callbackNull() { try { authClient authorize(mock(Activity class), null); fail("Expected IllegalArgumentException to be thrown"); } catch (IllegalArgumentException e) { assertEquals("Callback must not be null ", e getMessage()); } } public void testAuthorize_authorizeInProgress() throws PackageManager NameNotFoundException { final Activity mockActivity = mock(Activity class); TestUtils setupNoSSOAppInstalled(mockActivity); when(mockAuthState isAuthorizeInProgress()) thenReturn(true); // Verify that when authorize is in progress, callback is notified of error  authClient authorize(mockActivity, mockCallback); verify(mockCallback) failure(any(TwitterAuthException class)); } public void testAuthorize_ssoAvailable() throws PackageManager NameNotFoundException { final Activity mockActivity = mock(Activity class); TestUtils setupTwitterInstalled(mockActivity); when(mockAuthState beginAuthorize(any(Activity class), any(AuthHandler class)))  thenReturn(true); // Verify that when SSO is available, SSOAuthHandler is used to complete the authorization // flow  authClient authorize(mockActivity, mockCallback); verify(mockAuthState) beginAuthorize(eq(mockActivity), any(SSOAuthHandler class)); } public void testAuthorize_ssoAvailableViaTwitterDogfood() throws PackageManager NameNotFoundException { final Activity mockActivity = mock(Activity class); TestUtils setupTwitterInstalled(mockActivity); when(mockAuthState beginAuthorize(any(Activity class), any(AuthHandler class)))  thenReturn(true); // Verify that when SSO is available, SSOAuthHandler is used to complete the authorization // flow  authClient authorize(mockActivity, mockCallback); verify(mockAuthState) beginAuthorize(eq(mockActivity), any(SSOAuthHandler class)); } public void testAuthorize_ssoNotAvailable() throws PackageManager NameNotFoundException { final Activity mockActivity = mock(Activity class); TestUtils setupNoSSOAppInstalled(mockActivity); when(mockAuthState beginAuthorize(any(Activity class), any(AuthHandler class)))  thenReturn(true); // Verify that when SSO is not available, OAuthHandler is used to complete the // authorization flow  authClient authorize(mockActivity, mockCallback); verify(mockAuthState) beginAuthorize(eq(mockActivity), any(OAuthHandler class)); } public void testAuthorize_bothSsoAndOAuthFail() throws PackageManager NameNotFoundException { final Activity mockActivity = mock(Activity class); TestUtils setupTwitterInstalled(mockActivity); when(mockAuthState beginAuthorize(any(Activity class), any(AuthHandler class)))  thenReturn(false); authClient authorize(mockActivity, mockCallback); verify(mockAuthState, times(2)) beginAuthorize(eq(mockActivity), any(AuthHandler class)); final ArgumentCaptor<TwitterAuthException> argCaptor = ArgumentCaptor forClass(TwitterAuthException class); verify(mockCallback) failure(argCaptor capture()); assertEquals("Authorize failed ", argCaptor getValue() getMessage()); } public void testAuthorize_scribesImpression() throws PackageManager NameNotFoundException { final Activity mockActivity = mock(Activity class); TestUtils setupNoSSOAppInstalled(mockActivity); authClient = new TwitterAuthClient(mockContext, mockAuthConfig, mockSessionManager, mockAuthState) { @Override protected DefaultScribeClient getScribeClient() { return mockScribeClient; } }; authClient authorize(mockActivity, mockCallback); verify(mockScribeClient) scribe(any(EventNamespace class)); } public void testAuthorize_scribeHandlesNullClient() throws PackageManager NameNotFoundException { final Activity mockActivity = mock(Activity class); TestUtils setupNoSSOAppInstalled(mockActivity); authClient = new TwitterAuthClient(mockContext, mockAuthConfig, mockSessionManager, mockAuthState) { @Override protected DefaultScribeClient getScribeClient() { return null; } }; try { authClient authorize(mockActivity, mockCallback); } catch (NullPointerException e) { fail("should not crash with null scribe client"); } } public void testOnActivityResult_noAuthorizeInProgress() { when(mockAuthState isAuthorizeInProgress()) thenReturn(false); // Verify that if authorize is in progress, onActivityResult returns early  authClient onActivityResult(TEST_REQUEST_CODE, Activity RESULT_OK, mock(Intent class)); verify(mockAuthState) isAuthorizeInProgress(); verifyNoMoreInteractions(mockAuthState); } public void testOnActivityResult_handleOnActivityResultTrue() { setUpAuthStateOnActivityResult(true); // Verify that when the activity result is handled, auth state is updated to end  authClient onActivityResult(TEST_REQUEST_CODE, Activity RESULT_OK, mock(Intent class)); verify(mockAuthState) isAuthorizeInProgress(); verify(mockAuthState) getAuthHandler(); verify(mockAuthState) endAuthorize(); } public void testOnActivityResult_handleOnActivityResultFalse() { setUpAuthStateOnActivityResult(false); // Verify that when the activity result is not handled, auth state is not updated to end  authClient onActivityResult(TEST_REQUEST_CODE, Activity RESULT_OK, mock(Intent class)); verify(mockAuthState) isAuthorizeInProgress(); verify(mockAuthState) getAuthHandler(); verifyNoMoreInteractions(mockAuthState); } private void setUpAuthStateOnActivityResult(boolean handled) { final AuthHandler mockAuthHandler = mock(AuthHandler class); when(mockAuthHandler handleOnActivityResult(anyInt(), anyInt(), any(Intent class)))  thenReturn(handled); when(mockAuthState isAuthorizeInProgress()) thenReturn(true); when(mockAuthState getAuthHandler()) thenReturn(mockAuthHandler); } public void testRequestEmail_nullSession() { try { authClient requestEmail(null, mock(Callback class)); fail("Expected IllegalArgumentException to be thrown"); } catch (IllegalArgumentException e) { assertEquals("Session must not be null ", e getMessage()); } } public void testRequestEmail() { final TwitterSession mockSession = mock(TwitterSession class); when(mockSession getId()) thenReturn(TestFixtures USER_ID); authClient requestEmail(mockSession, mock(Callback class)); final ArgumentCaptor<Intent> argCaptor = ArgumentCaptor forClass(Intent class); verify(mockContext) startActivity(argCaptor capture()); assertShareEmailIntent(argCaptor getValue()); } public void testRequestEmail_nullCallback() { try { authClient requestEmail(mock(TwitterSession class), null); fail("Expected IllegalArgumentException to be thrown"); } catch (IllegalArgumentException e) { assertEquals("Callback must not be null ", e getMessage()); } } public void testRequestEmail_scribesImpression() { final TwitterSession mockSession = mock(TwitterSession class); when(mockSession getId()) thenReturn(TestFixtures USER_ID); authClient = new TwitterAuthClient(mockContext, mockAuthConfig, mockSessionManager, mockAuthState) { @Override protected DefaultScribeClient getScribeClient() { return mockScribeClient; } }; authClient requestEmail(mockSession, mock(Callback class)); verify(mockScribeClient) scribe(any(EventNamespace class)); } public void testReqestEmail_scribeHandlesNullClient() { final TwitterSession mockSession = mock(TwitterSession class); when(mockSession getId()) thenReturn(TestFixtures USER_ID); authClient = new TwitterAuthClient(mockContext, mockAuthConfig, mockSessionManager, mockAuthState) { @Override protected DefaultScribeClient getScribeClient() { return null; } }; try { authClient requestEmail(mockSession, mock(Callback class)); } catch (NullPointerException e) { fail("should handle null scribe client"); } } public void testNewShareEmailIntent() { final TwitterSession mockSession = mock(TwitterSession class); when(mockSession getId()) thenReturn(TestFixtures USER_ID); final Intent intent = authClient newShareEmailIntent(mockSession, mock(Callback class)); assertShareEmailIntent(intent); } private void assertShareEmailIntent(Intent intent) { final ComponentName component = new ComponentName(mockContext, ShareEmailActivity class getName()); assertEquals(component, intent getComponent()); assertEquals(Intent FLAG_ACTIVITY_NEW_TASK, intent getFlags()); assertEquals(TestFixtures USER_ID, intent getLongExtra(ShareEmailActivity EXTRA_SESSION_ID, TwitterSession UNKNOWN_USER_ID)); assertNotNull(intent getParcelableExtra(ShareEmailActivity EXTRA_RESULT_RECEIVER)); } public void testCallbackWrapper_success() { final TwitterAuthClient CallbackWrapper callbackWrapper = new TwitterAuthClient CallbackWrapper(mockSessionManager, mockCallback); final TwitterSession mockSession = mock(TwitterSession class); final Result<TwitterSession> mockResult = new Result<>(mockSession, null); callbackWrapper success(mockResult); verify(mockSessionManager) setActiveSession(eq(mockSession)); verify(mockCallback) success(eq(mockResult)); } public void testCallbackWrapper_failure() { final TwitterAuthClient CallbackWrapper callbackWrapper = new TwitterAuthClient CallbackWrapper(mockSessionManager, mockCallback); final TwitterAuthException mockException = mock(TwitterAuthException class); callbackWrapper failure(mockException); verifyZeroInteractions(mockSessionManager); verify(mockCallback) failure(eq(mockException)); }}package com twitter sdk android core;import android os Parcel;import android os Parcelable;public class TwitterAuthConfig implements Parcelable {  public static final int DEFAULT_AUTH_REQUEST_CODE = 140; public static final Parcelable Creator<TwitterAuthConfig> CREATOR = new Parcelable Creator<TwitterAuthConfig>() { public TwitterAuthConfig createFromParcel(Parcel in) { return new TwitterAuthConfig(in); } public TwitterAuthConfig[] newArray(int size) { return new TwitterAuthConfig[size]; } }; private final String consumerKey; private final String consumerSecret;  public TwitterAuthConfig(String consumerKey, String consumerSecret) { if (consumerKey == null || consumerSecret == null) { throw new IllegalArgumentException( "TwitterAuthConfig must not be created with null consumer key or secret "); } this consumerKey = sanitizeAttribute(consumerKey); this consumerSecret = sanitizeAttribute(consumerSecret); } private TwitterAuthConfig(Parcel in) { consumerKey = in readString(); consumerSecret = in readString(); }  public String getConsumerKey() { return consumerKey; }  public String getConsumerSecret() { return consumerSecret; }  public int getRequestCode() { return DEFAULT_AUTH_REQUEST_CODE; } static String sanitizeAttribute(String input) { if (input != null) { return input trim(); } else { return null; } } @Override public int describeContents() { return 0; } @Override public void writeToParcel(Parcel out, int flags) { out writeString(consumerKey); out writeString(consumerSecret); }}package com twitter sdk android core;import android os Parcel;import io fabric sdk android FabricAndroidTestCase;public class TwitterAuthConfigTest extends FabricAndroidTestCase { private static final String NO_PARAM_ERROR_MSG = "TwitterAuthConfig must not be created with null consumer key or secret "; private TwitterAuthConfig authConfig; @Override protected void setUp() throws Exception { super setUp(); authConfig = new TwitterAuthConfig(TestFixtures KEY, TestFixtures SECRET); } public void testParcelable() { final Parcel parcel = Parcel obtain(); authConfig writeToParcel(parcel, 0); parcel setDataPosition(0); final TwitterAuthConfig parceledAuthConfig = TwitterAuthConfig CREATOR createFromParcel(parcel); assertEquals(TestFixtures KEY, parceledAuthConfig getConsumerKey()); assertEquals(TestFixtures SECRET, parceledAuthConfig getConsumerSecret()); } public void testGetRequestCode() { assertEquals(TwitterAuthConfig DEFAULT_AUTH_REQUEST_CODE, authConfig getRequestCode()); } public void testSanitizeAttribute_nullAttribute() { assertNull(TwitterAuthConfig sanitizeAttribute(null)); } public void testSanitizeAttribute_sanitizedString() { final String test = "test"; assertEquals(test, TwitterAuthConfig sanitizeAttribute(test)); } public void testSanitizeAttribute_trailingWhitespace() { final String test = "test "; assertEquals("test", TwitterAuthConfig sanitizeAttribute(test)); } public void testConstructor_nullKey() { try { new TwitterAuthConfig(null, "secret"); fail(); } catch (IllegalArgumentException ie) { assertEquals(NO_PARAM_ERROR_MSG, ie getMessage()); } } public void testConstructor_nullSecret() { try { new TwitterAuthConfig("key", null); fail(); } catch (IllegalArgumentException ie) { assertEquals(NO_PARAM_ERROR_MSG, ie getMessage()); } } public void testConstructor_nullArguments() { try { new TwitterAuthConfig(null, null); fail(); } catch (IllegalArgumentException ie) { assertEquals(NO_PARAM_ERROR_MSG, ie getMessage()); } }}package com twitter sdk android core;public class TwitterAuthException extends TwitterException { private static final long serialVersionUID = 577033016879783994L; public TwitterAuthException(String detailMessage) { super(detailMessage); } public TwitterAuthException(String detailMessage, Throwable throwable) { super(detailMessage, throwable); }}package com twitter sdk android core;import android os Parcel;import android os Parcelable;import com google gson annotations SerializedName;public class TwitterAuthToken extends AuthToken implements Parcelable { public static final Parcelable Creator<TwitterAuthToken> CREATOR = new Parcelable Creator<TwitterAuthToken>() { public TwitterAuthToken createFromParcel(Parcel in) { return new TwitterAuthToken(in); } public TwitterAuthToken[] newArray(int size) { return new TwitterAuthToken[size]; } }; @SerializedName("token") public final String token; @SerializedName("secret") public final String secret; public TwitterAuthToken(String token, String secret) { super(); this token = token; this secret = secret; } // for testing purposes TwitterAuthToken(String token, String secret, long createdAt) { super(createdAt); this token = token; this secret = secret; } private TwitterAuthToken(Parcel in) { super(); this token = in readString(); this secret = in readString(); } @Override public boolean isExpired() { // Twitter does not expire OAuth1a tokens return false; } @Override public String toString() { final StringBuilder sb = new StringBuilder()  append("token=") append(this token)  append(",secret=") append(this secret); return sb toString(); } @Override public int describeContents() { return 0; } @Override public void writeToParcel(Parcel out, int flags) { out writeString(token); out writeString(secret); } @Override public boolean equals(Object o) { if (this == o) return true; if (!(o instanceof TwitterAuthToken)) return false; final TwitterAuthToken that = (TwitterAuthToken) o; if (secret != null ? !secret equals(that secret) : that secret != null) return false; if (token != null ? !token equals(that token) : that token != null) return false; return true; } @Override public int hashCode() { int result = token != null ? token hashCode() : 0; result = 31 * result + (secret != null ? secret hashCode() : 0); return result; }}package com twitter sdk android core internal;import com google gson annotations SerializedName;import com twitter sdk android core models Tweet;import com twitter sdk android core models User;import java util List;import java util Map;public class TwitterCollection { public TwitterCollection(Content contents, Metadata metadata) { this contents = contents; this metadata = metadata; } @SerializedName("objects") public final Content contents; @SerializedName("response") public final Metadata metadata;  public static final class Content {  @SerializedName("tweets") public final Map<Long, Tweet> tweetMap;  @SerializedName("users") public final Map<Long, User> userMap; public Content(Map<Long, Tweet> tweetMap, Map<Long, User> userMap) { this tweetMap = tweetMap; this userMap = userMap; } }  public static final class Metadata { public Metadata(String timelineId, Position position, List<TimelineItem> timelines) { this timelineId = timelineId; this position = position; this timelineItems = timelines; }  @SerializedName("timeline_id") public final String timelineId; @SerializedName("position") public final Position position;  @SerializedName("timeline") public final List<TimelineItem> timelineItems;  public static final class Position {  @SerializedName("min_position") public final Long minPosition;  @SerializedName("max_position") public final Long maxPosition; public Position(Long maxPosition, Long minPosition) { this maxPosition = maxPosition; this minPosition = minPosition; } } }  public static class TimelineItem { public TimelineItem(TweetItem tweetItem) { this tweetItem = tweetItem; }  @SerializedName("tweet") public final TweetItem tweetItem; public static final class TweetItem { public TweetItem(Long id) { this id = id; }  @SerializedName("id") public final Long id; } }}package com twitter sdk android core;import android app Activity;import io fabric sdk android Fabric;import io fabric sdk android Kit;import io fabric sdk android services network NetworkUtils;import io fabric sdk android services persistence PreferenceStoreImpl;import com twitter sdk android core identity TwitterAuthClient;import com twitter sdk android core internal MigrationHelper;import com twitter sdk android core internal SessionMonitor;import com twitter sdk android core internal TwitterApi;import com twitter sdk android core internal TwitterSessionVerifier;import com twitter sdk android core internal oauth OAuth2Service;import com twitter sdk android core internal scribe TwitterCoreScribeClientHolder;import java util concurrent ConcurrentHashMap;import javax net ssl SSLSocketFactory;public class TwitterCore extends Kit<Boolean> { public static final String TAG = "Twitter"; static final String PREF_KEY_ACTIVE_TWITTER_SESSION = "active_twittersession"; static final String PREF_KEY_TWITTER_SESSION = "twittersession"; static final String PREF_KEY_ACTIVE_GUEST_SESSION = "active_guestsession"; static final String PREF_KEY_GUEST_SESSION = "guestsession"; static final String SESSION_PREF_FILE_NAME = "session_store"; SessionManager<TwitterSession> twitterSessionManager; SessionManager<GuestSession> guestSessionManager; SessionMonitor<TwitterSession> sessionMonitor; private final TwitterAuthConfig authConfig; private final ConcurrentHashMap<Session, TwitterApiClient> apiClients; private volatile TwitterApiClient guestClient; private volatile GuestSessionProvider guestSessionProvider; private volatile SSLSocketFactory sslSocketFactory; public TwitterCore(TwitterAuthConfig authConfig) { this(authConfig, new ConcurrentHashMap<Session, TwitterApiClient>(), null); } // Testing only TwitterCore(TwitterAuthConfig authConfig, ConcurrentHashMap<Session, TwitterApiClient> apiClients, TwitterApiClient guestClient) { this authConfig = authConfig; this apiClients = apiClients; this guestClient = guestClient; } public static TwitterCore getInstance() { checkInitialized(); return Fabric getKit(TwitterCore class); } @Override public String getVersion() { return BuildConfig VERSION_NAME + " " + BuildConfig BUILD_NUMBER; } public TwitterAuthConfig getAuthConfig() { return authConfig; }  public SSLSocketFactory getSSLSocketFactory() { checkInitialized(); if (sslSocketFactory == null) { createSSLSocketFactory(); } return sslSocketFactory; } private synchronized void createSSLSocketFactory() { if (sslSocketFactory == null) { try { sslSocketFactory = NetworkUtils getSSLSocketFactory( new TwitterPinningInfoProvider(getContext())); Fabric getLogger() d(TAG, "Custom SSL pinning enabled"); } catch (Exception e) { Fabric getLogger() e(TAG, "Exception setting up custom SSL pinning", e); } } } @Override protected boolean onPreExecute() { final MigrationHelper migrationHelper = new MigrationHelper(); migrationHelper migrateSessionStore(getContext(), getIdentifier(), getIdentifier() + ":" + SESSION_PREF_FILE_NAME + " xml"); twitterSessionManager = new PersistedSessionManager<>( new PreferenceStoreImpl(getContext(), SESSION_PREF_FILE_NAME), new TwitterSession Serializer(), PREF_KEY_ACTIVE_TWITTER_SESSION, PREF_KEY_TWITTER_SESSION); guestSessionManager = new PersistedSessionManager<>( new PreferenceStoreImpl(getContext(), SESSION_PREF_FILE_NAME), new GuestSession Serializer(), PREF_KEY_ACTIVE_GUEST_SESSION, PREF_KEY_GUEST_SESSION); sessionMonitor = new SessionMonitor<>(twitterSessionManager, getFabric() getExecutorService(), new TwitterSessionVerifier()); return true; } @Override protected Boolean doInBackground() { // Trigger restoration of session twitterSessionManager getActiveSession(); guestSessionManager getActiveSession(); getSSLSocketFactory(); getGuestSessionProvider(); initializeScribeClient(); // Monitor activity lifecycle after sessions have been restored  Otherwise we would not // have any sessions to monitor anyways  sessionMonitor monitorActivityLifecycle(getFabric() getActivityLifecycleManager()); return true; } @Override public String getIdentifier() { return BuildConfig GROUP + ":" + BuildConfig ARTIFACT_ID; } private static void checkInitialized() { if (Fabric getKit(TwitterCore class) == null) { throw new IllegalStateException("Must start Twitter Kit with Fabric with() first"); } } private void initializeScribeClient() { TwitterCoreScribeClientHolder initialize(this, getSessionManager(), getGuestSessionProvider(), getIdManager()); }   public void logIn(Activity activity, Callback<TwitterSession> callback) { checkInitialized(); new TwitterAuthClient() authorize(activity, callback); }  public void logOut() { checkInitialized(); final SessionManager<TwitterSession> sessionManager = getSessionManager(); if (sessionManager != null) { sessionManager clearActiveSession(); } }  public SessionManager<TwitterSession> getSessionManager() { checkInitialized(); return twitterSessionManager; } public GuestSessionProvider getGuestSessionProvider() { checkInitialized(); if (guestSessionProvider == null) { createGuestSessionProvider(); } return guestSessionProvider; } private synchronized void createGuestSessionProvider() { if (guestSessionProvider == null) { final OAuth2Service service = new OAuth2Service(this, getSSLSocketFactory(), new TwitterApi()); guestSessionProvider = new GuestSessionProvider(service, guestSessionManager); } }  public TwitterApiClient getApiClient() { checkInitialized(); final TwitterSession session = twitterSessionManager getActiveSession(); if (session == null) { return getGuestApiClient(); } return getApiClient(session); }  public TwitterApiClient getApiClient(TwitterSession session) { checkInitialized(); if (!apiClients containsKey(session)) { apiClients putIfAbsent(session, new TwitterApiClient(session)); } return apiClients get(session); }  public TwitterApiClient getGuestApiClient() { checkInitialized(); if (guestClient == null) { createGuestClient(); } return guestClient; } private synchronized void createGuestClient() { if (guestClient == null) { guestClient = new TwitterApiClient(); } }}package com twitter sdk android core internal scribe;import com twitter sdk android core GuestSessionProvider;import com twitter sdk android core Session;import com twitter sdk android core SessionManager;import com twitter sdk android core TwitterAuthToken;import com twitter sdk android core TwitterCore;import io fabric sdk android services common IdManager;public class TwitterCoreScribeClientHolder { private static final String KIT_NAME = "TwitterCore"; private static DefaultScribeClient instance;  public static DefaultScribeClient getScribeClient() { return instance; }  public static void initialize(TwitterCore kit, SessionManager<? extends Session<TwitterAuthToken>> sessionManagers, GuestSessionProvider guestSessionProvider, IdManager idManager) { instance = new DefaultScribeClient(kit, KIT_NAME, sessionManagers, guestSessionProvider, idManager); }}package com twitter sdk android core;import android app Activity;import io fabric sdk android Fabric;import io fabric sdk android FabricAndroidTestCase;import io fabric sdk android FabricTestUtils;import io fabric sdk android KitStub;import java util Arrays;import java util List;import java util concurrent Callable;import java util concurrent ExecutorService;import java util concurrent Executors;import java util concurrent Future;import javax net ssl SSLSocketFactory;import static org mockito Mockito mock;import static org mockito Mockito when;public class TwitterCoreTest extends FabricAndroidTestCase { private static final String TWITTER_NOT_INIT_ERROR_MSG = "Must start Twitter Kit with Fabric with() first"; private static final String FABRIC_NOT_INIT_ERROR_MSG = "Must Initialize Fabric before using singleton()"; private TwitterCore twitterCore; @Override protected void setUp() throws Exception { super setUp(); twitterCore = new TwitterCore(new TwitterAuthConfig("", "")); } @Override protected void tearDown() throws Exception { super tearDown(); FabricTestUtils resetFabric(); } public void testLogOut_noSdkStart() { try { TwitterCore getInstance() logOut(); fail("Should fail if Fabric is not instantiated "); } catch (IllegalStateException ex) { assertEquals(FABRIC_NOT_INIT_ERROR_MSG, ex getMessage()); } } public void testLogOut_sdkStartNoTwitterKit() throws Exception { FabricTestUtils with(getContext(), new KitStub<Result>()); try { TwitterCore getInstance() logOut(); fail("Should fail if Twitter is not instantiated with Fabric "); } catch (IllegalStateException ie) { assertEquals(TWITTER_NOT_INIT_ERROR_MSG, ie getMessage()); } } public void testLogIn_noSdkStart() { final Callback<TwitterSession> mockCallback = mock(Callback class); try { TwitterCore getInstance() logIn(mock(Activity class), mockCallback); fail("Should fail if Fabric is not instantiated "); } catch (IllegalStateException ie) { assertEquals(FABRIC_NOT_INIT_ERROR_MSG, ie getMessage()); } } public void testLogIn_sdkStartNoTwitterKit() throws Exception { FabricTestUtils with(getContext(), new KitStub<Result>()); final Callback<TwitterSession> mockCallback = mock(Callback class); try { TwitterCore getInstance() logIn(mock(Activity class), mockCallback); fail("Should fail if Twitter is not instantiated with Fabric "); } catch (IllegalStateException ie) { assertEquals(TWITTER_NOT_INIT_ERROR_MSG, ie getMessage()); } } public void testGuestSessionManager_noSdkStart() { try { TwitterCore getInstance() getGuestSessionProvider(); fail("Should fail if Fabric is not instantiated "); } catch (IllegalStateException ie) { assertEquals(FABRIC_NOT_INIT_ERROR_MSG, ie getMessage()); } } public void testGuestSessionManager_sdkStartNoTwitterKit() throws Exception { FabricTestUtils with(getContext(), new KitStub<Result>()); try { TwitterCore getInstance() getGuestSessionProvider(); fail("Should fail if Twitter is not instantiated with Fabric "); } catch (IllegalStateException ie) { assertEquals(TWITTER_NOT_INIT_ERROR_MSG, ie getMessage()); } } public void testGetIdentifier() { final String identifier = BuildConfig GROUP + ":" + BuildConfig ARTIFACT_ID; assertEquals(identifier, twitterCore getIdentifier()); } public void testGetSSLSocketFactory_noSdkStart() { try { twitterCore getSSLSocketFactory(); fail("Should fail if Fabric is not instantiated "); } catch (IllegalStateException ex) { assertEquals(FABRIC_NOT_INIT_ERROR_MSG, ex getMessage()); } } public void testGetSSLSocketFactory_sdkStartNoTwitterKit() throws Exception { FabricTestUtils with(getContext(), new KitStub<Result>()); try { twitterCore getSSLSocketFactory(); fail("Should fail if Twitter is not instantiated with Fabric "); } catch (IllegalStateException ex) { assertEquals(TWITTER_NOT_INIT_ERROR_MSG, ex getMessage()); } } public void testGetSessionManager() throws Exception { FabricTestUtils with(getContext(), twitterCore); assertNotNull(twitterCore getSessionManager()); } public void testGetSessionManager_twitterNotInitialized() throws Exception { FabricTestUtils with(getContext(), new KitStub()); try { twitterCore getSessionManager(); fail("Should fail if Twitter is not instantiated with Fabric "); } catch (IllegalStateException ex) { assertEquals(TWITTER_NOT_INIT_ERROR_MSG, ex getMessage()); } } public void testGetAppSessionManager() throws Exception { FabricTestUtils with(getContext(), twitterCore); assertNotNull(twitterCore getGuestSessionProvider()); } public void testGetAppSessionManager_twitterNotInitialized() throws Exception { FabricTestUtils with(getContext(), new KitStub()); try { twitterCore getGuestSessionProvider(); fail("Should fail if Twitter is not instantiated with Fabric "); } catch (IllegalStateException ex) { assertEquals(TWITTER_NOT_INIT_ERROR_MSG, ex getMessage()); } } public void testGetApiClient_activeSessionExists() throws Exception { FabricTestUtils with(getContext(), twitterCore); twitterCore twitterSessionManager = setUpSessionManager(mock(TwitterSession class)); assertNotNull(twitterCore getApiClient()); } public void testGetApiClient_twitterNotInitialized() throws Exception { FabricTestUtils with(getContext(), new KitStub<Result>()); try { twitterCore getApiClient(); fail("Should fail if Twitter is not instantiated with Fabric "); } catch (IllegalStateException ex) { assertEquals(TWITTER_NOT_INIT_ERROR_MSG, ex getMessage()); } } public void testGetApiClient_withSession() throws Exception { FabricTestUtils with(getContext(), twitterCore); assertNotNull(twitterCore getApiClient(mock(TwitterSession class))); } public void testGetApiClient_withSessionTwitterNotInitialized() throws Exception { FabricTestUtils with(getContext(), new KitStub<Result>()); try { twitterCore getApiClient(mock(TwitterSession class)); fail("Should fail if Twitter is not instantiated with Fabric "); } catch (IllegalStateException ex) { assertEquals(TWITTER_NOT_INIT_ERROR_MSG, ex getMessage()); } } public void testGetGuestApiClient_twitterNotInitialized() throws Exception { FabricTestUtils with(getContext(), new KitStub<Result>()); try { twitterCore getGuestApiClient(); fail("Should fail if Twitter is not instantiated with Fabric "); } catch (IllegalStateException ex) { assertEquals(TWITTER_NOT_INIT_ERROR_MSG, ex getMessage()); } } private <T extends Session> SessionManager<T> setUpSessionManager(T session) { final SessionManager<T> sessionManager = mock(SessionManager class); when(sessionManager getActiveSession()) thenReturn(session); return sessionManager; } public void testGetSSLSocketFactory_contention() throws Exception { // We don't want to use FabricTestUtils here because we want to test // this when onBackground is also running Fabric with(getContext(), twitterCore); final List<SSLSocketFactoryCallable> callables = Arrays asList( new SSLSocketFactoryCallable(twitterCore), new SSLSocketFactoryCallable(twitterCore)); final ExecutorService executorService = Executors newFixedThreadPool(callables size()); final List<Future<SSLSocketFactory>> socketFactories = executorService invokeAll(callables); assertNotNull(socketFactories get(0) get()); assertNotNull(socketFactories get(1) get()); assertSame(socketFactories get(0) get(), socketFactories get(1) get()); } private static class SSLSocketFactoryCallable implements Callable<SSLSocketFactory> { private TwitterCore twitter; protected SSLSocketFactoryCallable(TwitterCore twitter) { this twitter = twitter; } @Override public SSLSocketFactory call() { return twitter getSSLSocketFactory(); } }}package com twitter sdk android core;import java util concurrent ConcurrentHashMap;public final class TwitterCoreTestUtils { private TwitterCoreTestUtils() {} public static TwitterCore createTwitterCore(TwitterAuthConfig authConfig, ConcurrentHashMap<Session, TwitterApiClient> clients, TwitterApiClient guestClient) { return new TwitterCore(authConfig, clients, guestClient); }}package com twitter sdk android core;public class TwitterException extends RuntimeException { public TwitterException(String detailMessage) { super(detailMessage); } public TwitterException(String detailMessage, Throwable throwable) { super(detailMessage, throwable); }}package com twitter sdk android unity;import android app Activity;import android content Intent;import android net Uri;import com google gson Gson;import com twitter sdk android core TwitterCore;import com twitter sdk android core TwitterSession;import com twitter sdk android core TwitterSessionHelper;import com twitter sdk android tweetcomposer Card;import com twitter sdk android tweetcomposer ComposerActivity;import com unity3d player UnityPlayer;public class TwitterKit { public static final String GAME_OBJECT_NAME = "TwitterGameObject"; public static final String EXTRA_TWITTER_SESSION = "EXTRA_TWITTER_SESSION";  public static void login() { final Activity currentActivity = UnityPlayer currentActivity; final Intent intent = new Intent(currentActivity, LoginActivity class); currentActivity startActivity(intent); }  public static void requestEmail(String session) { final Activity currentActivity = UnityPlayer currentActivity; final Intent intent = new Intent(currentActivity, RequestEmailActivity class); intent putExtra(EXTRA_TWITTER_SESSION, session); currentActivity startActivity(intent); }  public static void logout() { TwitterCore getInstance() logOut(); }  public static String session() { final TwitterSession session = TwitterCore getInstance() getSessionManager()  getActiveSession(); return TwitterSessionHelper serialize(session); }  public static void compose(String session, String config, String[] hashtags) { final Activity currentActivity = UnityPlayer currentActivity; final CardConfig cardConfig = new Gson() fromJson(config, CardConfig class); final Card card = new Card AppCardBuilder(currentActivity)  imageUri(Uri parse(cardConfig imageUri))  googlePlayId(cardConfig appGooglePlayId)  iPadId(cardConfig appIPadId)  iPhoneId(cardConfig appIPhoneId)  build(); final Intent intent = new ComposerActivity Builder(currentActivity)  session(TwitterSessionHelper deserialize(session))  card(card)  hashtags(hashtags)  createIntent(); currentActivity startActivity(intent); } static class CardConfig { final public String appIPhoneId; final public String appIPadId; final public String appGooglePlayId; final public String imageUri; CardConfig(String imageUri, String appGooglePlayId, String appIPadId, String appIPhoneId) { this imageUri = imageUri; this appGooglePlayId = appGooglePlayId; this appIPadId = appIPadId; this appIPhoneId = appIPhoneId; } }}package com twitter sdk android tweetui;import com twitter sdk android core Callback;import com twitter sdk android core TwitterCore;import com twitter sdk android core models Tweet;import java util List;import retrofit2 Call;public class TwitterListTimeline extends BaseTimeline implements Timeline<Tweet> { private static final String SCRIBE_SECTION = "list"; final Long listId; final String slug; final String ownerScreenName; final Long ownerId; final Integer maxItemsPerRequest; final Boolean includeRetweets; TwitterListTimeline(TweetUi tweetUi, Long listId, String slug, Long ownerId, String ownerScreenName, Integer maxItemsPerRequest, Boolean includeRetweets) { super(tweetUi); this listId = listId; this slug = slug; this ownerId = ownerId; this ownerScreenName = ownerScreenName; this maxItemsPerRequest = maxItemsPerRequest; this includeRetweets = includeRetweets; }  @Override public void next(Long sinceId, Callback<TimelineResult<Tweet>> cb) { createListTimelineRequest(sinceId, null) enqueue(new TweetsCallback(cb)); }  @Override public void previous(Long maxId, Callback<TimelineResult<Tweet>> cb) { // lists/statuses api provides results which are inclusive of the maxId, decrement the // maxId to get exclusive results createListTimelineRequest(null, decrementMaxId(maxId)) enqueue(new TweetsCallback(cb)); } Call<List<Tweet>> createListTimelineRequest(final Long sinceId, final Long maxId) { return TwitterCore getInstance() getApiClient() getListService() statuses(listId, slug, ownerScreenName, ownerId, sinceId, maxId, maxItemsPerRequest, true, includeRetweets); } @Override String getTimelineType() { return SCRIBE_SECTION; }  public static class Builder { private final TweetUi tweetUi; private Long listId; private String slug; private Long ownerId; private String ownerScreenName; private Integer maxItemsPerRequest = 30; private Boolean includeRetweets;  public Builder() { this(TweetUi getInstance()); }  public Builder(TweetUi tweetUi) { if (tweetUi == null) { throw new IllegalArgumentException("TweetUi instance must not be null"); } this tweetUi = tweetUi; }  public Builder id(Long id) { this listId = id; return this; }  public Builder slugWithOwnerId(String slug, Long ownerId) { this slug = slug; this ownerId = ownerId; return this; }  public Builder slugWithOwnerScreenName(String slug, String ownerScreenName) { this slug = slug; this ownerScreenName = ownerScreenName; return this; }  public Builder maxItemsPerRequest(Integer maxItemsPerRequest) { this maxItemsPerRequest = maxItemsPerRequest; return this; }  public Builder includeRetweets(Boolean includeRetweets) { this includeRetweets = includeRetweets; return this; }  public TwitterListTimeline build() { // user must provide either an id or slug, not both if (!(listId == null ^ slug == null)) { throw new IllegalStateException("must specify either a list id or slug/owner pair"); } // user provides a slug, but ownerId and ownerScreenName are null if (slug != null && ownerId == null && ownerScreenName == null) { throw new IllegalStateException( "slug/owner pair must set owner via ownerId or ownerScreenName"); } return new TwitterListTimeline(tweetUi, listId, slug, ownerId, ownerScreenName, maxItemsPerRequest, includeRetweets); } }}package com twitter sdk android core identity;import android app Activity;import android annotation TargetApi;import android content Context;import android content Intent;import android content res Resources;import android graphics Typeface;import android os Build;import android util AttributeSet;import android util TypedValue;import android view View;import android widget Button;import com twitter sdk android core Callback;import com twitter sdk android core R;import com twitter sdk android core TwitterCore;import com twitter sdk android core TwitterSession;import io fabric sdk android Fabric;import java lang ref WeakReference;import io fabric sdk android services common CommonUtils;public class TwitterLoginButton extends Button { final static String TAG = TwitterCore TAG; static final String ERROR_MSG_NO_ACTIVITY = "TwitterLoginButton requires an activity " + " Override getActivity to provide the activity for this button "; final WeakReference<Activity> activityRef; volatile TwitterAuthClient authClient; OnClickListener onClickListener; Callback<TwitterSession> callback; public TwitterLoginButton(Context context) { this(context, null); } public TwitterLoginButton(Context context, AttributeSet attrs) { this(context, attrs, android R attr buttonStyle); } public TwitterLoginButton(Context context, AttributeSet attrs, int defStyle) { this(context, attrs, defStyle, null); } TwitterLoginButton(Context context, AttributeSet attrs, int defStyle, TwitterAuthClient authClient) { super(context, attrs, defStyle); this activityRef = new WeakReference<>(getActivity()); this authClient = authClient; setupButton(); checkTwitterCoreAndEnable(); } @TargetApi(Build VERSION_CODES LOLLIPOP) private void setupButton() { final Resources res = getResources(); super setCompoundDrawablesWithIntrinsicBounds( res getDrawable(R drawable tw__ic_logo_default), null, null, null); super setCompoundDrawablePadding( res getDimensionPixelSize(R dimen tw__login_btn_drawable_padding)); super setText(R string tw__login_btn_txt); super setTextColor(res getColor(R color tw__solid_white)); super setTextSize(TypedValue COMPLEX_UNIT_PX, res getDimensionPixelSize(R dimen tw__login_btn_text_size)); super setTypeface(Typeface DEFAULT_BOLD); super setPadding(res getDimensionPixelSize(R dimen tw__login_btn_left_padding), 0, res getDimensionPixelSize(R dimen tw__login_btn_right_padding), 0); super setBackgroundResource(R drawable tw__login_btn); super setOnClickListener(new LoginClickListener()); if (Build VERSION SDK_INT >= Build VERSION_CODES LOLLIPOP) { super setAllCaps(false); } }  public void setCallback(Callback<TwitterSession> callback) { if (callback == null) { throw new IllegalArgumentException("Callback cannot be null"); } this callback = callback; }  public Callback<TwitterSession> getCallback() { return callback; }  public void onActivityResult(int requestCode, int resultCode, Intent data) { if (requestCode == getTwitterAuthClient() getRequestCode()) { getTwitterAuthClient() onActivityResult(requestCode, resultCode, data); } }  protected Activity getActivity() { if (getContext() instanceof Activity) { return (Activity) getContext(); } else if (isInEditMode()) { return null; } else { throw new IllegalStateException(ERROR_MSG_NO_ACTIVITY); } } @Override public void setOnClickListener(OnClickListener onClickListener) { this onClickListener = onClickListener; } private class LoginClickListener implements OnClickListener { @Override public void onClick(View view) { checkCallback(callback); checkActivity(activityRef get()); getTwitterAuthClient() authorize(activityRef get(), callback); if (onClickListener != null) { onClickListener onClick(view); } } private void checkCallback(Callback callback) { if (callback == null) { CommonUtils logOrThrowIllegalStateException(TwitterCore TAG, "Callback must not be null, did you call setCallback?"); } } private void checkActivity(Activity activity) { if (activity == null || activity isFinishing()) { CommonUtils logOrThrowIllegalStateException(TwitterCore TAG, ERROR_MSG_NO_ACTIVITY); } } } TwitterAuthClient getTwitterAuthClient() { if (authClient == null) { synchronized (TwitterLoginButton class) { if (authClient == null) { authClient = new TwitterAuthClient(); } } } return authClient; } private void checkTwitterCoreAndEnable() { //Default (Enabled) in edit mode if (isInEditMode()) return; try { TwitterCore getInstance(); } catch (IllegalStateException ex) { //Disable if TwitterCore hasn't started Fabric getLogger() e(TAG, ex getMessage()); setEnabled(false); } }}package com twitter sdk android core identity;import android app Activity;import android content Intent;import android util Log;import android view View;import io fabric sdk android Fabric;import io fabric sdk android FabricAndroidTestCase;import io fabric sdk android FabricTestUtils;import io fabric sdk android KitStub;import io fabric sdk android Logger;import com twitter sdk android core Callback;import com twitter sdk android core TwitterAuthConfig;import com twitter sdk android core TwitterCore;import com twitter sdk android core TwitterSession;import org mockito ArgumentCaptor;import static org mockito Mockito *;public class TwitterLoginButtonTest extends FabricAndroidTestCase { private static final int TEST_REQUEST_CODE = 100; private Activity mockActivity; private TwitterAuthClient mockAuthClient; private Callback<TwitterSession> mockCallback; private View OnClickListener mockViewClickListener; private TwitterLoginButton loginButton; @Override protected void setUp() throws Exception { super setUp(); mockActivity = mock(Activity class); mockAuthClient = mock(TwitterAuthClient class); when(mockAuthClient getRequestCode()) thenReturn(TEST_REQUEST_CODE); doNothing() when(mockAuthClient) authorize(any(Activity class), any(Callback class)); doNothing() when(mockAuthClient) onActivityResult(anyInt(), anyInt(), any(Intent class)); mockCallback = mock(Callback class); mockViewClickListener = mock(View OnClickListener class); loginButton = new TwitterLoginButton(getContext(), null, 0, mockAuthClient) { // This is to allow us to test TwitterLoginButton without having to set up a real // activity  @Override protected Activity getActivity() { return mockActivity; } }; } public void testConstructor_contextNotActivity() { try { loginButton = new TwitterLoginButton(getContext(), null, 0, mockAuthClient); fail("Constructor should throw an exception when provided context is not an activity"); } catch (IllegalStateException e) { assertEquals(TwitterLoginButton ERROR_MSG_NO_ACTIVITY, e getMessage()); } } public void testConstructor_contextNotActivityEditModeTrue() { loginButton = new TwitterLoginButton(getContext(), null, 0, mockAuthClient) { @Override public boolean isInEditMode() { return true; } }; assertNull(loginButton getActivity()); } public void testConstructor_nullTwitterAuthClient() { final TwitterLoginButton button = new TwitterLoginButton(getContext()) { @Override protected Activity getActivity() { return mock(Activity class); } }; assertNull(button authClient); } public void testConstructor_editMode() throws Exception { final TwitterLoginButton button = new TwitterLoginButton(getContext()) { @Override protected Activity getActivity() { return mock(Activity class); } @Override public boolean isInEditMode() { return true; } }; assertTrue(button isEnabled()); } public void testConstructor_twitterNotStarted() throws Exception { try { final Fabric fabric = new Fabric Builder(getContext())  debuggable(true)  logger(mock(Logger class))  kits(new KitStub())  build(); FabricTestUtils with(fabric); final TwitterLoginButton button = new TwitterLoginButton(getContext()) { @Override protected Activity getActivity() { return mock(Activity class); } }; final Logger logger = Fabric getLogger(); verify(logger) e(eq(TwitterLoginButton TAG), eq("Must start Twitter Kit with Fabric with() first")); assertFalse(button isEnabled()); } finally { FabricTestUtils resetFabric(); } } public void testConstructor_twitterStarted() throws Exception { try { final Fabric fabric = new Fabric Builder(getContext())  debuggable(true)  kits(new TwitterCore(new TwitterAuthConfig("", "")))  logger(mock(Logger class))  build(); FabricTestUtils with(fabric); final TwitterLoginButton button = new TwitterLoginButton(getContext()) { @Override protected Activity getActivity() { return mock(Activity class); } }; final Logger logger = Fabric getLogger(); verify(logger, never()) e(eq(TwitterLoginButton TAG), eq("Must start Twitter Kit with Fabric with() first")); assertTrue(button isEnabled()); } finally { FabricTestUtils resetFabric(); } } public void testSetCallback_callbackNull() { try { loginButton setCallback(null); fail("setCallback should throw an exception when called with null callback"); } catch (IllegalArgumentException e) { assertEquals("Callback cannot be null", e getMessage()); } } public void testGetCallback() { final Callback<TwitterSession> mockCallback = mock(Callback class); loginButton setCallback(mockCallback); assertSame(mockCallback, loginButton getCallback()); } public void testOnClick() { loginButton setCallback(mockCallback); loginButton performClick(); verify(mockAuthClient) authorize(eq(mockActivity), eq(mockCallback)); } public void testOnClick_withOnClickListener() { loginButton setCallback(mockCallback); loginButton setOnClickListener(mockViewClickListener); loginButton performClick(); verify(mockAuthClient) authorize(eq(mockActivity), eq(mockCallback)); verify(mockViewClickListener) onClick(eq(loginButton)); } public void testOnClick_callbackNullDebuggableTrue() throws Exception { final Fabric fabric = new Fabric Builder(getContext())  kits(new KitStub())  debuggable(true)  build(); FabricTestUtils with(fabric); try { loginButton performClick(); fail("onClick should throw an exception when called and there is no callback"); } catch (IllegalStateException e) { assertEquals("Callback must not be null, did you call setCallback?", e getMessage()); } finally { FabricTestUtils resetFabric(); } } public void testOnClick_callbackNullDebuggableFalse() throws Exception { final Fabric fabric = setUpLogTest(); FabricTestUtils with(fabric); try { loginButton performClick(); assertLogMessage("Callback must not be null, did you call setCallback?"); } finally { FabricTestUtils resetFabric(); } } public void testOnClick_activityNullDebuggableTrue() throws Exception { final Fabric fabric = new Fabric Builder(getContext())  kits(new KitStub())  debuggable(true)  build(); FabricTestUtils with(fabric); loginButton = new TwitterLoginButton(getContext(), null, 0, mockAuthClient) { // This is to allow us to test TwitterLoginButton without having to set up a real // activity  @Override protected Activity getActivity() { return null; } }; loginButton setCallback(mockCallback); try { loginButton performClick(); fail("onClick should throw an exception when called and there is no activity"); } catch (IllegalStateException e) { assertEquals(TwitterLoginButton ERROR_MSG_NO_ACTIVITY, e getMessage()); } finally { FabricTestUtils resetFabric(); } } public void testOnClick_activityNullDebuggableFalse() throws Exception { final Fabric fabric = setUpLogTest(); FabricTestUtils with(fabric); loginButton = new TwitterLoginButton(getContext(), null, 0, mockAuthClient) { // This is to allow us to test TwitterLoginButton without having to set up a real // activity  @Override protected Activity getActivity() { return null; } }; loginButton setCallback(mockCallback); try { loginButton performClick(); assertLogMessage(TwitterLoginButton ERROR_MSG_NO_ACTIVITY); } finally { FabricTestUtils resetFabric(); } } public void testOnClick_activityFinishingDebuggableFalse() throws Exception { final Fabric fabric = setUpLogTest(); FabricTestUtils with(fabric); loginButton = new TwitterLoginButton(getContext(), null, 0, mockAuthClient) { // This is to allow us to test TwitterLoginButton without having to set up a real // activity  @Override protected Activity getActivity() { final Activity mockActivity = mock(Activity class); when(mockActivity isFinishing()) thenReturn(true); return mockActivity; } }; loginButton setCallback(mockCallback); try { loginButton performClick(); assertLogMessage(TwitterLoginButton ERROR_MSG_NO_ACTIVITY); } finally { FabricTestUtils resetFabric(); } } private Fabric setUpLogTest() { final Logger mockLogger = mock(Logger class); when(mockLogger isLoggable(TwitterCore TAG, Log WARN)) thenReturn(true); final Fabric fabric = new Fabric Builder(getContext())  kits(new KitStub())  debuggable(false)  logger(mockLogger)  build(); return fabric; } private void assertLogMessage(String expectedMessage) { final ArgumentCaptor<String> argumentCaptor = ArgumentCaptor forClass(String class); verify(Fabric getLogger()) w(eq(TwitterCore TAG), argumentCaptor capture()); assertEquals(expectedMessage, argumentCaptor getValue()); } public void testOnActivityResult_requestCodeMatches() { final int requestCode = TEST_REQUEST_CODE; final int resultCode = Activity RESULT_OK; final Intent mockData = mock(Intent class); loginButton onActivityResult(requestCode, resultCode, mockData); verify(mockAuthClient) getRequestCode(); verify(mockAuthClient) onActivityResult(requestCode, resultCode, mockData); } public void testOnActivityResult_requestCodeDoesNotMatch() { final int requestCode = -1; final int resultCode = Activity RESULT_OK; final Intent mockData = mock(Intent class); loginButton onActivityResult(requestCode, resultCode, mockData); verify(mockAuthClient) getRequestCode(); verifyNoMoreInteractions(mockAuthClient); } public void testGetTwitterAuthClient() throws Exception { try { final Fabric fabric = new Fabric Builder(getContext())  kits(new TwitterCore(new TwitterAuthConfig("", "")))  build(); FabricTestUtils with(fabric); final TwitterLoginButton button = new TwitterLoginButton(getContext()) { @Override protected Activity getActivity() { return mock(Activity class); } }; final TwitterAuthClient client = button getTwitterAuthClient(); assertNotNull(client); } finally { FabricTestUtils resetFabric(); } } public void testGetTwitterAuthClient_duplicateCalls() throws Exception { try { final Fabric fabric = new Fabric Builder(getContext())  kits(new TwitterCore(new TwitterAuthConfig("", "")))  build(); FabricTestUtils with(fabric); final TwitterLoginButton button = new TwitterLoginButton(getContext()) { @Override protected Activity getActivity() { return mock(Activity class); } }; final TwitterAuthClient client = button getTwitterAuthClient(); final TwitterAuthClient client2 = button getTwitterAuthClient(); assertSame(client, client2); } finally { FabricTestUtils resetFabric(); } }}package com twitter sdk android mopub;import android app Activity;import android support annotation NonNull;import android support annotation Nullable;import android text TextUtils;import android widget Adapter;import com mopub nativeads MoPubAdAdapter;import com mopub nativeads MoPubNativeAdPositioning;import com mopub nativeads RequestParameters;public class TwitterMoPubAdAdapter extends MoPubAdAdapter{ private final static String TWITTERKIT_KEYWORD = "src:twitterkit";  public TwitterMoPubAdAdapter(Activity activity, Adapter originalAdapter) { super(activity, originalAdapter); }  public TwitterMoPubAdAdapter(Activity activity, Adapter originalAdapter, MoPubNativeAdPositioning MoPubServerPositioning adPositioning) { super(activity, originalAdapter, adPositioning); }  public TwitterMoPubAdAdapter(Activity activity, Adapter originalAdapter, MoPubNativeAdPositioning MoPubClientPositioning adPositioning) { super(activity, originalAdapter, adPositioning); } @Override public void loadAds(@NonNull final String adUnitId) { loadAds(adUnitId, null); } @Override public void loadAds(@NonNull final String adUnitId, @Nullable final RequestParameters requestParams) { final RequestParameters Builder builder = new RequestParameters Builder(); if (requestParams != null) { final String keywords = TextUtils isEmpty(requestParams getKeywords()) ? TWITTERKIT_KEYWORD : requestParams getKeywords() + "," + TWITTERKIT_KEYWORD; builder keywords(keywords); builder location(requestParams getLocation()); } else { builder keywords(TWITTERKIT_KEYWORD); } super loadAds(adUnitId, builder build()); }}package com twitter sdk android core;import android content Context;import io fabric sdk android services network PinningInfoProvider;import java io InputStream;import java util Collection;import java util HashMap;class TwitterPinningInfoProvider implements PinningInfoProvider { private static final String[] PINS; static { final HashMap<String, String> pinMap = new HashMap<>(); pinMap put("VERISIGN_CLASS1", "2343d148a255899b947d461a797ec04cfed170b7"); pinMap put("VERISIGN_CLASS1_G3", "5519b278acb281d7eda7abc18399c3bb690424b5"); pinMap put("VERISIGN_CLASS2_G2", "1237ba4517eead2926fdc1cdfebeedf2ded9145c"); pinMap put("VERISIGN_CLASS2_G3", "5abec575dcaef3b08e271943fc7f250c3df661e3"); pinMap put("VERISIGN_CLASS3_G2", "1a21b4952b6293ce18b365ec9c0e934cb381e6d4"); pinMap put("VERISIGN_CLASS3_G3", "22f19e2ec6eaccfc5d2346f4c2e8f6c554dd5e07"); pinMap put("VERISIGN_CLASS3_G4", "ed663135d31bd4eca614c429e319069f94c12650"); pinMap put("VERISIGN_CLASS3_G5", "b181081a19a4c0941ffae89528c124c99b34acc7"); pinMap put("VERISIGN_CLASS4_G3", "3c03436868951cf3692ab8b426daba8fe922e5bd"); pinMap put("VERISIGN_UNIVERSAL", "bbc23e290bb328771dad3ea24dbdf423bd06b03d"); pinMap put("GEOTRUST_GLOBAL", "c07a98688d89fbab05640c117daa7d65b8cacc4e"); pinMap put("GEOTRUST_GLOBAL2", "713836f2023153472b6eba6546a9101558200509"); pinMap put("GEOTRUST_PRIMARY", "b01989e7effb4aafcb148f58463976224150e1ba"); pinMap put("GEOTRUST_PRIMARY_G2", "bdbea71bab7157f9e475d954d2b727801a822682"); pinMap put("GEOTRUST_PRIMARY_G3", "9ca98d00af740ddd8180d21345a58b8f2e9438d6"); pinMap put("GEOTRUST_UNIVERAL", "87e85b6353c623a3128cb0ffbbf551fe59800e22"); pinMap put("GEOTRUST_UNIVERSAL2", "5e4f538685dd4f9eca5fdc0d456f7d51b1dc9b7b"); pinMap put("DIGICERT_GLOBAL_ROOT", "d52e13c1abe349dae8b49594ef7c3843606466bd"); pinMap put("DIGICERT_EV_ROOT", "83317e62854253d6d7783190ec919056e991b9e3"); pinMap put("DIGICERT_ASSUREDID_ROOT", "68330e61358521592983a3c8d2d2e1406e7ab3c1"); pinMap put("TWITTER1", "56fef3c2147d4ed38837fdbd3052387201e5778d"); final Collection<String> values = pinMap values(); PINS = values toArray(new String[values size()]); } private final Context appContext; public TwitterPinningInfoProvider(Context context) { appContext = context getApplicationContext(); } @Override public InputStream getKeyStoreStream() { return appContext getResources() openRawResource(R raw tw__cacerts); } @Override public String getKeyStorePassword() { // keystore required to have a password, but these certificates are public return "changeit"; } @Override public String[] getPins() { return PINS; } @Override public long getPinCreationTimeInMillis() { return BuildConfig BUILD_TIME; }}package com twitter sdk android core;import okhttp3 Headers;public class TwitterRateLimit { private final static String LIMIT_KEY = "x-rate-limit-limit"; private final static String REMAINING_KEY = "x-rate-limit-remaining"; private final static String RESET_KEY = "x-rate-limit-reset"; private int requestLimit; private int remainingRequest; private long resetSeconds; TwitterRateLimit(final Headers headers) { if (headers == null) { throw new IllegalArgumentException("headers must not be null"); } for (int i = 0; i < headers size(); i++) { if (LIMIT_KEY equals(headers name(i))) { requestLimit = Integer valueOf(headers value(i)); } else if (REMAINING_KEY equals(headers name(i))) { remainingRequest = Integer valueOf(headers value(i)); } else if (RESET_KEY equals(headers name(i))) { resetSeconds = Long valueOf(headers value(i)); } } }  public int getLimit() { return requestLimit; }  public int getRemaining() { return remainingRequest; }  public long getReset() { return resetSeconds; }}package com twitter sdk android core;import android text TextUtils;import io fabric sdk android Fabric;import io fabric sdk android services persistence SerializationStrategy;import com google gson annotations SerializedName;import com google gson Gson;public class TwitterSession extends Session<TwitterAuthToken> { public static final long UNKNOWN_USER_ID = -1L; public static final String UNKNOWN_USER_NAME = ""; @SerializedName("user_name") private final String userName;  public TwitterSession(TwitterAuthToken authToken, long userId, String userName) { super(authToken, userId); this userName = userName; } public long getUserId() { return getId(); } public String getUserName() { return userName; } @Override public boolean equals(Object o) { if (this == o) return true; if (o == null || getClass() != o getClass()) return false; if (!super equals(o)) return false; final TwitterSession that = (TwitterSession) o; return userName != null ? userName equals(that userName) : that userName == null; } @Override public int hashCode() { int result = super hashCode(); result = 31 * result + (userName != null ? userName hashCode() : 0); return result; } static class Serializer implements SerializationStrategy<TwitterSession> { private final Gson gson; public Serializer() { this gson = new Gson(); } @Override public String serialize(TwitterSession session) { if (session != null && session getAuthToken() != null) { try { return gson toJson(session); } catch (Exception e) { Fabric getLogger() d(TwitterCore TAG, e getMessage()); } } return ""; } @Override public TwitterSession deserialize(String serializedSession) { if (!TextUtils isEmpty(serializedSession)) { try { return gson fromJson(serializedSession, TwitterSession class); } catch (Exception e) { Fabric getLogger() d(TwitterCore TAG, e getMessage()); } } return null; } }}package com twitter sdk android core;public class TwitterSessionHelper { public static String serialize(TwitterSession session) { final TwitterSession Serializer serializer = new TwitterSession Serializer(); return serializer serialize(session); } public static TwitterSession deserialize(String session) { final TwitterSession Serializer serializer = new TwitterSession Serializer(); return serializer deserialize(session); }}package com twitter sdk android core internal;import com twitter sdk android core TwitterApiClient;import com twitter sdk android core TwitterSession;import com twitter sdk android core internal scribe DefaultScribeClient;import com twitter sdk android core internal scribe EventNamespace;import com twitter sdk android core internal scribe TwitterCoreScribeClientHolder;import com twitter sdk android core services AccountService;import java io IOException;public class TwitterSessionVerifier implements SessionVerifier<TwitterSession> { static final String SCRIBE_CLIENT = "android"; static final String SCRIBE_PAGE = "credentials"; static final String SCRIBE_SECTION = ""; // intentionally blank static final String SCRIBE_COMPONENT = ""; // intentionally blank static final String SCRIBE_ELEMENT = ""; // intentionally blank static final String SCRIBE_ACTION = "impression"; private final AccountServiceProvider accountServiceProvider; private final DefaultScribeClient scribeClient; public TwitterSessionVerifier() { this accountServiceProvider = new AccountServiceProvider(); this scribeClient = TwitterCoreScribeClientHolder getScribeClient(); } TwitterSessionVerifier(AccountServiceProvider accountServiceProvider, DefaultScribeClient scribeClient) { this accountServiceProvider = accountServiceProvider; this scribeClient = scribeClient; }  public void verifySession(final TwitterSession session) { final AccountService accountService = accountServiceProvider getAccountService(session); try { scribeVerifySession(); accountService verifyCredentials(true, false) execute(); } catch (IOException | RuntimeException e) { // We ignore failures since we will attempt the verification again the next time // the verification period comes up  This has the potential to lose events, but we // are not aiming towards 100% capture rate  } } private void scribeVerifySession() { if (scribeClient == null) return; final EventNamespace ns = new EventNamespace Builder()  setClient(SCRIBE_CLIENT)  setPage(SCRIBE_PAGE)  setSection(SCRIBE_SECTION)  setComponent(SCRIBE_COMPONENT)  setElement(SCRIBE_ELEMENT)  setAction(SCRIBE_ACTION)  builder(); scribeClient scribe(ns); }  protected static class AccountServiceProvider { public AccountService getAccountService(TwitterSession session) { return new TwitterApiClient(session) getAccountService(); } }}package com twitter sdk android mopub;import android content Context;import android content res TypedArray;import android graphics drawable Drawable;import android graphics drawable GradientDrawable;import android graphics drawable LayerDrawable;import android graphics drawable ShapeDrawable;import android graphics drawable StateListDrawable;import android graphics drawable shapes RectShape;import android os Build;import android util AttributeSet;import android view LayoutInflater;import android widget FrameLayout;import android widget ImageView;import android widget LinearLayout;import android widget RelativeLayout;import android widget TextView;import com twitter sdk android mopub internal RoundedImageView;public class TwitterStaticNativeAd extends FrameLayout { LinearLayout containerLayout; RoundedImageView mainImageView; RelativeLayout cardLayout; ImageView adIconView; TextView adTitleView; TextView adTextView; TextView callToActionView; ImageView privacyInfoView; // style colors int containerBackgroundColor; int cardBackgroundColor; int primaryTextColor; int ctaBackgroundColor; int cardBorderColor; private static final int DEFAULT_AD_STYLE = R style tw__ad_LightStyle; public TwitterStaticNativeAd(Context context) { this(context, null); } public TwitterStaticNativeAd(Context context, AttributeSet attrs) { this(context, attrs, DEFAULT_AD_STYLE); } public TwitterStaticNativeAd(Context context, AttributeSet attrs, int styleResId) { super(context, attrs); findSubviews(); initAttributes(styleResId); setStyleAttributes(); } private void findSubviews() { LayoutInflater from(getContext()) inflate(R layout tw__native_ad, this, true); containerLayout = (LinearLayout) findViewById(R id tw__ad_mopub_layout); mainImageView = (RoundedImageView) findViewById(R id native_ad_main_image); cardLayout = (RelativeLayout) findViewById(R id native_ad_card); adIconView = (ImageView) findViewById(R id native_ad_icon_image); adTitleView = (TextView) findViewById(R id native_ad_title); adTextView = (TextView) findViewById(R id native_ad_text); callToActionView = (TextView) findViewById(R id native_ad_cta); privacyInfoView = (ImageView) findViewById(R id native_ad_privacy_info_icon_image); } private void initAttributes(int styleResId) { final TypedArray a = getContext() getTheme() obtainStyledAttributes(styleResId, R styleable tw__native_ad); try { readStyleAttributes(a); } finally { a recycle(); } } private void readStyleAttributes(TypedArray typedArray) { containerBackgroundColor = typedArray getColor( R styleable tw__native_ad_tw__ad_container_bg_color, getResources() getColor(R color tw__ad_light_container_bg_color)); cardBackgroundColor = typedArray getColor(R styleable tw__native_ad_tw__ad_card_bg_color, getResources() getColor(R color tw__ad_light_card_bg_color)); primaryTextColor = typedArray getColor( R styleable tw__native_ad_tw__ad_text_primary_color, getResources() getColor(R color tw__ad_light_text_primary_color)); ctaBackgroundColor = typedArray getColor( R styleable tw__native_ad_tw__ad_cta_button_color, getResources() getColor(R color tw__ad_cta_default)); } private void setStyleAttributes() { containerLayout setBackgroundColor(containerBackgroundColor); adTitleView setTextColor(primaryTextColor); adTextView setTextColor(primaryTextColor); final int adViewRadius = (int) getResources() getDimension(R dimen tw__ad_view_radius); mainImageView setCornerRadii(adViewRadius, adViewRadius, 0, 0); final TextView privacyTextView = (TextView) findViewById(R id native_ad_privacy_text); privacyTextView setTextColor( ColorUtils calculateContrastingColor(containerBackgroundColor)); setCardStyling(); setCallToActionStyling(); } private void setCardStyling() { final boolean isLightBg = ColorUtils isLightColor(containerBackgroundColor); if (isLightBg) { cardBorderColor = getResources() getColor(R color tw__ad_light_card_border_color); } else { cardBorderColor = getResources() getColor(R color tw__ad_dark_card_border_color); } final ShapeDrawable bgDrawable = new ShapeDrawable(new RectShape()); bgDrawable getPaint() setColor(cardBackgroundColor); final ShapeDrawable borderDrawable = new ShapeDrawable(new RectShape()); borderDrawable getPaint() setColor(cardBorderColor); final Drawable[] layers = new Drawable[2]; layers[0] = borderDrawable; layers[1] = bgDrawable; final LayerDrawable layerDrawable = new LayerDrawable(layers); layerDrawable setLayerInset(0, 0, 0, 0, 0); layerDrawable setLayerInset(1, 1, 0, 1, 0); if (Build VERSION SDK_INT >= Build VERSION_CODES JELLY_BEAN) { cardLayout setBackground(layerDrawable); } else { cardLayout setBackgroundDrawable(layerDrawable); } } private void setCallToActionStyling() { final int calculatedCTATextColor = ColorUtils calculateCtaTextColor(ctaBackgroundColor); callToActionView setTextColor(calculatedCTATextColor); // Setup StateListDrawable obj with two gradient drawables: // First is the selected item with lighter/darker bg color of original // Second is unselected item with the call to action background color // Also set the default ad view radius for bottomLeft and bottomRight corners final StateListDrawable stateListDrawable = new StateListDrawable(); final int adViewRadius = (int) getResources() getDimension(R dimen tw__ad_view_radius); final float[] ctaViewRadii = new float[]{ 0, 0, 0, 0, adViewRadius, adViewRadius, adViewRadius, adViewRadius}; final GradientDrawable selectedItem = new GradientDrawable(); selectedItem setCornerRadii(ctaViewRadii); final int ctaPressedBgColor = ColorUtils calculateCtaOnTapColor(ctaBackgroundColor); selectedItem setColor(ctaPressedBgColor); stateListDrawable addState(new int[]{android R attr state_pressed}, selectedItem); final GradientDrawable unselectedItem = new GradientDrawable(); unselectedItem setCornerRadii(ctaViewRadii); unselectedItem setColor(ctaBackgroundColor); stateListDrawable addState(new int[]{}, unselectedItem); if (Build VERSION SDK_INT >= Build VERSION_CODES JELLY_BEAN) { callToActionView setBackground(stateListDrawable); } else { callToActionView setBackgroundDrawable(stateListDrawable); } }}package com twitter sdk android mopub;import android app Activity;import android view View;import android view ViewGroup;import com mopub nativeads BaseNativeAd;import com mopub nativeads MoPubAdRenderer;import com mopub nativeads NativeImageHelper;import com mopub nativeads NativeRendererHelper;import com mopub nativeads StaticNativeAd;public class TwitterStaticNativeAdRenderer implements MoPubAdRenderer<StaticNativeAd> { private static final int DEFAULT_STYLE = R style tw__ad_LightStyle; private final int styleResId; public TwitterStaticNativeAdRenderer() { this styleResId = DEFAULT_STYLE; } public TwitterStaticNativeAdRenderer(int styleResId) { this styleResId = styleResId; } @Override public View createAdView(final Activity activity, final ViewGroup parent) { return new TwitterStaticNativeAd(activity, null, styleResId); } @Override public void renderAdView(final View view, final StaticNativeAd staticNativeAd) { update((TwitterStaticNativeAd) view, staticNativeAd); } @Override public boolean supports(final BaseNativeAd nativeAd) { return nativeAd instanceof StaticNativeAd; } private void update(final TwitterStaticNativeAd staticNativeView, final StaticNativeAd staticNativeAd) { NativeRendererHelper addTextView(staticNativeView adTitleView, staticNativeAd getTitle()); NativeRendererHelper addTextView(staticNativeView adTextView, staticNativeAd getText()); NativeRendererHelper addTextView(staticNativeView callToActionView, staticNativeAd getCallToAction()); NativeImageHelper loadImageView(staticNativeAd getMainImageUrl(), staticNativeView mainImageView); NativeImageHelper loadImageView(staticNativeAd getIconImageUrl(), staticNativeView adIconView); NativeRendererHelper addPrivacyInformationIcon( staticNativeView privacyInfoView, staticNativeAd getPrivacyInformationIconImageUrl(), staticNativeAd getPrivacyInformationIconClickThroughUrl()); }}package com twitter sdk android mopub;import android graphics Bitmap;import android graphics drawable Drawable;import android view View;import android view ViewGroup;import android widget ImageView;import android widget TextView;import com mopub nativeads BaseNativeAd;import com mopub nativeads MoPubCustomEventVideoNative;import com mopub nativeads StaticNativeAd;import com mopub network MaxWidthImageLoader;import com mopub network Networking;import com mopub volley toolbox ImageLoader;import com twitter sdk android mopub internal RoundedImageView;import org junit Before;import org junit Rule;import org junit Test;import org junit rules ExpectedException;import org junit runner RunWith;import org mockito Mock;import org mockito MockitoAnnotations;import org mockito invocation InvocationOnMock;import org mockito stubbing Answer;import org robolectric RobolectricGradleTestRunner;import org robolectric RuntimeEnvironment;import org robolectric annotation Config;import static org junit Assert assertFalse;import static org junit Assert assertTrue;import static org mockito Matchers any;import static org mockito Matchers anyString;import static org mockito Mockito doAnswer;import static org mockito Mockito doReturn;import static org mockito Mockito mock;import static org mockito Mockito verify;@RunWith(RobolectricGradleTestRunner class)@Config(constants = BuildConfig class, sdk = 21)public class TwitterStaticNativeAdRendererTest { private static final String TEST_TITLE = "title"; private static final String TEST_TEXT = "text"; private static final String TEST_CTA = "cta"; private static final String TEST_URL = "https://twitter com"; private TwitterStaticNativeAdRenderer twitterStaticNativeAdRenderer; private StaticNativeAd staticNativeAd; private TwitterStaticNativeAd twitterStaticNativeAd; @Mock private ViewGroup viewGroup; @Mock private MaxWidthImageLoader mockImageLoader; @Mock private ImageLoader ImageContainer mockImageContainer; @Mock private Bitmap mockBitmap; @Rule public ExpectedException thrown = ExpectedException none(); @Before public void setUp() throws Exception { MockitoAnnotations initMocks(this); Networking setImageLoaderForTesting(mockImageLoader); doReturn(mockBitmap) when(mockImageContainer) getBitmap(); doAnswer(new Answer<Void>() { @Override public Void answer(InvocationOnMock invocation) throws Throwable { final Object[] args = invocation getArguments(); ((ImageLoader ImageListener) args[1]) onResponse(mockImageContainer, true); return null; } }) when(mockImageLoader) get(anyString(), any(ImageLoader ImageListener class)); twitterStaticNativeAdRenderer = new TwitterStaticNativeAdRenderer(); twitterStaticNativeAd = new TwitterStaticNativeAd(RuntimeEnvironment application); twitterStaticNativeAd adTextView = mock(TextView class); twitterStaticNativeAd adTitleView = mock(TextView class); twitterStaticNativeAd callToActionView = mock(TextView class); twitterStaticNativeAd mainImageView = mock(RoundedImageView class); twitterStaticNativeAd adIconView = mock(ImageView class); twitterStaticNativeAd privacyInfoView = mock(ImageView class); staticNativeAd = new StaticNativeAd() { }; staticNativeAd setTitle(TEST_TITLE); staticNativeAd setText(TEST_TEXT); staticNativeAd setCallToAction(TEST_CTA); staticNativeAd setClickDestinationUrl(TEST_URL); staticNativeAd setMainImageUrl(TEST_URL); staticNativeAd setIconImageUrl(TEST_URL); } @Test(expected = NullPointerException class) public void testCreateAdView_withNullContext_shouldThrowNPE() { twitterStaticNativeAdRenderer createAdView(null, viewGroup); } @Test(expected = NullPointerException class) public void testRenderAdView_withNullView_shouldThrowNPE() { twitterStaticNativeAdRenderer renderAdView(null, staticNativeAd); } @Test(expected = NullPointerException class) public void testRenderAdView_withNullNativeAd_shouldThrowNPE() { twitterStaticNativeAdRenderer renderAdView(twitterStaticNativeAd, null); } @Test public void testRenderAdView_shouldReturnPopulatedView() { twitterStaticNativeAdRenderer renderAdView(twitterStaticNativeAd, staticNativeAd); verify(twitterStaticNativeAd adTitleView) setText(TEST_TITLE); verify(twitterStaticNativeAd adTextView) setText(TEST_TEXT); verify(twitterStaticNativeAd callToActionView) setText(TEST_CTA); verify(twitterStaticNativeAd mainImageView) setImageBitmap(mockBitmap); verify(twitterStaticNativeAd adIconView) setImageBitmap(mockBitmap); verify(twitterStaticNativeAd privacyInfoView)  setImageDrawable(any(Drawable class)); verify(twitterStaticNativeAd privacyInfoView)  setOnClickListener(any(View OnClickListener class)); } @Test public void testSupports_withCorrectInstanceOfBaseNativeAd_shouldReturnTrue() throws Exception { assertTrue(twitterStaticNativeAdRenderer supports(new StaticNativeAd() {})); assertFalse(twitterStaticNativeAdRenderer supports(mock(BaseNativeAd class))); assertFalse(twitterStaticNativeAdRenderer  supports(mock(MoPubCustomEventVideoNative MoPubVideoNativeAd class))); }}package com twitter sdk android mopub;import android test AndroidTestCase;import org junit Test;import org junit runner RunWith;import org robolectric RobolectricGradleTestRunner;import org robolectric RuntimeEnvironment;import org robolectric annotation Config;@RunWith(RobolectricGradleTestRunner class)@Config(constants = BuildConfig class, sdk = 21)public class TwitterStaticNativeAdTest extends AndroidTestCase { @Test public void testStyleAttrsForDefaultTheme() { final TwitterStaticNativeAd nativeAd = new TwitterStaticNativeAd(RuntimeEnvironment application); final int expectedContainerBgColor = nativeAd getResources() getColor(R color tw__ad_light_container_bg_color); final int expectedCardBgColor = nativeAd getResources() getColor(R color tw__ad_light_card_bg_color); final int expectedPrimaryTextColor = nativeAd getResources() getColor(R color tw__ad_light_text_primary_color); final int ctaBackgroundColor = nativeAd getResources() getColor(R color tw__ad_cta_default); final int cardBorderColor = nativeAd getResources() getColor(R color tw__ad_light_card_border_color); assertEquals(expectedContainerBgColor, nativeAd containerBackgroundColor); assertEquals(expectedCardBgColor, nativeAd cardBackgroundColor); assertEquals(expectedPrimaryTextColor, nativeAd primaryTextColor); assertEquals(ctaBackgroundColor, nativeAd ctaBackgroundColor); assertEquals(cardBorderColor, nativeAd cardBorderColor); } @Test public void testStyleAttrsForDarkTheme() { final TwitterStaticNativeAd nativeAd = new TwitterStaticNativeAd(RuntimeEnvironment application, null, R style tw__ad_DarkStyle); final int expectedContainerBgColor = nativeAd getResources() getColor(R color tw__ad_dark_container_bg_color); final int expectedCardBgColor = nativeAd getResources() getColor(R color tw__ad_dark_card_bg_color); final int expectedPrimaryTextColor = nativeAd getResources() getColor(R color tw__ad_dark_text_primary_color); final int ctaBackgroundColor = nativeAd getResources() getColor(R color tw__ad_cta_default); final int cardBorderColor = nativeAd getResources() getColor(R color tw__ad_dark_card_border_color); assertEquals(expectedContainerBgColor, nativeAd containerBackgroundColor); assertEquals(expectedCardBgColor, nativeAd cardBackgroundColor); assertEquals(expectedPrimaryTextColor, nativeAd primaryTextColor); assertEquals(ctaBackgroundColor, nativeAd ctaBackgroundColor); assertEquals(cardBorderColor, nativeAd cardBorderColor); }}package com twitter sdk android unity;import com unity3d player UnityPlayer;class UnityMessage { final String data; final String method; UnityMessage(String method, String data) { this method = method; this data = data; } public static class Builder { String data = ""; String method; public Builder setData(String data) { this data = data; return this; } public Builder setMethod(String method) { this method = method; return this; } public UnityMessage build() { return new UnityMessage(method, data); } } public void send() { UnityPlayer UnitySendMessage(TwitterKit GAME_OBJECT_NAME, method, data); }}package com twitter sdk android core models;import com google gson annotations SerializedName;public class UrlEntity extends Entity {  @SerializedName("url") public final String url;  @SerializedName("expanded_url") public final String expandedUrl;  @SerializedName("display_url") public final String displayUrl; public UrlEntity(String url, String expandedUrl, String displayUrl, int start, int end) { super(start, end); this url = url; this expandedUrl = expandedUrl; this displayUrl = displayUrl; }}package com twitter sdk android core models;import com google gson annotations SerializedName;import java io Serializable;import java util List;public class User implements Serializable, Identifiable { private static final long serialVersionUID = 4663450696842173958L; public static final long INVALID_ID = -1L;  @SerializedName("contributors_enabled") public final boolean contributorsEnabled;  @SerializedName("created_at") public final String createdAt;  @SerializedName("default_profile") public final boolean defaultProfile;  @SerializedName("default_profile_image") public final boolean defaultProfileImage;  @SerializedName("description") public final String description;  @SerializedName("email") public final String email;  @SerializedName("entities") public final UserEntities entities;  @SerializedName("favourites_count") public final int favouritesCount;  @SerializedName("follow_request_sent") public final boolean followRequestSent;  @SerializedName("followers_count") public final int followersCount;  @SerializedName("friends_count") public final int friendsCount;  @SerializedName("geo_enabled") public final boolean geoEnabled;  @SerializedName("id") public final long id;  @SerializedName("id_str") public final String idStr;  @SerializedName("is_translator") public final boolean isTranslator;  @SerializedName("lang") public final String lang;  @SerializedName("listed_count") public final int listedCount;  @SerializedName("location") public final String location;  @SerializedName("name") public final String name;  @SerializedName("profile_background_color") public final String profileBackgroundColor;  @SerializedName("profile_background_image_url") public final String profileBackgroundImageUrl;  @SerializedName("profile_background_image_url_https") public final String profileBackgroundImageUrlHttps;  @SerializedName("profile_background_tile") public final boolean profileBackgroundTile;  @SerializedName("profile_banner_url") public final String profileBannerUrl;  @SerializedName("profile_image_url") public final String profileImageUrl;  @SerializedName("profile_image_url_https") public final String profileImageUrlHttps;  @SerializedName("profile_link_color") public final String profileLinkColor;  @SerializedName("profile_sidebar_border_color") public final String profileSidebarBorderColor;  @SerializedName("profile_sidebar_fill_color") public final String profileSidebarFillColor;  @SerializedName("profile_text_color") public final String profileTextColor;  @SerializedName("profile_use_background_image") public final boolean profileUseBackgroundImage;  @SerializedName("protected") public final boolean protectedUser;  @SerializedName("screen_name") public final String screenName;  @SerializedName("show_all_inline_media") public final boolean showAllInlineMedia;  @SerializedName("status") public final Tweet status;  @SerializedName("statuses_count") public final int statusesCount;  @SerializedName("time_zone") public final String timeZone;  @SerializedName("url") public final String url;  @SerializedName("utc_offset") public final int utcOffset;  @SerializedName("verified") public final boolean verified;  @SerializedName("withheld_in_countries") public final List<String> withheldInCountries;  @SerializedName("withheld_scope") public final String withheldScope; public User(boolean contributorsEnabled, String createdAt, boolean defaultProfile, boolean defaultProfileImage, String description, String emailAddress, UserEntities entities, int favouritesCount, boolean followRequestSent, int followersCount, int friendsCount, boolean geoEnabled, long id, String idStr, boolean isTranslator, String lang, int listedCount, String location, String name, String profileBackgroundColor, String profileBackgroundImageUrl, String profileBackgroundImageUrlHttps, boolean profileBackgroundTile, String profileBannerUrl, String profileImageUrl, String profileImageUrlHttps, String profileLinkColor, String profileSidebarBorderColor, String profileSidebarFillColor, String profileTextColor, boolean profileUseBackgroundImage, boolean protectedUser, String screenName, boolean showAllInlineMedia, Tweet status, int statusesCount, String timeZone, String url, int utcOffset, boolean verified, List<String> withheldInCountries, String withheldScope) { this contributorsEnabled = contributorsEnabled; this createdAt = createdAt; this defaultProfile = defaultProfile; this defaultProfileImage = defaultProfileImage; this description = description; this email = emailAddress; this entities = entities; this favouritesCount = favouritesCount; this followRequestSent = followRequestSent; this followersCount = followersCount; this friendsCount = friendsCount; this geoEnabled = geoEnabled; this id = id; this idStr = idStr; this isTranslator = isTranslator; this lang = lang; this listedCount = listedCount; this location = location; this name = name; this profileBackgroundColor = profileBackgroundColor; this profileBackgroundImageUrl = profileBackgroundImageUrl; this profileBackgroundImageUrlHttps = profileBackgroundImageUrlHttps; this profileBackgroundTile = profileBackgroundTile; this profileBannerUrl = profileBannerUrl; this profileImageUrl = profileImageUrl; this profileImageUrlHttps = profileImageUrlHttps; this profileLinkColor = profileLinkColor; this profileSidebarBorderColor = profileSidebarBorderColor; this profileSidebarFillColor = profileSidebarFillColor; this profileTextColor = profileTextColor; this profileUseBackgroundImage = profileUseBackgroundImage; this protectedUser = protectedUser; this screenName = screenName; this showAllInlineMedia = showAllInlineMedia; this status = status; this statusesCount = statusesCount; this timeZone = timeZone; this url = url; this utcOffset = utcOffset; this verified = verified; this withheldInCountries = withheldInCountries; this withheldScope = withheldScope; } @Override public long getId() { return this id; }}package com twitter sdk android core models;import java util List;public class UserBuilder { private boolean contributorsEnabled; private String createdAt; private boolean defaultProfile; private boolean defaultProfileImage; private String description; private String email; private UserEntities entities; private int favouritesCount; private boolean followRequestSent; private int followersCount; private int friendsCount; private boolean geoEnabled; private long id = User INVALID_ID; private String idStr; private boolean isTranslator; private String lang; private int listedCount; private String location; private String name; private String profileBackgroundColor; private String profileBackgroundImageUrl; private String profileBackgroundImageUrlHttps; private boolean profileBackgroundTile; private String profileBannerUrl; private String profileImageUrl; private String profileImageUrlHttps; private String profileLinkColor; private String profileSidebarBorderColor; private String profileSidebarFillColor; private String profileTextColor; private boolean profileUseBackgroundImage; private boolean protectedUser; private String screenName; private boolean showAllInlineMedia; private Tweet status; private int statusesCount; private String timeZone; private String url; private int utcOffset; private boolean verified; private List<String> withheldInCountries; private String withheldScope; public UserBuilder setContributorsEnabled(boolean contributorsEnabled) { this contributorsEnabled = contributorsEnabled; return this; } public UserBuilder setCreatedAt(String createdAt) { this createdAt = createdAt; return this; } public UserBuilder setDefaultProfile(boolean defaultProfile) { this defaultProfile = defaultProfile; return this; } public UserBuilder setDefaultProfileImage(boolean defaultProfileImage) { this defaultProfileImage = defaultProfileImage; return this; } public UserBuilder setDescription(String description) { this description = description; return this; } public UserBuilder setEmail(String email) { this email = email; return this; } public UserBuilder setEntities(UserEntities entities) { this entities = entities; return this; } public UserBuilder setFavouritesCount(int favouritesCount) { this favouritesCount = favouritesCount; return this; } public UserBuilder setFollowRequestSent(boolean followRequestSent) { this followRequestSent = followRequestSent; return this; } public UserBuilder setFollowersCount(int followersCount) { this followersCount = followersCount; return this; } public UserBuilder setFriendsCount(int friendsCount) { this friendsCount = friendsCount; return this; } public UserBuilder setGeoEnabled(boolean geoEnabled) { this geoEnabled = geoEnabled; return this; } public UserBuilder setId(long id) { this id = id; return this; } public UserBuilder setIdStr(String idStr) { this idStr = idStr; return this; } public UserBuilder setIsTranslator(boolean isTranslator) { this isTranslator = isTranslator; return this; } public UserBuilder setLang(String lang) { this lang = lang; return this; } public UserBuilder setListedCount(int listedCount) { this listedCount = listedCount; return this; } public UserBuilder setLocation(String location) { this location = location; return this; } public UserBuilder setName(String name) { this name = name; return this; } public UserBuilder setProfileBackgroundColor(String profileBackgroundColor) { this profileBackgroundColor = profileBackgroundColor; return this; } public UserBuilder setProfileBackgroundImageUrl(String profileBackgroundImageUrl) { this profileBackgroundImageUrl = profileBackgroundImageUrl; return this; } public UserBuilder setProfileBackgroundImageUrlHttps(String profileBackgroundImageUrlHttps) { this profileBackgroundImageUrlHttps = profileBackgroundImageUrlHttps; return this; } public UserBuilder setProfileBackgroundTile(boolean profileBackgroundTile) { this profileBackgroundTile = profileBackgroundTile; return this; } public UserBuilder setProfileBannerUrl(String profileBannerUrl) { this profileBannerUrl = profileBannerUrl; return this; } public UserBuilder setProfileImageUrl(String profileImageUrl) { this profileImageUrl = profileImageUrl; return this; } public UserBuilder setProfileImageUrlHttps(String profileImageUrlHttps) { this profileImageUrlHttps = profileImageUrlHttps; return this; } public UserBuilder setProfileLinkColor(String profileLinkColor) { this profileLinkColor = profileLinkColor; return this; } public UserBuilder setProfileSidebarBorderColor(String profileSidebarBorderColor) { this profileSidebarBorderColor = profileSidebarBorderColor; return this; } public UserBuilder setProfileSidebarFillColor(String profileSidebarFillColor) { this profileSidebarFillColor = profileSidebarFillColor; return this; } public UserBuilder setProfileTextColor(String profileTextColor) { this profileTextColor = profileTextColor; return this; } public UserBuilder setProfileUseBackgroundImage(boolean profileUseBackgroundImage) { this profileUseBackgroundImage = profileUseBackgroundImage; return this; } public UserBuilder setProtectedUser(boolean protectedUser) { this protectedUser = protectedUser; return this; } public UserBuilder setScreenName(String screenName) { this screenName = screenName; return this; } public UserBuilder setShowAllInlineMedia(boolean showAllInlineMedia) { this showAllInlineMedia = showAllInlineMedia; return this; } public UserBuilder setStatus(Tweet status) { this status = status; return this; } public UserBuilder setStatusesCount(int statusesCount) { this statusesCount = statusesCount; return this; } public UserBuilder setTimeZone(String timeZone) { this timeZone = timeZone; return this; } public UserBuilder setUrl(String url) { this url = url; return this; } public UserBuilder setUtcOffset(int utcOffset) { this utcOffset = utcOffset; return this; } public UserBuilder setVerified(boolean verified) { this verified = verified; return this; } public UserBuilder setWithheldInCountries(List<String> withheldInCountries) { this withheldInCountries = withheldInCountries; return this; } public UserBuilder setWithheldScope(String withheldScope) { this withheldScope = withheldScope; return this; } public User build() { return new User(contributorsEnabled, createdAt, defaultProfile, defaultProfileImage, description, email, entities, favouritesCount, followRequestSent, followersCount, friendsCount, geoEnabled, id, idStr, isTranslator, lang, listedCount, location, name, profileBackgroundColor, profileBackgroundImageUrl, profileBackgroundImageUrlHttps, profileBackgroundTile, profileBannerUrl, profileImageUrl, profileImageUrlHttps, profileLinkColor, profileSidebarBorderColor, profileSidebarFillColor, profileTextColor, profileUseBackgroundImage, protectedUser, screenName, showAllInlineMedia, status, statusesCount, timeZone, url, utcOffset, verified, withheldInCountries, withheldScope); }}package com twitter sdk android core models;import com google gson annotations SerializedName;import java util Collections;import java util List;public class UserEntities { @SerializedName("url") public final UrlEntities url; @SerializedName("description") public final UrlEntities description; public UserEntities(UrlEntities url, UrlEntities description) { this url = url; this description = description; } public static class UrlEntities { @SerializedName("urls") public final List<UrlEntity> urls; public UrlEntities(List<UrlEntity> urls) { this urls = getSafeList(urls); } private <T> List<T> getSafeList(List<T> entities) { // Entities may be null if Gson does not find object to parse  When that happens, make // sure to return an empty list  if (entities == null) { return Collections EMPTY_LIST; } else { return Collections unmodifiableList(entities); } } }}package com twitter sdk android tweetui;import com twitter sdk android core Callback;import com twitter sdk android core TwitterCore;import com twitter sdk android core models Tweet;import java util List;import retrofit2 Call;public class UserTimeline extends BaseTimeline implements Timeline<Tweet> { private static final String SCRIBE_SECTION = "user"; final Long userId; final String screenName; final Integer maxItemsPerRequest; final Boolean includeReplies; final Boolean includeRetweets; UserTimeline(TweetUi tweetUi, Long userId, String screenName, Integer maxItemsPerRequest, Boolean includeReplies, Boolean includeRetweets) { super(tweetUi); this userId = userId; this screenName = screenName; this maxItemsPerRequest = maxItemsPerRequest; // null includeReplies should default to false this includeReplies = includeReplies == null ? false : includeReplies; this includeRetweets = includeRetweets; }  @Override public void next(Long sinceId, Callback<TimelineResult<Tweet>> cb) { createUserTimelineRequest(sinceId, null) enqueue(new TweetsCallback(cb)); }  @Override public void previous(Long maxId, Callback<TimelineResult<Tweet>> cb) { // user timeline api provides results which are inclusive, decrement the maxId to get // exclusive results createUserTimelineRequest(null, decrementMaxId(maxId)) enqueue(new TweetsCallback(cb)); } @Override String getTimelineType() { return SCRIBE_SECTION; } Call<List<Tweet>> createUserTimelineRequest(final Long sinceId, final Long maxId) { return TwitterCore getInstance() getApiClient() getStatusesService() userTimeline(userId, screenName, maxItemsPerRequest, sinceId, maxId, false, !includeReplies, null, includeRetweets); }  public static class Builder { private final TweetUi tweetUi; private Long userId; private String screenName; private Integer maxItemsPerRequest = 30; private Boolean includeReplies; private Boolean includeRetweets;  public Builder() { this(TweetUi getInstance()); }  public Builder(TweetUi tweetUi) { if (tweetUi == null) { throw new IllegalArgumentException("TweetUi instance must not be null"); } this tweetUi = tweetUi; }  public Builder userId(Long userId) { this userId = userId; return this; }  public Builder screenName(String screenName) { this screenName = screenName; return this; }  public Builder maxItemsPerRequest(Integer maxItemsPerRequest) { this maxItemsPerRequest = maxItemsPerRequest; return this; }  public Builder includeReplies(Boolean includeReplies) { this includeReplies = includeReplies; return this; }  public Builder includeRetweets(Boolean includeRetweets) { this includeRetweets = includeRetweets; return this; }  public UserTimeline build() { return new UserTimeline(tweetUi, userId, screenName, maxItemsPerRequest, includeReplies, includeRetweets); } }}package com twitter sdk android core internal;import android text TextUtils;import com twitter sdk android core models User;public final class UserUtils { private UserUtils() {} // see https://dev twitter com/overview/general/user-profile-images-and-banners // see also: https://confluence twitter biz/display/PLATFORM/Image+Types+and+Sizes public enum AvatarSize { NORMAL("_normal"), BIGGER("_bigger"), MINI("_mini"), ORIGINAL("_original"), REASONABLY_SMALL("_reasonably_small"); private final String suffix; AvatarSize(String suffix) { this suffix = suffix; } String getSuffix() { return suffix; } } public static String getProfileImageUrlHttps(User user, AvatarSize size) { if (user != null && user profileImageUrlHttps != null) { final String url = user profileImageUrlHttps; if (size == null || url == null) { return url; } switch (size) { case NORMAL: case BIGGER: case MINI: case ORIGINAL: case REASONABLY_SMALL: return url  replace(AvatarSize NORMAL getSuffix(), size getSuffix()); default: return url; } } else { return null; } }  public static CharSequence formatScreenName(CharSequence screenName) { if (TextUtils isEmpty(screenName)) { return ""; } if (screenName charAt(0) == '@') { return screenName; } return "@" + screenName; }}package com twitter sdk android core models;import com google gson annotations SerializedName;public class UserValue { @SerializedName("id_str") public final String idStr; public UserValue(String idStr) { this idStr = idStr; }}package com twitter sdk android tweetui;import com twitter sdk android core models Tweet;import java util ArrayList;import java util HashMap;import java util List;final class Utils { private Utils() {} static Long numberOrDefault(String candidate, long defaultLong) { try { return Long parseLong(candidate); } catch (NumberFormatException e) { return defaultLong; } } static String stringOrEmpty(String candidate) { return stringOrDefault(candidate, ""); } static String stringOrDefault(String candidate, String defaultString) { return (candidate != null) ? candidate : defaultString; } static CharSequence charSeqOrEmpty(CharSequence candidate) { return charSeqOrDefault(candidate, ""); } static CharSequence charSeqOrDefault(CharSequence candidate, CharSequence defaultSequence) { return (candidate != null) ? candidate : defaultSequence; }  static List<Tweet> orderTweets(List<Long> tweetIds, List<Tweet> tweets) { final HashMap<Long, Tweet> idToTweet = new HashMap<>(); final ArrayList<Tweet> ordered = new ArrayList<>(); for (Tweet tweet: tweets) { idToTweet put(tweet id, tweet); } for (Long id: tweetIds) { if (idToTweet containsKey(id)) { ordered add(idToTweet get(id)); } } return ordered; }}package com twitter sdk android tweetui internal;import android annotation SuppressLint;import android content Context;import android os Handler;import android os Message;import android util AttributeSet;import android view LayoutInflater;import android view View;import android widget FrameLayout;import android widget ImageButton;import android widget SeekBar;import android widget TextView;import com twitter sdk android tweetui R;public class VideoControlView extends FrameLayout { static final long PROGRESS_BAR_TICKS = 1000L; static final int FADE_DURATION_MS = 150; private static final int SHOW_PROGRESS_MSG = 1001; MediaPlayerControl player; ImageButton stateControl; TextView currentTime; TextView duration; SeekBar seekBar; public VideoControlView(Context context) { super(context); } public VideoControlView(Context context, AttributeSet attrs) { super(context, attrs); } public VideoControlView(Context context, AttributeSet attrs, int defStyleAttr) { super(context, attrs, defStyleAttr); } @SuppressLint("HandlerLeak") private final Handler handler = new Handler() { @Override public void handleMessage(Message msg) { if (msg what == SHOW_PROGRESS_MSG) { if (player == null) { return; } updateProgress(); updateStateControl(); if (isShowing() && player isPlaying()) { msg = obtainMessage(SHOW_PROGRESS_MSG); sendMessageDelayed(msg, 500); } } } }; public void setMediaPlayer(MediaPlayerControl player) { this player = player; } @Override protected void onFinishInflate() { super onFinishInflate(); initSubviews(); } void initSubviews() { final LayoutInflater inflater = (LayoutInflater) getContext()  getSystemService(Context LAYOUT_INFLATER_SERVICE); inflater inflate(R layout tw__video_control, this); stateControl = (ImageButton) findViewById(R id tw__state_control); currentTime = (TextView) findViewById(R id tw__current_time); duration = (TextView) findViewById(R id tw__duration); seekBar = (SeekBar) findViewById(R id tw__progress); seekBar setMax((int) PROGRESS_BAR_TICKS); seekBar setOnSeekBarChangeListener(createProgressChangeListener()); stateControl setOnClickListener(createStateControlClickListener()); setDuration(0); setCurrentTime(0); setProgress(0, 0, 0); } OnClickListener createStateControlClickListener() { return new OnClickListener() { @Override public void onClick(View view) { if (player isPlaying()) { player pause(); } else { player start(); } show(); } }; } SeekBar OnSeekBarChangeListener createProgressChangeListener() { return new SeekBar OnSeekBarChangeListener() { @Override public void onProgressChanged(SeekBar seekBar, int progress, boolean fromUser) { if (!fromUser) { return; } final int duration = player getDuration(); final long position = (duration * progress) / PROGRESS_BAR_TICKS; player seekTo((int) position); setCurrentTime((int) position); } @Override public void onStartTrackingTouch(SeekBar seekBar) { handler removeMessages(SHOW_PROGRESS_MSG); } @Override public void onStopTrackingTouch(SeekBar seekBar) { handler sendEmptyMessage(SHOW_PROGRESS_MSG); } }; } void updateProgress() { final int duration = player getDuration(); final int currentTime = player getCurrentPosition(); final int bufferPercentage = player getBufferPercentage(); setDuration(duration); setCurrentTime(currentTime); setProgress(currentTime, duration, bufferPercentage); } void setDuration(int durationMillis) { duration setText(MediaTimeUtils getPlaybackTime(durationMillis)); } void setCurrentTime(int currentTimeMillis) { currentTime setText(MediaTimeUtils getPlaybackTime(currentTimeMillis)); } void setProgress(int currentTimeMillis, int durationMillis, int bufferPercentage) { final long pos = durationMillis > 0 ? PROGRESS_BAR_TICKS * currentTimeMillis / durationMillis : 0; seekBar setProgress((int) pos); seekBar setSecondaryProgress(bufferPercentage * 10); } void updateStateControl() { if (player isPlaying()) { setPauseDrawable(); } else if (player getCurrentPosition() > Math max(player getDuration() - 500, 0)) { setReplayDrawable(); } else { setPlayDrawable(); } } void setPlayDrawable() { stateControl setImageResource(R drawable tw__video_play_btn); stateControl setContentDescription(getContext() getString(R string tw__play)); } void setPauseDrawable() { stateControl setImageResource(R drawable tw__video_pause_btn); stateControl setContentDescription(getContext() getString(R string tw__pause)); } void setReplayDrawable() { stateControl setImageResource(R drawable tw__video_replay_btn); stateControl setContentDescription(getContext() getString(R string tw__replay)); } void hide() { handler removeMessages(SHOW_PROGRESS_MSG); AnimationUtils fadeOut(this, FADE_DURATION_MS); } void show() { handler sendEmptyMessage(SHOW_PROGRESS_MSG); AnimationUtils fadeIn(this, FADE_DURATION_MS); } public boolean isShowing() { return getVisibility() == View VISIBLE; } public void update() { handler sendEmptyMessage(SHOW_PROGRESS_MSG); } public interface MediaPlayerControl { void start(); void pause(); int getDuration(); int getCurrentPosition(); void seekTo(int position); boolean isPlaying(); int getBufferPercentage(); }}package com twitter sdk android core models;import com google gson annotations SerializedName;import java io Serializable;import java util List;public class VideoInfo implements Serializable {  @SerializedName("aspect_ratio") public final List<Integer> aspectRatio;  @SerializedName("duration_millis") public final long durationMillis;  @SerializedName("variants") public final List<Variant> variants; public VideoInfo(List<Integer> aspectRatio, long durationMillis, List<Variant> variants) { this aspectRatio = aspectRatio; this durationMillis = durationMillis; this variants = variants; } public static class Variant implements Serializable { @SerializedName("bitrate") public final long bitrate; @SerializedName("content_type") public final String contentType; @SerializedName("url") public final String url; public Variant(long bitrate, String contentType, String url) { this bitrate = bitrate; this contentType = contentType; this url = url; } }}package com twitter sdk android tweetui;import com twitter sdk android core internal scribe ScribeItem;public interface VideoScribeClient { void impression(ScribeItem card); void play(ScribeItem card);}package com twitter sdk android tweetui;import com twitter sdk android core internal scribe EventNamespace;import com twitter sdk android core internal scribe ScribeItem;import com twitter sdk android core internal scribe SyndicationClientEvent;import java util ArrayList;import java util List;class VideoScribeClientImpl implements VideoScribeClient { static final String TFW_CLIENT_EVENT_PAGE = "android"; static final String TFW_CLIENT_EVENT_SECTION = "video"; static final String SCRIBE_IMPRESSION_ACTION = "impression"; static final String SCRIBE_PLAY_ACTION = "play"; final TweetUi tweetUi; VideoScribeClientImpl(TweetUi tweetUi) { this tweetUi = tweetUi; } @Override public void impression(ScribeItem scribeItem) { final List<ScribeItem> items = new ArrayList<>(); items add(scribeItem); tweetUi scribe(getTfwImpressionNamespace(), items); } @Override public void play(ScribeItem scribeItem) { final List<ScribeItem> items = new ArrayList<>(); items add(scribeItem); tweetUi scribe(getTfwPlayNamespace(), items); } static EventNamespace getTfwImpressionNamespace() { return new EventNamespace Builder()  setClient(SyndicationClientEvent CLIENT_NAME)  setPage(TFW_CLIENT_EVENT_PAGE)  setSection(TFW_CLIENT_EVENT_SECTION)  setAction(SCRIBE_IMPRESSION_ACTION)  builder(); } static EventNamespace getTfwPlayNamespace() { return new EventNamespace Builder()  setClient(SyndicationClientEvent CLIENT_NAME)  setPage(TFW_CLIENT_EVENT_PAGE)  setSection(TFW_CLIENT_EVENT_SECTION)  setAction(SCRIBE_PLAY_ACTION)  builder(); }}package com twitter sdk android tweetui internal;import android content Context;import android media AudioManager;import android media MediaPlayer;import android media MediaPlayer OnCompletionListener;import android media MediaPlayer OnErrorListener;import android media MediaPlayer OnInfoListener;import android net Uri;import android util AttributeSet;import android util Log;import android view KeyEvent;import android view MotionEvent;import android view SurfaceHolder;import android view SurfaceView;public class VideoView extends SurfaceView implements VideoControlView MediaPlayerControl { private String TAG = "VideoView"; // settable by the client private Uri mUri; // all possible internal states private static final int STATE_ERROR = -1; private static final int STATE_IDLE = 0; private static final int STATE_PREPARING = 1; private static final int STATE_PREPARED = 2; private static final int STATE_PLAYING = 3; private static final int STATE_PAUSED = 4; private static final int STATE_PLAYBACK_COMPLETED = 5; // mCurrentState is a VideoView object's current state  // mTargetState is the state that a method caller intends to reach  // For instance, regardless the VideoView object's current state, // calling pause() intends to bring the object to a target state // of STATE_PAUSED  private int mCurrentState = STATE_IDLE; private int mTargetState = STATE_IDLE; // All the stuff we need for playing and showing a video private SurfaceHolder mSurfaceHolder = null; private MediaPlayer mMediaPlayer = null; private int mAudioSession; private int mVideoWidth; private int mVideoHeight; private int mSurfaceWidth; private int mSurfaceHeight; private VideoControlView mMediaController; private OnCompletionListener mOnCompletionListener; private MediaPlayer OnPreparedListener mOnPreparedListener; private int mCurrentBufferPercentage; private OnErrorListener mOnErrorListener; private OnInfoListener mOnInfoListener; private int mSeekWhenPrepared; // recording the seek position while preparing private boolean mLooping; public VideoView(Context context) { super(context); initVideoView(); } public VideoView(Context context, AttributeSet attrs) { this(context, attrs, 0); } public VideoView(Context context, AttributeSet attrs, int defStyleAttr) { super(context, attrs, defStyleAttr); initVideoView(); } @Override protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) { //Log i("@@@@", "onMeasure(" + MeasureSpec toString(widthMeasureSpec) + ", " // + MeasureSpec toString(heightMeasureSpec) + ")"); int width = getDefaultSize(mVideoWidth, widthMeasureSpec); int height = getDefaultSize(mVideoHeight, heightMeasureSpec); if (mVideoWidth > 0 && mVideoHeight > 0) { int widthSpecMode = MeasureSpec getMode(widthMeasureSpec); int widthSpecSize = MeasureSpec getSize(widthMeasureSpec); int heightSpecMode = MeasureSpec getMode(heightMeasureSpec); int heightSpecSize = MeasureSpec getSize(heightMeasureSpec); if (widthSpecMode == MeasureSpec EXACTLY && heightSpecMode == MeasureSpec EXACTLY) { // the size is fixed width = widthSpecSize; height = heightSpecSize; // for compatibility, we adjust size based on aspect ratio if (mVideoWidth * height < width * mVideoHeight) { //Log i("@@@", "image too wide, correcting"); width = height * mVideoWidth / mVideoHeight; } else if (mVideoWidth * height > width * mVideoHeight) { //Log i("@@@", "image too tall, correcting"); height = width * mVideoHeight / mVideoWidth; } } else if (widthSpecMode == MeasureSpec EXACTLY) { // only the width is fixed, adjust the height to match aspect ratio if possible width = widthSpecSize; height = width * mVideoHeight / mVideoWidth; if (heightSpecMode == MeasureSpec AT_MOST && height > heightSpecSize) { // couldn't match aspect ratio within the constraints height = heightSpecSize; } } else if (heightSpecMode == MeasureSpec EXACTLY) { // only the height is fixed, adjust the width to match aspect ratio if possible height = heightSpecSize; width = height * mVideoWidth / mVideoHeight; if (widthSpecMode == MeasureSpec AT_MOST && width > widthSpecSize) { // couldn't match aspect ratio within the constraints width = widthSpecSize; } } else { // neither the width nor the height are fixed, try to use actual video size width = mVideoWidth; height = mVideoHeight; if (heightSpecMode == MeasureSpec AT_MOST && height > heightSpecSize) { // too tall, decrease both width and height height = heightSpecSize; width = height * mVideoWidth / mVideoHeight; } if (widthSpecMode == MeasureSpec AT_MOST && width > widthSpecSize) { // too wide, decrease both width and height width = widthSpecSize; height = width * mVideoHeight / mVideoWidth; } } } setMeasuredDimension(width, height); } private void initVideoView() { mVideoWidth = 0; mVideoHeight = 0; getHolder() addCallback(mSHCallback); getHolder() setType(SurfaceHolder SURFACE_TYPE_PUSH_BUFFERS); setFocusable(true); setFocusableInTouchMode(true); requestFocus(); mCurrentState = STATE_IDLE; mTargetState = STATE_IDLE; }  public void setVideoURI(Uri uri, boolean looping) { mUri = uri; mLooping = looping; mSeekWhenPrepared = 0; openVideo(); requestLayout(); invalidate(); } public void stopPlayback() { if (mMediaPlayer != null) { mMediaPlayer stop(); mMediaPlayer release(); mMediaPlayer = null; mCurrentState = STATE_IDLE; mTargetState = STATE_IDLE; } } private void openVideo() { if (mUri == null || mSurfaceHolder == null) { // not ready for playback just yet, will try again later return; } // we shouldn't clear the target state, because somebody might have // called start() previously release(false); try { mMediaPlayer = new MediaPlayer(); if (mAudioSession != 0) { mMediaPlayer setAudioSessionId(mAudioSession); } else { mAudioSession = mMediaPlayer getAudioSessionId(); } mMediaPlayer setOnPreparedListener(mPreparedListener); mMediaPlayer setOnVideoSizeChangedListener(mSizeChangedListener); mMediaPlayer setOnCompletionListener(mCompletionListener); mMediaPlayer setOnErrorListener(mErrorListener); mMediaPlayer setOnInfoListener(mInfoListener); mMediaPlayer setOnBufferingUpdateListener(mBufferingUpdateListener); mCurrentBufferPercentage = 0; mMediaPlayer setLooping(mLooping); mMediaPlayer setDataSource(getContext(), mUri); mMediaPlayer setDisplay(mSurfaceHolder); mMediaPlayer setAudioStreamType(AudioManager STREAM_MUSIC); mMediaPlayer setScreenOnWhilePlaying(true); mMediaPlayer prepareAsync(); // we don't set the target state here either, but preserve the // target state that was there before  mCurrentState = STATE_PREPARING; attachMediaController(); } catch (Exception ex) { Log w(TAG, "Unable to open content: " + mUri, ex); mCurrentState = STATE_ERROR; mTargetState = STATE_ERROR; mErrorListener onError(mMediaPlayer, MediaPlayer MEDIA_ERROR_UNKNOWN, 0); } } public void setMediaController(VideoControlView controller) { if (mMediaController != null) { mMediaController hide(); } mMediaController = controller; attachMediaController(); } private void attachMediaController() { if (mMediaPlayer != null && mMediaController != null) { mMediaController setMediaPlayer(this); mMediaController setEnabled(isInPlaybackState()); } } MediaPlayer OnVideoSizeChangedListener mSizeChangedListener = new MediaPlayer OnVideoSizeChangedListener() { public void onVideoSizeChanged(MediaPlayer mp, int width, int height) { mVideoWidth = mp getVideoWidth(); mVideoHeight = mp getVideoHeight(); if (mVideoWidth != 0 && mVideoHeight != 0) { getHolder() setFixedSize(mVideoWidth, mVideoHeight); requestLayout(); } } }; MediaPlayer OnPreparedListener mPreparedListener = new MediaPlayer OnPreparedListener() { public void onPrepared(MediaPlayer mp) { mCurrentState = STATE_PREPARED; if (mOnPreparedListener != null) { mOnPreparedListener onPrepared(mMediaPlayer); } if (mMediaController != null) { mMediaController setEnabled(true); } mVideoWidth = mp getVideoWidth(); mVideoHeight = mp getVideoHeight(); int seekToPosition = mSeekWhenPrepared; // mSeekWhenPrepared may be changed after // seekTo() call if (seekToPosition != 0) { seekTo(seekToPosition); } if (mVideoWidth != 0 && mVideoHeight != 0) { //Log i("@@@@", "video size: " + mVideoWidth +"/"+ mVideoHeight); getHolder() setFixedSize(mVideoWidth, mVideoHeight); if (mSurfaceWidth == mVideoWidth && mSurfaceHeight == mVideoHeight) { // We didn't actually change the size (it was already at the size // we need), so we won't get a "surface changed" callback, so // start the video here instead of in the callback  if (mTargetState == STATE_PLAYING) { start(); if (mMediaController != null) { mMediaController show(); } } else if (!isPlaying() && (seekToPosition != 0 || getCurrentPosition() > 0)) { if (mMediaController != null) { // Show the media controls when we're paused into a video and make // 'em stick  mMediaController show(); } } } } else { // We don't know the video size yet, but should start anyway  // The video size might be reported to us later  if (mTargetState == STATE_PLAYING) { start(); } } } }; private MediaPlayer OnCompletionListener mCompletionListener = new MediaPlayer OnCompletionListener() { public void onCompletion(MediaPlayer mp) { mCurrentState = STATE_PLAYBACK_COMPLETED; mTargetState = STATE_PLAYBACK_COMPLETED; if (mOnCompletionListener != null) { mOnCompletionListener onCompletion(mMediaPlayer); } } }; private MediaPlayer OnInfoListener mInfoListener = new MediaPlayer OnInfoListener() { public boolean onInfo(MediaPlayer mp, int arg1, int arg2) { if (mOnInfoListener != null) { mOnInfoListener onInfo(mp, arg1, arg2); } return true; } }; private MediaPlayer OnErrorListener mErrorListener = new MediaPlayer OnErrorListener() { public boolean onError(MediaPlayer mp, int framework_err, int impl_err) { Log d(TAG, "Error: " + framework_err + "," + impl_err); mCurrentState = STATE_ERROR; mTargetState = STATE_ERROR; if (mMediaController != null) { mMediaController hide(); }  if (mOnErrorListener != null) { if (mOnErrorListener onError(mMediaPlayer, framework_err, impl_err)) { return true; } } return true; } }; private MediaPlayer OnBufferingUpdateListener mBufferingUpdateListener = new MediaPlayer OnBufferingUpdateListener() { public void onBufferingUpdate(MediaPlayer mp, int percent) { mCurrentBufferPercentage = percent; } };  public void setOnPreparedListener(MediaPlayer OnPreparedListener l) { mOnPreparedListener = l; }  public void setOnCompletionListener(OnCompletionListener l) { mOnCompletionListener = l; }  public void setOnErrorListener(OnErrorListener l) { mOnErrorListener = l; }  public void setOnInfoListener(OnInfoListener l) { mOnInfoListener = l; } SurfaceHolder Callback mSHCallback = new SurfaceHolder Callback() { public void surfaceChanged(SurfaceHolder holder, int format, int w, int h) { mSurfaceWidth = w; mSurfaceHeight = h; boolean isValidState = (mTargetState == STATE_PLAYING); boolean hasValidSize = (mVideoWidth == w && mVideoHeight == h); if (mMediaPlayer != null && isValidState && hasValidSize) { if (mSeekWhenPrepared != 0) { seekTo(mSeekWhenPrepared); } start(); if (mMediaController != null) { mMediaController show(); } } } public void surfaceCreated(SurfaceHolder holder) { mSurfaceHolder = holder; openVideo(); } public void surfaceDestroyed(SurfaceHolder holder) { // after we return from this we can't use the surface any more mSurfaceHolder = null; if (mMediaController != null) mMediaController hide(); release(true); } };  private void release(boolean cleartargetstate) { if (mMediaPlayer != null) { mMediaPlayer reset(); mMediaPlayer release(); mMediaPlayer = null; mCurrentState = STATE_IDLE; if (cleartargetstate) { mTargetState = STATE_IDLE; } } } @Override public boolean onTouchEvent(MotionEvent ev) { if (isInPlaybackState() && mMediaController != null) { toggleMediaControlsVisiblity(); } return super onTouchEvent(ev); } @Override public boolean onTrackballEvent(MotionEvent ev) { if (isInPlaybackState() && mMediaController != null) { toggleMediaControlsVisiblity(); } return super onTrackballEvent(ev); } @Override public boolean onKeyDown(int keyCode, KeyEvent event) { boolean isKeyCodeSupported = keyCode != KeyEvent KEYCODE_BACK && keyCode != KeyEvent KEYCODE_VOLUME_UP && keyCode != KeyEvent KEYCODE_VOLUME_DOWN && keyCode != KeyEvent KEYCODE_MENU && keyCode != KeyEvent KEYCODE_CALL && keyCode != KeyEvent KEYCODE_ENDCALL; if (isInPlaybackState() && isKeyCodeSupported && mMediaController != null) { if (keyCode == KeyEvent KEYCODE_HEADSETHOOK || keyCode == KeyEvent KEYCODE_MEDIA_PLAY_PAUSE) { if (mMediaPlayer isPlaying()) { pause(); mMediaController show(); } else { start(); mMediaController hide(); } return true; } else if (keyCode == KeyEvent KEYCODE_MEDIA_PLAY) { if (!mMediaPlayer isPlaying()) { start(); mMediaController hide(); } return true; } else if (keyCode == KeyEvent KEYCODE_MEDIA_STOP || keyCode == KeyEvent KEYCODE_MEDIA_PAUSE) { if (mMediaPlayer isPlaying()) { pause(); mMediaController show(); } return true; } else { toggleMediaControlsVisiblity(); } } return super onKeyDown(keyCode, event); } private void toggleMediaControlsVisiblity() { if (mMediaController isShowing()) { mMediaController hide(); } else { mMediaController show(); } } @Override public void start() { if (isInPlaybackState()) { mMediaPlayer start(); mCurrentState = STATE_PLAYING; } mTargetState = STATE_PLAYING; } @Override public void pause() { if (isInPlaybackState()) { if (mMediaPlayer isPlaying()) { mMediaPlayer pause(); mCurrentState = STATE_PAUSED; } } mTargetState = STATE_PAUSED; } @Override public int getDuration() { if (isInPlaybackState()) { return mMediaPlayer getDuration(); } return -1; } @Override public int getCurrentPosition() { if (isInPlaybackState()) { return mMediaPlayer getCurrentPosition(); } return 0; } @Override public void seekTo(int msec) { if (isInPlaybackState()) { mMediaPlayer seekTo(msec); mSeekWhenPrepared = 0; } else { mSeekWhenPrepared = msec; } } @Override public boolean isPlaying() { return isInPlaybackState() && mMediaPlayer isPlaying(); } @Override public int getBufferPercentage() { if (mMediaPlayer != null) { return mCurrentBufferPercentage; } return 0; } private boolean isInPlaybackState() { return (mMediaPlayer != null && mCurrentState != STATE_ERROR && mCurrentState != STATE_IDLE && mCurrentState != STATE_PREPARING); }}package com twitter sdk android core internal;import com twitter sdk android core models Card;import com twitter sdk android core models ImageValue;import com twitter sdk android core models UserValue;public class VineCardUtils { public static final String PLAYER_CARD = "player"; public static final String VINE_CARD = "vine"; public static final long VINE_USER_ID = 586671909; private VineCardUtils() {} public static boolean isVine(Card card) { return (PLAYER_CARD equals(card name) || VINE_CARD equals(card name)) && isVineUser(card); } private static boolean isVineUser(Card card) { final UserValue user = card bindingValues get("site"); try { if (user != null && Long parseLong(user idStr) == VINE_USER_ID) { return true; } } catch (NumberFormatException ex) { return false; } return false; } public static String getPublisherId(Card card) { final UserValue user_value = card bindingValues get("site"); return user_value idStr; } public static String getStreamUrl(Card card) { return card bindingValues get("player_stream_url"); } public static String getCallToActionUrl(Card card) { return card bindingValues get("card_url"); } public static ImageValue getImageValue(Card card) { return card bindingValues get("player_image"); }}package com twitter sdk android core identity;class WebViewException extends Exception { private static final long serialVersionUID = -7397331487240298819L; private final int errorCode; private final String failingUrl; public WebViewException(int errorCode, String description, String failingUrl) { super(description); this errorCode = errorCode; this failingUrl = failingUrl; } public int getErrorCode() { return errorCode; } public String getDescription() { return getMessage(); } public String getFailingUrl() { return failingUrl; }}package com twitter sdk android core services;import com twitter sdk android core models User;import retrofit2 Call;import retrofit2 http GET;import retrofit2 http Query;public interface AccountService {  @GET("/1 1/account/verify_credentials json") Call<User> verifyCredentials(@Query("include_entities") Boolean includeEntities, @Query("skip_status") Boolean skipStatus);}package com twitter sdk android tweetui internal;import android animation Animator;import android animation AnimatorListenerAdapter;import android view View;import android view ViewPropertyAnimator;class AnimationUtils { public static ViewPropertyAnimator fadeOut(final View from, int duration) { if (from getVisibility() == View VISIBLE) { from clearAnimation(); final ViewPropertyAnimator animator = from animate(); animator alpha(0f)  setDuration(duration)  setListener(new AnimatorListenerAdapter() { @Override public void onAnimationEnd(Animator animation) { from setVisibility(View INVISIBLE); from setAlpha(1f); } }); return animator; } return null; } public static ViewPropertyAnimator fadeIn(View to, int duration) { if (to getVisibility() != View VISIBLE) { to setAlpha(0f); to setVisibility(View VISIBLE); } to clearAnimation(); final ViewPropertyAnimator animator = to animate(); animator alpha(1f)  setDuration(duration)  setListener(null); return animator; }}package com twitter sdk android core models;import com google gson annotations SerializedName;public class ApiError { @SerializedName("message") public final String message; @SerializedName("code") public final int code; public ApiError(String message, int code) { this message = message; this code = code; }}package com twitter sdk android core models;import com google gson annotations SerializedName;import java util List;public class ApiErrors { @SerializedName("errors") public final List<ApiError> errors; public ApiErrors(List<ApiError> errors) { this errors = errors; }}package com twitter sdk android tweetcomposer;import android content Context;import android net Uri;import android util AttributeSet;import android view ViewGroup;import android widget ImageView;import android widget LinearLayout;import android widget TextView;import com squareup picasso Picasso;import com squareup picasso Transformation;public class AppCardView extends LinearLayout { ImageView appImageView; ViewGroup appInfoLayout; TextView appInstallButton; TextView appNameView; TextView appStoreNameView; public AppCardView(Context context) { this(context, null); } public AppCardView(Context context, AttributeSet attrs) { super(context, attrs); init(context); } public AppCardView(Context context, AttributeSet attrs, int defStyle) { super(context, attrs, defStyle); init(context); } void init(Context context) { setOrientation(LinearLayout VERTICAL); inflate(context, R layout tw__app_card, this); findSubviews(); setButtonColor(); } void findSubviews() { appImageView = (ImageView) findViewById(R id tw__app_image); appNameView = (TextView) findViewById(R id tw__app_name); appStoreNameView = (TextView) findViewById(R id tw__app_store_name); appInstallButton = (TextView) findViewById(R id tw__app_install_button); appInfoLayout = (ViewGroup) findViewById(R id tw__app_info_layout); } void setCard(Card card) { setImage(Uri parse(card imageUri)); setAppName(card appName); } void setImage(Uri uri) { final int radius = getResources() getDimensionPixelSize(R dimen tw__card_radius_medium); final Transformation transformation = new RoundedCornerTransformation Builder()  setRadii(radius, radius, 0, 0)  build(); Picasso with(getContext())  load(uri)  transform(transformation)  fit()  centerCrop()  into(appImageView); } void setAppName(String name) { appNameView setText(name); } @Override protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) { final int maxWidth = getResources() getDimensionPixelSize(R dimen tw__card_maximum_width); // Adjust width if required final int measuredWidth = MeasureSpec getSize(widthMeasureSpec); if (maxWidth > 0 && maxWidth < measuredWidth) { final int measureMode = MeasureSpec getMode(widthMeasureSpec); widthMeasureSpec = MeasureSpec makeMeasureSpec(maxWidth, measureMode); } super onMeasure(widthMeasureSpec, heightMeasureSpec); } void setButtonColor() { final int buttonTextColor = getResources() getColor(R color tw__composer_blue_text); appInstallButton setTextColor(buttonTextColor); }}package com twitter sdk android core internal util;import android content Context;import android content res TypedArray;import android util AttributeSet;import android widget ImageView;import com twitter sdk android core R;public class AspectRatioImageView extends ImageView { private static final float DEFAULT_ASPECT_RATIO = 1 0f; private static final int DEFAULT_ADJUST_DIMENSION = 0; // defined by attrs xml enum static final int ADJUST_DIMENSION_HEIGHT = 0; static final int ADJUST_DIMENSION_WIDTH = 1; private double aspectRatio; // width to height ratio private int dimensionToAdjust; // ADJUST_DIMENSION_HEIGHT or ADJUST_DIMENSION_WIDTH public AspectRatioImageView(Context context) { this(context, null); } public AspectRatioImageView(Context context, AttributeSet attrs) { super(context, attrs); final TypedArray a = context obtainStyledAttributes(attrs, R styleable tw__AspectRatioImageView); try { aspectRatio = a getFloat(R styleable tw__AspectRatioImageView_tw__image_aspect_ratio, DEFAULT_ASPECT_RATIO); dimensionToAdjust = a getInt(R styleable tw__AspectRatioImageView_tw__image_dimension_to_adjust, DEFAULT_ADJUST_DIMENSION); } finally { a recycle(); } } public double getAspectRatio() { return aspectRatio; } public int getDimensionToAdjust() { return dimensionToAdjust; }  public void setAspectRatio(final double aspectRatio) { this aspectRatio = aspectRatio; }  public void resetSize() { if (getMeasuredWidth() == 0 && getMeasuredHeight() == 0) { return; } measure(MeasureSpec makeMeasureSpec(0, MeasureSpec EXACTLY), MeasureSpec makeMeasureSpec(0, MeasureSpec EXACTLY)); layout(0, 0, 0, 0); } @Override protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) { super onMeasure(widthMeasureSpec, heightMeasureSpec); int width = getMeasuredWidth(); int height = getMeasuredHeight(); if (dimensionToAdjust == ADJUST_DIMENSION_HEIGHT) { height = calculateHeight(width, aspectRatio); } else { width = calculateWidth(height, aspectRatio); } setMeasuredDimension(width, height); }  int calculateHeight(int width, double ratio) { if (ratio == 0) { return 0; } return (int) Math round(width / ratio); }  int calculateWidth(int height, double ratio) { return (int) Math round(height * ratio); }}package com twitter sdk android core internal util;import android test AndroidTestCase;import android view LayoutInflater;import android view View;import android view ViewGroup;import android widget LinearLayout;import com twitter sdk android core R;public class AspectRatioImageViewTest extends AndroidTestCase { private static final double TEST_ASPECT_RATIO = 2 0; private static final float DELTA = 0 001f; private AspectRatioImageView getHeightAdjustedView() { return (AspectRatioImageView) getInflatedLayout() findViewById(R id height_adjusted_view); } private AspectRatioImageView getWidthAdjustedView() { return (AspectRatioImageView) getInflatedLayout() findViewById(R id width_adjusted_view); } public void testHeightAdjusted() { final AspectRatioImageView imageView = getHeightAdjustedView(); assertEquals(1 6, imageView getAspectRatio(), DELTA); assertEquals(AspectRatioImageView ADJUST_DIMENSION_HEIGHT, imageView getDimensionToAdjust()); } public void testWidthAdjusted() { final AspectRatioImageView imageView = getWidthAdjustedView(); assertEquals(1 2, imageView getAspectRatio(), DELTA); assertEquals(AspectRatioImageView ADJUST_DIMENSION_WIDTH, imageView getDimensionToAdjust()); } private View getInflatedLayout() { final ViewGroup group = new LinearLayout(getContext()); return LayoutInflater from(getContext()) inflate( R layout activity_aspect_ratio_image_view_test, group, true); } public void testSetAspectRatio() { final AspectRatioImageView av = new AspectRatioImageView(getContext()); av setAspectRatio(TEST_ASPECT_RATIO); assertEquals(TEST_ASPECT_RATIO, av getAspectRatio()); } public void testSetAspectRatio_xml() { final AspectRatioImageView av = getHeightAdjustedView(); av setAspectRatio(TEST_ASPECT_RATIO); assertEquals(TEST_ASPECT_RATIO, av getAspectRatio()); } public void testCalculateHeight() { final AspectRatioImageView av = new AspectRatioImageView(getContext()); assertEquals(400, av calculateHeight(600, 1 5)); assertEquals(600, av calculateHeight(300, 0 5)); assertEquals(300, av calculateHeight(300, 1 0)); assertEquals(0, av calculateHeight(0, 1 3)); assertEquals(0, av calculateHeight(100, 0)); // sub-pixel space for images mean aspect ratios cannot be respected assertEquals(1, av calculateHeight(10, 15 0)); } public void testCalculateWidth() { final AspectRatioImageView av = new AspectRatioImageView(getContext()); assertEquals(300, av calculateWidth(200, 1 5)); assertEquals(201, av calculateWidth(401, 0 5)); assertEquals(200, av calculateWidth(200, 1 0)); assertEquals(0, av calculateWidth(0, 1 3)); assertEquals(0, av calculateWidth(100, 0)); // sub-pixel space for images mean aspect ratios cannot be respected assertEquals(1, av calculateWidth(10, 0 05)); }}package com twitter sdk android core identity;import android app Activity;import android content Intent;import com twitter sdk android core Callback;import com twitter sdk android core Result;import com twitter sdk android core TwitterAuthConfig;import com twitter sdk android core TwitterAuthException;import com twitter sdk android core TwitterAuthToken;import com twitter sdk android core TwitterSession;public abstract class AuthHandler { static final String EXTRA_TOKEN = "tk"; static final String EXTRA_TOKEN_SECRET = "ts"; static final String EXTRA_SCREEN_NAME = "screen_name"; static final String EXTRA_USER_ID = "user_id"; static final String EXTRA_AUTH_ERROR = "auth_error"; static final int RESULT_CODE_ERROR = Activity RESULT_FIRST_USER; protected final int requestCode; private final TwitterAuthConfig config; private final Callback<TwitterSession> callback;  AuthHandler(TwitterAuthConfig authConfig, Callback<TwitterSession> callback, int requestCode) { config = authConfig; this callback = callback; this requestCode = requestCode; } TwitterAuthConfig getAuthConfig() { return config; } Callback<TwitterSession> getCallback() { return callback; }  public abstract boolean authorize(Activity activity);  public boolean handleOnActivityResult(int requestCode, int resultCode, Intent data) { if (this requestCode != requestCode) { return false; } final Callback<TwitterSession> callback = getCallback(); if (callback != null) { if (resultCode == Activity RESULT_OK) { final String token = data getStringExtra(EXTRA_TOKEN); final String tokenSecret = data getStringExtra(EXTRA_TOKEN_SECRET); final String screenName = data getStringExtra(EXTRA_SCREEN_NAME); final long userId = data getLongExtra(EXTRA_USER_ID, 0L); callback success(new Result<>(new TwitterSession( new TwitterAuthToken(token, tokenSecret), userId, screenName), null)); } else if (data != null && data hasExtra(EXTRA_AUTH_ERROR)) { callback failure( (TwitterAuthException) data getSerializableExtra(EXTRA_AUTH_ERROR)); } else { callback failure(new TwitterAuthException("Authorize failed ")); } } return true; }}package com twitter sdk android core identity;import android app Activity;import com twitter sdk android core TwitterCore;import java util concurrent atomic AtomicReference;import io fabric sdk android Fabric;class AuthState { final AtomicReference<AuthHandler> authHandlerRef = new AtomicReference<>(null); public boolean beginAuthorize(Activity activity, AuthHandler authHandler) { boolean result = false; if (isAuthorizeInProgress()) { Fabric getLogger() w(TwitterCore TAG, "Authorize already in progress"); } else if (authHandler authorize(activity)) { result = authHandlerRef compareAndSet(null, authHandler); if (!result) { Fabric getLogger() w(TwitterCore TAG, "Failed to update authHandler, authorize" + " already in progress "); } } return result; } public void endAuthorize() { authHandlerRef set(null); } public boolean isAuthorizeInProgress() { return authHandlerRef get() != null; } public AuthHandler getAuthHandler() { return authHandlerRef get(); }}package com twitter sdk android core;import com google gson annotations SerializedName;public abstract class AuthToken {  @SerializedName("created_at") protected final long createdAt; public AuthToken() { createdAt = System currentTimeMillis(); } protected AuthToken(long createdAt) { this createdAt = createdAt; }  public abstract boolean isExpired();}package com twitter sdk android core;import com google gson Gson;import com google gson JsonDeserializationContext;import com google gson JsonDeserializer;import com google gson JsonElement;import com google gson JsonObject;import com google gson JsonParseException;import com google gson JsonPrimitive;import com google gson JsonSerializationContext;import com google gson JsonSerializer;import com twitter sdk android core internal oauth GuestAuthToken;import com twitter sdk android core internal oauth OAuth2Token;import java lang reflect Type;import java util HashMap;import java util Map;public class AuthTokenAdapter implements JsonSerializer<AuthToken>, JsonDeserializer<AuthToken> { private static final String AUTH_TYPE = "auth_type"; private static final String AUTH_TOKEN = "auth_token"; static final Map<String, Class<? extends AuthToken>> authTypeRegistry = new HashMap<>(); static { authTypeRegistry put("oauth1a", TwitterAuthToken class); authTypeRegistry put("oauth2", OAuth2Token class); authTypeRegistry put("guest", GuestAuthToken class); } private final Gson gson; public AuthTokenAdapter() { this gson = new Gson(); } @Override public JsonElement serialize(AuthToken src, Type typeOfSrc, JsonSerializationContext context) { final JsonObject jsonObject = new JsonObject(); jsonObject addProperty(AUTH_TYPE, getAuthTypeString(src getClass())); jsonObject add(AUTH_TOKEN, gson toJsonTree(src)); return jsonObject; } @Override public AuthToken deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context) throws JsonParseException { final JsonObject jsonObject = json getAsJsonObject(); final JsonPrimitive jsonAuthType = jsonObject getAsJsonPrimitive(AUTH_TYPE); final String authType = jsonAuthType getAsString(); final JsonElement jsonAuthToken = jsonObject get(AUTH_TOKEN); return gson fromJson(jsonAuthToken, authTypeRegistry get(authType)); } static String getAuthTypeString(Class<? extends AuthToken> authTokenClass) { for (Map Entry<String, Class<? extends AuthToken>> entry : authTypeRegistry entrySet()) { if (entry getValue() equals(authTokenClass)) { return entry getKey(); } } return ""; }}package com twitter sdk android tweetui;import com twitter sdk android core Callback;import com twitter sdk android core Result;import com twitter sdk android core TwitterException;import com twitter sdk android core models Tweet;import java util List;abstract class BaseTimeline { protected final TweetUi tweetUi; BaseTimeline(TweetUi tweetUi) { if (tweetUi == null) { throw new IllegalArgumentException("TweetUi instance must not be null"); } this tweetUi = tweetUi; scribeImpression(); } abstract String getTimelineType(); private void scribeImpression() { tweetUi scribe( ScribeConstants getSyndicatedSdkTimelineNamespace(getTimelineType()), ScribeConstants getTfwClientTimelineNamespace(getTimelineType()) ); }  static Long decrementMaxId(Long maxId) { return maxId == null ? null : maxId - 1; }  static class TweetsCallback extends Callback<List<Tweet>> { final Callback<TimelineResult<Tweet>> cb;  TweetsCallback(Callback<TimelineResult<Tweet>> cb) { this cb = cb; } @Override public void success(Result<List<Tweet>> result) { final List<Tweet> tweets = result data; final TimelineResult<Tweet> timelineResult = new TimelineResult<>(new TimelineCursor(tweets), tweets); if (cb != null) { cb success(new Result<>(timelineResult, result response)); } } @Override public void failure(TwitterException exception) { if (cb != null) { cb failure(exception); } } }}package com twitter sdk android tweetui;import com twitter sdk android core Callback;import com twitter sdk android core models Tweet;class BaseTweetAction { protected Callback<Tweet> actionCallback; BaseTweetAction(Callback<Tweet> actionCallback) { this actionCallback = actionCallback; } Callback<Tweet> getActionCallback() { return actionCallback; }}package com twitter sdk android tweetui;import android annotation TargetApi;import android content Context;import android content Intent;import android content res TypedArray;import android graphics Color;import android graphics drawable ColorDrawable;import android net Uri;import android os Build;import android text TextUtils;import android util AttributeSet;import android view LayoutInflater;import android view View;import android widget FrameLayout;import android widget ImageView;import android widget LinearLayout;import android widget RelativeLayout;import android widget TextView;import com squareup picasso Picasso;import io fabric sdk android Fabric;import com twitter sdk android core Callback;import com twitter sdk android core IntentUtils;import com twitter sdk android core Result;import com twitter sdk android core TwitterException;import com twitter sdk android core internal VineCardUtils;import com twitter sdk android core internal scribe ScribeItem;import com twitter sdk android core models Card;import com twitter sdk android core models ImageValue;import com twitter sdk android core models MediaEntity;import com twitter sdk android core models Tweet;import com twitter sdk android core models TweetBuilder;import com twitter sdk android core internal UserUtils;import com twitter sdk android core models VideoInfo;import com twitter sdk android tweetui internal MediaBadgeView;import com twitter sdk android tweetui internal SpanClickHandler;import com twitter sdk android tweetui internal TweetMediaUtils;import com twitter sdk android tweetui internal TweetMediaView;import java text DateFormat;import java util Date;import java util Locale;@SuppressWarnings({"TooManyMethods", "TooManyFields"})public abstract class BaseTweetView extends LinearLayout { private static final String TAG = TweetUi LOGTAG; private static final int DEFAULT_STYLE = R style tw__TweetLightStyle; private static final String EMPTY_STRING = ""; static final double DEFAULT_ASPECT_RATIO = 16 0 / 9 0; static final double SECONDARY_TEXT_COLOR_LIGHT_OPACITY = 0 4; static final double SECONDARY_TEXT_COLOR_DARK_OPACITY = 0 35; static final double MEDIA_BG_LIGHT_OPACITY = 0 08; static final double MEDIA_BG_DARK_OPACITY = 0 12; static final long INVALID_ID = -1L; // Dependency Provider final DependencyProvider dependencyProvider; // attributes private LinkClickListener linkClickListener; TweetLinkClickListener tweetLinkClickListener; TweetMediaClickListener tweetMediaClickListener; private Uri permalinkUri; Tweet tweet; // for testing int styleResId; // layout views RelativeLayout containerView; ImageView avatarView; TextView fullNameView; TextView screenNameView; ImageView verifiedCheckView; FrameLayout mediaContainerView; TweetMediaView mediaView; TextView contentView; TextView timestampView; ImageView twitterLogoView; TextView retweetedByView; TweetActionBarView tweetActionBarView; MediaBadgeView mediaBadgeView; View bottomSeparator; // color values int containerBgColor; int primaryTextColor; int secondaryTextColor; int actionColor; int actionHighlightColor; int mediaBgColor; // resource id's int photoErrorResId; int birdLogoResId; int retweetIconResId; boolean tweetActionsEnabled; // styled drawables for images ColorDrawable mediaBg;  BaseTweetView(Context context, Tweet tweet) { this(context, tweet, DEFAULT_STYLE); }  BaseTweetView(Context context, Tweet tweet, int styleResId) { this(context, tweet, styleResId, new DependencyProvider()); }  BaseTweetView(Context context, Tweet tweet, int styleResId, DependencyProvider dependencyProvider) { super(context, null); this dependencyProvider = dependencyProvider; initAttributes(styleResId); inflateView(context); findSubviews(); applyStyles(); if (!isTweetUiEnabled()) return; initTweetActions(); setTweet(tweet); }   public BaseTweetView(Context context, AttributeSet attrs) { this(context, attrs, new DependencyProvider()); }  BaseTweetView(Context context, AttributeSet attrs, DependencyProvider dependencyProvider) { super(context, attrs); this dependencyProvider = dependencyProvider; initXmlAttributes(context, attrs); inflateView(context); }  public BaseTweetView(Context context, AttributeSet attrs, int defStyle) { this(context, attrs, defStyle, new DependencyProvider()); }  BaseTweetView(Context context, AttributeSet attrs, int defStyle, DependencyProvider dependencyProvider) { super(context, attrs, defStyle); this dependencyProvider = dependencyProvider; initXmlAttributes(context, attrs); inflateView(context); }  private void initAttributes(int styleResId) { this styleResId = styleResId; final TypedArray a = getContext() getTheme() obtainStyledAttributes(styleResId, R styleable tw__TweetView); try { setStyleAttributes(a); } finally { a recycle(); } }  private void initXmlAttributes(Context context, AttributeSet attrs) { if (attrs == null) return; // parse the xml attributes by resolving resource references final TypedArray a = context getTheme() obtainStyledAttributes(attrs, R styleable tw__TweetView, 0, 0); try { setXmlDataAttributes(a); setStyleAttributes(a); } finally { a recycle(); } }  private void setXmlDataAttributes(TypedArray a) { final long tweetId = Utils numberOrDefault( a getString(R styleable tw__TweetView_tw__tweet_id), INVALID_ID); if (tweetId <= 0) { throw new IllegalArgumentException("Invalid tw__tweet_id"); } // XML special case  The screen_name is not known yet  A permalink can be constructed and // followed  Permalink should be updated once the loadTweet call receives the Tweet  setPermalinkUri(null, tweetId); this tweet = new TweetBuilder() setId(tweetId) build(); }  private void setStyleAttributes(TypedArray a) { // Styled via attributes containerBgColor = a getColor(R styleable tw__TweetView_tw__container_bg_color, getResources() getColor(R color tw__tweet_light_container_bg_color)); primaryTextColor = a getColor(R styleable tw__TweetView_tw__primary_text_color, getResources() getColor(R color tw__tweet_light_primary_text_color)); actionColor = a getColor( R styleable tw__TweetView_tw__action_color, getResources() getColor(R color tw__tweet_action_color)); actionHighlightColor = a getColor( R styleable tw__TweetView_tw__action_highlight_color, getResources() getColor(R color tw__tweet_action_light_highlight_color)); tweetActionsEnabled = a getBoolean(R styleable tw__TweetView_tw__tweet_actions_enabled, false); // Calculated colors final boolean isLightBg = ColorUtils isLightColor(containerBgColor); if (isLightBg) { photoErrorResId = R drawable tw__ic_tweet_photo_error_light; birdLogoResId = R drawable tw__ic_logo_blue; retweetIconResId = R drawable tw__ic_retweet_light; } else { photoErrorResId = R drawable tw__ic_tweet_photo_error_dark; birdLogoResId = R drawable tw__ic_logo_white; retweetIconResId = R drawable tw__ic_retweet_dark; } // offset from white when background is light secondaryTextColor = ColorUtils calculateOpacityTransform( isLightBg ? SECONDARY_TEXT_COLOR_LIGHT_OPACITY : SECONDARY_TEXT_COLOR_DARK_OPACITY, isLightBg ? Color WHITE : Color BLACK, primaryTextColor ); // offset from black when background is light mediaBgColor = ColorUtils calculateOpacityTransform( isLightBg ? MEDIA_BG_LIGHT_OPACITY : MEDIA_BG_DARK_OPACITY, isLightBg ? Color BLACK : Color WHITE, containerBgColor ); mediaBg = new ColorDrawable(mediaBgColor); }  private void inflateView(Context context) { final LayoutInflater localInflater = LayoutInflater from(context); final View v = localInflater inflate(getLayout(), null, false); // work around a bug(?) in Android that makes it so that our inflated view doesn't // pick up layout params correctly from its style final LayoutParams layoutParams = new LayoutParams(LayoutParams MATCH_PARENT, LayoutParams WRAP_CONTENT); v setLayoutParams(layoutParams); this addView(v); }  @Override protected void onFinishInflate() { super onFinishInflate(); if (!isTweetUiEnabled()) return; findSubviews(); applyStyles(); initTweetActions(); loadTweet(); }  private void initTweetActions() { setTweetActionsEnabled(tweetActionsEnabled); // Tweet actions buttons setTweet and clear cache after successful actions  tweetActionBarView setOnActionCallback(new ResetTweetCallback(this, dependencyProvider getTweetUi() getTweetRepository(), null)); }  boolean isTweetUiEnabled() { // in edit mode, halt view creation if (isInEditMode()) return false; try { dependencyProvider getTweetUi(); } catch (IllegalStateException e) { Fabric getLogger() e(TAG, e getMessage()); // TweetUi kit instance not available, halt view creation and disable setEnabled(false); return false; } return true; }  void findSubviews() { // Tweet attribution (avatar, name, screen name, etc ) containerView = (RelativeLayout) findViewById(R id tw__tweet_view); avatarView = (ImageView) findViewById(R id tw__tweet_author_avatar); fullNameView = (TextView) findViewById(R id tw__tweet_author_full_name); screenNameView = (TextView) findViewById(R id tw__tweet_author_screen_name); verifiedCheckView = (ImageView) findViewById(R id tw__tweet_author_verified); mediaContainerView = (FrameLayout) findViewById(R id tw__tweet_media_container); mediaView = (TweetMediaView) findViewById(R id tw__tweet_media); contentView = (TextView) findViewById(R id tw__tweet_text); timestampView = (TextView) findViewById(R id tw__tweet_timestamp); twitterLogoView = (ImageView) findViewById(R id tw__twitter_logo); retweetedByView = (TextView) findViewById(R id tw__tweet_retweeted_by); tweetActionBarView = (TweetActionBarView) findViewById(R id tw__tweet_action_bar); mediaBadgeView = (MediaBadgeView) findViewById(R id tw__tweet_media_badge); bottomSeparator = findViewById(R id bottom_separator); }  abstract int getLayout();  abstract String getViewTypeName();  public long getTweetId() { if (tweet == null) { return INVALID_ID; } return tweet id; }  public void setTweet(Tweet tweet) { this tweet = tweet; render(); }  public Tweet getTweet() { return tweet; }  public void setOnActionCallback(Callback<Tweet> actionCallback) { tweetActionBarView setOnActionCallback(new ResetTweetCallback(this, dependencyProvider getTweetUi() getTweetRepository(), actionCallback)); tweetActionBarView setTweet(tweet); }  public void setTweetMediaClickListener(TweetMediaClickListener tweetMediaClickListener) { this tweetMediaClickListener = tweetMediaClickListener; }  public void setTweetLinkClickListener(TweetLinkClickListener tweetLinkClickListener) { this tweetLinkClickListener = tweetLinkClickListener; }  void render() { final Tweet displayTweet = TweetUtils getDisplayTweet(tweet); setProfilePhotoView(displayTweet); setName(displayTweet); setScreenName(displayTweet); setTimestamp(displayTweet); setTweetMedia(displayTweet); setText(displayTweet); setContentDescription(displayTweet); setTweetActions(tweet); showRetweetedBy(tweet); // set permalink if tweet id and screen name are available if (TweetUtils isTweetResolvable(tweet)) { setPermalinkUri(tweet user screenName, getTweetId()); } else { permalinkUri = null; } // set or update the permalink launcher with the current permalinkUri setPermalinkLauncher(); scribeImpression(); }  private void loadTweet() { final long tweetId = getTweetId(); // create a callback to setTweet on the view or log a failure to load the Tweet final Callback<Tweet> repoCb = new Callback<Tweet>() { @Override public void success(Result<Tweet> result) { setTweet(result data); } @Override public void failure(TwitterException exception) { Fabric getLogger() d(TAG, String format(Locale ENGLISH, TweetUtils LOAD_TWEET_DEBUG, tweetId)); } }; dependencyProvider getTweetUi() getTweetRepository() loadTweet(getTweetId(), repoCb); } Uri getPermalinkUri() { return permalinkUri; } void setPermalinkUri(String screenName, Long tweetId) { if (tweetId <= 0) return; permalinkUri = TweetUtils getPermalink(screenName, tweetId); } private void setPermalinkLauncher() { final OnClickListener listener = new PermalinkClickListener(); this setOnClickListener(listener); }  void showRetweetedBy(Tweet tweet) { if (tweet == null || tweet retweetedStatus == null) { retweetedByView setVisibility(GONE); } else { retweetedByView setText( getResources() getString(R string tw__retweeted_by_format, tweet user name)); retweetedByView setVisibility(VISIBLE); } } void launchPermalink() { final Intent intent = new Intent(Intent ACTION_VIEW, getPermalinkUri()); if (!IntentUtils safeStartActivity(getContext(), intent)) { Fabric getLogger() e(TweetUi LOGTAG, "Activity cannot be found to open permalink URI"); } } void scribeImpression() { if (tweet != null) { dependencyProvider getTweetScribeClient() impression(tweet, getViewTypeName(), tweetActionsEnabled); } } void scribePermalinkClick() { if (tweet != null) { dependencyProvider getTweetScribeClient() click(tweet, getViewTypeName()); } } void scribeCardImpression(Long tweetId, Card card) { final ScribeItem scribeItem = ScribeItem fromTweetCard(tweetId, card); dependencyProvider getVideoScribeClient() impression(scribeItem); } void scribeMediaEntityImpression(long tweetId, MediaEntity mediaEntity) { final ScribeItem scribeItem = ScribeItem fromMediaEntity(tweetId, mediaEntity); dependencyProvider getVideoScribeClient() impression(scribeItem); }  protected void applyStyles() { containerView setBackgroundColor(containerBgColor); avatarView setImageDrawable(mediaBg); mediaView setImageDrawable(mediaBg); fullNameView setTextColor(primaryTextColor); screenNameView setTextColor(secondaryTextColor); contentView setTextColor(primaryTextColor); timestampView setTextColor(secondaryTextColor); twitterLogoView setImageResource(birdLogoResId); retweetedByView setTextColor(secondaryTextColor); }  private void setName(Tweet displayTweet) { if (displayTweet != null && displayTweet user != null) { fullNameView setText(Utils stringOrEmpty(displayTweet user name)); } else { fullNameView setText(EMPTY_STRING); } }  private void setScreenName(Tweet displayTweet) { if (displayTweet != null && displayTweet user != null) { screenNameView setText(UserUtils formatScreenName( Utils stringOrEmpty(displayTweet user screenName))); } else { screenNameView setText(EMPTY_STRING); } }  @TargetApi(Build VERSION_CODES JELLY_BEAN) private void setText(Tweet displayTweet) { if (Build VERSION SDK_INT >= Build VERSION_CODES JELLY_BEAN) { contentView setImportantForAccessibility(IMPORTANT_FOR_ACCESSIBILITY_NO); } final CharSequence tweetText = Utils charSeqOrEmpty(getLinkifiedText(displayTweet)); SpanClickHandler enableClicksOnSpans(contentView); if (!TextUtils isEmpty(tweetText)) { contentView setText(tweetText); contentView setVisibility(VISIBLE); } else { contentView setText(EMPTY_STRING); contentView setVisibility(GONE); } }  private void setTimestamp(Tweet displayTweet) { final String formattedTimestamp; if (displayTweet != null && displayTweet createdAt != null && TweetDateUtils isValidTimestamp(displayTweet createdAt)) { final Long createdAtTimestamp = TweetDateUtils apiTimeToLong(displayTweet createdAt); final String timestamp = TweetDateUtils getRelativeTimeString(getResources(), System currentTimeMillis(), createdAtTimestamp); formattedTimestamp = TweetDateUtils dotPrefix(timestamp); } else { formattedTimestamp = EMPTY_STRING; } timestampView setText(formattedTimestamp); }  void setProfilePhotoView(Tweet displayTweet) { final Picasso imageLoader = dependencyProvider getImageLoader(); if (imageLoader == null) return; final String url; if (displayTweet == null || displayTweet user == null) { url = null; } else { url = UserUtils getProfileImageUrlHttps(displayTweet user, UserUtils AvatarSize REASONABLY_SMALL); } imageLoader load(url) placeholder(mediaBg) into(avatarView); }  final void setTweetMedia(Tweet displayTweet) { clearMediaView(); if (displayTweet == null) { mediaContainerView setVisibility(ImageView GONE); return; } if (displayTweet card != null && VineCardUtils isVine(displayTweet card)) { final Card vineCard = displayTweet card; mediaContainerView setVisibility(ImageView VISIBLE); mediaView setOverlayDrawable(getContext() getResources()  getDrawable(R drawable tw__player_overlay)); mediaBadgeView setCard(vineCard); setVineCardLauncher(displayTweet id, vineCard); final ImageValue imageValue = VineCardUtils getImageValue(vineCard); if (imageValue != null) { setMediaImage(imageValue url, getAspectRatio(imageValue)); } scribeCardImpression(displayTweet id, vineCard); } else if (TweetMediaUtils hasSupportedVideo(displayTweet)) { final MediaEntity mediaEntity = TweetMediaUtils getVideoEntity(displayTweet); // set the image view to visible before setting via picasso placeholders into so // measurements are done correctly, fixes a bug where the placeholder was a small square // in the corner of the view mediaContainerView setVisibility(ImageView VISIBLE); mediaView setOverlayDrawable(getContext() getResources()  getDrawable(R drawable tw__player_overlay)); mediaBadgeView setMediaEntity(mediaEntity); setAltText(mediaEntity altText); setMediaLauncher(displayTweet, mediaEntity); setMediaImage(mediaEntity mediaUrlHttps, getAspectRatio(mediaEntity)); scribeMediaEntityImpression(displayTweet id, mediaEntity); } else if (TweetMediaUtils hasPhoto(displayTweet)) { final MediaEntity mediaEntity = TweetMediaUtils getPhotoEntity(displayTweet); // set the image view to visible before setting via picasso placeholders into so // measurements are done correctly, fixes a bug where the placeholder was a small square // in the corner of the view mediaContainerView setVisibility(ImageView VISIBLE); mediaBadgeView setMediaEntity(mediaEntity); setAltText(mediaEntity altText); setPhotoLauncher(displayTweet, mediaEntity); setMediaImage(mediaEntity mediaUrlHttps, getAspectRatio(mediaEntity)); } else { mediaContainerView setVisibility(ImageView GONE); } } void setAltText(String description) { if (!TextUtils isEmpty(description)) { mediaView setContentDescription(description); } } private void setMediaLauncher(final Tweet displayTweet, final MediaEntity entity) { mediaView setOnClickListener(new OnClickListener() { @Override public void onClick(View view) { if (tweetMediaClickListener != null) { tweetMediaClickListener onMediaEntityClick(tweet, entity); } else { final VideoInfo Variant variant = TweetMediaUtils getSupportedVariant(entity); if (variant != null) { final Intent intent = new Intent(getContext(), PlayerActivity class); final boolean looping = TweetMediaUtils isLooping(entity); final String url = TweetMediaUtils getSupportedVariant(entity) url; final PlayerActivity PlayerItem item = new PlayerActivity PlayerItem(url, looping); intent putExtra(PlayerActivity PLAYER_ITEM, item); IntentUtils safeStartActivity(getContext(), intent); } } } }); } private void setPhotoLauncher(final Tweet displayTweet, final MediaEntity entity) { mediaView setOnClickListener(new OnClickListener() { @Override public void onClick(View view) { if (tweetMediaClickListener != null) { tweetMediaClickListener onMediaEntityClick(tweet, entity); } else { final Intent intent = new Intent(getContext(), GalleryActivity class); intent putExtra(GalleryActivity MEDIA_ENTITY, entity); intent putExtra(GalleryActivity TWEET_ID, displayTweet id); IntentUtils safeStartActivity(getContext(), intent); } } }); } private void setVineCardLauncher(final Long tweetId, final Card vineCard) { mediaView setOnClickListener(new OnClickListener() { @Override public void onClick(View view) { final Intent intent = new Intent(getContext(), PlayerActivity class); final String playerStreamUrl = VineCardUtils getStreamUrl(vineCard); final String callToActionUrl = VineCardUtils getCallToActionUrl(vineCard); final String callToActionText = getContext() getResources() getString(R string tw__cta_text); final PlayerActivity PlayerItem playerItem = new PlayerActivity PlayerItem(playerStreamUrl, true, callToActionText, callToActionUrl); intent putExtra(PlayerActivity PLAYER_ITEM, playerItem); final ScribeItem scribeItem = ScribeItem fromTweetCard(tweetId, vineCard); intent putExtra(PlayerActivity SCRIBE_ITEM, scribeItem); IntentUtils safeStartActivity(getContext(), intent); } }); } void setMediaImage(String imagePath, double aspectRatio) { final Picasso imageLoader = dependencyProvider getImageLoader(); if (imageLoader == null) return; // Picasso fit is a deferred call to resize(w,h) which waits until the target has a // non-zero width or height and resizes the bitmap to the target's width and height  // For recycled targets, which already have a width and (stale) height, reset the size // target to zero so Picasso fit works correctly  mediaView resetSize(); mediaView setAspectRatio(aspectRatio); imageLoader load(imagePath)  placeholder(mediaBg)  fit()  centerCrop()  into(mediaView, new PicassoCallback()); } protected double getAspectRatio(MediaEntity photoEntity) { if (photoEntity == null || photoEntity sizes == null || photoEntity sizes medium == null || photoEntity sizes medium w == 0 || photoEntity sizes medium h == 0) { return DEFAULT_ASPECT_RATIO; } return (double) photoEntity sizes medium w / photoEntity sizes medium h; } protected double getAspectRatio(ImageValue imageValue) { if (imageValue == null || imageValue width == 0 || imageValue height == 0) { return DEFAULT_ASPECT_RATIO; } return (double) imageValue width / imageValue height; } @TargetApi(Build VERSION_CODES JELLY_BEAN) protected void clearMediaView() { // Clear out the background behind any potential error images that we had if (Build VERSION SDK_INT >= Build VERSION_CODES JELLY_BEAN) { mediaView setBackground(null); } else { mediaView setBackgroundDrawable(null); } mediaView setOverlayDrawable(null); mediaView setOnClickListener(null); mediaView setClickable(false); mediaView setContentDescription(getResources() getString(R string tw__tweet_media)); }  class PicassoCallback implements com squareup picasso Callback { @Override public void onSuccess() {  } @Override public void onError() { setErrorImage(); } } protected void setErrorImage() { // async load the error image and set the proper background color behind it once it's loaded // this does incur the necessity of clearing the background on each load of an image however final Picasso imageLoader = dependencyProvider getImageLoader(); if (imageLoader == null) return; imageLoader load(photoErrorResId)  into(mediaView, new com squareup picasso Callback() { @Override public void onSuccess() { mediaView setBackgroundColor(mediaBgColor); } @Override public void onError() {  } }); }  protected CharSequence getLinkifiedText(Tweet displayTweet) { final FormattedTweetText formattedText = dependencyProvider getTweetUi()  getTweetRepository() formatTweetText(displayTweet); if (formattedText == null) return null; final boolean stripPhotoEntity = TweetMediaUtils hasPhoto(displayTweet); return TweetTextLinkifier linkifyUrls(formattedText, getLinkClickListener(), stripPhotoEntity, actionColor, actionHighlightColor); } void setContentDescription(Tweet displayTweet) { if (!TweetUtils isTweetResolvable(displayTweet)) { setContentDescription(getResources() getString(R string tw__loading_tweet)); return; } final FormattedTweetText formattedTweetText = dependencyProvider getTweetUi()  getTweetRepository() formatTweetText(displayTweet); String tweetText = null; if (formattedTweetText != null) tweetText = formattedTweetText text; final long createdAt = TweetDateUtils apiTimeToLong(displayTweet createdAt); String timestamp = null; if (createdAt != TweetDateUtils INVALID_DATE) { timestamp = DateFormat getDateInstance() format(new Date(createdAt)); } setContentDescription(getResources() getString(R string tw__tweet_content_description, Utils stringOrEmpty(displayTweet user name), Utils stringOrEmpty(tweetText), Utils stringOrEmpty(timestamp))); } void setTweetActions(Tweet tweet) { tweetActionBarView setTweet(tweet); }  public void setTweetActionsEnabled(boolean enabled) { tweetActionsEnabled = enabled; if (tweetActionsEnabled) { tweetActionBarView setVisibility(View VISIBLE); bottomSeparator setVisibility(View GONE); } else { tweetActionBarView setVisibility(View GONE); bottomSeparator setVisibility(View VISIBLE); } } protected LinkClickListener getLinkClickListener() { if (linkClickListener == null) { linkClickListener = new LinkClickListener() { @Override public void onUrlClicked(String url) { if (TextUtils isEmpty(url)) return; if (tweetLinkClickListener != null) { tweetLinkClickListener onLinkClick(tweet, url); } else { final Intent intent = new Intent(Intent ACTION_VIEW, Uri parse(url)); if (!IntentUtils safeStartActivity(getContext(), intent)) { Fabric getLogger() e(TweetUi LOGTAG, "Activity cannot be found to open URL"); } } } @Override public void onPhotoClicked(MediaEntity mediaEntity) { // Does nothing } }; } return linkClickListener; } class PermalinkClickListener implements OnClickListener { @Override public void onClick(View v) { if (getPermalinkUri() == null) return; scribePermalinkClick(); launchPermalink(); } }  static class DependencyProvider { TweetScribeClient tweetScribeClient; VideoScribeClient videoScribeClient;  TweetUi getTweetUi() { return TweetUi getInstance(); } TweetScribeClient getTweetScribeClient() { if (tweetScribeClient == null) { tweetScribeClient = new TweetScribeClientImpl(getTweetUi()); } return tweetScribeClient; } VideoScribeClient getVideoScribeClient() { if (videoScribeClient == null) { videoScribeClient = new VideoScribeClientImpl(getTweetUi()); } return videoScribeClient; }  Picasso getImageLoader() { return TweetUi getInstance() getImageLoader(); } }}package com twitter sdk android core models;import java util Collections;import java util Map;public class BindingValues { private final Map<String, Object> bindingValues; public BindingValues() { this(Collections EMPTY_MAP); } public BindingValues(Map<String, Object> bindingValues) { this bindingValues = Collections unmodifiableMap(bindingValues); }  public boolean containsKey(String key) { return bindingValues containsKey(key); }  public <T> T get(String key) { try { return (T) bindingValues get(key); } catch (ClassCastException ex){ return null; } }}package com twitter sdk android core models;import com google gson JsonDeserializationContext;import com google gson JsonDeserializer;import com google gson JsonElement;import com google gson JsonObject;import com google gson JsonParseException;import com google gson JsonSerializationContext;import com google gson JsonSerializer;import java lang reflect Type;import java util HashMap;import java util Map;import java util Set;public class BindingValuesAdapter implements JsonSerializer<BindingValues>, JsonDeserializer<BindingValues> { private static final String STRING_TYPE = "STRING"; private static final String IMAGE_TYPE = "IMAGE"; private static final String USER_TYPE = "USER"; private static final String BOOLEAN_TYPE = "BOOLEAN"; private static final String TYPE_MEMBER = "type"; private static final String TYPE_VALUE_MEMBER = "string_value"; private static final String IMAGE_VALUE_MEMBER = "image_value"; private static final String USER_VALUE_MEMBER = "user_value"; private static final String BOOLEAN_MEMBER = "boolean_value"; @Override public JsonElement serialize(BindingValues src, Type typeOfSrc, JsonSerializationContext context) { return null; } @Override public BindingValues deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context) throws JsonParseException { if (!json isJsonObject()) { return new BindingValues(); } final JsonObject obj = json getAsJsonObject(); final Set<Map Entry<String, JsonElement>> members = obj entrySet(); final Map<String, Object> bindingHash = new HashMap<>(32); for (Map Entry<String, JsonElement> member : members) { final String key = member getKey(); final JsonObject memberObj = member getValue() getAsJsonObject(); final Object value = getValue(memberObj, context); bindingHash put(key, value); } return new BindingValues(bindingHash); } Object getValue(JsonObject obj, JsonDeserializationContext context) { final JsonElement typeObj = obj get(TYPE_MEMBER); if (typeObj == null || !typeObj isJsonPrimitive()) { return null; } switch (typeObj getAsString()) { case STRING_TYPE: return context deserialize(obj get(TYPE_VALUE_MEMBER), String class); case IMAGE_TYPE: return context deserialize(obj get(IMAGE_VALUE_MEMBER), ImageValue class); case USER_TYPE: return context deserialize(obj get(USER_VALUE_MEMBER), UserValue class); case BOOLEAN_TYPE: return context deserialize(obj get(BOOLEAN_MEMBER), Boolean class); default: return null; } }}package com twitter sdk android core;import retrofit2 Call;import retrofit2 Response;public abstract class Callback<T> implements retrofit2 Callback<T> { @Override public final void onResponse(Call<T> call, Response<T> response){ if (response isSuccessful()) { success(new Result<>(response body(), response)); } else { failure(new TwitterApiException(response)); } } @Override public final void onFailure(Call<T> call, Throwable t) { failure(new TwitterException("Request Failure", t)); }  public abstract void success(Result<T> result);  public abstract void failure(TwitterException exception);}package com twitter sdk android tweetcomposer;import android content Context;import android net Uri;import java io Serializable;public class Card implements Serializable { public static final String APP_CARD_TYPE = "promo_image_app"; final String cardType; final String imageUri; final String appName; final String appIPadId; final String appIPhoneId; final String appGooglePlayId; Card(String cardType, String imageUri, String appName, String appIPhoneId, String appIPadId, String appGooglePlayId) { this cardType = cardType; this imageUri = imageUri; this appName = appName; this appIPadId = appIPadId; this appIPhoneId = appIPhoneId; this appGooglePlayId = appGooglePlayId; }  public String getCardType() { return cardType; }  static boolean isAppCard(Card card) { return card != null && card getCardType() != null && card getCardType() equals(APP_CARD_TYPE); }  public static class AppCardBuilder { private String appName; private Uri imageUri; private String appIPhoneId; private String appIPadId; private String appGooglePlayId;  public AppCardBuilder(Context context) { appName = getApplicationName(context); appGooglePlayId = getPackageName(context); }  public AppCardBuilder imageUri(Uri imageUri) { this imageUri = imageUri; return this; }  public AppCardBuilder iPhoneId(String appIPhoneId) { this appIPhoneId = appIPhoneId; return this; }  public AppCardBuilder iPadId(String appIPadId) { this appIPadId = appIPadId; return this; }  public AppCardBuilder googlePlayId(String appGooglePlayId) { this appGooglePlayId = appGooglePlayId; return this; }  public Card build() { if (imageUri == null) { throw new IllegalStateException("App Card requires a non-null imageUri"); } return new Card(APP_CARD_TYPE, imageUri toString(), appName, appIPhoneId, appIPadId, appGooglePlayId); } } private static String getApplicationName(Context context) { return context getApplicationInfo() loadLabel(context getPackageManager()) toString(); } private static String getPackageName(Context context) { return context getPackageName(); }}package com twitter sdk android tweetcomposer internal;import com google gson annotations SerializedName;public class CardCreate { @SerializedName("card_uri") public final String cardUri; @SerializedName("status") public final String status; public CardCreate(String cardUri, String status) { this cardUri = cardUri; this status = status; }}package com twitter sdk android tweetcomposer internal;import com google gson Gson;import com google gson annotations SerializedName;public class CardData { private static Serializer serializer; private CardData(String card, String image, String site, String description, String cardData, String callToAction, String ctaKey, String deviceId, String appIPhoneId, String appIPadId, String appGooglePlayId, String appCountry) { this card = card; this image = image; this site = site; this description = description; this cardData = cardData; this callToAction = callToAction; this ctaKey = ctaKey; this deviceId = deviceId; this appIPhoneId = appIPhoneId; this appIPadId = appIPadId; this appGooglePlayId = appGooglePlayId; this appCountry = appCountry; } @SerializedName("twitter:card") public final String card; @SerializedName("twitter:image") public final String image; @SerializedName("twitter:site") public final String site; @SerializedName("twitter:description") public final String description; @SerializedName("twitter:card_data") public final String cardData; @SerializedName("twitter:text:cta") public final String callToAction; @SerializedName("twitter:cta_key") public final String ctaKey; @SerializedName("twitter:text:did_value") public final String deviceId; @SerializedName("twitter:app:id:iphone") public final String appIPhoneId; @SerializedName("twitter:app:id:ipad") public final String appIPadId; @SerializedName("twitter:app:id:googleplay") public final String appGooglePlayId; @SerializedName("twitter:app:country") public final String appCountry; Serializer getSerializer() { if (serializer == null) { serializer = new Serializer(); } return serializer; } @Override public String toString() { // Required bc the Cards API accepts form-urlencoded requests with nested CardData JSON // Retrofit converts @Fields to strings, without using registered Converters  // https://github com/square/retrofit/blob/master/retrofit/src/main/java/retrofit/http/Field java#L28 return getSerializer() serialize(this); } static class Serializer { private final Gson gson; Serializer() { this gson = new Gson(); } String serialize(CardData data) { return this gson toJson(data); } }  public static class Builder { private String card; private String image; private String site; private String description; private String cardData; private String callToAction; private String ctaKey; private String deviceId; private String appIPhoneId; private String appIPadId; private String appGooglePlayId; private String appCountry; public Builder card(String card) { this card = card; return this; } public Builder image(String image) { this image = image; return this; } public Builder site(String site) { this site = site; return this; } public Builder description(String description) { this description = description; return this; } public Builder cardData(String data) { this cardData = data; return this; } public Builder callToAction(String callToAction) { this callToAction = callToAction; return this; } public Builder ctaKey(String ctaKey) { this ctaKey = ctaKey; return this; } public Builder deviceId(String deviceId) { this deviceId = deviceId; return this; } public Builder appIPhoneId(String appIPhoneId) { this appIPhoneId = appIPhoneId; return this; } public Builder appIPadId(String appIPadId) { this appIPadId = appIPadId; return this; } public Builder appGooglePlayId(String appGooglePlayId) { this appGooglePlayId = appGooglePlayId; return this; } public Builder appCountry(String appCountry) { this appCountry = appCountry; return this; } public CardData build() { return new CardData(card, image, site, description, cardData, callToAction, ctaKey, deviceId, appIPhoneId, appIPadId, appGooglePlayId, appCountry); } }}package com twitter sdk android tweetcomposer;import com twitter sdk android tweetcomposer internal CardData;class CardDataFactory { static final String APP_CARD_TYPE = "promo_image_app"; static final String APP_CARD_CTA_KEY = "open"; private static final String MEDIA_SCHEME = "media://";  static CardData createAppCardData(Card card, Long mediaId, String advertisingId) { return new CardData Builder()  card(APP_CARD_TYPE)  image(getCardMedia(mediaId))  appIPhoneId(card appIPhoneId)  appIPadId(card appIPadId)  appGooglePlayId(card appGooglePlayId)  cardData("{}")  ctaKey(APP_CARD_CTA_KEY)  deviceId(advertisingId)  build(); }  static String getCardMedia(Long mediaId) { return MEDIA_SCHEME + Long toString(mediaId); }}package com twitter sdk android tweetcomposer internal;import retrofit2 Call;import retrofit2 http Field;import retrofit2 http FormUrlEncoded;import retrofit2 http POST;public interface CardService {  @FormUrlEncoded @POST("https://caps twitter com/v2/cards/create json") Call<CardCreate> create(@Field("card_data") CardData data);}package com twitter sdk android tweetcomposer;import android content Context;import android view View;class CardViewFactory {  View createCard(Context context, Card card) { if (card cardType equals(Card APP_CARD_TYPE)) { final AppCardView cardView = new AppCardView(context); cardView setCard(card); return cardView; } return null; }}package com twitter sdk android tweetui internal;import android graphics Color;import android text TextPaint;import android text style ClickableSpan;public abstract class ClickableLinkSpan extends ClickableSpan implements HighlightedClickableSpan { public final int linkColor; private final int selectedColor; private final boolean colored; private final boolean underlined; private boolean selected; public ClickableLinkSpan(int selectedColor) { this(selectedColor, 0, false, false); } public ClickableLinkSpan(int selectedColor, int linkColor, boolean underlined) { this(selectedColor, linkColor, true, underlined); } ClickableLinkSpan(int selectedColor, int linkColor, boolean colored, boolean underlined) { this selectedColor = selectedColor; this linkColor = linkColor; this colored = colored; this underlined = underlined; } @Override public void updateDrawState(TextPaint ds) { if (colored) { ds setColor(linkColor); } else { ds setColor(ds linkColor); } if (selected) { ds bgColor = selectedColor; } else { ds bgColor = Color TRANSPARENT; } if (underlined) { ds setUnderlineText(true); } } @Override public void select(boolean selected) { this selected = selected; } @Override public boolean isSelected() { return selected; }}package com twitter sdk android core services;import com twitter sdk android core internal TwitterCollection;import retrofit2 Call;import retrofit2 http GET;import retrofit2 http Query;public interface CollectionService {  @GET("/1 1/collections/entries json?" + "tweet_mode=extended&include_cards=true&cards_platform=TwitterKit-13") Call<TwitterCollection> collection(@Query("id") String id, @Query("count") Integer count, @Query("max_position") Long maxPosition, @Query("min_position") Long minPosition);}package com twitter sdk android tweetui;import com twitter sdk android core Callback;import com twitter sdk android core TwitterCore;import com twitter sdk android core internal TwitterCollection;import com twitter sdk android core Result;import com twitter sdk android core TwitterException;import com twitter sdk android core models Tweet;import com twitter sdk android core models TweetBuilder;import com twitter sdk android core models User;import java util ArrayList;import java util Collections;import java util HashMap;import java util List;import java util Map;import retrofit2 Call;public class CollectionTimeline extends BaseTimeline implements Timeline<Tweet> { static final String COLLECTION_PREFIX = "custom-"; private static final String SCRIBE_SECTION = "collection"; final String collectionIdentifier; final Integer maxItemsPerRequest; CollectionTimeline(TweetUi tweetUi, Long collectionId, Integer maxItemsPerRequest) { super(tweetUi); // prefix the collection id with the collection prefix if (collectionId == null) { this collectionIdentifier = null; } else { this collectionIdentifier = COLLECTION_PREFIX + Long toString(collectionId); } this maxItemsPerRequest = maxItemsPerRequest; }  @Override public void next(Long minPosition, Callback<TimelineResult<Tweet>> cb) { createCollectionRequest(minPosition, null) enqueue(new CollectionCallback(cb)); }  @Override public void previous(Long maxPosition, Callback<TimelineResult<Tweet>> cb) { createCollectionRequest(null, maxPosition) enqueue(new CollectionCallback(cb)); } @Override String getTimelineType() { return SCRIBE_SECTION; } Call<TwitterCollection> createCollectionRequest(final Long minPosition, final Long maxPosition) { return TwitterCore getInstance() getApiClient() getCollectionService()  collection(collectionIdentifier, maxItemsPerRequest, maxPosition, minPosition); }  class CollectionCallback extends Callback<TwitterCollection> { final Callback<TimelineResult<Tweet>> cb;  CollectionCallback(Callback<TimelineResult<Tweet>> cb) { this cb = cb; } @Override public void success(Result<TwitterCollection> result) { final TimelineCursor timelineCursor = getTimelineCursor(result data); final List<Tweet> tweets = getOrderedTweets(result data); final TimelineResult<Tweet> timelineResult; if (timelineCursor != null) { timelineResult = new TimelineResult<>(timelineCursor, tweets); } else { timelineResult = new TimelineResult<>(null, Collections <Tweet>emptyList()); } if (cb != null) { cb success(new Result(timelineResult, result response)); } } @Override public void failure(TwitterException exception) { if (cb != null) { cb failure(exception); } } } static List<Tweet> getOrderedTweets(TwitterCollection collection) { if (collection == null || collection contents == null || collection contents tweetMap == null || collection contents userMap == null || collection metadata == null || collection metadata timelineItems == null || collection metadata position == null) { return Collections emptyList(); } final List<Tweet> tweets = new ArrayList<>(); final Map<Long, Tweet> tweetMap = new HashMap<>(); for (Tweet trimmedTweet: collection contents tweetMap values()) { // read user id from the trimmed Tweet final Long userId = trimmedTweet user id; // lookup User in the collection response's UserMap final User user = collection contents userMap get(userId); // build the Tweet with the hydrated User final Tweet tweet = new TweetBuilder() copy(trimmedTweet) setUser(user) build(); tweetMap put(tweet id, tweet); } for (TwitterCollection TimelineItem item: collection metadata timelineItems) { final Tweet tweet = tweetMap get(item tweetItem id); tweets add(tweet); } return tweets; } static TimelineCursor getTimelineCursor(TwitterCollection twitterCollection) { if (twitterCollection == null || twitterCollection metadata == null || twitterCollection metadata position == null) { return null; } final Long minPosition = twitterCollection metadata position minPosition; final Long maxPosition = twitterCollection metadata position maxPosition; return new TimelineCursor(minPosition, maxPosition); }  public static class Builder { private final TweetUi tweetUi; private Long collectionId; private Integer maxItemsPerRequest = 30;  public Builder() { this(TweetUi getInstance()); }  public Builder(TweetUi tweetUi) { if (tweetUi == null) { throw new IllegalArgumentException("TweetUi instance must not be null"); } this tweetUi = tweetUi; }  public Builder id(Long collectionId) { this collectionId = collectionId; return this; }  public Builder maxItemsPerRequest(Integer maxItemsPerRequest) { this maxItemsPerRequest = maxItemsPerRequest; return this; }  public CollectionTimeline build() { if (collectionId == null) { throw new IllegalStateException("collection id must not be null"); } return new CollectionTimeline(tweetUi, collectionId, maxItemsPerRequest); } }}package com twitter sdk android tweetui;import android graphics Color;final class ColorUtils { private ColorUtils() {}  static int calculateOpacityTransform(final double opacity, final int overlayColor, final int primaryColor) { final int redPrimary = Color red(primaryColor); final int redOverlay = Color red(overlayColor); final int greenPrimary = Color green(primaryColor); final int greenOverlay = Color green(overlayColor); final int bluePrimary = Color blue(primaryColor); final int blueOverlay = Color blue(overlayColor); final int redCalculated = (int) ((1 - opacity) * redPrimary + opacity * redOverlay); final int greenCalculated = (int) ((1 - opacity) * greenPrimary + opacity * greenOverlay); final int blueCalculated = (int) ((1 - opacity) * bluePrimary + opacity * blueOverlay); return Color rgb(redCalculated, greenCalculated, blueCalculated); }  static boolean isLightColor(final int color) { final int r = Color red(color); final int g = Color green(color); final int b = Color blue(color); final double threshold = 0 21 * r + 0 72 * g + 0 07 * b; return threshold > 128; }}package com twitter sdk android mopub;import android graphics Color;import org junit Test;import org junit runner RunWith;import org robolectric RobolectricGradleTestRunner;import org robolectric annotation Config;import static org junit Assert assertEquals;import static org junit Assert assertFalse;import static org junit Assert assertTrue;@RunWith(RobolectricGradleTestRunner class)@Config(constants = BuildConfig class, sdk = 21)public class ColorUtilsTest { @Test public void testIsLightColor_black() { assertFalse(ColorUtils isLightColor(Color BLACK)); } @Test public void testIsLightColor_white() { assertTrue(ColorUtils isLightColor(Color WHITE)); } @Test public void testDefaultCtaButtonIsDarkColor() { assertFalse(ColorUtils isLightColor(R color tw__ad_cta_default)); } @Test public void testCtaTextColorIsLightForDarkBgColor() { assertEquals(Color WHITE, ColorUtils calculateCtaTextColor(R color tw__ad_cta_default)); assertEquals(Color WHITE, ColorUtils calculateCtaTextColor(Color BLACK)); assertEquals(Color WHITE, ColorUtils calculateCtaTextColor(Color DKGRAY)); } @Test public void testCtaTextColorIsDarkForLightBgColor() { assertTrue(Color WHITE != ColorUtils calculateCtaTextColor(Color WHITE)); assertTrue(Color WHITE != ColorUtils calculateCtaTextColor(Color LTGRAY)); } @Test public void testCTAOnTapColorIsLighterForDarkBgColor() { final int darkColor = Color BLACK; final int originalRed = Color red(darkColor); final int originalGreen = Color green(darkColor); final int originalBlue = Color blue(darkColor); final int lighterColor = ColorUtils calculateCtaOnTapColor(darkColor); final int lighterRed = Color red(lighterColor); final int lighterGreen = Color green(lighterColor); final int lighterBlue = Color blue(lighterColor); assertTrue(lighterRed > originalRed && lighterGreen > originalGreen && lighterBlue > originalBlue); } @Test public void testCTAOnTapColorIsDarkerForLightBgColor() { final int lightColor = Color WHITE; final int originalRed = Color red(lightColor); final int originalGreen = Color green(lightColor); final int originalBlue = Color blue(lightColor); final int darkerColor = ColorUtils calculateCtaOnTapColor(lightColor); final int darkerRed = Color red(darkerColor); final int darkerGreen = Color green(darkerColor); final int darkerBlue = Color blue(darkerColor); assertTrue(originalRed > darkerRed && originalGreen > darkerGreen && originalBlue > darkerBlue); } @Test public void testContrastColorForDarkColor() { final int darkColor = Color BLACK; final int contrastingLightColor = ColorUtils calculateContrastingColor(darkColor); assertTrue(ColorUtils isLightColor(contrastingLightColor)); } @Test public void testContrastColorForLightColor() { final int lightColor = Color WHITE; final int contrastingDarkColor = ColorUtils calculateContrastingColor(lightColor); assertFalse(ColorUtils isLightColor(contrastingDarkColor)); }}package com twitter sdk android tweetui;import android content Context;import android util AttributeSet;import com twitter sdk android core models MediaEntity;import com twitter sdk android core models Tweet;public class CompactTweetView extends BaseTweetView { private static final String VIEW_TYPE_NAME = "compact"; private static final double SQUARE_ASPECT_RATIO = 1 0; private static final double MAX_LANDSCAPE_ASPECT_RATIO = 3 0; private static final double MIN_LANDSCAPE_ASPECT_RATIO = 4 0 / 3 0; public CompactTweetView(Context context, Tweet tweet) { super(context, tweet); } public CompactTweetView(Context context, Tweet tweet, int styleResId) { super(context, tweet, styleResId); } CompactTweetView(Context context, Tweet tweet, int styleResId, DependencyProvider dependencyProvider) { super(context, tweet, styleResId, dependencyProvider); } public CompactTweetView(Context context, AttributeSet attrs) { super(context, attrs); } public CompactTweetView(Context context, AttributeSet attrs, int defStyle) { super(context, attrs, defStyle); } @Override protected int getLayout() { return R layout tw__tweet_compact; } @Override void render() { super render(); // Redraw screen name on recycle screenNameView requestLayout(); }  @Override protected double getAspectRatio(MediaEntity photoEntity) { final double ratio = super getAspectRatio(photoEntity); if (ratio <= SQUARE_ASPECT_RATIO) { // portrait (tall) photos should be cropped to be square aspect ratio return SQUARE_ASPECT_RATIO; } else if (ratio > MAX_LANDSCAPE_ASPECT_RATIO) { // the widest landscape photos allowed are 3:1 return MAX_LANDSCAPE_ASPECT_RATIO; } else if (ratio < MIN_LANDSCAPE_ASPECT_RATIO) { // the tallest landscape photos allowed are 4:3 return MIN_LANDSCAPE_ASPECT_RATIO; } else { // landscape photos between 3:1 to 4:3 present the original width to height ratio return ratio; } } @Override String getViewTypeName() { return VIEW_TYPE_NAME; }}package com twitter sdk android tweetcomposer;import android app Activity;import android content Context;import android content Intent;import android os Bundle;import com twitter Regex;import com twitter sdk android core TwitterAuthToken;import com twitter sdk android core TwitterSession;public class ComposerActivity extends Activity { static final String EXTRA_USER_TOKEN = "EXTRA_USER_TOKEN"; static final String EXTRA_CARD = "EXTRA_CARD"; static final String EXTRA_THEME = "EXTRA_THEME"; static final String EXTRA_HASHTAGS = "EXTRA_HASHTAGS"; private static final int PLACEHOLDER_ID = -1; private static final String PLACEHOLDER_SCREEN_NAME = ""; @Override protected void onCreate(Bundle savedInstanceState) { super onCreate(savedInstanceState); final Intent intent = getIntent(); final TwitterAuthToken token = intent getParcelableExtra(EXTRA_USER_TOKEN); final TwitterSession session = new TwitterSession(token, PLACEHOLDER_ID, PLACEHOLDER_SCREEN_NAME); final Card card = (Card) intent getSerializableExtra(EXTRA_CARD); final String hashtags = intent getStringExtra(EXTRA_HASHTAGS); final int themeResId = intent getIntExtra(EXTRA_THEME, R style ComposerLight); setTheme(themeResId); setContentView(R layout tw__activity_composer); final ComposerView composerView = (ComposerView) findViewById(R id tw__composer_view); new ComposerController(composerView, session, card, hashtags, new FinisherImpl()); } interface Finisher { void finish(); } // FinisherImpl allows sub-components to finish the host Activity  class FinisherImpl implements Finisher { @Override public void finish() { ComposerActivity this finish(); } } public static class Builder { private final Context context; private TwitterAuthToken token; private int themeResId = R style ComposerLight; private Card card; private String hashtags; public Builder(Context context) { if (context == null) { throw new IllegalArgumentException("Context must not be null"); } this context = context; } public Builder session(TwitterSession session) { if (session == null) { throw new IllegalArgumentException("TwitterSession must not be null"); } final TwitterAuthToken token = session getAuthToken(); if (token == null) { throw new IllegalArgumentException("TwitterSession token must not be null"); } // session passed via the parcelable auth token this token = token; return this; } public Builder card(Card card) { this card = card; return this; } public Builder hashtags(String    hashtags) { if (hashtags == null) return this; final StringBuilder sb = new StringBuilder(); for (String hashtag : hashtags) { final boolean isValid = Regex VALID_HASHTAG matcher(hashtag) find(); if (isValid) { sb append(" ") append(hashtag); } } this hashtags = sb length() == 0 ? null : sb toString(); return this; } public Builder darkTheme() { themeResId = R style ComposerDark; return this; } public Intent createIntent() { if (token == null) { throw new IllegalStateException("Must set a TwitterSession"); } final Intent intent = new Intent(context, ComposerActivity class); intent putExtra(EXTRA_USER_TOKEN, token); intent putExtra(EXTRA_CARD, card); intent putExtra(EXTRA_THEME, themeResId); intent putExtra(EXTRA_HASHTAGS, hashtags); return intent; } }}package com twitter sdk android tweetcomposer;import com twitter sdk android core TwitterApiClient;import com twitter sdk android core TwitterSession;import com twitter sdk android tweetcomposer internal CardService;class ComposerApiClient extends TwitterApiClient { ComposerApiClient(TwitterSession session) { super(session); }  StatusesService getComposerStatusesService() { return getService(StatusesService class); }  CardService getCardService() { return getService(CardService class); }}package com twitter sdk android tweetcomposer;import android content Intent;import android text TextUtils;import android view View;import com twitter Validator;import com twitter sdk android core Callback;import com twitter sdk android core Result;import com twitter sdk android core TwitterApiClient;import com twitter sdk android core TwitterCore;import com twitter sdk android core TwitterException;import com twitter sdk android core TwitterSession;import com twitter sdk android core internal TwitterApiConstants;import com twitter sdk android core models User;class ComposerController { final ComposerView composerView; final TwitterSession session; final Card card; final ComposerActivity Finisher finisher; final DependencyProvider dependencyProvider; ComposerController(final ComposerView composerView, TwitterSession session, Card card, String hashtags, ComposerActivity Finisher finisher) { this(composerView, session, card, hashtags, finisher, new DependencyProvider()); } // testing purposes ComposerController(final ComposerView composerView, TwitterSession session, Card card, String hashtags, ComposerActivity Finisher finisher, DependencyProvider dependencyProvider) { this composerView = composerView; this session = session; this card = card; this finisher = finisher; this dependencyProvider = dependencyProvider; composerView setCallbacks(new ComposerCallbacksImpl()); composerView setTweetText(hashtags); setProfilePhoto(); setCardView(card); dependencyProvider getScribeClient() impression(card); } void setProfilePhoto() { dependencyProvider getApiClient(session) getAccountService() verifyCredentials(false, true)  enqueue(new Callback<User>() { @Override public void success(Result<User> result) { composerView setProfilePhotoView(result data); } @Override public void failure(TwitterException exception) { // show placeholder background color composerView setProfilePhotoView(null); } }); } void setCardView(Card card) { if (card != null) { final CardViewFactory cardViewFactory = dependencyProvider getCardViewFactory(); final View view = cardViewFactory createCard(composerView getContext(), card); composerView setCardView(view); } } public interface ComposerCallbacks { void onTextChanged(String text); void onTweetPost(String text); void onCloseClick(); } class ComposerCallbacksImpl implements ComposerCallbacks { @Override public void onTextChanged(String text) { final int charCount = tweetTextLength(text); composerView setCharCount(remainingCharCount(charCount)); // character count overflow red color if (isTweetTextOverflow(charCount)) { composerView setCharCountTextStyle(R style tw__ComposerCharCountOverflow); } else { composerView setCharCountTextStyle(R style tw__ComposerCharCount); } // Tweet post button enable/disable composerView postTweetEnabled(isPostEnabled(charCount)); } @Override public void onTweetPost(String text) { dependencyProvider getScribeClient() click(card, ScribeConstants SCRIBE_TWEET_ELEMENT); final Intent intent = new Intent(composerView getContext(), TweetUploadService class); intent putExtra(TweetUploadService EXTRA_USER_TOKEN, session getAuthToken()); intent putExtra(TweetUploadService EXTRA_TWEET_TEXT, text); intent putExtra(TweetUploadService EXTRA_TWEET_CARD, card); composerView getContext() startService(intent); finisher finish(); } @Override public void onCloseClick() { dependencyProvider getScribeClient() click(card, ScribeConstants SCRIBE_CANCEL_ELEMENT); finisher finish(); } } int tweetTextLength(String text) { if (TextUtils isEmpty(text)) { return 0; } return dependencyProvider getTweetValidator() getTweetLength(text); } static int remainingCharCount(int charCount) { return TwitterApiConstants MAX_TWEET_CHARS - charCount; }  static boolean isPostEnabled(int charCount) { return charCount > 0 && charCount <= TwitterApiConstants MAX_TWEET_CHARS; }  static boolean isTweetTextOverflow(int charCount) { return charCount > TwitterApiConstants MAX_TWEET_CHARS; }  static class DependencyProvider { final CardViewFactory cardViewFactory = new CardViewFactory(); final Validator tweetValidator = new Validator(); TwitterApiClient getApiClient(TwitterSession session) { return TwitterCore getInstance() getApiClient(session); } CardViewFactory getCardViewFactory() { return cardViewFactory; } Validator getTweetValidator() { return tweetValidator; } ComposerScribeClient getScribeClient() { return new ComposerScribeClientImpl(TweetComposer getInstance() getScribeClient()); } }}package com twitter sdk android tweetcomposer;interface ComposerScribeClient {  void impression(Card card);  void click(Card card, String element);}package com twitter sdk android tweetcomposer;import com twitter sdk android core internal scribe EventNamespace;import com twitter sdk android core internal scribe ScribeItem;import java util ArrayList;import java util List;class ComposerScribeClientImpl implements ComposerScribeClient { private final ScribeClient scribeClient; ComposerScribeClientImpl(ScribeClient scribeClient) { if (scribeClient == null) { throw new NullPointerException("scribeClient must not be null"); } this scribeClient = scribeClient; } @Override public void impression(Card card) { final EventNamespace ns = ScribeConstants ComposerEventBuilder  setComponent(ScribeConstants SCRIBE_COMPONENT)  setElement(ScribeConstants SCRIBE_IMPRESSION_ELEMENT)  setAction(ScribeConstants SCRIBE_IMPRESSION_ACTION)  builder(); final List<ScribeItem> items = new ArrayList<>(); items add(ScribeConstants newCardScribeItem(card)); scribeClient scribe(ns, items); } @Override public void click(Card card, String element) { final EventNamespace ns = ScribeConstants ComposerEventBuilder  setComponent(ScribeConstants SCRIBE_COMPONENT)  setElement(element)  setAction(ScribeConstants SCRIBE_CLICK_ACTION)  builder(); final List<ScribeItem> items = new ArrayList<>(); items add(ScribeConstants newCardScribeItem(card)); scribeClient scribe(ns, items); }}package com twitter sdk android tweetcomposer;import android content Context;import android graphics drawable ColorDrawable;import android text Editable;import android text TextWatcher;import android util AttributeSet;import android view KeyEvent;import android view View;import android view ViewGroup;import android widget Button;import android widget EditText;import android widget ImageView;import android widget LinearLayout;import android widget TextView;import com squareup picasso Picasso;import com twitter sdk android core internal UserUtils;import com twitter sdk android core internal util ObservableScrollView;import com twitter sdk android core models User;import java util Locale;public class ComposerView extends LinearLayout { ImageView avatarView; ImageView closeView; EditText tweetEditView; TextView charCountView; Button tweetButton; ObservableScrollView scrollView; View divider; // styled drawables for images ColorDrawable mediaBg; // callbacks ViewGroup cardView; ComposerController ComposerCallbacks callbacks; private Picasso imageLoader; public ComposerView(Context context) { this(context, null); } public ComposerView(Context context, AttributeSet attrs) { super(context, attrs); init(context); } public ComposerView(Context context, AttributeSet attrs, int defStyle) { super(context, attrs, defStyle); init(context); } private void init(Context context) { imageLoader = Picasso with(getContext()); // TODO: make color vary depending on the style mediaBg = new ColorDrawable(context getResources()  getColor(R color tw__composer_light_gray)); inflate(context, R layout tw__composer_view, this); } @Override protected void onFinishInflate() { super onFinishInflate(); findSubviews(); closeView setOnClickListener(new OnClickListener() { @Override public void onClick(View view) { callbacks onCloseClick(); } }); tweetButton setOnClickListener(new OnClickListener() { @Override public void onClick(View view) { callbacks onTweetPost(getTweetText()); } }); tweetEditView setOnEditorActionListener(new TextView OnEditorActionListener() { @Override public boolean onEditorAction(TextView textView, int i, KeyEvent keyEvent) { callbacks onTweetPost(getTweetText()); return true; } }); tweetEditView addTextChangedListener(new TextWatcher() { @Override public void beforeTextChanged(CharSequence charSequence, int i, int i1, int i2) { } @Override public void onTextChanged(CharSequence charSequence, int i, int i1, int i2) { } @Override public void afterTextChanged(Editable editable) { callbacks onTextChanged(getTweetText()); } }); scrollView setScrollViewListener(new ObservableScrollView ScrollViewListener() { @Override public void onScrollChanged(int scrollY) { if (scrollY > 0) { divider setVisibility(View VISIBLE); } else { divider setVisibility(View INVISIBLE); } } }); } void findSubviews() { avatarView = (ImageView) findViewById(R id tw__author_avatar); closeView = (ImageView) findViewById(R id tw__composer_close); tweetEditView = (EditText) findViewById(R id tw__edit_tweet); charCountView = (TextView) findViewById(R id tw__char_count); tweetButton = (Button) findViewById(R id tw__post_tweet); scrollView = (ObservableScrollView) findViewById(R id tw__composer_scroll_view); divider = findViewById(R id tw__composer_profile_divider); cardView = (ViewGroup) findViewById(R id tw__card_view); } void setCallbacks(ComposerController ComposerCallbacks callbacks) { this callbacks = callbacks; }  void setProfilePhotoView(User user) { final String url = UserUtils getProfileImageUrlHttps(user, UserUtils AvatarSize REASONABLY_SMALL); if (imageLoader != null) { // Passing null url will not trigger any request, but will set the placeholder bg imageLoader load(url) placeholder(mediaBg) into(avatarView); } } String getTweetText() { return tweetEditView getText() toString(); } void setTweetText(String text) { tweetEditView setText(text); } void setCharCount(int remainingCount) { charCountView setText(String format(Locale getDefault(), "%d", remainingCount)); } void setCharCountTextStyle(int textStyleResId) { charCountView setTextAppearance(getContext(), textStyleResId); } void postTweetEnabled(boolean enabled) { tweetButton setEnabled(enabled); } void setCardView(View card) { cardView addView(card); cardView setVisibility(View VISIBLE); }}package com twitter sdk android core models;import com google gson annotations SerializedName;import java util List;public class Configuration {  @SerializedName("dm_text_character_limit") public final int dmTextCharacterLimit;  @SerializedName("non_username_paths") public final List<String> nonUsernamePaths;  @SerializedName("photo_size_limit") public final long photoSizeLimit;  @SerializedName("photo_sizes") public final MediaEntity Sizes photoSizes;  @SerializedName("short_url_length_https") public final int shortUrlLengthHttps; public Configuration(int dmTextCharacterLimit, List<String> nonUsernamePaths, long photoSizeLimit, MediaEntity Sizes photoSizes, int shortUrlLengthHttps) { this dmTextCharacterLimit = dmTextCharacterLimit; this nonUsernamePaths = nonUsernamePaths; this photoSizeLimit = photoSizeLimit; this photoSizes = photoSizes; this shortUrlLengthHttps = shortUrlLengthHttps; }}package com twitter sdk android core services;import com twitter sdk android core models Configuration;import retrofit2 Call;import retrofit2 http GET;public interface ConfigurationService {  @GET("/1 1/help/configuration json") Call<Configuration> configuration();}package com twitter sdk android core models;import com google gson annotations SerializedName;import java util ArrayList;import java util List;public class Coordinates { public static final int INDEX_LONGITUDE = 0; public static final int INDEX_LATITUDE = 1;  @SerializedName("coordinates") public final List<Double> coordinates;  @SerializedName("type") public final String type; public Coordinates(Double longitude, Double latitude, String type) { final List<Double> coords = new ArrayList<>(2); coords add(INDEX_LONGITUDE, longitude); coords add(INDEX_LATITUDE, latitude); this coordinates = coords; this type = type; } public Double getLongitude() { return coordinates get(INDEX_LONGITUDE); } public Double getLatitude() { return coordinates get(INDEX_LATITUDE); }}package com twitter sdk android core internal scribe;import android os Build;import android text TextUtils;import com google gson FieldNamingPolicy;import com google gson Gson;import com google gson GsonBuilder;import com twitter sdk android core BuildConfig;import com twitter sdk android core GuestSession;import com twitter sdk android core GuestSessionProvider;import com twitter sdk android core Session;import com twitter sdk android core SessionManager;import com twitter sdk android core TwitterAuthToken;import com twitter sdk android core TwitterCore;import java util Collections;import java util List;import java util concurrent ScheduledExecutorService;import io fabric sdk android Kit;import io fabric sdk android services common ExecutorUtils;import io fabric sdk android services common IdManager;import io fabric sdk android services settings Settings;import io fabric sdk android services settings SettingsData;public class DefaultScribeClient extends ScribeClient {  private static final String SCRIBE_URL = "https://syndication twitter com"; private static final String SCRIBE_PATH_VERSION = "i"; private static final String SCRIBE_PATH_TYPE = "sdk"; private static final String DEBUG_BUILD = "debug"; private static volatile ScheduledExecutorService executor; private final Kit kit; private final SessionManager<? extends Session<TwitterAuthToken>> sessionManager; private final String advertisingId; public DefaultScribeClient(Kit kit, String kitName, SessionManager<? extends Session<TwitterAuthToken>> sessionManager, GuestSessionProvider guestSessionProvider, IdManager idManager) { this(kit, kitName, getGson(), sessionManager, guestSessionProvider, idManager); } DefaultScribeClient(Kit kit, String kitName, Gson gson, SessionManager<? extends Session<TwitterAuthToken>> sessionManager, GuestSessionProvider guestSessionProvider, IdManager idManager) { super(kit, getExecutor(), getScribeConfig(Settings getInstance() awaitSettingsData(), getUserAgent(kitName, kit)), new ScribeEvent Transform(gson), TwitterCore getInstance() getAuthConfig(), sessionManager, guestSessionProvider, TwitterCore getInstance() getSSLSocketFactory(), idManager); this sessionManager = sessionManager; this kit = kit; this advertisingId = idManager getAdvertisingId(); } public void scribe(EventNamespace    namespaces) { for (EventNamespace ns : namespaces) { scribe(ns, Collections <ScribeItem>emptyList()); } } public void scribe(EventNamespace namespace, List<ScribeItem> items) { final String language = getLanguageFromKit(); final long timestamp = System currentTimeMillis();  scribe(ScribeEventFactory newScribeEvent(namespace, "", timestamp, language, advertisingId, items)); } public void scribe(ScribeEvent event) { super scribe(event, getScribeSessionId(getActiveSession())); } public void scribe(EventNamespace namespace, String eventInfo) { final String language = getLanguageFromKit(); final long timestamp = System currentTimeMillis();  scribe(ScribeEventFactory newScribeEvent(namespace, eventInfo, timestamp, language, advertisingId, Collections <ScribeItem>emptyList())); } // visible for tests Session getActiveSession() { return sessionManager getActiveSession(); } // visible for tests long getScribeSessionId(Session activeSession) { final long scribeSessionId; if (activeSession != null) { scribeSessionId = activeSession getId(); } else { // It's possible that we're attempting to load a tweet before we have a valid // session  Store the scribe event locally with the logged out user id so that we can // send it up at a later time with the logged out session  scribeSessionId = GuestSession LOGGED_OUT_USER_ID; } return scribeSessionId; } private String getLanguageFromKit(){ final String language; if (kit getContext() != null) { language = kit getContext() getResources() getConfiguration() locale getLanguage(); } else { language = ""; } return language; } private static Gson getGson() { return new GsonBuilder()  setFieldNamingPolicy(FieldNamingPolicy LOWER_CASE_WITH_UNDERSCORES)  create(); } private static ScheduledExecutorService getExecutor() { if (executor == null) { synchronized (DefaultScribeClient class) { if (executor == null) { executor = ExecutorUtils buildSingleThreadScheduledExecutorService("scribe"); } } } return executor; } static ScribeConfig getScribeConfig(SettingsData settingsData, String userAgent) { // Get scribe configuration using analytics settings, which is used by crashlytics for // configuring Answers  This is temporary until we have can get our scribe settings from the // backend  If analytics settings are not available, fallback to defaults  final int maxFilesToKeep; final int sendIntervalSeconds; if (settingsData != null && settingsData analyticsSettingsData != null) { maxFilesToKeep = settingsData analyticsSettingsData maxPendingSendFileCount; sendIntervalSeconds = settingsData analyticsSettingsData flushIntervalSeconds; } else { maxFilesToKeep = ScribeConfig DEFAULT_MAX_FILES_TO_KEEP; sendIntervalSeconds = ScribeConfig DEFAULT_SEND_INTERVAL_SECONDS; } final String scribeUrl = getScribeUrl(SCRIBE_URL, BuildConfig SCRIBE_ENDPOINT_OVERRIDE); return new ScribeConfig(isEnabled(), scribeUrl, SCRIBE_PATH_VERSION, SCRIBE_PATH_TYPE, BuildConfig SCRIBE_SEQUENCE, userAgent, maxFilesToKeep, sendIntervalSeconds); }  private static boolean isEnabled() { return !BuildConfig BUILD_TYPE equals(DEBUG_BUILD); } static String getUserAgent(String kitName, Kit kit) { return new StringBuilder()  append("Fabric/")  append(kit getFabric() getVersion())  append(" (Android ")  append(Build VERSION SDK_INT)  append(") ")  append(kitName)  append("/")  append(kit getVersion())  toString(); } // visible for tests static String getScribeUrl(String defaultUrl, String overrideUrl) { if (!TextUtils isEmpty(overrideUrl)) { return overrideUrl; } else { return defaultUrl; } }}package com twitter sdk android core internal scribe;import android os Build;import io fabric sdk android Fabric;import io fabric sdk android FabricAndroidTestCase;import io fabric sdk android FabricTestUtils;import io fabric sdk android Kit;import io fabric sdk android services common IdManager;import io fabric sdk android services settings AnalyticsSettingsData;import io fabric sdk android services settings Settings;import io fabric sdk android services settings SettingsData;import io fabric sdk android services settings TestSettingsController;import com twitter sdk android core BuildConfig;import com twitter sdk android core GuestSessionProvider;import com twitter sdk android core Session;import com twitter sdk android core SessionManager;import com twitter sdk android core TwitterAuthConfig;import com twitter sdk android core TwitterCore;import com twitter sdk android core TwitterSession;import java util Locale;import static org mockito Mockito mock;import static org mockito Mockito when;public class DefaultScribeClientTest extends FabricAndroidTestCase { private static final int TEST_SEND_INTERVAL_SECONDS = 6000000 * 60; // 6 million minutes private static final int TEST_MAX_FILES_TO_KEEP = 100000; private static final String TEST_USER_AGENT = "user-agent"; private static final String TEST_DEFAULT_SCRIBE_URL = "https://syndication twitter com"; private static final String TEST_OVERRIDE_SCRIBE_URL = "http://api twitter com"; private static final String TEST_SCRIBE_USER_AGENT_FORMAT = "Fabric/%s (Android %s) ExampleKit/%s"; private static final String TEST_SCRIBE_KIT_NAME = "ExampleKit"; private static final String TEST_KIT_VERSION = "1000"; private static final String ANY_KIT_IDENTIFIER = ":)"; private static final String REQUIRED_SCRIBE_URL_COMPONENT = "https://syndication twitter com"; private static final long REQUIRED_LOGGED_OUT_USER_ID = 0L; private static final long TEST_ACTIVE_SESSION_ID = 1L; private static final String DEBUG_BUILD_TYPE = "debug"; private ExampleKit testKit; private DefaultScribeClient scribeClient; private SessionManager<TwitterSession> mockTwitterSessionManager; private GuestSessionProvider mockGuestSessionProvider; @Override public void setUp() throws Exception { super setUp(); FabricTestUtils resetFabric(); Settings getInstance() setSettingsController(new TestSettingsController()); Fabric with(getContext(), new TwitterCore(new TwitterAuthConfig("", "")), new ExampleKit()); testKit = Fabric getKit(ExampleKit class); mockTwitterSessionManager = mock(SessionManager class); mockGuestSessionProvider = mock(GuestSessionProvider class); scribeClient = new DefaultScribeClient(testKit, TEST_SCRIBE_KIT_NAME, mockTwitterSessionManager, mockGuestSessionProvider, mock(IdManager class)); } @Override protected void tearDown() throws Exception { super tearDown(); FabricTestUtils resetFabric(); } private class ExampleKit extends Kit { @Override public String getIdentifier() { return ANY_KIT_IDENTIFIER; } @Override public String getVersion() { return TEST_KIT_VERSION; } @Override protected Object doInBackground() { return null; } } public void testGetScribeConfig_settingsDataNull() { final ScribeConfig scribeConfig = DefaultScribeClient getScribeConfig(null, TEST_USER_AGENT); assertScribeConfig(TEST_USER_AGENT, ScribeConfig DEFAULT_MAX_FILES_TO_KEEP, ScribeConfig DEFAULT_SEND_INTERVAL_SECONDS, scribeConfig); } public void testGetScribeConfig_settingsDataAnalyticsSettingsDataNull() { final SettingsData settingsData = new SettingsData(0L, null, null, null, null, null, null, 0, 0); final ScribeConfig scribeConfig = DefaultScribeClient getScribeConfig(settingsData, TEST_USER_AGENT); assertScribeConfig(TEST_USER_AGENT, ScribeConfig DEFAULT_MAX_FILES_TO_KEEP, ScribeConfig DEFAULT_SEND_INTERVAL_SECONDS, scribeConfig); } public void testGetScribeConfig_settingsDataValid() { final AnalyticsSettingsData analyticsSettingsData = new AnalyticsSettingsData(null, TEST_SEND_INTERVAL_SECONDS, 0, 0, TEST_MAX_FILES_TO_KEEP, true); final SettingsData settingsData = new SettingsData(0L, null, null, null, null, analyticsSettingsData, null, 0, 0); final ScribeConfig scribeConfig = DefaultScribeClient getScribeConfig(settingsData, TEST_USER_AGENT); assertScribeConfig(TEST_USER_AGENT, TEST_MAX_FILES_TO_KEEP, TEST_SEND_INTERVAL_SECONDS, scribeConfig); } public void testGetScribeUrl_nullOverride() { final String scribeUrl = DefaultScribeClient getScribeUrl(TEST_DEFAULT_SCRIBE_URL, null); assertEquals(TEST_DEFAULT_SCRIBE_URL, scribeUrl); } public void testGetScribeUrl_emptyOverride() { final String scribeUrl = DefaultScribeClient getScribeUrl(TEST_DEFAULT_SCRIBE_URL, ""); assertEquals(TEST_DEFAULT_SCRIBE_URL, scribeUrl); } public void testGetScribeUrl_override() { final String scribeUrl = DefaultScribeClient getScribeUrl(TEST_DEFAULT_SCRIBE_URL, TEST_OVERRIDE_SCRIBE_URL); assertEquals(TEST_OVERRIDE_SCRIBE_URL, scribeUrl); } private void assertScribeConfig(String expectedUserAgent, int expectedMaxFilesToKeep, int expectedSendIntervalSeconds, ScribeConfig scribeConfig) { assertEquals(!BuildConfig BUILD_TYPE equals(DEBUG_BUILD_TYPE), scribeConfig isEnabled); assertEquals(REQUIRED_SCRIBE_URL_COMPONENT, scribeConfig baseUrl); assertEquals(BuildConfig SCRIBE_SEQUENCE, scribeConfig sequence); assertEquals(expectedUserAgent, scribeConfig userAgent); assertEquals(expectedMaxFilesToKeep, scribeConfig maxFilesToKeep); assertEquals(expectedSendIntervalSeconds, scribeConfig sendIntervalSeconds); } public void testGetScribeUserAgent() { Fabric with(getContext(), new ExampleKit()); final Kit kit = Fabric getKit(ExampleKit class); final String userAgent = String format(Locale ENGLISH, TEST_SCRIBE_USER_AGENT_FORMAT, kit getFabric() getVersion(), Build VERSION SDK_INT, kit getVersion()); assertEquals(userAgent, DefaultScribeClient getUserAgent(TEST_SCRIBE_KIT_NAME, kit)); } public void testGetActiveSession_activeSessionDoesNotExist() { assertNull(scribeClient getActiveSession()); } public void testGetActiveSession_activeSessionFirstManager() { final TwitterSession mockSession = mock(TwitterSession class); when(mockTwitterSessionManager getActiveSession()) thenReturn(mockSession); assertSame(mockSession, scribeClient getActiveSession()); } public void testGetScribeSessionId_nullSession() { assertEquals(REQUIRED_LOGGED_OUT_USER_ID, scribeClient getScribeSessionId(null)); } public void testGetScribeSessionId_activeSession() { final DefaultScribeClient scribeClient = new DefaultScribeClient(testKit, TEST_SCRIBE_KIT_NAME, mockTwitterSessionManager, mockGuestSessionProvider, mock(IdManager class)); final Session mockSession = mock(Session class); when(mockSession getId()) thenReturn(TEST_ACTIVE_SESSION_ID); assertEquals(TEST_ACTIVE_SESSION_ID, scribeClient getScribeSessionId(mockSession)); }}package com twitter sdk android core internal scribe;import android content Context;import io fabric sdk android services events EnabledEventsStrategy;import io fabric sdk android services events FilesSender;import java util concurrent ScheduledExecutorService;class EnabledScribeStrategy extends EnabledEventsStrategy<ScribeEvent> { private final FilesSender filesSender; public EnabledScribeStrategy(Context context, ScheduledExecutorService executorService, ScribeFilesManager filesManager, ScribeConfig config, ScribeFilesSender filesSender) { super(context, executorService, filesManager); this filesSender = filesSender; configureRollover(config sendIntervalSeconds); } @Override public FilesSender getFilesSender() { return filesSender; }}package com twitter sdk android core models;import com google gson annotations SerializedName;import java io Serializable;import java util ArrayList;import java util Collections;import java util List;class Entity implements Serializable { private static final int START_INDEX = 0; private static final int END_INDEX = 1;  @SerializedName("indices") public final List<Integer> indices; public Entity(int start, int end) { final List<Integer> temp = new ArrayList<>(2); temp add(START_INDEX, start); temp add(END_INDEX, end); indices = Collections unmodifiableList(temp); } public int getStart() { return indices get(START_INDEX); } public int getEnd() { return indices get(END_INDEX); }}package com twitter sdk android core internal scribe;import com google gson annotations SerializedName;public class EventNamespace { @SerializedName("client") public final String client; @SerializedName("page") public final String page; @SerializedName("section") public final String section; @SerializedName("component") public final String component; @SerializedName("element") public final String element; @SerializedName("action") public final String action; public EventNamespace(String client, String page, String section, String component, String element, String action) { this client = client; this page = page; this section = section; this component = component; this element = element; this action = action; } @Override public String toString() { return new StringBuilder()  append("client=") append(client)  append(", page=") append(page)  append(", section=") append(section)  append(", component=") append(component)  append(", element=") append(element)  append(", action=") append(action)  toString(); } @Override public boolean equals(Object o) { if (this == o) return true; if (o == null || getClass() != o getClass()) return false; final EventNamespace that = (EventNamespace) o; if (action != null ? !action equals(that action) : that action != null) return false; if (client != null ? !client equals(that client) : that client != null) return false; if (component != null ? !component equals(that component) : that component != null) { return false; } if (element != null ? !element equals(that element) : that element != null) { return false; } if (page != null ? !page equals(that page) : that page != null) return false; if (section != null ? !section equals(that section) : that section != null) { return false; } return true; } @Override public int hashCode() { int result = client != null ? client hashCode() : 0; result = 31 * result + (page != null ? page hashCode() : 0); result = 31 * result + (section != null ? section hashCode() : 0); result = 31 * result + (component != null ? component hashCode() : 0); result = 31 * result + (element != null ? element hashCode() : 0); result = 31 * result + (action != null ? action hashCode() : 0); return result; } public static class Builder { private String client; private String page; private String section; private String component; private String element; private String action; public Builder setClient(String client) { this client = client; return this; } public Builder setPage(String page) { this page = page; return this; } public Builder setSection(String section) { this section = section; return this; } public Builder setComponent(String component) { this component = component; return this; } public Builder setElement(String element) { this element = element; return this; } public Builder setAction(String action) { this action = action; return this; } public EventNamespace builder() { return new EventNamespace(client, page, section, component, element, action); } }}package com twitter sdk android core services;import com twitter sdk android core models Tweet;import java util List;import retrofit2 Call;import retrofit2 http Field;import retrofit2 http FormUrlEncoded;import retrofit2 http GET;import retrofit2 http POST;import retrofit2 http Query;public interface FavoriteService {  @GET("/1 1/favorites/list json?" + "tweet_mode=extended&include_cards=true&cards_platform=TwitterKit-13") Call<List<Tweet>> list(@Query("user_id") Long userId, @Query("screen_name") String screenName, @Query("count") Integer count, @Query("since_id") String sinceId, @Query("max_id") String maxId, @Query("include_entities") Boolean includeEntities);  @FormUrlEncoded @POST("/1 1/favorites/destroy json?" + "tweet_mode=extended&include_cards=true&cards_platform=TwitterKit-13") Call<Tweet> destroy(@Field("id") Long id, @Field("include_entities") Boolean includeEntities);  @FormUrlEncoded @POST("/1 1/favorites/create json?" + "tweet_mode=extended&include_cards=true&cards_platform=TwitterKit-13") Call<Tweet> create(@Field("id") Long id, @Field("include_entities") Boolean includeEntities);}package com twitter sdk android tweetcomposer;import android annotation TargetApi;import android content ContentResolver;import android content Context;import android database Cursor;import android net Uri;import android os Build;import android provider DocumentsContract;import android provider MediaStore;import android text TextUtils;import android webkit MimeTypeMap;import java io File;class FileUtils { private static final String MEDIA_SCHEME = "com android providers media documents"; @TargetApi(Build VERSION_CODES KITKAT) static String getPath(final Context context, final Uri uri) { final boolean isKitKat = Build VERSION SDK_INT >= Build VERSION_CODES KITKAT; if (isKitKat && isMediaDocumentAuthority(uri)) { final String documentId = DocumentsContract getDocumentId(uri); // e g  "image:1234" final String[] parts = documentId split(":"); final String type = parts[0]; Uri contentUri; if ("image" equals(type)) { contentUri = MediaStore Images Media EXTERNAL_CONTENT_URI; } else { // reject video or audio documents return null; } // query content resolver for MediaStore id column final String selection = "_id=?"; final String[] args = new String[] { parts[1] }; return resolveFilePath(context, contentUri, selection, args); } else if (isContentScheme(uri)) { return resolveFilePath(context, uri, null, null); } else if (isFileScheme(uri)) { return uri getPath(); } return null; } public static boolean isMediaDocumentAuthority(Uri uri) { return MEDIA_SCHEME equalsIgnoreCase(uri getAuthority()); } public static boolean isContentScheme(Uri uri) { return ContentResolver SCHEME_CONTENT equalsIgnoreCase(uri getScheme()); } public static boolean isFileScheme(Uri uri) { return ContentResolver SCHEME_FILE equalsIgnoreCase(uri getScheme()); } static String resolveFilePath(Context context, Uri uri, String selection, String[] args) { Cursor cursor = null; final String[] projection = {MediaStore Images Media DATA}; try { cursor = context getContentResolver() query(uri, projection, selection, args, null); if (cursor != null && cursor moveToFirst()) { final int i = cursor getColumnIndexOrThrow(MediaStore Images Media DATA); return cursor getString(i); } } finally { if (cursor != null) { cursor close(); } } return null; }  static String getMimeType(File file) { final String ext = getExtension(file getName()); if (!TextUtils isEmpty(ext)) { return MimeTypeMap getSingleton() getMimeTypeFromExtension(ext); } // default from https://dev twitter com/rest/public/uploading-media return "application/octet-stream"; }  static String getExtension(String filename) { if (filename == null) { return null; } final int i = filename lastIndexOf(" "); return i < 0 ? "" : filename substring(i + 1); }}package com twitter sdk android tweetui;import com twitter sdk android core Callback;import com twitter sdk android core Result;import com twitter sdk android core models Tweet;import java util ArrayList;import java util Collections;import java util List;public class FixedTweetTimeline extends BaseTimeline implements Timeline<Tweet> { private static final String SCRIBE_SECTION = "fixed"; List<Tweet> tweets; FixedTweetTimeline(TweetUi tweetUi, List<Tweet> tweets) { super(tweetUi); this tweets = tweets == null ? new ArrayList<Tweet>() : tweets; } @Override public void next(Long minPosition, Callback<TimelineResult<Tweet>> cb) { // always return the same fixed set of 'latest' Tweets final TimelineResult<Tweet> timelineResult = new TimelineResult<>(new TimelineCursor(tweets), tweets); cb success(new Result(timelineResult, null)); } @Override public void previous(Long maxPosition, Callback<TimelineResult<Tweet>> cb) { final List<Tweet> empty = Collections emptyList(); final TimelineResult<Tweet> timelineResult = new TimelineResult<>(new TimelineCursor(empty), empty); cb success(new Result(timelineResult, null)); } @Override String getTimelineType() { return SCRIBE_SECTION; }  public static class Builder { private final TweetUi tweetUi; private List<Tweet> tweets;  public Builder() { this(TweetUi getInstance()); }  public Builder(TweetUi tweetUi) { if (tweetUi == null) { throw new IllegalArgumentException("TweetUi instance must not be null"); } this tweetUi = tweetUi; }  public Builder setTweets(List<Tweet> tweets) { this tweets = tweets; return this; }  public FixedTweetTimeline build() { return new FixedTweetTimeline(tweetUi, tweets); } }}package com twitter sdk android tweetui;import com twitter sdk android core models MediaEntity;class FormattedMediaEntity extends FormattedUrlEntity { final String type; final String mediaUrlHttps; FormattedMediaEntity(MediaEntity entity) { super(entity); this type = entity type; this mediaUrlHttps = entity mediaUrlHttps; }}package com twitter sdk android tweetui;import java util ArrayList;import java util List;class FormattedTweetText { String text; final List<FormattedUrlEntity> urlEntities; final List<FormattedMediaEntity> mediaEntities; FormattedTweetText() { urlEntities = new ArrayList<>(); mediaEntities = new ArrayList<>(); }}package com twitter sdk android tweetui;import com twitter sdk android core models UrlEntity;class FormattedUrlEntity { int start; int end; final String displayUrl; final String url; FormattedUrlEntity(UrlEntity entity) { this start = entity getStart(); this end = entity getEnd(); this displayUrl = entity displayUrl; this url = entity url; }}package com twitter sdk android tweetui;import android app Activity;import android os Bundle;import com squareup picasso Picasso;import com twitter sdk android core models MediaEntity;import com twitter sdk android tweetui internal MultiTouchImageView;public class GalleryActivity extends Activity { static final String MEDIA_ENTITY = "MEDIA_ENTITY"; static final String TWEET_ID = "TWEET_ID"; @Override protected void onCreate(Bundle savedInstanceState) { super onCreate(savedInstanceState); setContentView(R layout tw__gallery_activity); final MediaEntity entity = (MediaEntity) getIntent() getSerializableExtra(MEDIA_ENTITY); final MultiTouchImageView imageView = (MultiTouchImageView) findViewById(R id image_view); Picasso with(this) load(entity mediaUrlHttps) into(imageView); }}package com twitter sdk android core services params;public class Geocode { public enum Distance { MILES("mi"), KILOMETERS("km"); public final String identifier; Distance(String identifier) { this identifier = identifier; } } public final double latitude; public final double longitude; public final int radius; public final Distance distance; public Geocode(double latitude, double longitude, int radius, Distance distance) { this latitude = latitude; this longitude = longitude; this radius = radius; this distance = distance; } @Override public String toString() { return latitude + "," + longitude + "," + radius + distance identifier; }}package com twitter sdk android core internal network;import com twitter sdk android core GuestSession;import com twitter sdk android core GuestSessionProvider;import com twitter sdk android core internal oauth GuestAuthToken;import com twitter sdk android core internal oauth OAuthConstants;import java io IOException;import okhttp3 Authenticator;import okhttp3 Request;import okhttp3 Response;import okhttp3 Route;public class GuestAuthenticator implements Authenticator { static final int MAX_RETRIES = 2; final GuestSessionProvider guestSessionProvider; public GuestAuthenticator(GuestSessionProvider guestSessionProvider) { this guestSessionProvider = guestSessionProvider; } @Override public Request authenticate(Route route, Response response) throws IOException { return reauth(response); } Request reauth(Response response) { if (canRetry(response)) { final GuestSession session = guestSessionProvider  refreshCurrentSession(new GuestSession(getExpiredToken(response))); final GuestAuthToken token = session == null ? null : session getAuthToken(); if (token != null) { return resign(response request(), token); } } return null; } GuestAuthToken getExpiredToken(Response response) { final String auth = response request() header(OAuthConstants HEADER_AUTHORIZATION); final String guest = response request() header(OAuthConstants HEADER_GUEST_TOKEN); return new GuestAuthToken("bearer", auth replace("bearer ", ""), guest); } Request resign(Request request, GuestAuthToken token) { final Request Builder builder = request newBuilder(); GuestAuthInterceptor addAuthHeaders(builder, token); return builder build(); } boolean canRetry(Response response) { int responseCount = 1; while ((response = response priorResponse()) != null) { responseCount++; } return responseCount < MAX_RETRIES; }}package com twitter sdk android core internal network;import com twitter sdk android core GuestSession;import com twitter sdk android core GuestSessionProvider;import com twitter sdk android core internal oauth GuestAuthToken;import com twitter sdk android core internal oauth OAuthConstants;import java io IOException;import okhttp3 Interceptor;import okhttp3 Request;import okhttp3 Response;public class GuestAuthInterceptor implements Interceptor { final GuestSessionProvider guestSessionProvider; public GuestAuthInterceptor(GuestSessionProvider guestSessionProvider) { this guestSessionProvider = guestSessionProvider; } @Override public Response intercept(Chain chain) throws IOException { final Request request = chain request(); final GuestSession session = guestSessionProvider getCurrentSession(); final GuestAuthToken token = session == null ? null : session getAuthToken(); if (token != null) { final Request Builder builder = request newBuilder(); addAuthHeaders(builder, token); return chain proceed(builder build()); } return chain proceed(request); } static void addAuthHeaders(Request Builder builder, GuestAuthToken token) { final String authHeader = token getTokenType() + " " + token getAccessToken(); builder header(OAuthConstants HEADER_AUTHORIZATION, authHeader); builder header(OAuthConstants HEADER_GUEST_TOKEN, token getGuestToken()); }}package com twitter sdk android core internal network;import java io IOException;import okhttp3 Interceptor;import okhttp3 Response;public class GuestAuthNetworkInterceptor implements Interceptor { @Override public Response intercept(Chain chain) throws IOException { Response response = chain proceed(chain request()); if (response code() == 403) { response = response newBuilder() code(401) build(); } return response; }}package com twitter sdk android core internal oauth;import android text format DateUtils;import com google gson annotations SerializedName;public class GuestAuthToken extends OAuth2Token { public static final String HEADER_GUEST_TOKEN = "x-guest-token";  private static final long EXPIRES_IN_MS = DateUtils HOUR_IN_MILLIS * 3; @SerializedName("guest_token") private final String guestToken; public GuestAuthToken(String tokenType, String accessToken, String guestToken) { super(tokenType, accessToken); this guestToken = guestToken; } public GuestAuthToken(String tokenType, String accessToken, String guestToken, long createdAt) { super(tokenType, accessToken, createdAt); this guestToken = guestToken; } public String getGuestToken() { return guestToken; } // Passbird maintains guest tokens for at least 1 hour, but no more than 3 hours  Tokens // older than 3 hours are known to have expired and should not be reused  @Override public boolean isExpired() { return System currentTimeMillis() >= this createdAt + EXPIRES_IN_MS; } @Override public boolean equals(Object o) { if (this == o) return true; if (o == null || getClass() != o getClass()) return false; if (!super equals(o)) return false; final GuestAuthToken that = (GuestAuthToken) o; if (guestToken != null ? !guestToken equals(that guestToken) : that guestToken != null) return false; return true; } @Override public int hashCode() { int result = super hashCode(); result = 31 * result + (guestToken != null ? guestToken hashCode() : 0); return result; }}package com twitter sdk android core;import android text TextUtils;import com google gson Gson;import com google gson GsonBuilder;import com twitter sdk android core internal oauth GuestAuthToken;import io fabric sdk android Fabric;import io fabric sdk android services persistence SerializationStrategy;public class GuestSession extends Session<GuestAuthToken> { public static final long LOGGED_OUT_USER_ID = 0L;  public GuestSession(GuestAuthToken authToken) { super(authToken, LOGGED_OUT_USER_ID); } static public class Serializer implements SerializationStrategy<GuestSession> { private final Gson gson; public Serializer() { this gson = new GsonBuilder()  registerTypeAdapter(GuestAuthToken class, new AuthTokenAdapter())  create(); } @Override public String serialize(GuestSession session) { if (session != null && session getAuthToken() != null) { try { return gson toJson(session); } catch (Exception e) { Fabric getLogger() d(TwitterCore TAG, "Failed to serialize session " + e getMessage()); } } return ""; } @Override public GuestSession deserialize(String serializedSession) { if (!TextUtils isEmpty(serializedSession)) { try { return gson fromJson(serializedSession, GuestSession class); } catch (Exception e) { Fabric getLogger() d(TwitterCore TAG, "Failed to deserialize session " + e getMessage()); } } return null; } }}package com twitter sdk android core;import com twitter sdk android core internal oauth GuestAuthToken;import com twitter sdk android core internal oauth OAuth2Service;import java util concurrent CountDownLatch;import io fabric sdk android Fabric;public class GuestSessionProvider { private final OAuth2Service oAuth2Service; private final SessionManager<GuestSession> sessionManager; public GuestSessionProvider(OAuth2Service oAuth2Service, SessionManager<GuestSession> sessionManager) { this oAuth2Service = oAuth2Service; this sessionManager = sessionManager; } public synchronized GuestSession getCurrentSession() { final GuestSession session = sessionManager getActiveSession(); if (isSessionValid(session)) { return session; } refreshToken(); return sessionManager getActiveSession(); } public synchronized GuestSession refreshCurrentSession(GuestSession expiredSession) { final GuestSession session = sessionManager getActiveSession(); if (expiredSession != null && expiredSession equals(session)) { refreshToken(); } return sessionManager getActiveSession(); } void refreshToken() { Fabric getLogger() d("GuestSessionProvider", "Refreshing expired guest session "); final CountDownLatch latch = new CountDownLatch(1); oAuth2Service requestGuestAuthToken(new Callback<GuestAuthToken>() { @Override public void success(Result<GuestAuthToken> result) { sessionManager setActiveSession(new GuestSession(result data)); latch countDown(); } @Override public void failure(TwitterException exception) { sessionManager clearSession(GuestSession LOGGED_OUT_USER_ID); latch countDown(); } }); try { latch await(); } catch (InterruptedException e) { sessionManager clearSession(GuestSession LOGGED_OUT_USER_ID); } } boolean isSessionValid(GuestSession session) { return session != null && session getAuthToken() != null && !session getAuthToken() isExpired(); }}package com twitter sdk android core internal oauth;import com google gson annotations SerializedName;class GuestTokenResponse { @SerializedName("guest_token") public final String guestToken; public GuestTokenResponse(String guestToken) { this guestToken = guestToken; }}package com twitter sdk android core models;import com google gson annotations SerializedName;public class HashtagEntity extends Entity {  @SerializedName("text") public final String text; public HashtagEntity(String text, int start, int end) { super(start, end); this text = text; }}package com twitter sdk android tweetui internal;import android view View;public interface HighlightedClickableSpan {  void onClick(View view);  void select(boolean selected);  boolean isSelected();}package com twitter sdk android tweetui internal util;import java util ArrayList;import java util HashMap;import java util Map;import java util TreeMap;public class HtmlEntities {  // public static final Entities XML;  // public static final Entities HTML32;  public static final HtmlEntities HTML40;  // package scoped for testing static final String[][] ISO8859_1_ARRAY = { { "nbsp", "160" }, // non-breaking space { "iexcl", "161" }, // inverted exclamation mark { "cent", "162" }, // cent sign { "pound", "163" }, // pound sign { "curren", "164" }, // currency sign { "yen", "165" }, // yen sign = yuan sign { "brvbar", "166" }, // broken bar = broken vertical bar { "sect", "167" }, // section sign { "uml", "168" }, // diaeresis = spacing diaeresis { "copy", "169" }, // - copyright sign { "ordf", "170" }, // feminine ordinal indicator { "laquo", "171" }, // left-pointing double angle quotation mark = left pointing // guillemet { "not", "172" }, // not sign { "shy", "173" }, // soft hyphen = discretionary hyphen { "reg", "174" }, // - registered trademark sign { "macr", "175" }, // macron = spacing macron = overline = APL overbar { "deg", "176" }, // degree sign { "plusmn", "177" }, // plus-minus sign = plus-or-minus sign { "sup2", "178" }, // superscript two = superscript digit two = squared { "sup3", "179" }, // superscript three = superscript digit three = cubed { "acute", "180" }, // acute accent = spacing acute { "micro", "181" }, // micro sign { "para", "182" }, // pilcrow sign = paragraph sign { "middot", "183" }, // middle dot = Georgian comma = Greek middle dot { "cedil", "184" }, // cedilla = spacing cedilla { "sup1", "185" }, // superscript one = superscript digit one { "ordm", "186" }, // masculine ordinal indicator { "raquo", "187" }, // right-pointing double angle quotation mark = right pointing // guillemet { "frac14", "188" }, // vulgar fraction one quarter = fraction one quarter { "frac12", "189" }, // vulgar fraction one half = fraction one half { "frac34", "190" }, // vulgar fraction three quarters = fraction three quarters { "iquest", "191" }, // inverted question mark = turned question mark { "Agrave", "192" }, // - uppercase A, grave accent { "Aacute", "193" }, // - uppercase A, acute accent { "Acirc", "194" }, // - uppercase A, circumflex accent { "Atilde", "195" }, // - uppercase A, tilde { "Auml", "196" }, // - uppercase A, umlaut { "Aring", "197" }, // - uppercase A, ring { "AElig", "198" }, // - uppercase AE { "Ccedil", "199" }, // - uppercase C, cedilla { "Egrave", "200" }, // - uppercase E, grave accent { "Eacute", "201" }, // - uppercase E, acute accent { "Ecirc", "202" }, // - uppercase E, circumflex accent { "Euml", "203" }, // - uppercase E, umlaut { "Igrave", "204" }, // - uppercase I, grave accent { "Iacute", "205" }, // - uppercase I, acute accent { "Icirc", "206" }, // - uppercase I, circumflex accent { "Iuml", "207" }, // - uppercase I, umlaut { "ETH", "208" }, // - uppercase Eth, Icelandic { "Ntilde", "209" }, // - uppercase N, tilde { "Ograve", "210" }, // - uppercase O, grave accent { "Oacute", "211" }, // - uppercase O, acute accent { "Ocirc", "212" }, // - uppercase O, circumflex accent { "Otilde", "213" }, // - uppercase O, tilde { "Ouml", "214" }, // - uppercase O, umlaut { "times", "215" }, // multiplication sign { "Oslash", "216" }, // - uppercase O, slash { "Ugrave", "217" }, // - uppercase U, grave accent { "Uacute", "218" }, // - uppercase U, acute accent { "Ucirc", "219" }, // - uppercase U, circumflex accent { "Uuml", "220" }, // - uppercase U, umlaut { "Yacute", "221" }, // - uppercase Y, acute accent { "THORN", "222" }, // - uppercase THORN, Icelandic { "szlig", "223" }, // - lowercase sharps, German { "agrave", "224" }, // - lowercase a, grave accent { "aacute", "225" }, // - lowercase a, acute accent { "acirc", "226" }, // - lowercase a, circumflex accent { "atilde", "227" }, // - lowercase a, tilde { "auml", "228" }, // - lowercase a, umlaut { "aring", "229" }, // - lowercase a, ring { "aelig", "230" }, // - lowercase ae { "ccedil", "231" }, // - lowercase c, cedilla { "egrave", "232" }, // - lowercase e, grave accent { "eacute", "233" }, // - lowercase e, acute accent { "ecirc", "234" }, // - lowercase e, circumflex accent { "euml", "235" }, // - lowercase e, umlaut { "igrave", "236" }, // - lowercase i, grave accent { "iacute", "237" }, // - lowercase i, acute accent { "icirc", "238" }, // - lowercase i, circumflex accent { "iuml", "239" }, // - lowercase i, umlaut { "eth", "240" }, // - lowercase eth, Icelandic { "ntilde", "241" }, // - lowercase n, tilde { "ograve", "242" }, // - lowercase o, grave accent { "oacute", "243" }, // - lowercase o, acute accent { "ocirc", "244" }, // - lowercase o, circumflex accent { "otilde", "245" }, // - lowercase o, tilde { "ouml", "246" }, // - lowercase o, umlaut { "divide", "247" }, // division sign { "oslash", "248" }, // - lowercase o, slash { "ugrave", "249" }, // - lowercase u, grave accent { "uacute", "250" }, // - lowercase u, acute accent { "ucirc", "251" }, // - lowercase u, circumflex accent { "uuml", "252" }, // - lowercase u, umlaut { "yacute", "253" }, // - lowercase y, acute accent { "thorn", "254" }, // - lowercase thorn, Icelandic { "yuml", "255" }, // - lowercase y, umlaut }; // http://www w3 org/TR/REC-html40/sgml/entities html // package scoped for testing static final String[][] HTML40_ARRAY = { // <!-- Latin Extended-B --> { "fnof", "402" }, // latin small f with hook = function= florin, U+0192 ISOtech --> // <!-- Greek --> { "Alpha", "913" }, // greek capital letter alpha, U+0391 --> { "Beta", "914" }, // greek capital letter beta, U+0392 --> { "Gamma", "915" }, // greek capital letter gamma,U+0393 ISOgrk3 --> { "Delta", "916" }, // greek capital letter delta,U+0394 ISOgrk3 --> { "Epsilon", "917" }, // greek capital letter epsilon, U+0395 --> { "Zeta", "918" }, // greek capital letter zeta, U+0396 --> { "Eta", "919" }, // greek capital letter eta, U+0397 --> { "Theta", "920" }, // greek capital letter theta,U+0398 ISOgrk3 --> { "Iota", "921" }, // greek capital letter iota, U+0399 --> { "Kappa", "922" }, // greek capital letter kappa, U+039A --> { "Lambda", "923" }, // greek capital letter lambda,U+039B ISOgrk3 --> { "Mu", "924" }, // greek capital letter mu, U+039C --> { "Nu", "925" }, // greek capital letter nu, U+039D --> { "Xi", "926" }, // greek capital letter xi, U+039E ISOgrk3 --> { "Omicron", "927" }, // greek capital letter omicron, U+039F --> { "Pi", "928" }, // greek capital letter pi, U+03A0 ISOgrk3 --> { "Rho", "929" }, // greek capital letter rho, U+03A1 --> // <!-- there is no Sigmaf, and no U+03A2 character either --> { "Sigma", "931" }, // greek capital letter sigma,U+03A3 ISOgrk3 --> { "Tau", "932" }, // greek capital letter tau, U+03A4 --> { "Upsilon", "933" }, // greek capital letter upsilon,U+03A5 ISOgrk3 --> { "Phi", "934" }, // greek capital letter phi,U+03A6 ISOgrk3 --> { "Chi", "935" }, // greek capital letter chi, U+03A7 --> { "Psi", "936" }, // greek capital letter psi,U+03A8 ISOgrk3 --> { "Omega", "937" }, // greek capital letter omega,U+03A9 ISOgrk3 --> { "alpha", "945" }, // greek small letter alpha,U+03B1 ISOgrk3 --> { "beta", "946" }, // greek small letter beta, U+03B2 ISOgrk3 --> { "gamma", "947" }, // greek small letter gamma,U+03B3 ISOgrk3 --> { "delta", "948" }, // greek small letter delta,U+03B4 ISOgrk3 --> { "epsilon", "949" }, // greek small letter epsilon,U+03B5 ISOgrk3 --> { "zeta", "950" }, // greek small letter zeta, U+03B6 ISOgrk3 --> { "eta", "951" }, // greek small letter eta, U+03B7 ISOgrk3 --> { "theta", "952" }, // greek small letter theta,U+03B8 ISOgrk3 --> { "iota", "953" }, // greek small letter iota, U+03B9 ISOgrk3 --> { "kappa", "954" }, // greek small letter kappa,U+03BA ISOgrk3 --> { "lambda", "955" }, // greek small letter lambda,U+03BB ISOgrk3 --> { "mu", "956" }, // greek small letter mu, U+03BC ISOgrk3 --> { "nu", "957" }, // greek small letter nu, U+03BD ISOgrk3 --> { "xi", "958" }, // greek small letter xi, U+03BE ISOgrk3 --> { "omicron", "959" }, // greek small letter omicron, U+03BF NEW --> { "pi", "960" }, // greek small letter pi, U+03C0 ISOgrk3 --> { "rho", "961" }, // greek small letter rho, U+03C1 ISOgrk3 --> { "sigmaf", "962" }, // greek small letter final sigma,U+03C2 ISOgrk3 --> { "sigma", "963" }, // greek small letter sigma,U+03C3 ISOgrk3 --> { "tau", "964" }, // greek small letter tau, U+03C4 ISOgrk3 --> { "upsilon", "965" }, // greek small letter upsilon,U+03C5 ISOgrk3 --> { "phi", "966" }, // greek small letter phi, U+03C6 ISOgrk3 --> { "chi", "967" }, // greek small letter chi, U+03C7 ISOgrk3 --> { "psi", "968" }, // greek small letter psi, U+03C8 ISOgrk3 --> { "omega", "969" }, // greek small letter omega,U+03C9 ISOgrk3 --> { "thetasym", "977" }, // greek small letter theta symbol,U+03D1 NEW --> { "upsih", "978" }, // greek upsilon with hook symbol,U+03D2 NEW --> { "piv", "982" }, // greek pi symbol, U+03D6 ISOgrk3 --> // <!-- General Punctuation --> { "bull", "8226" }, // bullet = black small circle,U+2022 ISOpub --> // <!-- bullet is NOT the same as bullet operator, U+2219 --> { "hellip", "8230" }, // horizontal ellipsis = three dot leader,U+2026 ISOpub --> { "prime", "8242" }, // prime = minutes = feet, U+2032 ISOtech --> { "Prime", "8243" }, // double prime = seconds = inches,U+2033 ISOtech --> { "oline", "8254" }, // overline = spacing overscore,U+203E NEW --> { "frasl", "8260" }, // fraction slash, U+2044 NEW --> // <!-- Letterlike Symbols --> { "weierp", "8472" }, // script capital P = power set= Weierstrass p, U+2118 ISOamso // --> { "image", "8465" }, // blackletter capital I = imaginary part,U+2111 ISOamso --> { "real", "8476" }, // blackletter capital R = real part symbol,U+211C ISOamso --> { "trade", "8482" }, // trade mark sign, U+2122 ISOnum --> { "alefsym", "8501" }, // alef symbol = first transfinite cardinal,U+2135 NEW --> // <!-- alef symbol is NOT the same as hebrew letter alef,U+05D0 // although the same glyph could be used to depict both characters // --> // <!-- Arrows --> { "larr", "8592" }, // leftwards arrow, U+2190 ISOnum --> { "uarr", "8593" }, // upwards arrow, U+2191 ISOnum--> { "rarr", "8594" }, // rightwards arrow, U+2192 ISOnum --> { "darr", "8595" }, // downwards arrow, U+2193 ISOnum --> { "harr", "8596" }, // left right arrow, U+2194 ISOamsa --> { "crarr", "8629" }, // downwards arrow with corner leftwards= carriage return, U+21B5 // NEW --> { "lArr", "8656" }, // leftwards double arrow, U+21D0 ISOtech --> // <!-- ISO 10646 does not say that lArr is the same as the 'is // implied by' arrowbut also does not have any other character for // that function  So ? lArr canbe used for 'is implied by' as // ISOtech suggests --> { "uArr", "8657" }, // upwards double arrow, U+21D1 ISOamsa --> { "rArr", "8658" }, // rightwards double arrow,U+21D2 ISOtech --> // <!-- ISO 10646 does not say this is the 'implies' character but // does not have another character with this function so ?rArr can // be used for 'implies' as ISOtech suggests --> { "dArr", "8659" }, // downwards double arrow, U+21D3 ISOamsa --> { "hArr", "8660" }, // left right double arrow,U+21D4 ISOamsa --> // <!-- Mathematical Operators --> { "forall", "8704" }, // for all, U+2200 ISOtech --> { "part", "8706" }, // partial differential, U+2202 ISOtech --> { "exist", "8707" }, // there exists, U+2203 ISOtech --> { "empty", "8709" }, // empty set = null set = diameter,U+2205 ISOamso --> { "nabla", "8711" }, // nabla = backward difference,U+2207 ISOtech --> { "isin", "8712" }, // element of, U+2208 ISOtech --> { "notin", "8713" }, // not an element of, U+2209 ISOtech --> { "ni", "8715" }, // contains as member, U+220B ISOtech --> // <!-- should there be a more memorable name than 'ni'? --> { "prod", "8719" }, // n-ary product = product sign,U+220F ISOamsb --> // <!-- prod is NOT the same character as U+03A0 'greek capital // letter pi' though the same glyph might be used for both --> { "sum", "8721" }, // n-ary summation, U+2211 ISOamsb --> // <!-- sum is NOT the same character as U+03A3 'greek capital // letter sigma' though the same glyph might be used for both --> { "minus", "8722" }, // minus sign, U+2212 ISOtech --> { "lowast", "8727" }, // asterisk operator, U+2217 ISOtech --> { "radic", "8730" }, // square root = radical sign,U+221A ISOtech --> { "prop", "8733" }, // proportional to, U+221D ISOtech --> { "infin", "8734" }, // infinity, U+221E ISOtech --> { "ang", "8736" }, // angle, U+2220 ISOamso --> { "and", "8743" }, // logical and = wedge, U+2227 ISOtech --> { "or", "8744" }, // logical or = vee, U+2228 ISOtech --> { "cap", "8745" }, // intersection = cap, U+2229 ISOtech --> { "cup", "8746" }, // union = cup, U+222A ISOtech --> { "int", "8747" }, // integral, U+222B ISOtech --> { "there4", "8756" }, // therefore, U+2234 ISOtech --> { "sim", "8764" }, // tilde operator = varies with = similar to,U+223C ISOtech --> // <!-- tilde operator is NOT the same character as the tilde, // U+007E,although the same glyph might be used to represent both // --> { "cong", "8773" }, // approximately equal to, U+2245 ISOtech --> { "asymp", "8776" }, // almost equal to = asymptotic to,U+2248 ISOamsr --> { "ne", "8800" }, // not equal to, U+2260 ISOtech --> { "equiv", "8801" }, // identical to, U+2261 ISOtech --> { "le", "8804" }, // less-than or equal to, U+2264 ISOtech --> { "ge", "8805" }, // greater-than or equal to,U+2265 ISOtech --> { "sub", "8834" }, // subset of, U+2282 ISOtech --> { "sup", "8835" }, // superset of, U+2283 ISOtech --> // <!-- note that nsup, 'not a superset of, U+2283' is not covered // by the Symbol font encoding and is not included  Should it be, // for symmetry?It is in ISOamsn --> <!ENTITY nsub", "8836"}, //not // a subset of, U+2284 ISOamsn --> { "sube", "8838" }, // subset of or equal to, U+2286 ISOtech --> { "supe", "8839" }, // superset of or equal to,U+2287 ISOtech --> { "oplus", "8853" }, // circled plus = direct sum,U+2295 ISOamsb --> { "otimes", "8855" }, // circled times = vector product,U+2297 ISOamsb --> { "perp", "8869" }, // up tack = orthogonal to = perpendicular,U+22A5 ISOtech --> { "sdot", "8901" }, // dot operator, U+22C5 ISOamsb --> // <!-- dot operator is NOT the same character as U+00B7 middle dot // --> // <!-- Miscellaneous Technical --> { "lceil", "8968" }, // left ceiling = apl upstile,U+2308 ISOamsc --> { "rceil", "8969" }, // right ceiling, U+2309 ISOamsc --> { "lfloor", "8970" }, // left floor = apl downstile,U+230A ISOamsc --> { "rfloor", "8971" }, // right floor, U+230B ISOamsc --> { "lang", "9001" }, // left-pointing angle bracket = bra,U+2329 ISOtech --> // <!-- lang is NOT the same character as U+003C 'less than' or // U+2039 'single left-pointing angle quotation mark' --> { "rang", "9002" }, // right-pointing angle bracket = ket,U+232A ISOtech --> // <!-- rang is NOT the same character as U+003E 'greater than' or // U+203A 'single right-pointing angle quotation mark' --> // <!-- Geometric Shapes --> { "loz", "9674" }, // lozenge, U+25CA ISOpub --> // <!-- Miscellaneous Symbols --> { "spades", "9824" }, // black spade suit, U+2660 ISOpub --> // <!-- black here seems to mean filled as opposed to hollow --> { "clubs", "9827" }, // black club suit = shamrock,U+2663 ISOpub --> { "hearts", "9829" }, // black heart suit = valentine,U+2665 ISOpub --> { "diams", "9830" }, // black diamond suit, U+2666 ISOpub --> // <!-- Latin Extended-A --> { "OElig", "338" }, // -- latin capital ligature OE,U+0152 ISOlat2 --> { "oelig", "339" }, // -- latin small ligature oe, U+0153 ISOlat2 --> // <!-- ligature is a misnomer, this is a separate character in some // languages --> { "Scaron", "352" }, // -- latin capital letter S with caron,U+0160 ISOlat2 --> { "scaron", "353" }, // -- latin small letter s with caron,U+0161 ISOlat2 --> { "Yuml", "376" }, // -- latin capital letter Y with diaeresis,U+0178 ISOlat2 --> // <!-- Spacing Modifier Letters --> { "circ", "710" }, // -- modifier letter circumflex accent,U+02C6 ISOpub --> { "tilde", "732" }, // small tilde, U+02DC ISOdia --> // <!-- General Punctuation --> { "ensp", "8194" }, // en space, U+2002 ISOpub --> { "emsp", "8195" }, // em space, U+2003 ISOpub --> { "thinsp", "8201" }, // thin space, U+2009 ISOpub --> { "zwnj", "8204" }, // zero width non-joiner,U+200C NEW RFC 2070 --> { "zwj", "8205" }, // zero width joiner, U+200D NEW RFC 2070 --> { "lrm", "8206" }, // left-to-right mark, U+200E NEW RFC 2070 --> { "rlm", "8207" }, // right-to-left mark, U+200F NEW RFC 2070 --> { "ndash", "8211" }, // en dash, U+2013 ISOpub --> { "mdash", "8212" }, // em dash, U+2014 ISOpub --> { "lsquo", "8216" }, // left single quotation mark,U+2018 ISOnum --> { "rsquo", "8217" }, // right single quotation mark,U+2019 ISOnum --> { "sbquo", "8218" }, // single low-9 quotation mark, U+201A NEW --> { "ldquo", "8220" }, // left double quotation mark,U+201C ISOnum --> { "rdquo", "8221" }, // right double quotation mark,U+201D ISOnum --> { "bdquo", "8222" }, // double low-9 quotation mark, U+201E NEW --> { "dagger", "8224" }, // dagger, U+2020 ISOpub --> { "Dagger", "8225" }, // double dagger, U+2021 ISOpub --> { "permil", "8240" }, // per mille sign, U+2030 ISOtech --> { "lsaquo", "8249" }, // single left-pointing angle quotation mark,U+2039 ISO proposed // --> // <!-- lsaquo is proposed but not yet ISO standardized --> { "rsaquo", "8250" }, // single right-pointing angle quotation mark,U+203A ISO proposed // --> // <!-- rsaquo is proposed but not yet ISO standardized --> { "euro", "8364" }, // -- euro sign, U+20AC NEW --> }; private static final String[][] BASIC_ARRAY = { { "quot", "34" }, // " - double-quote { "amp", "38" }, // & - ampersand { "lt", "60" }, // < - less-than { "gt", "62" }, // > - greater-than }; // package scoped for testing final EntityMap map = new HtmlEntities LookupEntityMap();   static { HTML40 = new HtmlEntities(); fillWithHtml40Entities(HTML40); } static void fillWithHtml40Entities(HtmlEntities entities) { entities addEntities(BASIC_ARRAY); entities addEntities(ISO8859_1_ARRAY); entities addEntities(HTML40_ARRAY); } interface EntityMap { void add(String name, int value); String name(int value); int value(String name); } static class PrimitiveEntityMap implements EntityMap { @SuppressWarnings("unchecked") private final Map mapNameToValue = new HashMap(); private final IntHashMap mapValueToName = new IntHashMap(); @SuppressWarnings("unchecked") public void add(String name, int value) { mapNameToValue put(name, value); mapValueToName put(value, name); } public String name(int value) { return (String) mapValueToName get(value); } public int value(String name) { final Object value = mapNameToValue get(name); if (value == null) { return -1; } return ((Integer) value) intValue(); } } abstract static class MapIntMap implements EntityMap { @SuppressWarnings("unchecked") protected Map mapNameToValue; @SuppressWarnings("unchecked") protected Map mapValueToName; @SuppressWarnings("unchecked") public void add(String name, int value) { mapNameToValue put(name, value); mapValueToName put(value, name); } public String name(int value) { return (String) mapValueToName get(value); } public int value(String name) { final Object value = mapNameToValue get(name); if (value == null) { return -1; } return ((Integer) value) intValue(); } } static class HashEntityMap extends MapIntMap { @SuppressWarnings("unchecked") public HashEntityMap() { mapNameToValue = new HashMap(); mapValueToName = new HashMap(); } } static class TreeEntityMap extends MapIntMap { @SuppressWarnings("unchecked") public TreeEntityMap() { mapNameToValue = new TreeMap(); mapValueToName = new TreeMap(); } } static class LookupEntityMap extends PrimitiveEntityMap { private static final int LOOKUP_TABLE_SIZE = 256; private String[] lookupTable; @Override public String name(int value) { if (value < LOOKUP_TABLE_SIZE) { return lookupTable()[value]; } return super name(value); } private String[] lookupTable() { if (lookupTable == null) { createLookupTable(); } return lookupTable; } private void createLookupTable() { lookupTable = new String[LOOKUP_TABLE_SIZE]; for (int i = 0; i < LOOKUP_TABLE_SIZE; ++i) { lookupTable[i] = super name(i); } } } static class ArrayEntityMap implements EntityMap { protected int growBy = 100; protected int size = 0; protected String[] names; protected int[] values; public ArrayEntityMap() { names = new String[growBy]; values = new int[growBy]; } public ArrayEntityMap(int growBy) { this growBy = growBy; names = new String[growBy]; values = new int[growBy]; } public void add(String name, int value) { ensureCapacity(size + 1); names[size] = name; values[size] = value; size++; } protected void ensureCapacity(int capacity) { if (capacity > names length) { final int newSize = Math max(capacity, size + growBy); final String[] newNames = new String[newSize]; System arraycopy(names, 0, newNames, 0, size); names = newNames; final int[] newValues = new int[newSize]; System arraycopy(values, 0, newValues, 0, size); values = newValues; } } public String name(int value) { for (int i = 0; i < size; ++i) { if (values[i] == value) { return names[i]; } } return null; } public int value(String name) { for (int i = 0; i < size; ++i) { if (names[i] equals(name)) { return values[i]; } } return -1; } } static class BinaryEntityMap extends ArrayEntityMap { public BinaryEntityMap() {} public BinaryEntityMap(int growBy) { super(growBy); } // based on code in java util Arrays private int binarySearch(int key) { int low = 0; int high = size - 1; while (low <= high) { final int mid = (low + high) >>> 1; final int midVal = values[mid]; if (midVal < key) { low = mid + 1; } else if (midVal > key) { high = mid - 1; } else { return mid; // key found } } return -(low + 1); // key not found  } @Override public void add(String name, int value) { ensureCapacity(size + 1); int insertAt = binarySearch(value); if (insertAt > 0) { return; // note: this means you can't insert the same value // twice } insertAt = -(insertAt + 1); // binarySearch returns it negative and // off-by-one System arraycopy(values, insertAt, values, insertAt + 1, size - insertAt); values[insertAt] = value; System arraycopy(names, insertAt, names, insertAt + 1, size - insertAt); names[insertAt] = name; size++; } @Override public String name(int value) { final int index = binarySearch(value); if (index < 0) { return null; } return names[index]; } }  public static final class Unescaped { public final String unescaped; // An ordered list of start/end indices public final ArrayList<int[]> indices; public Unescaped(String unescaped, ArrayList<int[]> indices) { this unescaped = unescaped; this indices = indices; } } public void addEntities(String[][] entityArray) { for (String[] anEntityArray : entityArray) { addEntity(anEntityArray[0], Integer parseInt(anEntityArray[1])); } } public void addEntity(String name, int value) { map add(name, value); } public String entityName(int value) { return map name(value); } public int entityValue(String name) { return map value(name); }  public Unescaped unescape(String str) { final int length = str length(); final StringBuilder buf = new StringBuilder(length); final ArrayList<int[]> indices = new ArrayList<>(5); int i; for (i = 0; i < length; ++i) { final char ch = str charAt(i); if (ch == '&') { final int semi = str indexOf(';', i + 1); if (semi == -1) { buf append(ch); continue; } final String entityName = str substring(i + 1, semi); final int entityNameLength = entityName length(); int entityValue = -1; if (entityNameLength > 0) { if (entityName charAt(0) == '#' && entityNameLength > 1) { final char charAt1 = entityName charAt(1); try { if (charAt1 == 'x' || charAt1 == 'X') { if (entityNameLength > 2) { entityValue = Integer valueOf(entityName substring(2), 16)  intValue(); } } else { entityValue = Integer parseInt(entityName substring(1)); } } catch (Exception ignore) { } } else { entityValue = this entityValue(entityName); } } if (entityValue == -1) { buf append('&'); final int amp = entityName indexOf('&'); if (amp == -1) { buf append(entityName); buf append(';'); i = semi; } } else { buf append((char) (entityValue)); indices add(new int[] { i, semi }); i = semi; } } else { buf append(ch); } } return new Unescaped(buf toString(), indices); }}package com twitter sdk android core models;public interface Identifiable {  long getId();}package com twitter sdk android core models;import com google gson annotations SerializedName;public class Image { @SerializedName("w") public final int w; @SerializedName("h") public final int h; @SerializedName("image_type") public final String imageType; public Image(int w, int h, String imageType) { this w = w; this h = h; this imageType = imageType; }}package com twitter sdk android core models;import com google gson annotations SerializedName;public class ImageValue { @SerializedName("height") public final int height; @SerializedName("width") public final int width; @SerializedName("url") public final String url; @SerializedName("alt") public final String alt; public ImageValue(int height, int width, String url, String alt) { this height = height; this width = width; this url = url; this alt = alt; }}package com twitter sdk android core;import android content Context;import android content Intent;import android content pm PackageManager;import android content pm ResolveInfo;import java util List;public class IntentUtils {  public static boolean isActivityAvailable(Context context, Intent intent) { final PackageManager packageManager = context getPackageManager(); final List<ResolveInfo> activities = packageManager queryIntentActivities(intent, 0); return !activities isEmpty(); }  public static boolean safeStartActivity(Context context, Intent intent) { if (isActivityAvailable(context, intent)) { context startActivity(intent); return true; } return false; }}package com twitter sdk android core;import android content Intent;import io fabric sdk android FabricAndroidTestCase;public class IntentUtilsTest extends FabricAndroidTestCase { public void testIsActivityAvailable_noActivitiesAvailable() { final Intent intent = new Intent("io fabric is awesome"); assertFalse(IntentUtils isActivityAvailable(getContext(), intent)); } public void testIsActivityAvailable_activitiesAvailable() { final Intent intent = new Intent(android provider Settings ACTION_SETTINGS); assertTrue(IntentUtils isActivityAvailable(getContext(), intent)); } public void testSafeStartActivity() { final Intent intent = new Intent("io fabric is awesome"); assertFalse(IntentUtils safeStartActivity(getContext(), intent)); }}package com twitter sdk android tweetui internal util;public class IntHashMap {  private Entry[] table;  private int count;  private int threshold;  private float loadFactor;  private static class Entry { public final int hash; @SuppressWarnings("unused") public int key; public Object value; public Entry next;  protected Entry(int hash, int key, Object value, Entry next) { this hash = hash; this key = key; this value = value; this next = next; } }  public IntHashMap() { this(20, 0 75f); }  public IntHashMap(int initialCapacity) { this(initialCapacity, 0 75f); }  public IntHashMap(int initialCapacity, float loadFactor) { super(); if (initialCapacity < 0) { throw new IllegalArgumentException("Illegal Capacity: " + initialCapacity); } if (loadFactor <= 0) { throw new IllegalArgumentException("Illegal Load: " + loadFactor); } if (initialCapacity == 0) { initialCapacity = 1; } this loadFactor = loadFactor; table = new Entry[initialCapacity]; threshold = (int) (initialCapacity * loadFactor); }  public int size() { return count; }  public boolean isEmpty() { return count == 0; }  public boolean contains(Object value) { if (value == null) { throw new NullPointerException(); } final Entry[] tab = table; for (int i = tab length; i-- > 0;) { for (Entry e = tab[i]; e != null; e = e next) { if (e value equals(value)) { return true; } } } return false; }  public boolean containsValue(Object value) { return contains(value); }  public boolean containsKey(int key) { final Entry[] tab = table; final int hash = key; final int index = (hash & 0x7FFFFFFF) % tab length; for (Entry e = tab[index]; e != null; e = e next) { if (e hash == hash) { return true; } } return false; }  public Object get(int key) { final Entry[] tab = table; final int hash = key; final int index = (hash & 0x7FFFFFFF) % tab length; for (Entry e = tab[index]; e != null; e = e next) { if (e hash == hash) { return e value; } } return null; }  protected void rehash() { final int oldCapacity = table length; final Entry[] oldMap = table; final int newCapacity = oldCapacity * 2 + 1; final Entry[] newMap = new Entry[newCapacity]; threshold = (int) (newCapacity * loadFactor); table = newMap; for (int i = oldCapacity; i-- > 0;) { for (Entry old = oldMap[i]; old != null;) { final Entry e = old; old = old next; final int index = (e hash & 0x7FFFFFFF) % newCapacity; e next = newMap[index]; newMap[index] = e; } } }  public Object put(int key, Object value) { // Makes sure the key is not already in the hashtable  Entry[] tab = table; final int hash = key; int index = (hash & 0x7FFFFFFF) % tab length; for (Entry e = tab[index]; e != null; e = e next) { if (e hash == hash) { final Object old = e value; e value = value; return old; } } if (count >= threshold) { // Rehash the table if the threshold is exceeded rehash(); tab = table; index = (hash & 0x7FFFFFFF) % tab length; } // Creates the new entry  final Entry e = new Entry(hash, key, value, tab[index]); tab[index] = e; count++; return null; }  public Object remove(int key) { final Entry[] tab = table; final int hash = key; final int index = (hash & 0x7FFFFFFF) % tab length; for (Entry e = tab[index], prev = null; e != null; prev = e, e = e next) { if (e hash == hash) { if (prev != null) { prev next = e next; } else { tab[index] = e next; } count--; final Object oldValue = e value; e value = null; return oldValue; } } return null; }  public synchronized void clear() { final Entry[] tab = table; for (int index = tab length; --index >= 0;) { tab[index] = null; } count = 0; }}package com twitter sdk android tweetui;import android view View;import com twitter sdk android core Callback;import com twitter sdk android core Result;import com twitter sdk android core TwitterApiException;import com twitter sdk android core TwitterException;import com twitter sdk android core internal TwitterApiConstants;import com twitter sdk android core models Tweet;import com twitter sdk android core models TweetBuilder;class LikeTweetAction extends BaseTweetAction implements View OnClickListener { final Tweet tweet; final TweetRepository tweetRepository; final TweetUi tweetUi; final TweetScribeClient tweetScribeClient; LikeTweetAction(Tweet tweet, TweetUi tweetUi, Callback<Tweet> cb) { this(tweet, tweetUi, cb, new TweetScribeClientImpl(tweetUi)); } // For testing only LikeTweetAction(Tweet tweet, TweetUi tweetUi, Callback<Tweet> cb, TweetScribeClient tweetScribeClient) { super(cb); this tweet = tweet; this tweetUi = tweetUi; this tweetScribeClient = tweetScribeClient; this tweetRepository = tweetUi getTweetRepository(); } @Override public void onClick(View view) { if (view instanceof ToggleImageButton) { final ToggleImageButton toggleImageButton = (ToggleImageButton) view; if (tweet favorited) { scribeUnFavoriteAction(); tweetRepository unfavorite(tweet id, new LikeCallback(toggleImageButton, tweet, getActionCallback())); } else { scribeFavoriteAction(); tweetRepository favorite(tweet id, new LikeCallback(toggleImageButton, tweet, getActionCallback())); } } } void scribeFavoriteAction() { tweetScribeClient favorite(tweet); } void scribeUnFavoriteAction() { tweetScribeClient unfavorite(tweet); }  static class LikeCallback extends Callback<Tweet> { ToggleImageButton button; Tweet tweet; Callback<Tweet> cb;  LikeCallback(ToggleImageButton button, Tweet tweet, Callback<Tweet> cb) { this button = button; this tweet = tweet; this cb = cb; } @Override public void success(Result<Tweet> result) { cb success(result); } @Override public void failure(TwitterException exception) { if (exception instanceof TwitterApiException) { final TwitterApiException apiException = (TwitterApiException) exception; final int errorCode = apiException getErrorCode(); switch (errorCode) { case TwitterApiConstants Errors ALREADY_FAVORITED: final Tweet favorited = new TweetBuilder() copy(tweet) setFavorited(true)  build(); cb success(new Result<>(favorited, null)); return; case TwitterApiConstants Errors ALREADY_UNFAVORITED: final Tweet unfavorited = new TweetBuilder() copy(tweet) setFavorited(false)  build(); cb success(new Result<>(unfavorited, null)); return; default: // reset the toggle state back to match the Tweet button setToggledOn(tweet favorited); cb failure(exception); return; } } // reset the toggle state back to match the Tweet button setToggledOn(tweet favorited); cb failure(exception); } }}package com twitter sdk android tweetui;import com twitter sdk android core models MediaEntity;interface LinkClickListener {  void onUrlClicked(String url);  void onPhotoClicked(MediaEntity mediaEntity);}package com twitter sdk android core services;import com twitter sdk android core models Tweet;import java util List;import retrofit2 Call;import retrofit2 http GET;import retrofit2 http Query;public interface ListService {  @GET("/1 1/lists/statuses json?" + "tweet_mode=extended&include_cards=true&cards_platform=TwitterKit-13") Call<List<Tweet>> statuses(@Query("list_id") Long listId, @Query("slug") String slug, @Query("owner_screen_name") String ownerScreenName, @Query("owner_id") Long ownerId, @Query("since_id") Long sinceId, @Query("max_id") Long maxId, @Query("count") Integer count, @Query("include_entities") Boolean includeEntities, @Query("include_rts") Boolean includeRetweets);}package com twitter sdk android tweetui;import com twitter sdk android core Callback;import com twitter sdk android core TwitterException;import io fabric sdk android Logger;abstract class LoggingCallback<T> extends Callback<T> { // Wrapped cb generic type is unknown, concrete subclass responsible for implementing // success(Result<T> result) and unpacking result to call cb with proper type checking private final Callback cb; private final Logger logger;  LoggingCallback(Callback cb, Logger logger) { this cb = cb; this logger = logger; } @Override public void failure(TwitterException exception) { logger e(TweetUi LOGTAG, exception getMessage(), exception); if (cb != null) { cb failure(exception); } }}package com twitter sdk android unity;import android app Activity;import android content Intent;import android os Bundle;import com twitter sdk android core Callback;import com twitter sdk android core Result;import com twitter sdk android core TwitterException;import com twitter sdk android core TwitterSession;import com twitter sdk android core TwitterSessionHelper;import com twitter sdk android core identity TwitterAuthClient;public class LoginActivity extends Activity { TwitterAuthClient authClient; @Override public void onCreate(Bundle savedInstanceState) { super onCreate(savedInstanceState); authClient = new TwitterAuthClient(); authClient authorize(this, new Callback<TwitterSession>() { @Override public void success(Result<TwitterSession> result) { final String session = TwitterSessionHelper serialize(result data); final UnityMessage message = new UnityMessage Builder()  setMethod("LoginComplete")  setData(session)  build(); message send(); finish(); } @Override public void failure(TwitterException ex) { final String error = new ApiError Serializer()  serialize(new ApiError(0, ex getMessage())); final UnityMessage message = new UnityMessage Builder()  setMethod("LoginFailed")  setData(error)  build(); message send(); finish(); } }); } @Override protected void onActivityResult(int requestCode, int resultCode, Intent data) { super onActivityResult(requestCode, resultCode, data); authClient onActivityResult(requestCode, resultCode, data); }}package com twitter sdk android core models;import com google gson annotations SerializedName;public class Media { @SerializedName("media_id") public final long mediaId; @SerializedName("media_id_string") public final String mediaIdString; @SerializedName("size") public final long size; @SerializedName("image") public final Image image; public Media(long mediaID, String mediaIdString, long size, Image image) { this mediaId = mediaID; this mediaIdString = mediaIdString; this size = size; this image = image; }}package com twitter sdk android tweetui internal;import android content Context;import android graphics drawable Drawable;import android util AttributeSet;import android view LayoutInflater;import android view View;import android widget FrameLayout;import android widget ImageView;import android widget TextView;import com twitter sdk android core internal VineCardUtils;import com twitter sdk android core models Card;import com twitter sdk android core models MediaEntity;import com twitter sdk android tweetui R;public class MediaBadgeView extends FrameLayout { TextView videoDuration; ImageView badge; public MediaBadgeView(Context context) { this(context, null); } public MediaBadgeView(Context context, AttributeSet attrs) { this(context, attrs, 0); } public MediaBadgeView(Context context, AttributeSet attrs, int defStyleAttr) { super(context, attrs, defStyleAttr); initSubViews(context); } void initSubViews(Context context) { final LayoutInflater inflater = (LayoutInflater) context  getSystemService(Context LAYOUT_INFLATER_SERVICE); final View view = inflater inflate(R layout tw__media_badge, this, true); videoDuration = (TextView) view findViewById(R id tw__video_duration); badge = (ImageView) view findViewById(R id tw__gif_badge); } public void setMediaEntity(MediaEntity entity) { if (TweetMediaUtils GIF_TYPE equals(entity type)) { setBadge(getResources() getDrawable(R drawable tw__gif_badge)); } else if (TweetMediaUtils VIDEO_TYPE equals(entity type)) { final long duration = entity videoInfo == null ? 0 : entity videoInfo durationMillis; setText(duration); } else { setEmpty(); } } public void setCard(Card card) { if (VineCardUtils isVine(card)) { setBadge(getResources() getDrawable(R drawable tw__vine_badge)); } else { setEmpty(); } } void setText(long duration) { videoDuration setVisibility(View VISIBLE); badge setVisibility(View GONE); videoDuration setText(MediaTimeUtils getPlaybackTime(duration)); } void setBadge(Drawable drawable) { badge setVisibility(View VISIBLE); videoDuration setVisibility(View GONE); badge setImageDrawable(drawable); } void setEmpty() { videoDuration setVisibility(View GONE); badge setVisibility(View GONE); }}package com twitter sdk android core models;import com google gson annotations SerializedName;import java io Serializable;public class MediaEntity extends UrlEntity {  @SerializedName("id") public final long id;  @SerializedName("id_str") public final String idStr;  @SerializedName("media_url") public final String mediaUrl;  @SerializedName("media_url_https") public final String mediaUrlHttps;  @SerializedName("sizes") public final Sizes sizes;  @SerializedName("source_status_id") public final long sourceStatusId;  @SerializedName("source_status_id_str") public final String sourceStatusIdStr;  @SerializedName("type") public final String type;  @SerializedName("video_info") public final VideoInfo videoInfo; @SerializedName("ext_alt_text") public final String altText; public MediaEntity(String url, String expandedUrl, String displayUrl, int start, int end, long id, String idStr, String mediaUrl, String mediaUrlHttps, Sizes sizes, long sourceStatusId, String sourceStatusIdStr, String type, VideoInfo videoInfo, String altText) { super(url, expandedUrl, displayUrl, start, end); this id = id; this idStr = idStr; this mediaUrl = mediaUrl; this mediaUrlHttps = mediaUrlHttps; this sizes = sizes; this sourceStatusId = sourceStatusId; this sourceStatusIdStr = sourceStatusIdStr; this type = type; this videoInfo = videoInfo; this altText = altText; } public static class Sizes implements Serializable {  @SerializedName("medium") public final Size medium;  @SerializedName("thumb") public final Size thumb;  @SerializedName("small") public final Size small;  @SerializedName("large") public final Size large; public Sizes(Size thumb, Size small, Size medium, Size large) { this thumb = thumb; this small = small; this medium = medium; this large = large; } } public static class Size implements Serializable {  @SerializedName("w") public final int w;  @SerializedName("h") public final int h;  @SerializedName("resize") public final String resize; public Size(int w, int h, String resize) { this w = w; this h = h; this resize = resize; } }}package com twitter sdk android core services;import com twitter sdk android core models Media;import okhttp3 RequestBody;import retrofit2 Call;import retrofit2 http Multipart;import retrofit2 http POST;import retrofit2 http Part;public interface MediaService {  @Multipart @POST("https://upload twitter com/1 1/media/upload json") Call<Media> upload(@Part("media") RequestBody media, @Part("media_data") RequestBody mediaData, @Part("additional_owners") RequestBody additionalOwners);}package com twitter sdk android tweetui internal;import java util Locale;final class MediaTimeUtils { private static final String TIME_FORMAT_LONG = "%1$d:%2$02d:%3$02d"; private static final String TIME_FORMAT_SHORT = "%1$d:%2$02d"; private MediaTimeUtils() {} static String getPlaybackTime(long timeMillis) { final int timeSeconds = (int) (timeMillis / 1000); final int seconds = timeSeconds % 60; final int minutes = (timeSeconds / 60) % 60; final int hours = timeSeconds / 3600; if (hours > 0) { return String format(Locale getDefault(), TIME_FORMAT_LONG, hours, minutes, seconds); } else { return String format(Locale getDefault(), TIME_FORMAT_SHORT, minutes, seconds); } }}package com twitter sdk android core models;import com google gson annotations SerializedName;public class MentionEntity extends Entity {  @SerializedName("id") public final long id;  @SerializedName("id_str") public final String idStr;  @SerializedName("name") public final String name;  @SerializedName("screen_name") public final String screenName; public MentionEntity(long id, String idStr, String name, String screenName, int start, int end) { super(start, end); this id = id; this idStr = idStr; this name = name; this screenName = screenName; }}package com twitter sdk android core internal;import android content Context;import java io File;import java io FilenameFilter;import java util Arrays;import java util Comparator;public class MigrationHelper { private static final String SHARED_PREFS_DIR = "shared_prefs"; public void migrateSessionStore(Context context, String prefixMatch, String expectedFileName) { final File sharedPrefsDir = getSharedPreferencesDir(context); // shared_prefs dir has not been created, do nothing if (!sharedPrefsDir exists() || !sharedPrefsDir isDirectory()) { return; } // if shared prefs already exist, do nothing final File expectedSharedPrefsFile = new File(sharedPrefsDir, expectedFileName); if (expectedSharedPrefsFile exists()) { return; } // rename latest final File oldPrefsharedPrefsFile = getLatestFile(sharedPrefsDir, prefixMatch); if (oldPrefsharedPrefsFile != null) { oldPrefsharedPrefsFile renameTo(expectedSharedPrefsFile); } } File getSharedPreferencesDir(Context context) { return new File(context getApplicationInfo() dataDir, SHARED_PREFS_DIR); } File getLatestFile(File sharedPrefsDir, String prefix) { final File[] files = sharedPrefsDir listFiles(new PrefixFileNameFilter(prefix)); Arrays sort(files, new FileLastModifiedComparator()); return files length > 0 ? files[0] : null; } static class FileLastModifiedComparator implements Comparator<File> { @Override public int compare(File file1, File file2) { return Long valueOf(file2 lastModified()) compareTo(file1 lastModified()); } } static class PrefixFileNameFilter implements FilenameFilter { final String prefix; public PrefixFileNameFilter(String prefix) { this prefix = prefix; } @Override public boolean accept(File file, String filename) { return filename startsWith(prefix); } }}package com twitter sdk android core internal;import android content Context;import com twitter sdk android core TwitterCoreTest;import java io File;import java io FilenameFilter;import java io IOException;import java util Comparator;import static org mockito Mockito mock;import static org mockito Mockito when;public class MigrationHelperTests extends TwitterCoreTest { private static final String SHARED_PREFS_DIR = "shared_prefs"; private static final String KIT_IDENTIFIER = "com foo test:test"; private static final String EXPECTED_PREFERENCE = KIT_IDENTIFIER + ":test xml"; private static final String TEST_PREFERENCE = KIT_IDENTIFIER + ":a b c xml"; MigrationHelper migrationHelper; @Override public void setUp() throws Exception { super setUp(); migrationHelper = new MigrationHelper(); } public void testMigrateSessionStore_emptyDirectory() throws Exception { final File sharedPrefsDir = getSharedPreferencesDir(getContext()); clearSharePrefs(sharedPrefsDir); createSharedPrefsFolder(sharedPrefsDir); migrationHelper migrateSessionStore(getContext(), KIT_IDENTIFIER, EXPECTED_PREFERENCE); assertEquals(0, sharedPrefsDir listFiles() length); } public void testMigrateSessionStore_noSharedPrefDirectory() throws Exception { final File sharedPrefsDir = getSharedPreferencesDir(getContext()); clearSharePrefs(sharedPrefsDir); deleteSharedPrefsFolder(sharedPrefsDir); migrationHelper migrateSessionStore(getContext(), KIT_IDENTIFIER, EXPECTED_PREFERENCE); assertFalse(sharedPrefsDir exists()); } public void testMigrateSessionStore_notMigrated() throws Exception { final File sharedPrefsDir = getSharedPreferencesDir(getContext()); clearSharePrefs(sharedPrefsDir); createSharedPrefsFolder(sharedPrefsDir); createFile(sharedPrefsDir, TEST_PREFERENCE); migrationHelper migrateSessionStore(getContext(), KIT_IDENTIFIER, EXPECTED_PREFERENCE); final File expected = new File(sharedPrefsDir, EXPECTED_PREFERENCE); assertTrue(expected exists()); final File oldPrefFile = new File(sharedPrefsDir, TEST_PREFERENCE); assertFalse(oldPrefFile exists()); } public void testMigrateSessionStore_alreadyMigrated() throws Exception { final File sharedPrefsDir = getSharedPreferencesDir(getContext()); clearSharePrefs(sharedPrefsDir); createSharedPrefsFolder(sharedPrefsDir); createFile(sharedPrefsDir, TEST_PREFERENCE); createFile(sharedPrefsDir, EXPECTED_PREFERENCE); migrationHelper migrateSessionStore(getContext(), KIT_IDENTIFIER, EXPECTED_PREFERENCE); final File expected = new File(sharedPrefsDir, EXPECTED_PREFERENCE); assertTrue(expected exists()); final File oldPrefFile = new File(sharedPrefsDir, TEST_PREFERENCE); assertTrue(oldPrefFile exists()); } public void testPrefixFileNameFilter() throws Exception { final FilenameFilter filter = new MigrationHelper PrefixFileNameFilter(KIT_IDENTIFIER); assertFalse(filter accept(null, "foo xml")); assertTrue(filter accept(null, KIT_IDENTIFIER + "foo xml")); } public void testFileLastModifiedComparator() { final Comparator<File> comparator = new MigrationHelper FileLastModifiedComparator(); final File file1 = mock(File class); when(file1 lastModified()) thenReturn(100L); final File file2 = mock(File class); when(file2 lastModified()) thenReturn(200L); assertEquals(1, comparator compare(file1, file2)); assertEquals(-1, comparator compare(file2, file1)); } private void clearSharePrefs(File sharedPrefsFolder) { final File[] files = sharedPrefsFolder listFiles(); if (files == null) { return; } for (File file : files) { file delete(); } } private void createSharedPrefsFolder(File sharedPrefsFolder) { if (!sharedPrefsFolder exists()) { sharedPrefsFolder mkdir(); } } private void deleteSharedPrefsFolder(File sharedPrefsFolder) { if (sharedPrefsFolder exists()) { sharedPrefsFolder delete(); } } private File getSharedPreferencesDir(Context context) { return new File(context getApplicationInfo() dataDir, SHARED_PREFS_DIR); } private File createFile(File sharedPrefsFolder, String name) { final File result = new File(sharedPrefsFolder, name); try { result createNewFile(); } catch (IOException e) { // Ignore } return result; }}package com twitter sdk android tweetui internal;import android animation ValueAnimator;import android content Context;import android graphics Matrix;import android graphics RectF;import android graphics drawable Drawable;import android util AttributeSet;import android view GestureDetector;import android view MotionEvent;import android view ScaleGestureDetector;import android view animation AccelerateDecelerateInterpolator;import android widget ImageView;public class MultiTouchImageView extends ImageView { private final static long SCALE_ANIMATION_DURATION = 300L; private final static float DOUBLE_TAP_SCALE_FACTOR = 2 0f; private final static float MINIMUM_SCALE_FACTOR = 1 0f; final ScaleGestureDetector scaleGestureDetector; final GestureDetector gestureDetector; final Matrix drawMatrix = new Matrix(); final Matrix baseMatrix = new Matrix(); final Matrix updateMatrix = new Matrix(); final RectF viewRect = new RectF(); // Used to avoid allocating new objects final RectF drawRect = new RectF(); final float[] matrixValues = new float[9]; public MultiTouchImageView(Context context) { this(context, null); } public MultiTouchImageView(Context context, AttributeSet attrs) { this(context, attrs, 0); } public MultiTouchImageView(Context context, AttributeSet attrs, int defStyleAttr) { super(context, attrs, defStyleAttr); scaleGestureDetector = new ScaleGestureDetector(context, new ScaleGestureDetector  SimpleOnScaleGestureListener() { @Override public boolean onScale(ScaleGestureDetector scaleGestureDetector) { setScale(scaleGestureDetector getScaleFactor(), scaleGestureDetector getFocusX(), scaleGestureDetector getFocusY()); setImageMatrix(); return true; } @Override public void onScaleEnd(ScaleGestureDetector detector) { if (getScale() < MINIMUM_SCALE_FACTOR) { reset(); setImageMatrix(); } } }); gestureDetector = new GestureDetector(context, new GestureDetector  SimpleOnGestureListener() { @Override public boolean onScroll(MotionEvent e1, MotionEvent e2, float dx, float dy) { setTranslate(-dx, -dy); setImageMatrix(); return true; } @Override public boolean onDoubleTap(MotionEvent e) { if (getScale() > MINIMUM_SCALE_FACTOR) { animateScale(getScale(), MINIMUM_SCALE_FACTOR, e getX(), e getY()); } else { animateScale(getScale(), DOUBLE_TAP_SCALE_FACTOR, e getX(), e getY()); } return true; } }); } boolean isInitializationComplete() { final Drawable drawable = getDrawable(); return drawable != null && drawable getIntrinsicWidth() > 0; } @Override protected void onLayout(boolean changed, int left, int top, int right, int bottom) { super onLayout(changed, left, top, right, bottom); if (isInitializationComplete()) { initializeViewRect(); initializeBaseMatrix(getDrawable()); setImageMatrix(); } } void initializeViewRect() { viewRect set(getPaddingLeft(), getPaddingTop(), getWidth() - getPaddingRight(), getHeight() - getPaddingBottom()); } void initializeBaseMatrix(Drawable drawable) { final int drawableWidth = drawable getIntrinsicWidth(); final int drawableHeight = drawable getIntrinsicHeight(); final RectF srcRect = new RectF(0, 0, drawableWidth, drawableHeight); baseMatrix reset(); baseMatrix setRectToRect(srcRect, viewRect, Matrix ScaleToFit CENTER); } @Override public boolean onTouchEvent(MotionEvent event) { if (!isInitializationComplete()) { return false; } // Do not allow touch events to be intercepted (usually for gallery swipes) by default getParent() requestDisallowInterceptTouchEvent(true); boolean retVal = scaleGestureDetector onTouchEvent(event); retVal = gestureDetector onTouchEvent(event) || retVal; return retVal || super onTouchEvent(event); } void setScale(float ds, float px, float py) { updateMatrix postScale(ds, ds, px, py); } float getScale() { updateMatrix getValues(matrixValues); return matrixValues[Matrix MSCALE_X]; } void setTranslate(float dx, float dy) { updateMatrix postTranslate(dx, dy); } void reset() { updateMatrix reset(); } void updateMatrixBounds() { final RectF rect = getDrawRect(getDrawMatrix()); float dy = 0; float dx = 0; if (rect height() <= viewRect height()) { dy = (viewRect height() - rect height()) / 2 - rect top; } else if (rect top > 0) { dy = -rect top; } else if (rect bottom < viewRect height()) { dy = viewRect height() - rect bottom; } if (rect width() <= viewRect width()) { dx = (viewRect width() - rect width()) / 2 - rect left; } else if (rect left > 0) { dx = -rect left; } else if (rect right < viewRect width()) { dx = viewRect width() - rect right; } setTranslate(dx, dy); } RectF getDrawRect(Matrix matrix) { final Drawable drawable = getDrawable(); if (drawable != null) { drawRect set(0, 0, drawable getIntrinsicWidth(), drawable getIntrinsicHeight()); matrix mapRect(drawRect); } return drawRect; } Matrix getDrawMatrix() { drawMatrix set(baseMatrix); drawMatrix postConcat(updateMatrix); return drawMatrix; } void setImageMatrix() { updateMatrixBounds(); setScaleType(ScaleType MATRIX); setImageMatrix(getDrawMatrix()); } void animateScale(float start, float end, final float px, final float py) { final ValueAnimator animator = ValueAnimator ofFloat(start, end); animator setDuration(SCALE_ANIMATION_DURATION); animator setInterpolator(new AccelerateDecelerateInterpolator()); animator addUpdateListener(new ValueAnimator AnimatorUpdateListener() { @Override public void onAnimationUpdate(ValueAnimator valueAnimator) { final float scale = (float) valueAnimator getAnimatedValue(); final float ds = scale / getScale(); setScale(ds, px, py); setImageMatrix(); } }); animator start(); }}package com twitter sdk android core internal oauth;import com twitter sdk android core TwitterAuthConfig;import com twitter sdk android core TwitterAuthToken;import java util HashMap;import java util Map;public class OAuth1aHeaders { public static final String HEADER_AUTH_SERVICE_PROVIDER = "X-Auth-Service-Provider"; public static final String HEADER_AUTH_CREDENTIALS = "X-Verify-Credentials-Authorization";  public String getAuthorizationHeader(TwitterAuthConfig authConfig, TwitterAuthToken authToken, String callback, String method, String url, Map<String, String> postParams) { final OAuth1aParameters oAuth1aParameters = getOAuth1aParameters(authConfig, authToken, callback, method, url, postParams); return oAuth1aParameters getAuthorizationHeader(); }  public Map<String, String> getOAuthEchoHeaders(TwitterAuthConfig authConfig, TwitterAuthToken authToken, String callback, String method, String url, Map<String, String> postParams) { final Map<String, String> headers = new HashMap<>(2); final String authorizationHeader = getAuthorizationHeader(authConfig, authToken, callback, method, url, postParams); headers put(HEADER_AUTH_CREDENTIALS, authorizationHeader); headers put(HEADER_AUTH_SERVICE_PROVIDER, url); return headers; } OAuth1aParameters getOAuth1aParameters(TwitterAuthConfig authConfig, TwitterAuthToken authToken, String callback, String method, String url, Map<String, String> postParams) { return new OAuth1aParameters(authConfig, authToken, callback, method, url, postParams); }}package com twitter sdk android core internal network;import com twitter sdk android core Session;import com twitter sdk android core TwitterAuthConfig;import com twitter sdk android core TwitterAuthToken;import com twitter sdk android core internal oauth OAuth1aHeaders;import com twitter sdk android core internal oauth OAuthConstants;import java io IOException;import java util HashMap;import java util Locale;import java util Map;import io fabric sdk android services network UrlUtils;import okhttp3 FormBody;import okhttp3 HttpUrl;import okhttp3 Interceptor;import okhttp3 Request;import okhttp3 RequestBody;import okhttp3 Response;public class OAuth1aInterceptor implements Interceptor { final Session<? extends TwitterAuthToken> session; final TwitterAuthConfig authConfig; public OAuth1aInterceptor(Session<? extends TwitterAuthToken> session, TwitterAuthConfig authConfig) { this session = session; this authConfig = authConfig; } @Override public Response intercept(Chain chain) throws IOException { final Request request = chain request(); final Request hackRequest = request newBuilder()  url(urlWorkaround(request url()))  build(); final Request newRequest = hackRequest  newBuilder()  header(OAuthConstants HEADER_AUTHORIZATION, getAuthorizationHeader(hackRequest))  build(); return chain proceed(newRequest); } HttpUrl urlWorkaround(HttpUrl url) { final HttpUrl Builder builder = url newBuilder() query(null); final int size = url querySize(); for (int i = 0; i < size; i++) { builder addEncodedQueryParameter(UrlUtils percentEncode(url queryParameterName(i)), UrlUtils percentEncode(url queryParameterValue(i))); } return builder build(); } String getAuthorizationHeader(Request request) throws IOException { return new OAuth1aHeaders() getAuthorizationHeader(authConfig, session getAuthToken(), null, request method(), request url() toString(), getPostParams(request)); } Map<String, String> getPostParams(Request request) throws IOException { final Map<String, String> params = new HashMap<>(); if ("POST" equals(request method() toUpperCase(Locale US))) { final RequestBody output = request body(); if (output instanceof FormBody) { final FormBody body = (FormBody) output; for (int i = 0; i < body size(); i++) { params put(body encodedName(i), body value(i)); } } } return params; }}package com twitter sdk android core internal oauth;import io fabric sdk android Fabric;import io fabric sdk android services network HttpRequest;import io fabric sdk android services network UrlUtils;import com twitter sdk android core TwitterAuthConfig;import com twitter sdk android core TwitterAuthToken;import com twitter sdk android core TwitterCore;import java io UnsupportedEncodingException;import java net URI;import java security InvalidKeyException;import java security NoSuchAlgorithmException;import java security SecureRandom;import java util Locale;import java util Map;import java util TreeMap;import javax crypto Mac;import javax crypto SecretKey;import javax crypto spec SecretKeySpec;class OAuth1aParameters { private static final String VERSION = "1 0"; private static final String SIGNATURE_METHOD = "HMAC-SHA1";  private static final SecureRandom RAND = new SecureRandom(); private final TwitterAuthConfig authConfig; private final TwitterAuthToken authToken; private final String callback; private final String method; private final String url; private final Map<String, String> postParams; public OAuth1aParameters(TwitterAuthConfig authConfig, TwitterAuthToken authToken, String callback, String method, String url, Map<String, String> postParams) { this authConfig = authConfig; this authToken = authToken; this callback = callback; this method = method; this url = url; this postParams = postParams; }  public String getAuthorizationHeader() { final String nonce = getNonce(); final String timestamp = getTimestamp(); final String signatureBase = constructSignatureBase(nonce, timestamp); final String signature = calculateSignature(signatureBase); return constructAuthorizationHeader(nonce, timestamp, signature); } private String getNonce() { return String valueOf(System nanoTime()) + String valueOf(Math abs(RAND nextLong())); } private String getTimestamp() { final long secondsFromEpoch = System currentTimeMillis() / 1000; return Long toString(secondsFromEpoch); } String constructSignatureBase(String nonce, String timestamp) { // Get query parameters from request  final URI uri = URI create(url); final TreeMap<String, String> params = UrlUtils getQueryParams(uri, true); if (postParams != null) { params putAll(postParams); } // Add OAuth parameters  if (callback != null) { params put(OAuthConstants PARAM_CALLBACK, callback); } params put(OAuthConstants PARAM_CONSUMER_KEY, authConfig getConsumerKey()); params put(OAuthConstants PARAM_NONCE, nonce); params put(OAuthConstants PARAM_SIGNATURE_METHOD, SIGNATURE_METHOD); params put(OAuthConstants PARAM_TIMESTAMP, timestamp); if (authToken != null && authToken token != null) { params put(OAuthConstants PARAM_TOKEN, authToken token); } params put(OAuthConstants PARAM_VERSION, VERSION); // Construct the signature base  final String baseUrl = uri getScheme() + "://" + uri getHost() + uri getPath(); final StringBuilder sb = new StringBuilder()  append(method toUpperCase(Locale ENGLISH))  append('&')  append(UrlUtils percentEncode(baseUrl))  append('&')  append(getEncodedQueryParams(params)); return sb toString(); } private String getEncodedQueryParams(TreeMap<String, String> params) { final StringBuilder paramsBuf = new StringBuilder(); final int numParams = params size(); int current = 0; for (Map Entry<String, String> entry : params entrySet()) { paramsBuf append(UrlUtils percentEncode(UrlUtils percentEncode(entry getKey())))  append("%3D")  append(UrlUtils percentEncode(UrlUtils percentEncode(entry getValue()))); current += 1; if (current < numParams) { paramsBuf append("%26"); } } return paramsBuf toString(); } String calculateSignature(String signatureBase) { try { final String key = getSigningKey(); // Calculate the signature by passing both the signature base and signing key to the // HMAC-SHA1 hashing algorithm final byte[] signatureBaseBytes = signatureBase getBytes(UrlUtils UTF8); final byte[] keyBytes = key getBytes(UrlUtils UTF8); final SecretKey secretKey = new SecretKeySpec(keyBytes, "HmacSHA1"); final Mac mac = Mac getInstance("HmacSHA1"); mac init(secretKey); final byte[] signatureBytes = mac doFinal(signatureBaseBytes); return new String( HttpRequest Base64 encodeBytesToBytes(signatureBytes, 0, signatureBytes length), UrlUtils UTF8); } catch (InvalidKeyException e) { Fabric getLogger() e(TwitterCore TAG, "Failed to calculate signature", e); return ""; } catch (NoSuchAlgorithmException e) { Fabric getLogger() e(TwitterCore TAG, "Failed to calculate signature", e); return ""; } catch (UnsupportedEncodingException e) { Fabric getLogger() e(TwitterCore TAG, "Failed to calculate signature", e); return ""; } } private String getSigningKey() { final String tokenSecret = authToken != null ? authToken secret : null; return new StringBuilder()  append(UrlUtils urlEncode(authConfig getConsumerSecret()))  append('&')  append(UrlUtils urlEncode(tokenSecret))  toString(); } String constructAuthorizationHeader(String nonce, String timestamp, String signature) { final StringBuilder sb = new StringBuilder("OAuth"); appendParameter(sb, OAuthConstants PARAM_CALLBACK, callback); appendParameter(sb, OAuthConstants PARAM_CONSUMER_KEY, authConfig getConsumerKey()); appendParameter(sb, OAuthConstants PARAM_NONCE, nonce); appendParameter(sb, OAuthConstants PARAM_SIGNATURE, signature); appendParameter(sb, OAuthConstants PARAM_SIGNATURE_METHOD, SIGNATURE_METHOD); appendParameter(sb, OAuthConstants PARAM_TIMESTAMP, timestamp); final String token = authToken != null ? authToken token : null; appendParameter(sb, OAuthConstants PARAM_TOKEN, token); appendParameter(sb, OAuthConstants PARAM_VERSION, VERSION); // Remove the extra ',' at the end  return sb substring(0, sb length() - 1); } private void appendParameter(StringBuilder sb, String name, String value) { if (value != null) { sb append(' ')  append(UrlUtils percentEncode(name)) append("=\"")  append(UrlUtils percentEncode(value)) append("\","); } }}package com twitter sdk android core internal oauth;import android net Uri;import io fabric sdk android services network UrlUtils;import com twitter sdk android core Callback;import com twitter sdk android core Result;import com twitter sdk android core TwitterCore;import com twitter sdk android core TwitterAuthConfig;import com twitter sdk android core TwitterAuthException;import com twitter sdk android core TwitterAuthToken;import com twitter sdk android core TwitterException;import com twitter sdk android core internal TwitterApi;import java io BufferedReader;import java io IOException;import java io InputStreamReader;import java util TreeMap;import javax net ssl SSLSocketFactory;import okhttp3 ResponseBody;import retrofit2 Call;import retrofit2 http Header;import retrofit2 http POST;import retrofit2 http Query;public class OAuth1aService extends OAuthService { interface OAuthApi { @POST("/oauth/request_token") Call<ResponseBody> getTempToken(@Header(OAuthConstants HEADER_AUTHORIZATION) String auth); @POST("/oauth/access_token") Call<ResponseBody> getAccessToken(@Header(OAuthConstants HEADER_AUTHORIZATION) String auth, @Query(OAuthConstants PARAM_VERIFIER) String verifier); } private static final String RESOURCE_OAUTH = "oauth"; private static final String CALLBACK_URL = "twittersdk://callback"; private static final String PARAM_SCREEN_NAME = "screen_name"; private static final String PARAM_USER_ID = "user_id"; OAuthApi api; public OAuth1aService(TwitterCore twitterCore, SSLSocketFactory sslSocketFactory, TwitterApi api) { super(twitterCore, sslSocketFactory, api); this api = getRetrofit() create(OAuthApi class); }  public void requestTempToken(final Callback<OAuthResponse> callback) { final TwitterAuthConfig config = getTwitterCore() getAuthConfig(); final String url = getTempTokenUrl(); api getTempToken(new OAuth1aHeaders() getAuthorizationHeader(config, null, buildCallbackUrl(config), "POST", url, null)) enqueue(getCallbackWrapper(callback)); } String getTempTokenUrl() { return getApi() getBaseHostUrl() + "/oauth/request_token"; }  public String buildCallbackUrl(TwitterAuthConfig authConfig) { return Uri parse(CALLBACK_URL) buildUpon()  appendQueryParameter("version", getTwitterCore() getVersion())  appendQueryParameter("app", authConfig getConsumerKey())  build()  toString(); }  public void requestAccessToken(final Callback<OAuthResponse> callback, TwitterAuthToken requestToken, String verifier) { final String url = getAccessTokenUrl(); final String authHeader = new OAuth1aHeaders() getAuthorizationHeader(getTwitterCore()  getAuthConfig(), requestToken, null, "POST", url, null); api getAccessToken(authHeader, verifier) enqueue(getCallbackWrapper(callback)); } String getAccessTokenUrl() { return getApi() getBaseHostUrl() + "/oauth/access_token"; }  public String getAuthorizeUrl(TwitterAuthToken requestToken) { // https://api twitter com/oauth/authorize?oauth_token=%s return getApi() buildUponBaseHostUrl(RESOURCE_OAUTH, "authorize")  appendQueryParameter(OAuthConstants PARAM_TOKEN, requestToken token)  build()  toString(); }  public static OAuthResponse parseAuthResponse(String response) { final TreeMap<String, String> params = UrlUtils getQueryParams(response, false); final String token = params get(OAuthConstants PARAM_TOKEN); final String secret = params get(OAuthConstants PARAM_TOKEN_SECRET); final String userName = params get(PARAM_SCREEN_NAME); final long userId; if (params containsKey(PARAM_USER_ID)) { userId = Long parseLong(params get(PARAM_USER_ID)); } else { userId = 0L; } if (token == null || secret == null) { return null; } else { return new OAuthResponse(new TwitterAuthToken(token, secret), userName, userId); } } Callback<ResponseBody> getCallbackWrapper(final Callback<OAuthResponse> callback) { return new Callback<ResponseBody>() { @Override public void success(Result<ResponseBody> result) { //Try to get response body BufferedReader reader = null; final StringBuilder sb = new StringBuilder(); try { try { reader = new BufferedReader( new InputStreamReader(result data byteStream())); String line; while ((line = reader readLine()) != null) { sb append(line); } } finally { if (reader != null) { reader close(); } } final String responseAsStr = sb toString(); final OAuthResponse authResponse = parseAuthResponse(responseAsStr); if (authResponse == null) { callback failure(new TwitterAuthException( "Failed to parse auth response: " + responseAsStr)); } else { callback success(new Result<>(authResponse, null)); } } catch (IOException e) { callback failure(new TwitterAuthException(e getMessage(), e)); } } @Override public void failure(TwitterException exception) { callback failure(exception); } }; }}package com twitter sdk android core internal oauth;import io fabric sdk android Fabric;import io fabric sdk android services network HttpRequest;import io fabric sdk android services network UrlUtils;import com twitter sdk android core Callback;import com twitter sdk android core Result;import com twitter sdk android core TwitterCore;import com twitter sdk android core TwitterAuthConfig;import com twitter sdk android core TwitterException;import com twitter sdk android core internal TwitterApi;import javax net ssl SSLSocketFactory;import retrofit2 Call;import retrofit2 http Field;import retrofit2 http FormUrlEncoded;import retrofit2 http Header;import retrofit2 http Headers;import retrofit2 http POST;public class OAuth2Service extends OAuthService { OAuth2Api api; interface OAuth2Api { @POST("/1 1/guest/activate json") Call<GuestTokenResponse> getGuestToken( @Header(OAuthConstants HEADER_AUTHORIZATION) String auth); @Headers("Content-Type: application/x-www-form-urlencoded;charset=UTF-8") @FormUrlEncoded @POST("/oauth2/token") Call<OAuth2Token> getAppAuthToken(@Header(OAuthConstants HEADER_AUTHORIZATION) String auth, @Field(OAuthConstants PARAM_GRANT_TYPE) String grantType); } public OAuth2Service(TwitterCore twitterCore, SSLSocketFactory sslSocketFactory, TwitterApi api) { super(twitterCore, sslSocketFactory, api); this api = getRetrofit() create(OAuth2Api class); }  public void requestGuestAuthToken(final Callback<GuestAuthToken> callback) { final Callback<OAuth2Token> appAuthCallback = new Callback<OAuth2Token>() { @Override public void success(Result<OAuth2Token> result) { final OAuth2Token appAuthToken = result data; // Got back an app auth token, now request a guest auth token  final Callback<GuestTokenResponse> guestTokenCallback = new Callback<GuestTokenResponse>() { @Override public void success(Result<GuestTokenResponse> result) { // Return a GuestAuthToken that includes the guestToken  final GuestAuthToken guestAuthToken = new GuestAuthToken( appAuthToken getTokenType(), appAuthToken getAccessToken(), result data guestToken); callback success(new Result<>(guestAuthToken, null)); } @Override public void failure(TwitterException error) { Fabric getLogger() e(TwitterCore TAG, "Your app may not allow guest auth  Please talk to us " + "regarding upgrading your consumer key ", error); callback failure(error); } }; requestGuestToken(guestTokenCallback, appAuthToken); } @Override public void failure(TwitterException error) { Fabric getLogger() e(TwitterCore TAG, "Failed to get app auth token", error); if (callback != null) { callback failure(error); } } }; requestAppAuthToken(appAuthCallback); }  void requestAppAuthToken(final Callback<OAuth2Token> callback) { api getAppAuthToken(getAuthHeader(), OAuthConstants GRANT_TYPE_CLIENT_CREDENTIALS)  enqueue(callback); }  void requestGuestToken(final Callback<GuestTokenResponse> callback, OAuth2Token appAuthToken) { api getGuestToken(getAuthorizationHeader(appAuthToken)) enqueue(callback); }  private String getAuthorizationHeader(OAuth2Token token) { return OAuthConstants AUTHORIZATION_BEARER + " " + token getAccessToken(); } private String getAuthHeader() { final TwitterAuthConfig authConfig = getTwitterCore() getAuthConfig(); return OAuthConstants AUTHORIZATION_BASIC + " " + HttpRequest Base64 encode( UrlUtils percentEncode(authConfig getConsumerKey()) + ":" + UrlUtils percentEncode(authConfig getConsumerSecret())); }}package com twitter sdk android core internal oauth;import android os Parcel;import android os Parcelable;import com google gson annotations SerializedName;import com twitter sdk android core AuthToken;public class OAuth2Token extends AuthToken implements Parcelable { public static final String TOKEN_TYPE_BEARER = "bearer"; public static final Parcelable Creator<OAuth2Token> CREATOR = new Parcelable Creator<OAuth2Token>() { public OAuth2Token createFromParcel(Parcel in) { return new OAuth2Token(in); } public OAuth2Token[] newArray(int size) { return new OAuth2Token[size]; } }; @SerializedName("token_type") private final String tokenType; @SerializedName("access_token") private final String accessToken; public OAuth2Token(String tokenType, String accessToken) { super(); this tokenType = tokenType; this accessToken = accessToken; } public OAuth2Token(String tokenType, String accessToken, long createdAt) { super(createdAt); this tokenType = tokenType; this accessToken = accessToken; } private OAuth2Token(Parcel in) { super(); tokenType = in readString(); accessToken = in readString(); } public String getTokenType() { return tokenType; } public String getAccessToken() { return accessToken; } @Override public boolean isExpired() { // Oauth 2 0 tokens do not have a common expiration policy  Returning false indicates // the token is not known to have expired  App auth tokens only expire when manually // invalidated, while guest auth tokens are known to have expired after 3 hours  return false; } @Override public int describeContents() { return 0; } @Override public void writeToParcel(Parcel out, int flags) { out writeString(tokenType); out writeString(accessToken); } @Override public boolean equals(Object o) { if (this == o) return true; if (o == null || getClass() != o getClass()) return false; final OAuth2Token that = (OAuth2Token) o; if (accessToken != null ? !accessToken equals(that accessToken) : that accessToken != null) return false; if (tokenType != null ? !tokenType equals(that tokenType) : that tokenType != null) return false; return true; } @Override public int hashCode() { int result = tokenType != null ? tokenType hashCode() : 0; result = 31 * result + (accessToken != null ? accessToken hashCode() : 0); return result; }}package com twitter sdk android core identity;import android app Activity;import android content Intent;import android os Bundle;import android view View;import android webkit WebView;import android widget ProgressBar;import com twitter sdk android core R;import com twitter sdk android core TwitterAuthConfig;import com twitter sdk android core TwitterAuthException;import com twitter sdk android core TwitterCore;import com twitter sdk android core internal TwitterApi;import com twitter sdk android core internal oauth OAuth1aService;// This activity assumes it will handle configuration changes itself and MUST have the// following attribute defined in the AndroidManifest xml// file: android:configChanges="orientation|screenSize"public class OAuthActivity extends Activity implements OAuthController Listener { static final String EXTRA_AUTH_CONFIG = "auth_config"; private static final String STATE_PROGRESS = "progress"; OAuthController oAuthController; private ProgressBar spinner; private WebView webView; @Override protected void onCreate(Bundle savedInstanceState) { super onCreate(savedInstanceState); setContentView(R layout tw__activity_oauth); spinner = (ProgressBar) findViewById(R id tw__spinner); webView = (WebView) findViewById(R id tw__web_view); final boolean showProgress; if (savedInstanceState != null) { showProgress = savedInstanceState getBoolean(STATE_PROGRESS, false); } else { showProgress = true; } spinner setVisibility(showProgress ? View VISIBLE : View GONE); final TwitterCore kit = TwitterCore getInstance(); oAuthController = new OAuthController(spinner, webView, (TwitterAuthConfig) getIntent() getParcelableExtra(EXTRA_AUTH_CONFIG), new OAuth1aService(kit, kit getSSLSocketFactory(), new TwitterApi()), this); oAuthController startAuth(); } @Override protected void onSaveInstanceState(Bundle outState) { if (spinner getVisibility() == View VISIBLE) { outState putBoolean(STATE_PROGRESS, true); } super onSaveInstanceState(outState); } @Override public void onBackPressed() { oAuthController handleAuthError(RESULT_CANCELED, new TwitterAuthException("Authorization failed, request was canceled ")); } @Override public void onComplete(int resultCode, Intent data) { setResult(resultCode, data); finish(); }}package com twitter sdk android core identity;import android app Activity;import android content Context;import android content Intent;import io fabric sdk android FabricActivityTestCase;import io fabric sdk android FabricTestUtils;import com twitter sdk android core TwitterAuthConfig;import com twitter sdk android core TwitterAuthException;import com twitter sdk android core TwitterCore;import org mockito ArgumentCaptor;import static org mockito Mockito *;public class OAuthActivityTest extends FabricActivityTestCase<OAuthActivity> { private Context context; private TwitterCore twitterCore; private OAuthController mockController; public OAuthActivityTest() { super(OAuthActivity class); } @Override protected void setUp() throws Exception { super setUp(); context = getInstrumentation() getTargetContext(); twitterCore = new TwitterCore(new TwitterAuthConfig("", "")); mockController = mock(TestOAuthController class); FabricTestUtils resetFabric(); FabricTestUtils with(context, twitterCore); } @Override protected void tearDown() throws Exception { FabricTestUtils resetFabric(); super tearDown(); } private void init() { final Intent intent = new Intent(context, OAuthActivity class)  putExtra(OAuthActivity EXTRA_AUTH_CONFIG, twitterCore getAuthConfig()); final OAuthActivity activity = startActivity(intent, null, null); activity oAuthController = mockController; } public void testOnBackPressed() { init(); getActivity() onBackPressed(); final ArgumentCaptor<TwitterAuthException> exceptionArgCaptor = ArgumentCaptor forClass(TwitterAuthException class); verify(mockController) handleAuthError(eq(Activity RESULT_CANCELED), exceptionArgCaptor capture()); assertEquals("Authorization failed, request was canceled ", exceptionArgCaptor getValue() getMessage()); } public void testOnComplete() { init(); getActivity() onComplete(Activity RESULT_OK, new Intent()); assertTrue(isFinishCalled()); }}package com twitter sdk android core internal oauth;public class OAuthConstants { public static final String HEADER_AUTHORIZATION = "Authorization"; public static final String HEADER_GUEST_TOKEN = "x-guest-token"; // OAuth1 0a parameter constants  public static final String PARAM_CALLBACK = "oauth_callback"; public static final String PARAM_CONSUMER_KEY = "oauth_consumer_key"; public static final String PARAM_NONCE = "oauth_nonce"; public static final String PARAM_SIGNATURE_METHOD = "oauth_signature_method"; public static final String PARAM_TIMESTAMP = "oauth_timestamp"; public static final String PARAM_TOKEN = "oauth_token"; public static final String PARAM_TOKEN_SECRET = "oauth_token_secret"; public static final String PARAM_VERSION = "oauth_version"; public static final String PARAM_SIGNATURE = "oauth_signature"; public static final String PARAM_VERIFIER = "oauth_verifier"; // OAuth2 public static final String AUTHORIZATION_BASIC = "Basic"; public static final String AUTHORIZATION_BEARER = "Bearer"; public static final String PARAM_GRANT_TYPE = "grant_type"; public static final String GRANT_TYPE_CLIENT_CREDENTIALS = "client_credentials";}package com twitter sdk android core identity;import android app Activity;import android content Intent;import android os Bundle;import android view View;import android webkit WebChromeClient;import android webkit WebSettings;import android webkit WebView;import android webkit WebViewClient;import android widget ProgressBar;import io fabric sdk android Fabric;import com twitter sdk android core Callback;import com twitter sdk android core Result;import com twitter sdk android core TwitterAuthConfig;import com twitter sdk android core TwitterAuthException;import com twitter sdk android core TwitterAuthToken;import com twitter sdk android core TwitterCore;import com twitter sdk android core TwitterException;import com twitter sdk android core internal oauth OAuth1aService;import com twitter sdk android core internal oauth OAuthConstants;import com twitter sdk android core internal oauth OAuthResponse;class OAuthController implements OAuthWebViewClient Listener { interface Listener { void onComplete(int resultCode, Intent data); } final Listener listener; TwitterAuthToken requestToken; private final ProgressBar spinner; private final WebView webView; private final TwitterAuthConfig authConfig; private final OAuth1aService oAuth1aService; OAuthController(ProgressBar spinner, WebView webView, TwitterAuthConfig authConfig, OAuth1aService oAuth1aService, Listener listener) { this spinner = spinner; this webView = webView; this authConfig = authConfig; this oAuth1aService = oAuth1aService; this listener = listener; } void startAuth() { // Step 1  Obtain a request token to start the sign in flow  Fabric getLogger() d(TwitterCore TAG, "Obtaining request token to start the sign in flow"); oAuth1aService requestTempToken(newRequestTempTokenCallback()); }  Callback<OAuthResponse> newRequestTempTokenCallback() { return new Callback<OAuthResponse>() { @Override public void success(Result<OAuthResponse> result) { requestToken = result data authToken; final String authorizeUrl = oAuth1aService getAuthorizeUrl(requestToken); // Step 2  Redirect user to web view to complete authorization flow  Fabric getLogger() d(TwitterCore TAG, "Redirecting user to web view to complete authorization flow"); setUpWebView(webView, new OAuthWebViewClient(oAuth1aService buildCallbackUrl(authConfig), OAuthController this), authorizeUrl, new OAuthWebChromeClient()); } @Override public void failure(TwitterException error) { Fabric getLogger() e(TwitterCore TAG, "Failed to get request token", error); // Create new exception that can be safely serialized since Retrofit errors may // throw a NotSerializableException  handleAuthError(AuthHandler RESULT_CODE_ERROR, new TwitterAuthException("Failed to get request token")); } }; } protected void handleAuthError(int resultCode, TwitterAuthException error) { final Intent data = new Intent(); data putExtra(AuthHandler EXTRA_AUTH_ERROR, error); listener onComplete(resultCode, data); }  void setUpWebView(WebView webView, WebViewClient webViewClient, String url, WebChromeClient webChromeClient) { final WebSettings webSettings = webView getSettings(); webSettings setAllowFileAccess(false); webSettings setJavaScriptEnabled(false); webSettings setSaveFormData(false); webView setVerticalScrollBarEnabled(false); webView setHorizontalScrollBarEnabled(false); webView setWebViewClient(webViewClient); webView loadUrl(url); webView setVisibility(View INVISIBLE); webView setWebChromeClient(webChromeClient); } private void handleWebViewSuccess(Bundle bundle) { Fabric getLogger() d(TwitterCore TAG, "OAuth web view completed successfully"); if (bundle != null) { final String verifier = bundle getString(OAuthConstants PARAM_VERIFIER); if (verifier != null) { // Step 3  Convert the request token to an access token  Fabric getLogger() d(TwitterCore TAG, "Converting the request token to an access token "); oAuth1aService requestAccessToken(newRequestAccessTokenCallback(), requestToken, verifier); return; } } // If we get here, we failed to complete authorization  Fabric getLogger() e(TwitterCore TAG, "Failed to get authorization, bundle incomplete " + bundle, null); handleAuthError(AuthHandler RESULT_CODE_ERROR, new TwitterAuthException("Failed to get authorization, bundle incomplete")); }  Callback<OAuthResponse> newRequestAccessTokenCallback() { return new Callback<OAuthResponse>() { @Override public void success(Result<OAuthResponse> result) { final Intent data = new Intent(); final OAuthResponse response = result data; data putExtra(AuthHandler EXTRA_SCREEN_NAME, response userName); data putExtra(AuthHandler EXTRA_USER_ID, response userId); data putExtra(AuthHandler EXTRA_TOKEN, response authToken token); data putExtra(AuthHandler EXTRA_TOKEN_SECRET, response authToken secret); listener onComplete(Activity RESULT_OK, data); } @Override public void failure(TwitterException error) { Fabric getLogger() e(TwitterCore TAG, "Failed to get access token", error); // Create new exception that can be safely serialized since Retrofit errors may // throw a NotSerializableException  handleAuthError(AuthHandler RESULT_CODE_ERROR, new TwitterAuthException("Failed to get access token")); } }; } private void handleWebViewError(WebViewException error) { Fabric getLogger() e(TwitterCore TAG, "OAuth web view completed with an error", error); handleAuthError(AuthHandler RESULT_CODE_ERROR, new TwitterAuthException("OAuth web view completed with an error")); } private void dismissWebView() { webView stopLoading(); dismissSpinner(); } private void dismissSpinner() { spinner setVisibility(View GONE); } @Override public void onPageFinished(WebView webView, String url) { dismissSpinner(); webView setVisibility(View VISIBLE); } @Override public void onSuccess(Bundle bundle) { handleWebViewSuccess(bundle); dismissWebView(); } @Override public void onError(WebViewException exception) { handleWebViewError(exception); dismissWebView(); }}package com twitter sdk android core identity;import android app Activity;import android content Intent;import com twitter sdk android core Callback;import com twitter sdk android core TwitterAuthConfig;import com twitter sdk android core TwitterSession;class OAuthHandler extends AuthHandler {  public OAuthHandler(TwitterAuthConfig authConfig, Callback<TwitterSession> callback, int requestCode) { super(authConfig, callback, requestCode); } @Override public boolean authorize(Activity activity) { activity startActivityForResult(newIntent(activity), requestCode); return true; } Intent newIntent(Activity activity) { final Intent intent = new Intent(activity, OAuthActivity class); intent putExtra(OAuthActivity EXTRA_AUTH_CONFIG, getAuthConfig()); return intent; }}package com twitter sdk android core internal oauth;import android os Parcel;import android os Parcelable;import com twitter sdk android core TwitterAuthToken;public class OAuthResponse implements Parcelable { public static final Parcelable Creator<OAuthResponse> CREATOR = new Parcelable Creator<OAuthResponse>() { public OAuthResponse createFromParcel(Parcel in) { return new OAuthResponse(in); } public OAuthResponse[] newArray(int size) { return new OAuthResponse[size]; } };  public final TwitterAuthToken authToken;  public final String userName;  public final long userId; public OAuthResponse(TwitterAuthToken authToken, String userName, long userId) { this authToken = authToken; this userName = userName; this userId = userId; } private OAuthResponse(Parcel in) { this authToken = in readParcelable(TwitterAuthToken class getClassLoader()); this userName = in readString(); this userId = in readLong(); } @Override public String toString() { return new StringBuilder()  append("authToken=") append(authToken)  append(",userName=") append(userName)  append(",userId=") append(userId)  toString(); } @Override public int describeContents() { return 0; } @Override public void writeToParcel(Parcel out, int flags) { out writeParcelable(this authToken, flags); out writeString(this userName); out writeLong(this userId); }}package com twitter sdk android core internal oauth;import com twitter sdk android core TwitterCore;import com twitter sdk android core internal TwitterApi;import java io IOException;import javax net ssl SSLSocketFactory;import okhttp3 Interceptor;import okhttp3 OkHttpClient;import okhttp3 Request;import okhttp3 Response;import retrofit2 Retrofit;import retrofit2 converter gson GsonConverterFactory;abstract class OAuthService { private static final String CLIENT_NAME = "TwitterAndroidSDK"; private final TwitterCore twitterCore; private final TwitterApi api; private final String userAgent; private final Retrofit retrofit; OAuthService(TwitterCore twitterCore, SSLSocketFactory sslSocketFactory, TwitterApi api) { this twitterCore = twitterCore; this api = api; userAgent = TwitterApi buildUserAgent(CLIENT_NAME, twitterCore getVersion()); if (sslSocketFactory == null) { throw new IllegalArgumentException("sslSocketFactory must not be null"); } final OkHttpClient client = new OkHttpClient Builder()  sslSocketFactory(sslSocketFactory)  addInterceptor(new Interceptor() { @Override public Response intercept(Chain chain) throws IOException { final Request request = chain request() newBuilder()  header("User-Agent", getUserAgent())  build(); return chain proceed(request); } })  build(); retrofit = new Retrofit Builder()  baseUrl(getApi() getBaseHostUrl())  client(client)  addConverterFactory(GsonConverterFactory create())  build(); } protected TwitterCore getTwitterCore() { return twitterCore; } protected TwitterApi getApi() { return api; } protected String getUserAgent() { return userAgent; } protected Retrofit getRetrofit() { return retrofit; }}package com twitter sdk android core;import io fabric sdk android services network HttpMethod;import com twitter sdk android core internal TwitterApi;import com twitter sdk android core internal oauth OAuth1aHeaders;import java util Map;public class OAuthSigning { static final String VERIFY_CREDENTIALS_URL = TwitterApi BASE_HOST_URL + "/1 1/account/verify_credentials json"; final TwitterAuthConfig authConfig; final TwitterAuthToken authToken; final OAuth1aHeaders oAuth1aHeaders;  public OAuthSigning(TwitterAuthConfig authConfig, TwitterAuthToken authToken) { this(authConfig, authToken, new OAuth1aHeaders()); } OAuthSigning(TwitterAuthConfig authConfig, TwitterAuthToken authToken, OAuth1aHeaders oAuth1aHeaders) { if (authConfig == null) { throw new IllegalArgumentException("authConfig must not be null"); } if (authToken == null) { throw new IllegalArgumentException("authToken must not be null"); } this authConfig = authConfig; this authToken = authToken; this oAuth1aHeaders = oAuth1aHeaders; }  public String getAuthorizationHeader(String method, String url, Map<String, String> postParams) { return oAuth1aHeaders getAuthorizationHeader(authConfig, authToken, null, method, url, postParams); }  public Map<String, String> getOAuthEchoHeaders(String method, String url, Map<String, String> postParams) { return oAuth1aHeaders getOAuthEchoHeaders(authConfig, authToken, null, method, url, postParams); }  public Map<String, String> getOAuthEchoHeadersForVerifyCredentials() { return oAuth1aHeaders getOAuthEchoHeaders(authConfig, authToken, null, HttpMethod GET name(), VERIFY_CREDENTIALS_URL, null); }}package com twitter sdk android core identity;import android webkit ConsoleMessage;import android webkit WebChromeClient;class OAuthWebChromeClient extends WebChromeClient { @Override public boolean onConsoleMessage(ConsoleMessage consoleMessage) { //Do not log return true; }}package com twitter sdk android core identity;import android net http SslError;import android os Bundle;import android webkit SslErrorHandler;import android webkit WebView;import android webkit WebViewClient;import java net URI;import java util TreeMap;import io fabric sdk android services network UrlUtils;class OAuthWebViewClient extends WebViewClient { interface Listener { void onPageFinished(WebView webView, String url); void onSuccess(Bundle bundle); void onError(WebViewException exception); } private final String completeUrl; private final Listener listener; public OAuthWebViewClient(String completeUrl, Listener listener) { this completeUrl = completeUrl; this listener = listener; } @Override public void onPageFinished(WebView view, String url) { super onPageFinished(view, url); listener onPageFinished(view, url); } @Override public boolean shouldOverrideUrlLoading(WebView view, String url) { if (url startsWith(completeUrl)) { final TreeMap<String, String> params = UrlUtils getQueryParams(URI create(url), false); final Bundle bundle = new Bundle(params size()); for (TreeMap Entry<String, String> entry : params entrySet()) { bundle putString(entry getKey(), entry getValue()); } listener onSuccess(bundle); return true; } return super shouldOverrideUrlLoading(view, url); } @Override public void onReceivedError(WebView view, int errorCode, String description, String failingUrl) { super onReceivedError(view, errorCode, description, failingUrl); listener onError(new WebViewException(errorCode, description, failingUrl)); } @Override public void onReceivedSslError(WebView view, SslErrorHandler handler, SslError error) { super onReceivedSslError(view, handler, error); listener onError(new WebViewException(error getPrimaryError(), null, null)); }}package com twitter sdk android core internal util;import android annotation TargetApi;import android content Context;import android os Build;import android util AttributeSet;import android widget ScrollView;public class ObservableScrollView extends ScrollView { ScrollViewListener scrollViewListener; public ObservableScrollView(Context context) { super(context); } public ObservableScrollView(Context context, AttributeSet attrs) { super(context, attrs); } public ObservableScrollView(Context context, AttributeSet attrs, int defStyleAttr) { super(context, attrs, defStyleAttr); } @TargetApi(Build VERSION_CODES LOLLIPOP) public ObservableScrollView(Context context, AttributeSet attrs, int defStyleAttr, int defStyleRes) { super(context, attrs, defStyleAttr, defStyleRes); } @Override protected void onScrollChanged(int currentX, int currentY, int oldX, int oldY) { super onScrollChanged(currentX, currentY, oldX, oldY); if (scrollViewListener != null) { scrollViewListener onScrollChanged(currentY); } } public void setScrollViewListener(ScrollViewListener scrollViewListener) { this scrollViewListener = scrollViewListener; } public interface ScrollViewListener { void onScrollChanged(int scrollY); }}package com twitter sdk android core internal util;import android test AndroidTestCase;import static org mockito Mockito mock;import static org mockito Mockito verify;public class ObservableScrollViewTest extends AndroidTestCase { static final int TEST_SCROLL_X = 10; public void testOnScrollChanged() { final ObservableScrollView scrollView = new ObservableScrollView(getContext()); final ObservableScrollView ScrollViewListener listener = mock(ObservableScrollView ScrollViewListener class); scrollView setScrollViewListener(listener); scrollView onScrollChanged(0, TEST_SCROLL_X, 0, 0); verify(listener) onScrollChanged(TEST_SCROLL_X); }}package com twitter sdk android core internal network;import com twitter sdk android core GuestSessionProvider;import com twitter sdk android core Session;import com twitter sdk android core TwitterAuthConfig;import com twitter sdk android core TwitterAuthToken;import javax net ssl SSLSocketFactory;import okhttp3 OkHttpClient;public class OkHttpClientHelper { public static OkHttpClient getOkHttpClient(GuestSessionProvider guestSessionProvider, SSLSocketFactory sslSocketFactory) { return getOkHttpClientBuilder(guestSessionProvider, sslSocketFactory) build(); } public static OkHttpClient Builder getOkHttpClientBuilder( GuestSessionProvider guestSessionProvider, SSLSocketFactory sslSocketFactory) { return new OkHttpClient Builder()  sslSocketFactory(sslSocketFactory)  authenticator(new GuestAuthenticator(guestSessionProvider))  addInterceptor(new GuestAuthInterceptor(guestSessionProvider))  addNetworkInterceptor(new GuestAuthNetworkInterceptor()); } public static OkHttpClient getOkHttpClient(Session<? extends TwitterAuthToken> session, TwitterAuthConfig authConfig, SSLSocketFactory sslSocketFactory) { return getOkHttpClientBuilder(session, authConfig, sslSocketFactory) build(); } public static OkHttpClient Builder getOkHttpClientBuilder( Session<? extends TwitterAuthToken> session, TwitterAuthConfig authConfig, SSLSocketFactory sslSocketFactory) { if (session == null) { throw new IllegalArgumentException("Session must not be null "); } return new OkHttpClient Builder()  sslSocketFactory(sslSocketFactory)  addInterceptor(new OAuth1aInterceptor(session, authConfig)); }}package com twitter sdk android core;import io fabric sdk android services persistence PreferenceStore;import io fabric sdk android services persistence PreferenceStoreStrategy;import io fabric sdk android services persistence SerializationStrategy;import java util Collections;import java util Map;import java util concurrent ConcurrentHashMap;import java util concurrent atomic AtomicReference;public class PersistedSessionManager<T extends Session> implements SessionManager<T> { private static final int NUM_SESSIONS = 1; private final PreferenceStore preferenceStore; private final SerializationStrategy<T> serializer; private final ConcurrentHashMap<Long, T> sessionMap; private final ConcurrentHashMap<Long, PreferenceStoreStrategy<T>> storageMap; private final PreferenceStoreStrategy<T> activeSessionStorage; private final AtomicReference<T> activeSessionRef; private final String prefKeySession; private volatile boolean restorePending = true; public PersistedSessionManager(PreferenceStore preferenceStore, SerializationStrategy<T> serializer, String prefKeyActiveSession, String prefKeySession) { this(preferenceStore, serializer, new ConcurrentHashMap<Long, T>(NUM_SESSIONS), new ConcurrentHashMap<Long, PreferenceStoreStrategy<T>>(NUM_SESSIONS), new PreferenceStoreStrategy<>(preferenceStore, serializer, prefKeyActiveSession), prefKeySession); } PersistedSessionManager(PreferenceStore preferenceStore, SerializationStrategy<T> serializer, ConcurrentHashMap<Long, T> sessionMap, ConcurrentHashMap<Long, PreferenceStoreStrategy<T>> storageMap, PreferenceStoreStrategy<T> activesSessionStorage, String prefKeySession) { this preferenceStore = preferenceStore; this serializer = serializer; this sessionMap = sessionMap; this storageMap = storageMap; this activeSessionStorage = activesSessionStorage; this activeSessionRef = new AtomicReference<>(); this prefKeySession = prefKeySession; } void restoreAllSessionsIfNecessary() { // Only restore once if (restorePending) { restoreAllSessions(); } } private synchronized void restoreAllSessions() { if (restorePending) { restoreActiveSession(); restoreSessions(); restorePending = false; } } private void restoreSessions() { T session; final Map<String, ?> preferences = preferenceStore get() getAll(); for (Map Entry<String, ?> entry : preferences entrySet()) { if (isSessionPreferenceKey(entry getKey())) { session = serializer deserialize((String) entry getValue()); if (session != null) { internalSetSession(session getId(), session, false); } } } } private void restoreActiveSession() { final T session = activeSessionStorage restore(); if (session != null) { internalSetSession(session getId(), session, false); } } boolean isSessionPreferenceKey(String preferenceKey) { return preferenceKey startsWith(prefKeySession); }  @Override public T getActiveSession() { restoreAllSessionsIfNecessary(); return activeSessionRef get(); }  @Override public void setActiveSession(T session) { if (session == null) { throw new IllegalArgumentException("Session must not be null!"); } restoreAllSessionsIfNecessary(); internalSetSession(session getId(), session, true); }  @Override public void clearActiveSession() { restoreAllSessionsIfNecessary(); if (activeSessionRef get() != null) { clearSession(activeSessionRef get() getId()); } }  @Override public T getSession(long id) { restoreAllSessionsIfNecessary(); return sessionMap get(id); }  @Override public void setSession(long id, T session) { if (session == null) { throw new IllegalArgumentException("Session must not be null!"); } restoreAllSessionsIfNecessary(); internalSetSession(id, session, false); } @Override public Map<Long, T> getSessionMap() { restoreAllSessionsIfNecessary(); return Collections unmodifiableMap(sessionMap); } private void internalSetSession(long id, T session, boolean forceUpdate) { sessionMap put(id, session); PreferenceStoreStrategy<T> storage = storageMap get(id); if (storage == null) { storage = new PreferenceStoreStrategy<>(preferenceStore, serializer, getPrefKey(id)); storageMap putIfAbsent(id, storage); } storage save(session); final T activeSession = activeSessionRef get(); if (activeSession == null || activeSession getId() == id || forceUpdate) { synchronized (this) { activeSessionRef compareAndSet(activeSession, session); activeSessionStorage save(session); } } } String getPrefKey(long id) { return prefKeySession + "_" + id; }  @Override public void clearSession(long id) { restoreAllSessionsIfNecessary(); if (activeSessionRef get() != null && activeSessionRef get() getId() == id) { synchronized (this) { activeSessionRef set(null); activeSessionStorage clear(); } } sessionMap remove(id); final PreferenceStoreStrategy<T> storage = storageMap remove(id); if (storage != null) { storage clear(); } }}package com twitter sdk android core models;import com google gson annotations SerializedName;import java util List;import java util Map;public class Place {  @SerializedName("attributes") public final Map<String, String> attributes;  @SerializedName("bounding_box") public final BoundingBox boundingBox;  @SerializedName("country") public final String country;  @SerializedName("country_code") public final String countryCode;  @SerializedName("full_name") public final String fullName;  @SerializedName("id") public final String id;  @SerializedName("name") public final String name;  @SerializedName("place_type") public final String placeType;  @SerializedName("url") public final String url; public Place(Map<String, String> attributes, BoundingBox boundingBox, String country, String countryCode, String fullName, String id, String name, String placeType, String url) { this attributes = attributes; this boundingBox = boundingBox; this country = country; this countryCode = countryCode; this fullName = fullName; this id = id; this name = name; this placeType = placeType; this url = url; } public static class BoundingBox {  @SerializedName("coordinates") public final List<List<List<Double>>> coordinates;  @SerializedName("type") public final String type; public BoundingBox(List<List<List<Double>>> coordinates, String type) { this coordinates = coordinates; this type = type; } }}package com twitter sdk android tweetui;import android app Activity;import android os Bundle;import android view View;import com twitter sdk android core internal scribe ScribeItem;import java io Serializable;public class PlayerActivity extends Activity { static final String PLAYER_ITEM = "PLAYER_ITEM"; static final String SCRIBE_ITEM = "SCRIBE_ITEM"; static final VideoScribeClient videoScribeClient = new VideoScribeClientImpl(TweetUi getInstance()); PlayerController playerController; @Override public void onCreate(Bundle savedInstanceState) { super onCreate(savedInstanceState); setContentView(R layout tw__player_activity); final PlayerItem item = (PlayerItem) getIntent() getSerializableExtra(PLAYER_ITEM); final View rootView = findViewById(android R id content); playerController = new PlayerController(rootView); playerController prepare(item); final ScribeItem scribeItem = (ScribeItem) getIntent() getSerializableExtra(SCRIBE_ITEM); scribeCardPlayImpression(scribeItem); } @Override protected void onResume() { super onResume(); playerController onResume(); } @Override protected void onPause() { playerController onPause(); super onPause(); } @Override public void onDestroy() { playerController onDestroy(); super onDestroy(); } private void scribeCardPlayImpression(ScribeItem scribeItem) { videoScribeClient play(scribeItem); } public static class PlayerItem implements Serializable { public String url; public boolean looping; public String callToActionUrl; public String callToActionText; public PlayerItem(String url, boolean looping) { this url = url; this looping = looping; } public PlayerItem(String url, boolean looping, String callToActionText, String callToActionUrl) { this url = url; this looping = looping; this callToActionText = callToActionText; this callToActionUrl = callToActionUrl; } }}package com twitter sdk android tweetui;import android content Intent;import android media MediaPlayer;import android net Uri;import android view View;import android widget ProgressBar;import android widget TextView;import com twitter sdk android core IntentUtils;import com twitter sdk android tweetui internal VideoControlView;import com twitter sdk android tweetui internal VideoView;import io fabric sdk android Fabric;class PlayerController { private static final String TAG = "PlayerController"; final VideoView videoView; final VideoControlView videoControlView; final ProgressBar videoProgressView; final TextView callToActionView; View rootView; int seekPosition = 0; boolean isPlaying = true; PlayerController(View rootView) { this rootView = rootView; this videoView = (VideoView) rootView findViewById(R id video_view); this videoControlView = (VideoControlView) rootView findViewById(R id video_control_view); this videoProgressView = (ProgressBar) rootView findViewById(R id video_progress_view); this callToActionView = (TextView) rootView findViewById(R id call_to_action_view); } // Unit testing purposes PlayerController(View rootView, VideoView videoView, VideoControlView videoControlView, ProgressBar videoProgressView, TextView callToActionView) { this rootView = rootView; this videoView = videoView; this videoControlView = videoControlView; this videoProgressView = videoProgressView; this callToActionView = callToActionView; } void prepare(PlayerActivity PlayerItem item) { try { setUpCallToAction(item); setUpMediaControl(item looping); videoView setOnPreparedListener(new MediaPlayer OnPreparedListener() { @Override public void onPrepared(MediaPlayer mediaPlayer) { videoProgressView setVisibility(View GONE); } }); videoView setOnInfoListener(new MediaPlayer OnInfoListener() { @Override public boolean onInfo(MediaPlayer mediaPlayer, int what, int extra) { if (what == MediaPlayer MEDIA_INFO_BUFFERING_END) { videoProgressView setVisibility(View GONE); return true; } else if (what == MediaPlayer MEDIA_INFO_BUFFERING_START) { videoProgressView setVisibility(View VISIBLE); return true; } return false; } }); final Uri uri = Uri parse(item url); videoView setVideoURI(uri, item looping); videoView requestFocus(); } catch (Exception e) { Fabric getLogger() e(TAG, "Error occurred during video playback", e); } } void onResume() { if (seekPosition != 0) { videoView seekTo(seekPosition); } if (isPlaying) { videoView start(); videoControlView update(); } } void onPause() { isPlaying = videoView isPlaying(); seekPosition = videoView getCurrentPosition(); videoView pause(); } void onDestroy() { videoView stopPlayback(); } void setUpMediaControl(boolean looping) { if (looping) { setUpLoopControl(); } else { setUpMediaControl(); } } void setUpLoopControl() { videoControlView setVisibility(View INVISIBLE); videoView setOnClickListener(new View OnClickListener() { @Override public void onClick(View view) { if (videoView isPlaying()) { videoView pause(); } else { videoView start(); } } }); } void setUpMediaControl() { videoView setMediaController(videoControlView); } void setUpCallToAction(PlayerActivity PlayerItem item) { if (item callToActionText != null && item callToActionUrl != null) { callToActionView setVisibility(View VISIBLE); callToActionView setText(item callToActionText); setUpCallToActionListener(item callToActionUrl); setUpRootViewOnClickListener(); } } void setUpCallToActionListener(final String callToActionUrl) { callToActionView setOnClickListener(new View OnClickListener() { @Override public void onClick(View v) { final Uri uri = Uri parse(callToActionUrl); final Intent intent = new Intent(Intent ACTION_VIEW, uri); IntentUtils safeStartActivity(callToActionView getContext(), intent); } }); } void setUpRootViewOnClickListener() { rootView setOnClickListener(new View OnClickListener() { @Override public void onClick(View v) { if (callToActionView getVisibility() == View VISIBLE) { callToActionView setVisibility(View GONE); } else { callToActionView setVisibility(View VISIBLE); } } }); }}package com twitter sdk android unity;import android app Activity;import android content Intent;import android os Bundle;import com twitter sdk android core Callback;import com twitter sdk android core Result;import com twitter sdk android core TwitterException;import com twitter sdk android core TwitterSession;import com twitter sdk android core TwitterSessionHelper;import com twitter sdk android core identity TwitterAuthClient;public class RequestEmailActivity extends Activity { TwitterAuthClient authClient; @Override protected void onCreate(Bundle savedInstanceState) { super onCreate(savedInstanceState); final String session = getIntent() getStringExtra(TwitterKit EXTRA_TWITTER_SESSION); final TwitterSession twitterSession = TwitterSessionHelper deserialize(session); new TwitterAuthClient() requestEmail(twitterSession, new Callback<String>() { @Override public void success(Result<String> result) { final UnityMessage message = new UnityMessage Builder()  setMethod("RequestEmailComplete")  setData(result data)  build(); message send(); finish(); } @Override public void failure(TwitterException ex) { final String error = new ApiError Serializer()  serialize(new ApiError(0, ex getMessage())); final UnityMessage message = new UnityMessage Builder()  setMethod("RequestEmailFailed")  setData(error)  build(); message send(); finish(); } }); } @Override protected void onActivityResult(int requestCode, int resultCode, Intent data) { super onActivityResult(requestCode, resultCode, data); authClient onActivityResult(requestCode, resultCode, data); }}package com twitter sdk android tweetui;import com twitter sdk android core Callback;import com twitter sdk android core Result;import com twitter sdk android core TwitterException;import com twitter sdk android core models Tweet;class ResetTweetCallback extends Callback<Tweet> { BaseTweetView baseTweetView; TweetRepository tweetRepository; Callback<Tweet> cb; ResetTweetCallback(BaseTweetView baseTweetView, TweetRepository tweetRepository, Callback<Tweet> cb) { this baseTweetView = baseTweetView; this tweetRepository = tweetRepository; this cb = cb; } @Override public void success(Result<Tweet> result) { tweetRepository updateCache(result data); baseTweetView setTweet(result data); if (cb != null) { cb success(result); } } @Override public void failure(TwitterException exception) { if (cb != null) { cb failure(exception); } }}package com twitter sdk android core;import retrofit2 Response;public class Result<T> { public final T data; public final Response response; public Result(T data, Response response) { this data = data; this response = response; }}package com twitter sdk android tweetcomposer;import android graphics Bitmap;import android graphics BitmapShader;import android graphics Canvas;import android graphics Paint;import android graphics Path;import android graphics RectF;import android graphics Shader;import com squareup picasso Transformation;import java util Arrays;import static android graphics Bitmap createBitmap;class RoundedCornerTransformation implements Transformation { final float[] radii; RoundedCornerTransformation(float[] radii) { this radii = radii; } @Override public Bitmap transform(Bitmap source) { final RectF rect = new RectF(0, 0, source getWidth(), source getHeight()); final Bitmap result = createBitmap(source getWidth(), source getHeight(), source getConfig()); final BitmapShader bitmapShader = new BitmapShader(source, Shader TileMode CLAMP, Shader TileMode CLAMP); final Paint paint = new Paint(); paint setAntiAlias(true); paint setShader(bitmapShader); final Path path = new Path(); path addRoundRect(rect, radii, Path Direction CCW); final Canvas canvas = new Canvas(result); canvas drawPath(path, paint); source recycle(); return result; } @Override public String key() { return "RoundedCornerTransformation(" + Arrays toString(radii) + ")"; } public static class Builder { int topLeftRadius; int topRightRadius; int bottomRightRadius; int bottomLeftRadius; public Builder setRadius(int radius) { topLeftRadius = radius; topRightRadius = radius; bottomRightRadius = radius; bottomLeftRadius = radius; return this; } public Builder setRadii(int topLeftRadius, int topRightRadius, int bottomRightRadius, int bottomLeftRadius) { this topLeftRadius = topLeftRadius; this topRightRadius = topRightRadius; this bottomRightRadius = bottomRightRadius; this bottomLeftRadius = bottomLeftRadius; return this; } RoundedCornerTransformation build() { if (topLeftRadius < 0 || topRightRadius < 0 || bottomRightRadius < 0 || bottomLeftRadius < 0) { throw new IllegalStateException("Radius must not be negative"); } final float[] radii = {topLeftRadius, topLeftRadius, topRightRadius, topRightRadius, bottomRightRadius, bottomRightRadius, bottomLeftRadius, bottomLeftRadius}; return new RoundedCornerTransformation(radii); } }}package com twitter sdk android mopub internal;import android content Context;import android graphics Bitmap;import android graphics BitmapShader;import android graphics Canvas;import android graphics Paint;import android graphics Path;import android graphics RectF;import android graphics Shader;import android graphics drawable BitmapDrawable;import android util AttributeSet;import android widget ImageView;import static android graphics Bitmap createBitmap;public class RoundedImageView extends ImageView { private float[] roundedCornerRadii; public RoundedImageView(Context context, AttributeSet attrs) { super(context, attrs, 0); setDefaultCornerRadii(); } public RoundedImageView(Context context, AttributeSet attrs, int styleResId) { super(context, attrs, styleResId); setDefaultCornerRadii(); } private void setDefaultCornerRadii() { setCornerRadii(0, 0, 0, 0); }  public void setCornerRadii(int topLeftRadius, int topRightRadius, int bottomLeftRadius, int bottomRightRadius) { if (topLeftRadius < 0 || topRightRadius < 0 || bottomRightRadius < 0 || bottomLeftRadius < 0) { throw new IllegalStateException("Radius must not be negative"); } roundedCornerRadii = new float[]{ topLeftRadius, topLeftRadius, topRightRadius, topRightRadius, bottomLeftRadius, bottomLeftRadius, bottomRightRadius, bottomRightRadius}; } @Override public void setImageBitmap(Bitmap bitmap) { setImageDrawable(new BitmapDrawable(getResources(), transform(bitmap))); } private Bitmap transform(Bitmap source) { final RectF rect = new RectF(0, 0, source getWidth(), source getHeight()); final Bitmap result = createBitmap(source getWidth(), source getHeight(), source getConfig()); final BitmapShader bitmapShader = new BitmapShader(source, Shader TileMode CLAMP, Shader TileMode CLAMP); final Paint paint = new Paint(); paint setAntiAlias(true); paint setShader(bitmapShader); final Path path = new Path(); path addRoundRect(rect, roundedCornerRadii, Path Direction CCW); final Canvas canvas = new Canvas(result); canvas drawPath(path, paint); return result; }}package com twitter sdk android core models;import com google gson Gson;import com google gson TypeAdapter;import com google gson TypeAdapterFactory;import com google gson reflect TypeToken;import com google gson stream JsonReader;import com google gson stream JsonWriter;import java io IOException;import java util Collections;import java util List;public class SafeListAdapter implements TypeAdapterFactory { @Override public <T> TypeAdapter<T> create(final Gson gson, final TypeToken<T> tokenType) { final TypeAdapter<T> delegate = gson getDelegateAdapter(this, tokenType); return new TypeAdapter<T>() { @Override public void write(JsonWriter out, T value) throws IOException { delegate write(out, value); } @Override public T read(JsonReader arg0) throws IOException { final T t = delegate read(arg0); if (List class isAssignableFrom(tokenType getRawType())) { if (t == null) { return (T) Collections EMPTY_LIST; } final List<?> list = (List<?>) t; return (T) Collections unmodifiableList(list); } return t; } }; }}package com twitter sdk android core models;import com google gson Gson;import com google gson TypeAdapter;import com google gson TypeAdapterFactory;import com google gson reflect TypeToken;import com google gson stream JsonReader;import com google gson stream JsonWriter;import java io IOException;import java util Collections;import java util Map;public class SafeMapAdapter implements TypeAdapterFactory { @Override public <T> TypeAdapter<T> create(final Gson gson, final TypeToken<T> tokenType) { final TypeAdapter<T> delegate = gson getDelegateAdapter(this, tokenType); return new TypeAdapter<T>() { @Override public void write(JsonWriter out, T value) throws IOException { delegate write(out, value); } @Override public T read(JsonReader arg0) throws IOException { final T t = delegate read(arg0); if (Map class isAssignableFrom(tokenType getRawType())) { if (t == null) { return (T) Collections EMPTY_MAP; } final Map<?, ?> map = (Map<?, ?>) t; return (T) Collections unmodifiableMap(map); } return t; } }; }}package com twitter sdk android tweetcomposer;import com twitter sdk android core internal scribe EventNamespace;import com twitter sdk android core internal scribe ScribeItem;import java util List;interface ScribeClient { void scribe(EventNamespace eventNamespace, List<ScribeItem> items);}package com twitter sdk android tweetcomposer;import com twitter sdk android core internal scribe DefaultScribeClient;import com twitter sdk android core internal scribe EventNamespace;import com twitter sdk android core internal scribe ScribeItem;import java util List;class ScribeClientImpl implements ScribeClient { private final DefaultScribeClient scribeClient; public ScribeClientImpl(DefaultScribeClient scribeClient) { this scribeClient = scribeClient; } @Override public void scribe(EventNamespace eventNamespace, List<ScribeItem> items) { if (scribeClient != null) { scribeClient scribe(eventNamespace, items); } }}package com twitter sdk android core internal scribe;public class ScribeConfig { public static final String BASE_URL = "https://api twitter com"; public static final int DEFAULT_MAX_FILES_TO_KEEP = 100; public static final int DEFAULT_SEND_INTERVAL_SECONDS = 10 * 60; // 10 minutes  public final boolean isEnabled;  public final String baseUrl;  public final String pathVersion;  public final String pathType;  public final String sequence;  public final String userAgent;  public final int maxFilesToKeep;  public final int sendIntervalSeconds; public ScribeConfig(boolean isEnabled, String baseUrl, String pathVersion, String pathType, String sequence, String userAgent, int maxFilesToKeep, int sendIntervalSeconds) { this isEnabled = isEnabled; this baseUrl = baseUrl; this pathVersion = pathVersion; this pathType = pathType; this sequence = sequence; this userAgent = userAgent; this maxFilesToKeep = maxFilesToKeep; this sendIntervalSeconds = sendIntervalSeconds; }}package com twitter sdk android tweetcomposer;import com twitter sdk android core internal scribe EventNamespace;import com twitter sdk android core internal scribe ScribeItem;final class ScribeConstants { private ScribeConstants() {} // namespaces with client "tfw" become SyndicationClientEvent scribes to /logs/tfw_client_event static final String SCRIBE_TFW_CLIENT = "tfw"; static final String SCRIBE_PAGE = "android"; static final String SCRIBE_SECTION = "composer"; static final String SCRIBE_COMPONENT = ""; static final String SCRIBE_IMPRESSION_ELEMENT = ""; static final String SCRIBE_TWEET_ELEMENT = "tweet"; static final String SCRIBE_CANCEL_ELEMENT = "cancel"; static final String SCRIBE_IMPRESSION_ACTION = "impression"; static final String SCRIBE_CLICK_ACTION = "click"; static final int SCRIBE_PROMO_APP_CARD_TYPE = 8; static final EventNamespace Builder ComposerEventBuilder = new EventNamespace Builder()  setClient(SCRIBE_TFW_CLIENT)  setPage(SCRIBE_PAGE)  setSection(SCRIBE_SECTION);  static ScribeItem newCardScribeItem(Card card) { // promo app card is currently the only type of Card return new ScribeItem Builder()  setItemType(ScribeItem TYPE_TWEET)  setCardEvent(new ScribeItem CardEvent(SCRIBE_PROMO_APP_CARD_TYPE))  build(); }}package com twitter sdk android core internal scribe;import android text TextUtils;import com google gson Gson;import com google gson annotations SerializedName;import io fabric sdk android services events EventTransform;import java io IOException;import java util Collections;import java util List;public class ScribeEvent {  private static final String CURRENT_FORMAT_VERSION = "2";  @SerializedName("event_namespace") final EventNamespace eventNamespace;  @SerializedName("ts") final String timestamp;  @SerializedName("format_version") final String formatVersion; @SerializedName("_category_") final String category; @SerializedName("items") final List<ScribeItem> items; public ScribeEvent(String category, EventNamespace eventNamespace, long timestamp) { this(category, eventNamespace, timestamp, Collections <ScribeItem>emptyList()); } public ScribeEvent(String category, EventNamespace eventNamespace, long timestamp, List<ScribeItem> items) { this category = category; this eventNamespace = eventNamespace; this timestamp = String valueOf(timestamp); this formatVersion = CURRENT_FORMAT_VERSION; this items = Collections unmodifiableList(items); } @Override public String toString() { return new StringBuilder()  append("event_namespace=") append(eventNamespace)  append(", ts=") append(timestamp)  append(", format_version=") append(formatVersion)  append(", _category_=") append(category)  append(", items=") append("[" + TextUtils join(", ", items) + "]")  toString(); } @Override public boolean equals(Object o) { if (this == o) return true; if (o == null || getClass() != o getClass()) return false; final ScribeEvent that = (ScribeEvent) o; if (category != null ? !category equals(that category) : that category != null) { return false; } if (eventNamespace != null ? !eventNamespace equals(that eventNamespace) : that eventNamespace != null) { return false; } if (formatVersion != null ? !formatVersion equals(that formatVersion) : that formatVersion != null) { return false; } if (timestamp != null ? !timestamp equals(that timestamp) : that timestamp != null) { return false; } if (items != null ? !items equals(that items) : that items != null) { return false; } return true; } @Override public int hashCode() { int result = eventNamespace != null ? eventNamespace hashCode() : 0; result = 31 * result + (timestamp != null ? timestamp hashCode() : 0); result = 31 * result + (formatVersion != null ? formatVersion hashCode() : 0); result = 31 * result + (category != null ? category hashCode() : 0); result = 31 * result + (items != null ? items hashCode() : 0); return result; } public static class Transform implements EventTransform<ScribeEvent> { private final Gson gson; public Transform(Gson gson) { this gson = gson; } @Override public byte[] toBytes(ScribeEvent event) throws IOException { return gson toJson(event) getBytes("UTF-8"); } }}package com twitter sdk android core internal scribe;import java util Collections;import java util List;public class ScribeEventFactory { public static ScribeEvent newScribeEvent(EventNamespace ns, long timestamp, String language, String advertisingId) { return newScribeEvent(ns, "", timestamp, language, advertisingId, Collections <ScribeItem>emptyList()); } public static ScribeEvent newScribeEvent(EventNamespace ns, String eventInfo, long timestamp, String language, String advertisingId, List<ScribeItem> items) { switch (ns client) { case SyndicationClientEvent CLIENT_NAME: return new SyndicationClientEvent(ns, eventInfo, timestamp, language, advertisingId, items); default: return new SyndicatedSdkImpressionEvent(ns, timestamp, language, advertisingId, items); } }}package com twitter sdk android core internal scribe;import io fabric sdk android FabricAndroidTestCase;import io fabric sdk android services common CommonUtils;import com google gson GsonBuilder;import java io IOException;import java io InputStream;import java util Arrays;import java util List;public class ScribeEventTransformTest extends FabricAndroidTestCase { static final String TEST_MESSAGE = "TEST MESSAGE"; static final String TEST_ITEM_TYPE = "\"item_type\":6"; static final String TEST_DESCRIPTION = "\"description\":\"TEST MESSAGE\""; private ScribeEvent Transform transform; private EventNamespace eventNamespace; private String scribeEventJsonString; @Override protected void setUp() throws Exception { super setUp(); transform = new ScribeEvent Transform(new GsonBuilder() create()); eventNamespace = new EventNamespace Builder()  setClient("testclient")  setPage("testpage")  setSection("testsection")  setComponent("testcomponent")  setElement("testelement")  setAction("testaction")  builder(); InputStream is = null; try { is = getContext() getAssets() open("scribe_event json"); scribeEventJsonString = CommonUtils streamToString(is) trim(); } finally { CommonUtils closeQuietly(is); } } public void testToBytes() throws IOException { final ScribeEvent scribeEvent = new ScribeEvent("testcategory", eventNamespace, 1404426136717L); final byte[] bytes = transform toBytes(scribeEvent); assertEquals(scribeEventJsonString, new String(bytes, "UTF-8")); } public void testToBytes_withItems() throws IOException { final ScribeItem scribeItem = ScribeItem fromMessage(TEST_MESSAGE); final List<ScribeItem> itemList = Arrays asList(scribeItem); final ScribeEvent scribeEvent = new ScribeEvent("testcategory", eventNamespace, 1404426136717L, itemList); final byte[] bytes = transform toBytes(scribeEvent); assertTrue(new String(bytes, "UTF-8") contains(TEST_ITEM_TYPE)); assertTrue(new String(bytes, "UTF-8") contains(TEST_DESCRIPTION)); }}package com twitter sdk android core internal scribe;import android content Context;import io fabric sdk android services common CurrentTimeProvider;import io fabric sdk android services events EventTransform;import io fabric sdk android services events EventsFilesManager;import io fabric sdk android services events QueueFileEventStorage;import java io IOException;import java util UUID;class ScribeFilesManager extends EventsFilesManager<ScribeEvent> { static final String FILE_PREFIX = "se"; static final String FILE_EXTENSION = " tap"; public ScribeFilesManager(Context context, EventTransform<ScribeEvent> transform, CurrentTimeProvider currentTimeProvider, QueueFileEventStorage eventsStorage, int defaultMaxFilesToKeep) throws IOException { super(context, transform, currentTimeProvider, eventsStorage, defaultMaxFilesToKeep); } @Override protected String generateUniqueRollOverFileName() { final UUID targetUUIDComponent = UUID randomUUID(); return new StringBuilder()  append(FILE_PREFIX)  append(ROLL_OVER_FILE_NAME_SEPARATOR)  append(targetUUIDComponent toString())  append(ROLL_OVER_FILE_NAME_SEPARATOR)  append(currentTimeProvider getCurrentTimeMillis())  append(FILE_EXTENSION)  toString(); }}package com twitter sdk android core internal scribe;import android content Context;import android text TextUtils;import io fabric sdk android services common CommonUtils;import io fabric sdk android services common IdManager;import io fabric sdk android services common QueueFile;import io fabric sdk android services events FilesSender;import com twitter sdk android core GuestSessionProvider;import com twitter sdk android core Session;import com twitter sdk android core SessionManager;import com twitter sdk android core TwitterAuthConfig;import com twitter sdk android core TwitterAuthToken;import com twitter sdk android core internal network GuestAuthInterceptor;import com twitter sdk android core internal network OAuth1aInterceptor;import java io ByteArrayOutputStream;import java io File;import java io IOException;import java io InputStream;import java net HttpURLConnection;import java util List;import java util concurrent ExecutorService;import java util concurrent atomic AtomicReference;import javax net ssl SSLSocketFactory;import okhttp3 Interceptor;import okhttp3 OkHttpClient;import okhttp3 Request;import okhttp3 ResponseBody;import retrofit2 Call;import retrofit2 Response;import retrofit2 Retrofit;import retrofit2 http Field;import retrofit2 http FormUrlEncoded;import retrofit2 http Headers;import retrofit2 http POST;import retrofit2 http Path;class ScribeFilesSender implements FilesSender { private static final String SEND_FILE_FAILURE_ERROR = "Failed sending files";  private static final byte[] START_JSON_ARRAY = {'['};  private static final byte[] COMMA = {','};  private static final byte[] END_JSON_ARRAY = {']'}; private final Context context; private final ScribeConfig scribeConfig; private final long ownerId; private final TwitterAuthConfig authConfig; private final SessionManager<? extends Session<TwitterAuthToken>> sessionManager; private final GuestSessionProvider guestSessionProvider; private final SSLSocketFactory sslSocketFactory; private final AtomicReference<ScribeService> scribeService; private final ExecutorService executorService; private final IdManager idManager; public ScribeFilesSender(Context context, ScribeConfig scribeConfig, long ownerId, TwitterAuthConfig authConfig, SessionManager<? extends Session<TwitterAuthToken>> sessionManager, GuestSessionProvider guestSessionProvider, SSLSocketFactory sslSocketFactory, ExecutorService executorService, IdManager idManager) { this context = context; this scribeConfig = scribeConfig; this ownerId = ownerId; this authConfig = authConfig; this sessionManager = sessionManager; this guestSessionProvider = guestSessionProvider; this sslSocketFactory = sslSocketFactory; this executorService = executorService; this idManager = idManager; this scribeService = new AtomicReference<>(); } @Override public boolean send(List<File> files) { if (hasApiAdapter()) { try { final String scribeEvents = getScribeEventsAsJsonArrayString(files); CommonUtils logControlled(context, scribeEvents); final Response<ResponseBody> response = upload(scribeEvents); if (response code() == HttpURLConnection HTTP_OK) { return true; } else { CommonUtils logControlledError(context, SEND_FILE_FAILURE_ERROR, null); if (response code() == HttpURLConnection HTTP_INTERNAL_ERROR || response code() == HttpURLConnection HTTP_BAD_REQUEST) { return true; } } } catch (Exception e) { CommonUtils logControlledError(context, SEND_FILE_FAILURE_ERROR, e); } } else { CommonUtils logControlled(context, "Cannot attempt upload at this time"); } return false; } String getScribeEventsAsJsonArrayString(List<File> files) throws IOException { final ByteArrayOutputStream out = new ByteArrayOutputStream(1024); final boolean[] appendComma = new boolean[1]; out write(START_JSON_ARRAY); for (File f : files) { QueueFile qf = null; try { qf = new QueueFile(f); qf forEach(new QueueFile ElementReader() { @Override public void read(InputStream in, int length) throws IOException { final byte[] buf = new byte[length]; in read(buf); if (appendComma[0]) { out write(COMMA); } else { // First time through we don't append comma, but subsequent times we do appendComma[0] = true; } out write(buf); } }); } finally { CommonUtils closeQuietly(qf); } } out write(END_JSON_ARRAY); return out toString("UTF-8"); }  private boolean hasApiAdapter() { return getScribeService() != null; }  void setScribeService(ScribeService restAdapter) { scribeService set(restAdapter); }  synchronized ScribeService getScribeService() { if (scribeService get() == null) { final Session session = getSession(ownerId); OkHttpClient client; if (isValidSession(session)) { client = new OkHttpClient Builder()  sslSocketFactory(sslSocketFactory)  addInterceptor(new ConfigRequestInterceptor(scribeConfig, idManager))  addInterceptor(new OAuth1aInterceptor(session, authConfig))  build(); } else { client = new OkHttpClient Builder()  sslSocketFactory(sslSocketFactory)  addInterceptor(new ConfigRequestInterceptor(scribeConfig, idManager))  addInterceptor(new GuestAuthInterceptor(guestSessionProvider))  build(); } final Retrofit retrofit = new Retrofit Builder()  baseUrl(scribeConfig baseUrl)  client(client)  build(); scribeService compareAndSet(null, retrofit create(ScribeService class)); } return scribeService get(); } private Session getSession(long ownerId) { return sessionManager getSession(ownerId); } private boolean isValidSession(Session session) { return session != null && session getAuthToken() != null; }  Response<ResponseBody> upload(String scribeEvents) throws IOException { final ScribeService service = getScribeService(); if (!TextUtils isEmpty(scribeConfig sequence)) { return service uploadSequence(scribeConfig sequence, scribeEvents) execute(); } else { return service upload(scribeConfig pathVersion, scribeConfig pathType, scribeEvents)  execute(); } } interface ScribeService { @Headers("Content-Type: application/x-www-form-urlencoded;charset=UTF-8") @FormUrlEncoded @POST("/{version}/jot/{type}") Call<ResponseBody> upload(@Path("version") String version, @Path("type") String type, @Field("log[]") String logs); @Headers("Content-Type: application/x-www-form-urlencoded;charset=UTF-8") @FormUrlEncoded @POST("/scribe/{sequence}") Call<ResponseBody> uploadSequence(@Path("sequence") String sequence, @Field("log[]") String logs); } // At a certain point we might need to allow either a custom RequestInterceptor to be set // by the user of the ScribeClient or a custom map of headers to be supplied  static class ConfigRequestInterceptor implements Interceptor { private static final String USER_AGENT_HEADER = "User-Agent"; private static final String CLIENT_UUID_HEADER = "X-Client-UUID"; private static final String POLLING_HEADER = "X-Twitter-Polling"; private static final String POLLING_HEADER_VALUE = "true"; private final ScribeConfig scribeConfig; private final IdManager idManager; ConfigRequestInterceptor(ScribeConfig scribeConfig, IdManager idManager) { this scribeConfig = scribeConfig; this idManager = idManager; } @Override public okhttp3 Response intercept(Chain chain) throws IOException { final Request Builder builder = chain request() newBuilder(); if (!TextUtils isEmpty(scribeConfig userAgent)) { builder header(USER_AGENT_HEADER, scribeConfig userAgent); }  if (!TextUtils isEmpty(idManager getDeviceUUID())) { builder header(CLIENT_UUID_HEADER, idManager getDeviceUUID()); }  builder header(POLLING_HEADER, POLLING_HEADER_VALUE); return chain proceed(builder build()); } }}package com twitter sdk android core internal scribe;import android content Context;import io fabric sdk android services events DisabledEventsStrategy;import io fabric sdk android services events EventsFilesManager;import io fabric sdk android services events EventsHandler;import io fabric sdk android services events EventsStrategy;import java util concurrent ScheduledExecutorService;class ScribeHandler extends EventsHandler<ScribeEvent> { public ScribeHandler(Context context, EventsStrategy<ScribeEvent> strategy, EventsFilesManager filesManager, ScheduledExecutorService executorService) { super(context, strategy, filesManager, executorService); }  public void scribe(ScribeEvent event) { recordEventAsync(event, false); }  public void scribeAndFlush(ScribeEvent event) { recordEventAsync(event, true); } @Override protected EventsStrategy<ScribeEvent> getDisabledEventsStrategy() { return new DisabledEventsStrategy<>(); }}package com twitter sdk android core internal scribe;import com google gson annotations SerializedName;import com twitter sdk android core internal VineCardUtils;import com twitter sdk android core models Card;import com twitter sdk android core models MediaEntity;import com twitter sdk android core models Tweet;import com twitter sdk android core models User;import java io Serializable;public class ScribeItem implements Serializable {  public static final int TYPE_TWEET = 0; public static final int TYPE_USER = 3; public static final int TYPE_MESSAGE = 6;  @SerializedName("item_type") public final Integer itemType;  @SerializedName("id") public final Long id;  @SerializedName("description") public final String description;  @SerializedName("card_event") public final CardEvent cardEvent;  @SerializedName("media_details") public final MediaDetails mediaDetails; private ScribeItem(Integer itemType, Long id, String description, CardEvent cardEvent, MediaDetails mediaDetails) { this itemType = itemType; this id = id; this description = description; this cardEvent = cardEvent; this mediaDetails = mediaDetails; } public static ScribeItem fromTweet(Tweet tweet) { return new ScribeItem Builder()  setItemType(TYPE_TWEET)  setId(tweet id)  build(); } public static ScribeItem fromUser(User user) { return new ScribeItem Builder()  setItemType(TYPE_USER)  setId(user id)  build(); } public static ScribeItem fromMessage(String message) { return new ScribeItem Builder()  setItemType(TYPE_MESSAGE)  setDescription(message)  build(); } public static ScribeItem fromTweetCard(long tweetId, Card card) { return new ScribeItem Builder()  setItemType(ScribeItem TYPE_TWEET)  setId(tweetId)  setMediaDetails(createCardDetails(tweetId, card))  build(); } public static ScribeItem fromMediaEntity(long tweetId, MediaEntity mediaEntity) { return new ScribeItem Builder()  setItemType(ScribeItem TYPE_TWEET)  setId(tweetId)  setMediaDetails(createMediaDetails(tweetId, mediaEntity))  build(); } static ScribeItem MediaDetails createMediaDetails(long tweetId, MediaEntity mediaEntity) { return new ScribeItem MediaDetails(tweetId, getMediaType(mediaEntity), mediaEntity id); } static ScribeItem MediaDetails createCardDetails(long tweetId, Card card) { return new ScribeItem MediaDetails(tweetId, MediaDetails TYPE_VINE, Long valueOf(VineCardUtils getPublisherId(card))); } static int getMediaType(MediaEntity mediaEntity) { if (MediaDetails GIF_TYPE equals(mediaEntity type)) { return ScribeItem MediaDetails TYPE_ANIMATED_GIF; } else { return ScribeItem MediaDetails TYPE_CONSUMER; } } @Override public boolean equals(Object o) { if (this == o) return true; if (o == null || getClass() != o getClass()) return false; final ScribeItem that = (ScribeItem) o; if (itemType != null ? !itemType equals(that itemType) : that itemType != null) return false; if (id != null ? !id equals(that id) : that id != null) return false; if (description != null ? !description equals(that description) : that description != null) return false; if (cardEvent != null ? !cardEvent equals(that cardEvent) : that cardEvent != null) return false; return !(mediaDetails != null ? !mediaDetails equals(that mediaDetails) : that  mediaDetails != null); } @Override public int hashCode() { int result = itemType != null ? itemType hashCode() : 0; result = 31 * result + (id != null ? id hashCode() : 0); result = 31 * result + (description != null ? description hashCode() : 0); result = 31 * result + (cardEvent != null ? cardEvent hashCode() : 0); result = 31 * result + (mediaDetails != null ? mediaDetails hashCode() : 0); return result; }  public static class CardEvent implements Serializable { public CardEvent(int cardType) { promotionCardType = cardType; } @SerializedName("promotion_card_type") final int promotionCardType; @Override public boolean equals(Object o) { if (this == o) return true; if (o == null || getClass() != o getClass()) return false; final CardEvent cardEvent = (CardEvent) o; return promotionCardType == cardEvent promotionCardType; } @Override public int hashCode() { return promotionCardType; } }  public static class MediaDetails implements Serializable { public static final int TYPE_CONSUMER = 1; public static final int TYPE_AMPLIFY = 2; public static final int TYPE_ANIMATED_GIF = 3; public static final int TYPE_VINE = 4; public static final String GIF_TYPE = "animated_gif"; @SerializedName("content_id") public final long contentId; @SerializedName("media_type") public final int mediaType; @SerializedName("publisher_id") public final long publisherId; public MediaDetails(long contentId, int mediaType, long publisherId) { this contentId = contentId; this mediaType = mediaType; this publisherId = publisherId; } @Override public boolean equals(Object o) { if (this == o) return true; if (o == null || getClass() != o getClass()) return false; final MediaDetails that = (MediaDetails) o; if (contentId != that contentId) return false; if (mediaType != that mediaType) return false; return publisherId == that publisherId; } @Override public int hashCode() { int result = (int) (contentId ^ (contentId >>> 32)); result = 31 * result + mediaType; result = 31 * result + (int) (publisherId ^ (publisherId >>> 32)); return result; } } public static class Builder { private Integer itemType; private Long id; private String description; private CardEvent cardEvent; private MediaDetails mediaDetails; public Builder setItemType(int itemType) { this itemType = itemType; return this; } public Builder setId(long id) { this id = id; return this; } public Builder setDescription(String description) { this description = description; return this; } public Builder setCardEvent(CardEvent cardEvent) { this cardEvent = cardEvent; return this; } public Builder setMediaDetails(MediaDetails mediaDetails) { this mediaDetails = mediaDetails; return this; } public ScribeItem build() { return new ScribeItem(itemType, id, description, cardEvent, mediaDetails); } }}package com twitter sdk android core models;import com google gson annotations SerializedName;import java util List;public class Search { @SerializedName("statuses") public final List<Tweet> tweets; @SerializedName("search_metadata") public final SearchMetadata searchMetadata; public Search(List<Tweet> tweets, SearchMetadata searchMetadata) { this tweets = tweets; this searchMetadata = searchMetadata; }}package com twitter sdk android core models;import com google gson annotations SerializedName;public class SearchMetadata { @SerializedName("max_id") public final long maxId; @SerializedName("since_id") public final long sinceId; @SerializedName("refresh_url") public final String refreshUrl; @SerializedName("next_results") public final String nextResults; @SerializedName("count") public final long count; @SerializedName("completed_in") public final double completedIn; @SerializedName("since_id_str") public final String sinceIdStr; @SerializedName("query") public final String query; @SerializedName("max_id_str") public final String maxIdStr; public SearchMetadata(int maxId, int sinceId, String refreshUrl, String nextResults, int count, double completedIn, String sinceIdStr, String query, String maxIdStr) { this maxId = maxId; this sinceId = sinceId; this refreshUrl = refreshUrl; this nextResults = nextResults; this count = count; this completedIn = completedIn; this sinceIdStr = sinceIdStr; this query = query; this maxIdStr = maxIdStr; }}package com twitter sdk android core services;import com twitter sdk android core services params Geocode;import com twitter sdk android core models Search;import retrofit2 Call;import retrofit2 http GET;import retrofit2 http Query;public interface SearchService {  @GET("/1 1/search/tweets json?" + "tweet_mode=extended&include_cards=true&cards_platform=TwitterKit-13") Call<Search> tweets(@Query("q") String query, //EncodedQuery protects commas from encode @Query(value = "geocode", encoded = true) Geocode geocode, @Query("lang") String lang, @Query("locale") String locale, @Query("result_type") String resultType, @Query("count") Integer count, @Query("until") String until, @Query("since_id") Long sinceId, @Query("max_id") Long maxId, @Query("include_entities") Boolean includeEntities);}package com twitter sdk android tweetui;import com twitter sdk android core Callback;import com twitter sdk android core Result;import com twitter sdk android core TwitterCore;import com twitter sdk android core TwitterException;import com twitter sdk android core models Search;import com twitter sdk android core models Tweet;import java util List;import retrofit2 Call;public class SearchTimeline extends BaseTimeline implements Timeline<Tweet> { static final String FILTER_RETWEETS = " -filter:retweets"; // leading whitespace intentional private static final String SCRIBE_SECTION = "search"; final String query; final String resultType; final String languageCode; final Integer maxItemsPerRequest; SearchTimeline(TweetUi tweetUi, String query, String resultType, String languageCode, Integer maxItemsPerRequest) { super(tweetUi); this languageCode = languageCode; this maxItemsPerRequest = maxItemsPerRequest; this resultType = resultType; // if the query is non-null append the filter Retweets modifier this query = query == null ? null : query + FILTER_RETWEETS; }  @Override public void next(Long sinceId, Callback<TimelineResult<Tweet>> cb) { createSearchRequest(sinceId, null) enqueue(new SearchCallback(cb)); }  @Override public void previous(Long maxId, Callback<TimelineResult<Tweet>> cb) { // api quirk: search api provides results that are inclusive of the maxId iff // FILTER_RETWEETS is added to the query (which we currently always add), decrement the // maxId to get exclusive results createSearchRequest(null, decrementMaxId(maxId)) enqueue(new SearchCallback(cb)); } @Override String getTimelineType() { return SCRIBE_SECTION; } Call<Search> createSearchRequest(final Long sinceId, final Long maxId) { return TwitterCore getInstance() getApiClient() getSearchService() tweets(query, null, languageCode, null, resultType, maxItemsPerRequest, null, sinceId, maxId, true); }  class SearchCallback extends Callback<Search> { final Callback<TimelineResult<Tweet>> cb;  SearchCallback(Callback<TimelineResult<Tweet>> cb) { this cb = cb; } @Override public void success(Result<Search> result) { final List<Tweet> tweets = result data tweets; final TimelineResult<Tweet> timelineResult = new TimelineResult<>(new TimelineCursor(tweets), tweets); if (cb != null) { cb success(new Result<>(timelineResult, result response)); } } @Override public void failure(TwitterException exception) { if (cb != null) { cb failure(exception); } } } public enum ResultType { RECENT("recent"), POPULAR("popular"), MIXED("mixed"), FILTERED("filtered"); final String type; ResultType(String type) { this type = type; } }  public static class Builder { private TweetUi tweetUi; private String query; private String lang; private String resultType = ResultType FILTERED type; private Integer maxItemsPerRequest = 30;  public Builder() { this(TweetUi getInstance()); }  public Builder(TweetUi tweetUi) { if (tweetUi == null) { throw new IllegalArgumentException("TweetUi instance must not be null"); } this tweetUi = tweetUi; }  public Builder query(String query) { this query = query; return this; }  public Builder resultType(ResultType resultType) { this resultType = resultType type; return this; }  public Builder languageCode(String languageCode) { this lang = languageCode; return this; }  public Builder maxItemsPerRequest(Integer maxItemsPerRequest) { this maxItemsPerRequest = maxItemsPerRequest; return this; }  public SearchTimeline build() { if (query == null) { throw new IllegalStateException("query must not be null"); } return new SearchTimeline(tweetUi, query, resultType, lang, maxItemsPerRequest); } }}package com twitter sdk android core;import com google gson annotations SerializedName;public class Session<T extends AuthToken> { @SerializedName("auth_token") private final T authToken; @SerializedName("id") private final long id; public Session(T authToken, long id) { if (authToken == null) { throw new IllegalArgumentException("AuthToken must not be null "); } this authToken = authToken; this id = id; } public T getAuthToken() { return authToken; } public long getId() { return id; } @Override public boolean equals(Object o) { if (this == o) return true; if (o == null || getClass() != o getClass()) return false; final Session session = (Session) o; if (id != session id) return false; return authToken != null ? authToken equals(session authToken) : session authToken == null; } @Override public int hashCode() { int result = authToken != null ? authToken hashCode() : 0; result = 31 * result + (int) (id ^ (id >>> 32)); return result; }}package com twitter sdk android core;import java util Map;public interface SessionManager<T extends Session> {  T getActiveSession();  void setActiveSession(T session);  void clearActiveSession();  T getSession(long id);  void setSession(long id, T session);  void clearSession(long id);  Map<Long, T> getSessionMap();}package com twitter sdk android core internal;import android app Activity;import android text format DateUtils;import io fabric sdk android ActivityLifecycleManager;import io fabric sdk android services common SystemCurrentTimeProvider;import com twitter sdk android core Session;import com twitter sdk android core SessionManager;import java util Calendar;import java util TimeZone;import java util concurrent ExecutorService;public class SessionMonitor<T extends Session> { protected final MonitorState monitorState; private final SystemCurrentTimeProvider time; private final SessionManager<T> sessionManager; private final ExecutorService executorService; private final SessionVerifier sessionVerifier;  public SessionMonitor(SessionManager<T> sessionManager, ExecutorService executorService, SessionVerifier<T> sessionVerifier) { this(sessionManager, new SystemCurrentTimeProvider(), executorService, new MonitorState(), sessionVerifier); } SessionMonitor(SessionManager<T> sessionManager, SystemCurrentTimeProvider time, ExecutorService executorService, MonitorState monitorState, SessionVerifier sessionVerifier) { this time = time; this sessionManager = sessionManager; this executorService = executorService; this monitorState = monitorState; this sessionVerifier = sessionVerifier; }  public void monitorActivityLifecycle(ActivityLifecycleManager activityLifecycleManager) { activityLifecycleManager registerCallbacks(new ActivityLifecycleManager Callbacks() { @Override public void onActivityStarted(Activity activity) { triggerVerificationIfNecessary(); } }); }  public void triggerVerificationIfNecessary() { final Session session = sessionManager getActiveSession(); final long currentTime = time getCurrentTimeMillis(); final boolean startVerification = session != null && monitorState beginVerification(currentTime); if (startVerification) { executorService submit(new Runnable() { @Override public void run() { verifyAll(); } }); } } protected void verifyAll() { for (T session : sessionManager getSessionMap() values()) { sessionVerifier verifySession(session); } monitorState endVerification(time getCurrentTimeMillis()); }  protected static class MonitorState { private static final long TIME_THRESHOLD_IN_MILLIS = 6 * DateUtils HOUR_IN_MILLIS; public boolean verifying; public long lastVerification; private final Calendar utcCalendar; public MonitorState() { this utcCalendar = Calendar getInstance(TimeZone getTimeZone("UTC")); } public synchronized boolean beginVerification(long currentTime) { final boolean isPastThreshold = currentTime - lastVerification > TIME_THRESHOLD_IN_MILLIS; final boolean dayHasChanged = !isOnSameDate(currentTime, lastVerification); if (!verifying && (isPastThreshold || dayHasChanged)) { return verifying = true; } return false; } public synchronized void endVerification(long currentTime) { verifying = false; lastVerification = currentTime; } private boolean isOnSameDate(long timeA, long timeB) { utcCalendar setTimeInMillis(timeA); final int dayA = utcCalendar get(Calendar DAY_OF_YEAR); final int yearA = utcCalendar get(Calendar YEAR); utcCalendar setTimeInMillis(timeB); final int dayB = utcCalendar get(Calendar DAY_OF_YEAR); final int yearB = utcCalendar get(Calendar YEAR); return dayA == dayB && yearA == yearB; } }}package com twitter sdk android core internal;import com twitter sdk android core Session;public interface SessionVerifier<T extends Session> { void verifySession(T session);}package com twitter sdk android core identity;import android app Activity;import android content Context;import android content Intent;import android content pm PackageManager;import android os Bundle;import android os ResultReceiver;import android view View;import android widget TextView;import com twitter sdk android core R;import com twitter sdk android core TwitterCore;import com twitter sdk android core TwitterSession;import io fabric sdk android Fabric;public class ShareEmailActivity extends Activity { static final String EXTRA_RESULT_RECEIVER = "result_receiver"; static final String EXTRA_SESSION_ID = "session_id";  ShareEmailController controller; private TwitterSession session; @Override protected void onCreate(Bundle savedInstanceState) { super onCreate(savedInstanceState); setContentView(R layout tw__activity_share_email); try { final Intent startIntent = getIntent(); final ResultReceiver resultReceiver = getResultReceiver(startIntent); session = getSession(startIntent); controller = new ShareEmailController(new ShareEmailClient(session), resultReceiver); final TextView shareEmailDescView = (TextView) findViewById(R id tw__share_email_desc); setUpShareEmailDesc(this, shareEmailDescView); } catch (IllegalArgumentException e) { Fabric getLogger() e(TwitterCore TAG, "Failed to create ShareEmailActivity ", e); finish(); } } private ResultReceiver getResultReceiver(Intent intent) { final ResultReceiver resultReceiver = intent getParcelableExtra(EXTRA_RESULT_RECEIVER); if (resultReceiver == null) { throw new IllegalArgumentException("ResultReceiver must not be null  This activity " + "should not be started directly "); } return resultReceiver; } private TwitterSession getSession(Intent intent) { // TODO: Make session parcelable and pass actual session  final long sessionId = intent getLongExtra(EXTRA_SESSION_ID, TwitterSession UNKNOWN_USER_ID); final TwitterSession session = TwitterCore getInstance() getSessionManager()  getSession(sessionId); if (session == null) { throw new IllegalArgumentException("No TwitterSession for id:" + sessionId); } return session; } void setUpShareEmailDesc(Context context, TextView shareEmailDescView) { final PackageManager packageManager = context getPackageManager(); shareEmailDescView setText(getResources() getString(R string tw__share_email_desc, packageManager getApplicationLabel(context getApplicationInfo()), session getUserName())); } public void onClickNotNow(View view) { controller cancelRequest(); finish(); } public void onClickAllow(View view) { controller executeRequest(); finish(); } @Override public void onBackPressed() { controller cancelRequest(); super onBackPressed(); }}package com twitter sdk android core identity;import android content Context;import android content Intent;import android content pm ApplicationInfo;import android content pm PackageManager;import android widget Button;import android widget TextView;import io fabric sdk android FabricActivityTestCase;import io fabric sdk android FabricTestUtils;import com twitter sdk android core Callback;import com twitter sdk android core R;import com twitter sdk android core SessionManager;import com twitter sdk android core TwitterAuthConfig;import com twitter sdk android core TwitterCore;import com twitter sdk android core TwitterSession;import static org mockito Matchers any;import static org mockito Mockito mock;import static org mockito Mockito verify;import static org mockito Mockito when;public class ShareEmailActivityTest extends FabricActivityTestCase<ShareEmailActivity> { private static final String TEST_APP_NAME = "app name"; private static final String TEST_USER_NAME = "user name"; private static final long TEST_SESSION_ID = 1L; private static final long TEST_SESSION_ID2 = 2L; private Context context; private TwitterSession mockSession; private ShareEmailController mockController; public ShareEmailActivityTest() { super(ShareEmailActivity class); } @Override protected void setUp() throws Exception { super setUp(); context = getInstrumentation() getTargetContext(); final TwitterCore twitterCore = new TwitterCore(new TwitterAuthConfig("", "")); FabricTestUtils resetFabric(); FabricTestUtils with(context, twitterCore); mockSession = mock(TwitterSession class); when(mockSession getUserName()) thenReturn(TEST_USER_NAME); when(mockSession getId()) thenReturn(TEST_SESSION_ID); mockController = mock(TestShareEmailController class); final SessionManager<TwitterSession> sessionManager = TwitterCore getInstance()  getSessionManager(); sessionManager setActiveSession(mockSession); } @Override protected void tearDown() throws Exception { FabricTestUtils resetFabric(); super tearDown(); } private void init() { final ShareEmailResultReceiver resultReceiver = new ShareEmailResultReceiver(mock(Callback class)); final Intent intent = new Intent(context, ShareEmailActivity class)  putExtra(ShareEmailActivity EXTRA_RESULT_RECEIVER, resultReceiver)  putExtra(ShareEmailActivity EXTRA_SESSION_ID, TEST_SESSION_ID); init(intent); } private void init(Intent intent) { final ShareEmailActivity activity = startActivity(intent, null, null); activity controller = mockController; } public void testOnCreate_extraResultReceiverMissing() { final Intent intent = new Intent(context, ShareEmailActivity class); init(intent); assertTrue(isFinishCalled()); } public void testOnCreate_extraSessionIdMissing() { final ShareEmailResultReceiver resultReceiver = new ShareEmailResultReceiver(mock(Callback class)); final Intent intent = new Intent(context, ShareEmailActivity class)  putExtra(ShareEmailActivity EXTRA_RESULT_RECEIVER, resultReceiver); init(intent); assertTrue(isFinishCalled()); } public void testOnCreate_extraSessionIdUnknown() { final ShareEmailResultReceiver resultReceiver = new ShareEmailResultReceiver(mock(Callback class)); final Intent intent = new Intent(context, ShareEmailActivity class)  putExtra(ShareEmailActivity EXTRA_RESULT_RECEIVER, resultReceiver)  putExtra(ShareEmailActivity EXTRA_SESSION_ID, TwitterSession UNKNOWN_USER_ID); init(intent); assertTrue(isFinishCalled()); } public void testOnCreate_extraSessionIdNotFound() { final ShareEmailResultReceiver resultReceiver = new ShareEmailResultReceiver(mock(Callback class)); final Intent intent = new Intent(context, ShareEmailActivity class)  putExtra(ShareEmailActivity EXTRA_RESULT_RECEIVER, resultReceiver)  putExtra(ShareEmailActivity EXTRA_SESSION_ID, TEST_SESSION_ID2); init(intent); assertTrue(isFinishCalled()); } public void testOnClickNotNow() { init(); final Button button = (Button) getActivity() findViewById(R id tw__not_now_btn); button performClick(); verify(mockController) cancelRequest(); } public void testOnClickAllow() { init(); final Button button = (Button) getActivity() findViewById(R id tw__allow_btn); button performClick(); verify(mockController) executeRequest(); } public void testSetUpShareEmailDesc() { init(); final TextView textView = new TextView(context); final Context mockContext = mock(Context class); final PackageManager mockPackageManager = mock(PackageManager class); when(mockContext getPackageManager()) thenReturn(mockPackageManager); when(mockPackageManager getApplicationLabel(any(ApplicationInfo class)))  thenReturn(TEST_APP_NAME); getActivity() setUpShareEmailDesc(mockContext, textView); assertEquals(context getString(R string tw__share_email_desc, TEST_APP_NAME, TEST_USER_NAME), textView getText() toString()); } public void testOnBackPressed() { init(); getActivity() onBackPressed(); verify(mockController) cancelRequest(); }}package com twitter sdk android core identity;import android app Activity;import com twitter sdk android core Callback;import com twitter sdk android core TwitterApiClient;import com twitter sdk android core TwitterSession;import com twitter sdk android core models User;import retrofit2 Call;import retrofit2 http GET;import retrofit2 http Query;class ShareEmailClient extends TwitterApiClient { static final int RESULT_CODE_CANCELED = Activity RESULT_CANCELED; static final int RESULT_CODE_OK = Activity RESULT_OK; static final int RESULT_CODE_ERROR = Activity RESULT_FIRST_USER; static final String RESULT_DATA_EMAIL = "email"; static final String RESULT_DATA_MSG = "msg"; static final String RESULT_DATA_ERROR = "error"; ShareEmailClient(TwitterSession session) { super(session); }  protected void getEmail(Callback<User> callback) { getService(EmailService class) verifyCredentials(true, true) enqueue(callback); } interface EmailService { @GET("/1 1/account/verify_credentials json?include_email=true") Call<User> verifyCredentials( @Query("include_entities") Boolean includeEntities, @Query("skip_status") Boolean skipStatus); }}package com twitter sdk android core identity;import io fabric sdk android FabricAndroidTestCase;import io fabric sdk android FabricTestUtils;import retrofit2 Call;import com twitter sdk android core Callback;import com twitter sdk android core TestFixtures;import com twitter sdk android core TwitterAuthConfig;import com twitter sdk android core TwitterCore;import com twitter sdk android core TwitterSession;import com twitter sdk android core models User;import static org mockito Matchers anyBoolean;import static org mockito Matchers eq;import static org mockito Mockito mock;import static org mockito Mockito verify;import static org mockito Mockito when;public class ShareEmailClientTest extends FabricAndroidTestCase { private ShareEmailClient EmailService mockEmailService; private ShareEmailClient shareEmailClient; public void setUp() throws Exception { super setUp(); FabricTestUtils resetFabric(); FabricTestUtils with(getContext(), new TwitterCore(new TwitterAuthConfig(TestFixtures KEY, TestFixtures SECRET))); mockEmailService = mock(ShareEmailClient EmailService class); when(mockEmailService verifyCredentials(anyBoolean(), anyBoolean()))  thenReturn(mock(Call class)); shareEmailClient = new ShareEmailClient(mock(TwitterSession class)) { @Override protected <T> T getService(Class<T> cls) { if (cls equals(EmailService class)) { return (T) mockEmailService; } else { return super getService(cls); } } }; } @Override protected void tearDown() throws Exception { FabricTestUtils resetFabric(); super tearDown(); } public void testGetEmail() throws Exception { final Callback<User> mockCallback = mock(Callback class); shareEmailClient getEmail(mockCallback); verify(mockEmailService) verifyCredentials(eq(true), eq(true)); }}package com twitter sdk android core identity;import android os Bundle;import android os ResultReceiver;import com twitter sdk android core Callback;import com twitter sdk android core Result;import com twitter sdk android core TwitterCore;import com twitter sdk android core TwitterException;import com twitter sdk android core models User;import io fabric sdk android Fabric;class ShareEmailController { private static final String EMPTY_EMAIL = ""; private final ShareEmailClient emailClient; private final ResultReceiver resultReceiver; public ShareEmailController(ShareEmailClient emailClient, ResultReceiver resultReceiver) { this emailClient = emailClient; this resultReceiver = resultReceiver; } public void executeRequest() { emailClient getEmail(newCallback()); } Callback<User> newCallback() { return new Callback<User>() { @Override public void success(Result<User> result) { handleSuccess(result data); } @Override public void failure(TwitterException exception) { Fabric getLogger() e(TwitterCore TAG, "Failed to get email address ", exception); // Create new exception that can be safely serialized since Retrofit errors may // throw a NotSerializableException  sendResultCodeError(new TwitterException("Failed to get email address ")); } }; } void handleSuccess(User user) { if (user email == null) { sendResultCodeError(new TwitterException("Your application may not have access to" + " email addresses or the user may not have an email address  To request" + " access, please visit https://support twitter com/forms/platform ")); } else if (EMPTY_EMAIL equals(user email)) { sendResultCodeError(new TwitterException("This user does not have an email address ")); } else { sendResultCodeOk(user email); } } void sendResultCodeOk(String email) { final Bundle bundle = new Bundle(); bundle putString(ShareEmailClient RESULT_DATA_EMAIL, email); resultReceiver send(ShareEmailClient RESULT_CODE_OK, bundle); } void sendResultCodeError(TwitterException exception) { final Bundle bundle = new Bundle(); bundle putSerializable(ShareEmailClient RESULT_DATA_ERROR, exception); resultReceiver send(ShareEmailClient RESULT_CODE_ERROR, bundle); } public void cancelRequest() { final Bundle bundle = new Bundle(); bundle putSerializable(ShareEmailClient RESULT_DATA_MSG, "The user chose not to share their email address at this time "); resultReceiver send(ShareEmailClient RESULT_CODE_CANCELED, bundle); }}package com twitter sdk android core identity;import android os Bundle;import android os ResultReceiver;import com twitter sdk android core Callback;import com twitter sdk android core Result;import com twitter sdk android core TwitterException;class ShareEmailResultReceiver extends ResultReceiver { private final Callback<String> callback; public ShareEmailResultReceiver(Callback<String> callback) { super(null); if (callback == null) { throw new IllegalArgumentException("Callback must not be null"); } this callback = callback; } @Override public void onReceiveResult(int resultCode, Bundle resultData) { switch (resultCode) { case ShareEmailClient RESULT_CODE_OK: { callback success(new Result<>( resultData getString(ShareEmailClient RESULT_DATA_EMAIL), null)); break; } case ShareEmailClient RESULT_CODE_CANCELED: { callback failure(new TwitterException(resultData getString( ShareEmailClient RESULT_DATA_MSG))); break; } case ShareEmailClient RESULT_CODE_ERROR: { callback failure((TwitterException) resultData getSerializable( ShareEmailClient RESULT_DATA_ERROR)); break; } default: { throw new IllegalArgumentException("Invalid result code " + resultCode); } } }}package com twitter sdk android tweetui;import android content Context;import android content Intent;import android content res Resources;import android view View;import com twitter sdk android core IntentUtils;import com twitter sdk android core models Tweet;import io fabric sdk android Fabric;class ShareTweetAction implements View OnClickListener { final Tweet tweet; final TweetUi tweetUi; final TweetScribeClient tweetScribeClient; ShareTweetAction(Tweet tweet, TweetUi tweetUi) { this(tweet, tweetUi, new TweetScribeClientImpl(tweetUi)); } // For testing only ShareTweetAction(Tweet tweet, TweetUi tweetUi, TweetScribeClient tweetScribeClient) { super(); this tweet = tweet; this tweetUi = tweetUi; this tweetScribeClient = tweetScribeClient; } @Override public void onClick(View v) { onClick(v getContext(), v getResources()); } void scribeShareAction() { tweetScribeClient share(tweet); } void onClick(Context context, Resources resources) { if (tweet == null || tweet user == null) return; scribeShareAction(); final String shareSubject = getShareSubject(resources); final String shareContent = getShareContent(resources); final Intent shareIntent = getShareIntent(shareSubject, shareContent); final String shareText = resources getString(R string tw__share_tweet); final Intent chooser = Intent createChooser(shareIntent, shareText); launchShareIntent(chooser, context); } String getShareContent(Resources resources) { return resources getString(R string tw__share_content_format, tweet user screenName, tweet id); } String getShareSubject(Resources resources) { return resources getString(R string tw__share_subject_format, tweet user name, tweet user screenName); } void launchShareIntent(Intent chooser, Context context) { if (!IntentUtils safeStartActivity(context, chooser)) { Fabric getLogger() e(TweetUi LOGTAG, "Activity cannot be found to handle share intent"); } } Intent getShareIntent(String subject, String content) { final Intent intent = new Intent(); intent setAction(Intent ACTION_SEND); intent putExtra(Intent EXTRA_SUBJECT, subject); intent putExtra(Intent EXTRA_TEXT, content); intent setType("text/plain"); return intent; }}package com twitter sdk android tweetui internal;import android annotation SuppressLint;import android text Layout;import android text Spanned;import android view MotionEvent;import android view View;import android widget TextView;public class SpanClickHandler { private final View view; private Layout layout; private float left; private float top; private HighlightedClickableSpan highlightedClickableSpan; public static void enableClicksOnSpans(TextView textView) { final SpanClickHandler helper = new SpanClickHandler(textView, null); textView setOnTouchListener(new View OnTouchListener() { @SuppressLint("ClickableViewAccessibility") @Override public boolean onTouch(View view, MotionEvent event) { final TextView textView = (TextView) view; final Layout layout = textView getLayout(); if (layout != null) { helper layout = layout; helper left = textView getTotalPaddingLeft() + textView getScrollX(); helper top = textView getTotalPaddingTop() + textView getScrollY(); return helper handleTouchEvent(event); } return false; } }); }  public SpanClickHandler(View view, Layout layout) { this view = view; this layout = layout; }  public void setPosition(float left, float top) { this left = left; this top = top; }  public boolean handleTouchEvent(MotionEvent event) { final CharSequence text = layout getText(); final Spanned spannedText = text instanceof Spanned ? (Spanned) text : null; if (spannedText == null) { return false; } final int action = (event getAction() & MotionEvent ACTION_MASK); final int x = (int) (event getX() - left); final int y = (int) (event getY() - top); if (x < 0 || x >= layout getWidth() || y < 0 || y >= layout getHeight()) { deselectSpan(); return false; } // Get the clicked line and check x is within the text on this line  final int line = layout getLineForVertical(y); if (x < layout getLineLeft(line) || x > layout getLineRight(line)) { deselectSpan(); return false; } if (action == MotionEvent ACTION_DOWN) { final int offset = layout getOffsetForHorizontal(line, x); final HighlightedClickableSpan[] span = spannedText getSpans(offset, offset, HighlightedClickableSpan class); if (span length > 0) { selectSpan(span[0]); return true; } } else if (action == MotionEvent ACTION_UP) { final HighlightedClickableSpan selectedSpan = highlightedClickableSpan; if (selectedSpan != null) { selectedSpan onClick(view); deselectSpan(); return true; } } return false; }  private void selectSpan(HighlightedClickableSpan span) { span select(true); highlightedClickableSpan = span; invalidate(); }  private void deselectSpan() { final HighlightedClickableSpan selectedSpan = highlightedClickableSpan; if (selectedSpan != null && selectedSpan isSelected()) { selectedSpan select(false); highlightedClickableSpan = null; invalidate(); } } private void invalidate() { view invalidate((int) left, (int) top, (int) left + layout getWidth(), (int) top + layout getHeight()); }}package com twitter sdk android core identity;import android app Activity;import android content ComponentName;import android content Context;import android content Intent;import android content pm PackageInfo;import android content pm PackageManager;import android content pm Signature;import io fabric sdk android Fabric;import com twitter sdk android core Callback;import com twitter sdk android core IntentUtils;import com twitter sdk android core TwitterCore;import com twitter sdk android core TwitterAuthConfig;import com twitter sdk android core TwitterSession;class SSOAuthHandler extends AuthHandler { // Package name of the Twitter for Android application  static final String TWITTER_PACKAGE_NAME = "com twitter android"; // Package name of the Twitter Dogfood Android application  static final String DOGFOOD_PACKAGE_NAME = "com twitter android beta"; // Class name of the Activity responsible for Single sign-on flow  static final String SSO_CLASS_NAME = TWITTER_PACKAGE_NAME + " SingleSignOnActivity"; // Twitter for Android application signature static final String TWITTER_SIGNATURE = "3082025d308201c6a00302010202044bd76cce300d06092" + "a864886f70d01010505003073310b3009060355040613025553310b3009060355040813024341311630" + "140603550407130d53616e204672616e636973636f31163014060355040a130d547769747465722c204" + "96e632e310f300d060355040b13064d6f62696c65311630140603550403130d4c656c616e6420526563" + "686973301e170d3130303432373233303133345a170d3438303832353233303133345a3073310b30090" + "60355040613025553310b3009060355040813024341311630140603550407130d53616e204672616e63" + "6973636f31163014060355040a130d547769747465722c20496e632e310f300d060355040b13064d6f6" + "2696c65311630140603550403130d4c656c616e642052656368697330819f300d06092a864886f70d01" + "0101050003818d003081890281810086233c2e51c62232d49cc932e470713d63a6a1106b38f9e442e01" + "bc79ca4f95c72b2cb3f1369ef7dea6036bff7c4b2828cb3787e7657ad83986751ced5b131fcc6f413ef" + "b7334e32ed9787f9e9a249ae108fa66009ac7a7932c25d37e1e07d4f9f66aa494c270dbac87d261c966" + "8d321c2fba4ef2800e46671a597ff2eac5d7f0203010001300d06092a864886f70d0101050500038181" + "003e1f01cb6ea8be8d2cecef5cd2a64c97ba8728aa5f08f8275d00508d64d139b6a72c5716b40a040df" + "0eeeda04de9361107e123ee8d3dc05e70c8a355f46dbadf1235443b0b214c57211afd4edd147451c443" + "d49498d2a7ff27e45a99c39b9e47429a1dae843ba233bf8ca81296dbe1dc5c5434514d995b027924680" + "9392a219b"; // Twitter Android Dogfood application signature static final String DOGFOOD_SIGNATURE = "308203523082023aa00302010202044fd0006b300d06092a864" + "886f70d0101050500306b310b3009060355040613025553310b30090603550408130243413116301406" + "03550407130d53616e204672616e636973636f3110300e060355040a130754776974746572310f300d0" + "60355040b13064d6f62696c65311430120603550403130b4a6f6e617468616e204c65301e170d313230" + "3630373031313431395a170d3339313032343031313431395a306b310b3009060355040613025553310" + "b3009060355040813024341311630140603550407130d53616e204672616e636973636f3110300e0603" + "55040a130754776974746572310f300d060355040b13064d6f62696c65311430120603550403130b4a6" + "f6e617468616e204c6530820122300d06092a864886f70d01010105000382010f003082010a02820101" + "0089e6cbdfed4288a9c0a215d33d4fa978a5bdd20be426ef4b497d358a9fd1c6efec9684f059f6955e6" + "0e5fda1b5910bb2d097e7421a78f9c81e95cd8ef3bf50add7f8d9f073c0478736a6c7fd38c587155978" + "3a76420d37f3f874f2114ec02532e85587791d24037485b1b95ec8cbc75b52042867988b51c7c3589d5" + "b5972fd20a2e8a7c9ced986873f5008a418b2921daa7cfb78afc174eecdb8a79dc0961bea9740d09c46" + "56ac9b8c86263a788e35af1d4a3f86ce053a1aefb5369def91614a390219f896f378712376baa05934a" + "341798950e229f4f735b86004952b259f23cc9fc3b8c1bc8171984884dc92940e91f2e9a78a84a78f0c" + "2946b7e37bbf3b9b0203010001300d06092a864886f70d010105050003820101001cf15250365e66cc8" + "7bb5054de1661266cf87907841016b20dfa1f9f59842020cbc33f9b4d41717db0428d11696a0bade6a4" + "950a48cc4fa8ae56c850647379a5c2d977436b644162c453dd36b7745ccb9ff0b5fc070125024de73da" + "b6dcda5c69372e978a49865f569927199ed0f61d7cbee1839079a7da2e83f8c90f7421a8c81b3f17f1c" + "c05d52aedac9acd6e092ffd9ad572960e779a5b91a78e1aeb2b3c7b24464bd223c745e40abd74fc5863" + "10809520d183443fcca3c6ade3be458afedbd3325df9c0e552636e35bb55b240eb8c0ba3973c4fb8121" + "3f22363be2d70e85014650c2f4fc679747a7ec31ea7b08da7dd9b9ba279a7fbbc1bd440fbe831bf4"; private static final String EXTRA_CONSUMER_KEY = "ck"; private static final String EXTRA_CONSUMER_SECRET = "cs"; public SSOAuthHandler(TwitterAuthConfig authConfig, Callback<TwitterSession> callback, int requestCode) { super(authConfig, callback, requestCode); } @Override public boolean authorize(Activity activity) { return startAuthActivityForResult(activity); } private boolean startAuthActivityForResult(Activity activity) { final PackageManager pm = activity getPackageManager(); final String packageName = availableSSOPackage(pm); if (packageName == null) { Fabric getLogger() e(TwitterCore TAG, "SSO app signature check failed", null); return false; } final ComponentName ssoActivity = new ComponentName(packageName, SSO_CLASS_NAME); final TwitterAuthConfig authConfig = getAuthConfig(); final Intent intent = new Intent() setComponent(ssoActivity); if (!IntentUtils isActivityAvailable(activity, intent)) { Fabric getLogger() e(TwitterCore TAG, "SSO auth activity not found", null); return false; } intent putExtra(EXTRA_CONSUMER_KEY, authConfig getConsumerKey())  putExtra(EXTRA_CONSUMER_SECRET, authConfig getConsumerSecret()); try { activity startActivityForResult(intent, requestCode); return true; } catch (Exception e) { Fabric getLogger() e(TwitterCore TAG, "SSO exception occurred", e); return false; } }  public static String availableSSOPackage(PackageManager pm) { if (checkAppSignature(pm, TWITTER_PACKAGE_NAME, TWITTER_SIGNATURE)) { return TWITTER_PACKAGE_NAME; } else if (checkAppSignature(pm, DOGFOOD_PACKAGE_NAME, DOGFOOD_SIGNATURE)) { return DOGFOOD_PACKAGE_NAME; } else { return null; } }  public static boolean isAvailable(Context context) { final PackageManager pm = context getPackageManager(); return checkAppSignature(pm, TWITTER_PACKAGE_NAME, TWITTER_SIGNATURE) || checkAppSignature(pm, DOGFOOD_PACKAGE_NAME, DOGFOOD_SIGNATURE); } private static boolean checkAppSignature(PackageManager pm, String packageName, String requiredSignature) { PackageInfo p; try { p = pm getPackageInfo(packageName, PackageManager GET_SIGNATURES); } catch (PackageManager NameNotFoundException e) { return false; } for (Signature s : p signatures) { if (!requiredSignature equals(s toCharsString())) { return false; } } return true; }}package com twitter sdk android tweetcomposer;import com twitter sdk android core models Tweet;import retrofit2 Call;import retrofit2 http Field;import retrofit2 http FormUrlEncoded;import retrofit2 http POST;public interface StatusesService { @FormUrlEncoded @POST("/1 1/statuses/update json") Call<Tweet> update(@Field("status") String status, @Field("card_uri") String cardUri);}package com twitter sdk android core internal scribe;import com google gson annotations SerializedName;import java util Collections;import java util List;public class SyndicatedSdkImpressionEvent extends ScribeEvent { public static final String CLIENT_NAME = "android"; private static final String SCRIBE_CATEGORY = "syndicated_sdk_impression";  @SerializedName("external_ids") public final ExternalIds externalIds;  @SerializedName("device_id_created_at") public final long deviceIdCreatedAt;  @SerializedName("language") public final String language; public SyndicatedSdkImpressionEvent(EventNamespace eventNamespace, long timestamp, String language, String adId) { this(eventNamespace, timestamp, language, adId, Collections <ScribeItem>emptyList()); } public SyndicatedSdkImpressionEvent(EventNamespace eventNamespace, long timestamp, String language, String adId, List<ScribeItem> items) { super(SCRIBE_CATEGORY, eventNamespace, timestamp, items); this language = language; this externalIds = new ExternalIds(adId); this deviceIdCreatedAt = 0; // see field comment } public class ExternalIds {  @SerializedName("AD_ID") public final String adId; public ExternalIds(String adId) { this adId = adId; } }}package com twitter sdk android core internal scribe;import com google gson annotations SerializedName;import java util List;public class SyndicationClientEvent extends ScribeEvent { public static final String CLIENT_NAME = "tfw"; private static final String SCRIBE_CATEGORY = "tfw_client_event";  @SerializedName("language") public final String language;  @SerializedName("event_info") public final String eventInfo;  @SerializedName("external_ids") public final ExternalIds externalIds; public SyndicationClientEvent(EventNamespace eventNamespace, String eventInfo, long timestamp, String language, String adId, List<ScribeItem> items) { super(SCRIBE_CATEGORY, eventNamespace, timestamp, items); this language = language; this eventInfo = eventInfo; externalIds = new ExternalIds(adId); } public class ExternalIds {  @SerializedName("6") public final String adId; public ExternalIds(String adId) { this adId = adId; } }}package com twitter sdk android core identity;public class TestAuthState extends AuthState {}package com twitter sdk android core;public final class TestFixtures { public static final String KEY = "key"; public static final String TOKEN = "token"; public static final String SECRET = "secret"; public static final long USER_ID = 11L;}package com twitter sdk android core identity;import android webkit WebView;import android widget ProgressBar;import com twitter sdk android core TwitterAuthConfig;import com twitter sdk android core internal oauth OAuth1aService;public class TestOAuthController extends OAuthController { TestOAuthController(ProgressBar spinner, WebView webView, TwitterAuthConfig authConfig, OAuth1aService oAuth1aService, Listener listener) { super(spinner, webView, authConfig, oAuth1aService, listener); }}package com twitter sdk android core identity;import com twitter sdk android core TwitterSession;public class TestShareEmailClient extends ShareEmailClient { public TestShareEmailClient(TwitterSession session) { super(session); }}package com twitter sdk android core identity;import android os ResultReceiver;public class TestShareEmailController extends ShareEmailController { public TestShareEmailController(ShareEmailClient emailClient, ResultReceiver resultReceiver) { super(emailClient, resultReceiver); }}package com twitter sdk android core identity;import android content Context;import android content pm PackageInfo;import android content pm PackageManager;import android content pm Signature;import static org mockito Mockito *;public final class TestUtils { private TestUtils() { // Private constructor } public static void setupTwitterInstalled(Context mockContext) throws PackageManager NameNotFoundException { setupTwitterInstalled(mockContext, SSOAuthHandler TWITTER_SIGNATURE); } public static void setupTwitterInstalled(Context mockContext, String signature) throws PackageManager NameNotFoundException { final PackageManager mockPm = mock(PackageManager class); final PackageInfo mockPackageInfo = mock(PackageInfo class); mockPackageInfo signatures = new Signature[] { new Signature(signature) }; when(mockContext getPackageManager()) thenReturn(mockPm); when(mockPm getPackageInfo(SSOAuthHandler TWITTER_PACKAGE_NAME, PackageManager GET_SIGNATURES)) thenReturn(mockPackageInfo); when(mockPm getPackageInfo(SSOAuthHandler DOGFOOD_PACKAGE_NAME, PackageManager GET_SIGNATURES))  thenThrow(new PackageManager NameNotFoundException()); } public static void setupNoSSOAppInstalled(Context mockContext) throws PackageManager NameNotFoundException { final PackageManager mockPm = mock(PackageManager class); when(mockContext getPackageManager()) thenReturn(mockPm); when(mockPm getPackageInfo(SSOAuthHandler TWITTER_PACKAGE_NAME, PackageManager GET_SIGNATURES))  thenThrow(new PackageManager NameNotFoundException()); when(mockPm getPackageInfo(SSOAuthHandler DOGFOOD_PACKAGE_NAME, PackageManager GET_SIGNATURES))  thenThrow(new PackageManager NameNotFoundException()); }}package com twitter sdk android tweetui;import com twitter sdk android core Callback;public interface Timeline<T> {  void next(Long minPosition, final Callback<TimelineResult<T>> cb);  void previous(Long maxPosition, final Callback<TimelineResult<T>> cb);}package com twitter sdk android tweetui;import com twitter sdk android core models Identifiable;import java util List;public class TimelineCursor { public final Long minPosition; public final Long maxPosition;  public TimelineCursor(Long minPosition, Long maxPosition) { this minPosition = minPosition; this maxPosition = maxPosition; }  TimelineCursor(List<? extends Identifiable> items) { this minPosition = items size() > 0 ? items get(items size() - 1) getId() : null; this maxPosition = items size() > 0 ? items get(0) getId() : null; }}package com twitter sdk android tweetui internal;import android database DataSetObservable;import android database DataSetObserver;import com twitter sdk android core Callback;import com twitter sdk android core Result;import com twitter sdk android core TwitterException;import com twitter sdk android core models Identifiable;import com twitter sdk android tweetui Timeline;import com twitter sdk android tweetui TimelineResult;import java util ArrayList;import java util List;public class TimelineDelegate<T extends Identifiable> { // once capacity is exceeded, additional items will not be loaded static final long CAPACITY = 200L; // timeline that next and previous items are loaded from final Timeline<T> timeline; // Observable for Adapter DataSetObservers (for ListViews) final DataSetObservable listAdapterObservable; final TimelineStateHolder timelineStateHolder; List<T> itemList;  public TimelineDelegate(Timeline<T> timeline) { this(timeline, null, null); } TimelineDelegate(Timeline<T> timeline, DataSetObservable observable, List<T> items) { if (timeline == null) { throw new IllegalArgumentException("Timeline must not be null"); } this timeline = timeline; this timelineStateHolder = new TimelineStateHolder(); if (observable == null) { listAdapterObservable = new DataSetObservable(); } else { listAdapterObservable = observable; } if (items == null) { itemList = new ArrayList<>(); } else { itemList = items; } }  public void refresh(Callback<TimelineResult<T>> developerCb) { // reset scrollStateHolder cursors to be null, loadNext will get latest items timelineStateHolder resetCursors(); // load latest timeline items and replace existing items loadNext(timelineStateHolder positionForNext(), new RefreshCallback(developerCb, timelineStateHolder)); }  public void next(Callback<TimelineResult<T>> developerCb) { loadNext(timelineStateHolder positionForNext(), new NextCallback(developerCb, timelineStateHolder)); }  public void previous() { loadPrevious(timelineStateHolder positionForPrevious(), new PreviousCallback(timelineStateHolder)); }  public int getCount() { return itemList size(); }  public T getItem(int position) { if (isLastPosition(position)) { previous(); } return itemList get(position); }  public long getItemId(int position) { final Identifiable item = itemList get(position); return item getId(); }  public void setItemById(T item) { for (int i = 0; i < itemList size(); i++) { if (item getId() == itemList get(i) getId()) { itemList set(i, item); } } notifyDataSetChanged(); }  boolean withinMaxCapacity() { return itemList size() < CAPACITY; }  boolean isLastPosition(int position) { return position == (itemList size() - 1); }  void loadNext(Long minPosition, Callback<TimelineResult<T>> cb) { if (withinMaxCapacity()) { if (timelineStateHolder startTimelineRequest()) { timeline next(minPosition, cb); } else { cb failure(new TwitterException("Request already in flight")); } } else { cb failure(new TwitterException("Max capacity reached")); } }  void loadPrevious(Long maxPosition, Callback<TimelineResult<T>> cb) { if (withinMaxCapacity()) { if (timelineStateHolder startTimelineRequest()) { timeline previous(maxPosition, cb); } else { cb failure(new TwitterException("Request already in flight")); } } else { cb failure(new TwitterException("Max capacity reached")); } }  class DefaultCallback extends Callback<TimelineResult<T>> { final Callback<TimelineResult<T>> developerCallback; final TimelineStateHolder timelineStateHolder; DefaultCallback(Callback<TimelineResult<T>> developerCb, TimelineStateHolder timelineStateHolder) { this developerCallback = developerCb; this timelineStateHolder = timelineStateHolder; } @Override public void success(Result<TimelineResult<T>> result) { timelineStateHolder finishTimelineRequest(); if (developerCallback != null) { developerCallback success(result); } } @Override public void failure(TwitterException exception) { timelineStateHolder finishTimelineRequest(); if (developerCallback != null) { developerCallback failure(exception); } } }  class NextCallback extends DefaultCallback { NextCallback(Callback<TimelineResult<T>> developerCb, TimelineStateHolder timelineStateHolder) { super(developerCb, timelineStateHolder); } @Override public void success(Result<TimelineResult<T>> result) { if (result data items size() > 0) { final ArrayList<T> receivedItems = new ArrayList<>(result data items); receivedItems addAll(itemList); itemList = receivedItems; notifyDataSetChanged(); timelineStateHolder setNextCursor(result data timelineCursor); } // do nothing when zero items are received  Subsequent 'next' call does not change  super success(result); } }  class RefreshCallback extends NextCallback { RefreshCallback(Callback<TimelineResult<T>> developerCb, TimelineStateHolder timelineStateHolder) { super(developerCb, timelineStateHolder); } @Override public void success(Result<TimelineResult<T>> result) { if (result data items size() > 0) { itemList clear(); } super success(result); } }  class PreviousCallback extends DefaultCallback { PreviousCallback(TimelineStateHolder timelineStateHolder) { super(null, timelineStateHolder); } @Override public void success(Result<TimelineResult<T>> result) { if (result data items size() > 0) { itemList addAll(result data items); notifyDataSetChanged(); timelineStateHolder setPreviousCursor(result data timelineCursor); } // do nothing when zero items are received  Subsequent 'next' call does not change  super success(result); } }   public void registerDataSetObserver(DataSetObserver observer) { listAdapterObservable registerObserver(observer); }  public void unregisterDataSetObserver(DataSetObserver observer) { listAdapterObservable unregisterObserver(observer); }  public void notifyDataSetChanged() { listAdapterObservable notifyChanged(); }  public void notifyDataSetInvalidated() { listAdapterObservable notifyInvalidated(); }}package com twitter sdk android tweetui;import android content Context;import android database DataSetObserver;import android widget BaseAdapter;import com twitter sdk android core Callback;import com twitter sdk android core models Identifiable;import com twitter sdk android tweetui internal TimelineDelegate;abstract class TimelineListAdapter<T extends Identifiable> extends BaseAdapter { protected final Context context; protected final TimelineDelegate<T> delegate;  public TimelineListAdapter(Context context, Timeline<T> timeline) { this(context, new TimelineDelegate<>(timeline)); } TimelineListAdapter(Context context, TimelineDelegate<T> delegate) { if (context == null) { throw new IllegalArgumentException("Context must not be null"); } this context = context; this delegate = delegate; delegate refresh(null); }  public void refresh(Callback<TimelineResult<T>> cb) { delegate refresh(cb); } @Override public int getCount() { return delegate getCount(); } @Override public T getItem(int position) { return delegate getItem(position); } @Override public long getItemId(int position) { return delegate getItemId(position); } @Override public void registerDataSetObserver(DataSetObserver observer) { delegate registerDataSetObserver(observer); } @Override public void unregisterDataSetObserver(DataSetObserver observer) { delegate unregisterDataSetObserver(observer); } @Override public void notifyDataSetChanged() { delegate notifyDataSetChanged(); } @Override public void notifyDataSetInvalidated() { delegate notifyDataSetInvalidated(); }}package com twitter sdk android tweetui;import java util List;public class TimelineResult<T> { public final TimelineCursor timelineCursor; public final List<T> items;  public TimelineResult(TimelineCursor timelineCursor, List<T> items) { this timelineCursor = timelineCursor; this items = items; }}package com twitter sdk android tweetui internal;import com twitter sdk android tweetui TimelineCursor;import java util concurrent atomic AtomicBoolean;public class TimelineStateHolder { // cursor for Timeline 'next' calls TimelineCursor nextCursor; // cursor for Timeline 'previous' calls TimelineCursor previousCursor; // true while a request is in flight, false otherwise public final AtomicBoolean requestInFlight = new AtomicBoolean(false); public TimelineStateHolder() { // intentionally blank }  public TimelineStateHolder(TimelineCursor nextCursor, TimelineCursor previousCursor) { this nextCursor = nextCursor; this previousCursor = previousCursor; }  public void resetCursors() { nextCursor = null; previousCursor = null; }  public Long positionForNext() { return nextCursor == null ? null : nextCursor maxPosition; }  public Long positionForPrevious() { return previousCursor == null ? null : previousCursor minPosition; }  public void setNextCursor(TimelineCursor timelineCursor) { nextCursor = timelineCursor; setCursorsIfNull(timelineCursor); }  public void setPreviousCursor(TimelineCursor timelineCursor) { previousCursor = timelineCursor; setCursorsIfNull(timelineCursor); }  public void setCursorsIfNull(TimelineCursor timelineCursor) { if (nextCursor == null) { nextCursor = timelineCursor; } if (previousCursor == null) { previousCursor = timelineCursor; } }  public boolean startTimelineRequest() { return requestInFlight compareAndSet(false, true); }  public void finishTimelineRequest() { requestInFlight set(false); }}package com twitter sdk android tweetui;import android content Context;import android content res TypedArray;import android util AttributeSet;import android widget ImageButton;public class ToggleImageButton extends ImageButton { private static final int[] STATE_TOGGLED_ON = {R attr state_toggled_on}; boolean isToggledOn; String contentDescriptionOn; String contentDescriptionOff; final boolean toggleOnClick; public ToggleImageButton(Context context) { this(context, null); } public ToggleImageButton(Context context, AttributeSet attrs) { this(context, attrs, 0); } public ToggleImageButton(Context context, AttributeSet attrs, int defStyle) { super(context, attrs, defStyle); TypedArray a = null; try { a = context getTheme() obtainStyledAttributes(attrs, R styleable ToggleImageButton, defStyle, 0); final String contentDescriptionOn = a getString(R styleable ToggleImageButton_contentDescriptionOn); final String contentDescriptionOff = a getString(R styleable ToggleImageButton_contentDescriptionOff); this contentDescriptionOn = contentDescriptionOn == null ? (String) getContentDescription() : contentDescriptionOn; this contentDescriptionOff = contentDescriptionOff == null ? (String) getContentDescription() : contentDescriptionOff; toggleOnClick = a getBoolean(R styleable ToggleImageButton_toggleOnClick, true); setToggledOn(false); } finally { if (a != null) { a recycle(); } } } @Override public int[] onCreateDrawableState(int extraSpace) { final int[] drawableState = super onCreateDrawableState(extraSpace + 2); if (isToggledOn) { mergeDrawableStates(drawableState, STATE_TOGGLED_ON); } return drawableState; } @Override public boolean performClick() { if (toggleOnClick) { toggle(); } return super performClick(); } public void setToggledOn(boolean isToggledOn) { this isToggledOn = isToggledOn; setContentDescription(isToggledOn ? contentDescriptionOn : contentDescriptionOff); refreshDrawableState(); } public void toggle() { setToggledOn(!isToggledOn); } public boolean isToggledOn() { return isToggledOn; }}package com twitter sdk android core models;import com google gson annotations SerializedName;import java util List;public class Tweet implements Identifiable { public static final long INVALID_ID = -1L;  @SerializedName("coordinates") public final Coordinates coordinates;  @SerializedName("created_at") public final String createdAt;  @SerializedName("current_user_retweet") public final Object currentUserRetweet;  @SerializedName("entities") public final TweetEntities entities;  @SerializedName("extended_entities") public final TweetEntities extendedEtities;  @SerializedName("favorite_count") public final Integer favoriteCount;  @SerializedName("favorited") public final boolean favorited;  @SerializedName("filter_level") public final String filterLevel;  @SerializedName("id") public final long id;  @SerializedName("id_str") public final String idStr;  @SerializedName("in_reply_to_screen_name") public final String inReplyToScreenName;  @SerializedName("in_reply_to_status_id") public final long inReplyToStatusId;  @SerializedName("in_reply_to_status_id_str") public final String inReplyToStatusIdStr;  @SerializedName("in_reply_to_user_id") public final long inReplyToUserId;  @SerializedName("in_reply_to_user_id_str") public final String inReplyToUserIdStr;  @SerializedName("lang") public final String lang;  @SerializedName("place") public final Place place;  @SerializedName("possibly_sensitive") public final boolean possiblySensitive;  @SerializedName("scopes") public final Object scopes;  @SerializedName("quoted_status_id") public final long quotedStatusId;  @SerializedName("quoted_status_id_str") public final String quotedStatusIdStr;  @SerializedName("quoted_status") public final Tweet quotedStatus;  @SerializedName("retweet_count") public final int retweetCount;  @SerializedName("retweeted") public final boolean retweeted;  @SerializedName("retweeted_status") public final Tweet retweetedStatus;  @SerializedName("source") public final String source;  @SerializedName(value = "text", alternate = {"full_text"}) public final String text;  @SerializedName("display_text_range") public final List<Integer> displayTextRange;  @SerializedName("truncated") public final boolean truncated;  @SerializedName("user") public final User user;  @SerializedName("withheld_copyright") public final boolean withheldCopyright;  @SerializedName("withheld_in_countries") public final List<String> withheldInCountries;  @SerializedName("withheld_scope") public final String withheldScope;  @SerializedName("card") public final Card card; public Tweet(Coordinates coordinates, String createdAt, Object currentUserRetweet, TweetEntities entities, TweetEntities extendedEtities, Integer favoriteCount, boolean favorited, String filterLevel, long id, String idStr, String inReplyToScreenName, long inReplyToStatusId, String inReplyToStatusIdStr, long inReplyToUserId, String inReplyToUserIdStr, String lang, Place place, boolean possiblySensitive, Object scopes, long quotedStatusId, String quotedStatusIdStr, Tweet quotedStatus, int retweetCount, boolean retweeted, Tweet retweetedStatus, String source, String text, List<Integer> displayTextRange, boolean truncated, User user, boolean withheldCopyright, List<String> withheldInCountries, String withheldScope, Card card) { this coordinates = coordinates; this createdAt = createdAt; this currentUserRetweet = currentUserRetweet; this entities = entities; this extendedEtities = extendedEtities; this favoriteCount = favoriteCount; this favorited = favorited; this filterLevel = filterLevel; this id = id; this idStr = idStr; this inReplyToScreenName = inReplyToScreenName; this inReplyToStatusId = inReplyToStatusId; this inReplyToStatusIdStr = inReplyToStatusIdStr; this inReplyToUserId = inReplyToUserId; this inReplyToUserIdStr = inReplyToUserIdStr; this lang = lang; this place = place; this possiblySensitive = possiblySensitive; this scopes = scopes; this quotedStatusId = quotedStatusId; this quotedStatusIdStr = quotedStatusIdStr; this quotedStatus = quotedStatus; this retweetCount = retweetCount; this retweeted = retweeted; this retweetedStatus = retweetedStatus; this source = source; this text = text; this displayTextRange = displayTextRange; this truncated = truncated; this user = user; this withheldCopyright = withheldCopyright; this withheldInCountries = withheldInCountries; this withheldScope = withheldScope; this card = card; } @Override public long getId() { return this id; } @Override public boolean equals(Object o) { if (o == null) return false; if (!(o instanceof Tweet)) return false; final Tweet other = (Tweet) o; return this id == other id; } @Override public int hashCode() { return (int) this id; }}package com twitter sdk android tweetui;import android content Context;import android util AttributeSet;import android widget ImageButton;import android widget LinearLayout;import com twitter sdk android core Callback;import com twitter sdk android core models Tweet;public class TweetActionBarView extends LinearLayout { final DependencyProvider dependencyProvider; ToggleImageButton likeButton; ImageButton shareButton; Callback<Tweet> actionCallback; public TweetActionBarView(Context context) { this(context, null, new DependencyProvider()); } public TweetActionBarView(Context context, AttributeSet attrs) { this(context, attrs, new DependencyProvider()); } TweetActionBarView(Context context, AttributeSet attrs, DependencyProvider dependencyProvider) { super(context, attrs); this dependencyProvider = dependencyProvider; } @Override protected void onFinishInflate() { super onFinishInflate(); findSubviews(); }  void setOnActionCallback(Callback<Tweet> actionCallback) { this actionCallback = actionCallback; } void findSubviews() { likeButton = (ToggleImageButton) findViewById(R id tw__tweet_like_button); shareButton = (ImageButton) findViewById(R id tw__tweet_share_button); }  void setTweet(Tweet tweet) { setLike(tweet); setShare(tweet); } void setLike(Tweet tweet) { final TweetUi tweetUi = dependencyProvider getTweetUi(); if (tweet != null) { likeButton setToggledOn(tweet favorited); final LikeTweetAction likeTweetAction = new LikeTweetAction(tweet, tweetUi, actionCallback); likeButton setOnClickListener(likeTweetAction); } } void setShare(Tweet tweet) { final TweetUi tweetUi = dependencyProvider getTweetUi(); if (tweet != null) { shareButton setOnClickListener(new ShareTweetAction(tweet, tweetUi)); } }  static class DependencyProvider {  TweetUi getTweetUi() { return TweetUi getInstance(); } }}package com twitter sdk android core models;import java util Collections;import java util List;public class TweetBuilder { private Coordinates coordinates; private String createdAt; private Object currentUserRetweet; private TweetEntities entities; private TweetEntities extendedEtities; private Integer favoriteCount; private boolean favorited; private String filterLevel; private long id = Tweet INVALID_ID; private String idStr; private String inReplyToScreenName; private long inReplyToStatusId; private String inReplyToStatusIdStr; private long inReplyToUserId; private String inReplyToUserIdStr; private String lang; private Place place; private boolean possiblySensitive; private Object scopes; private long quotedStatusId; private String quotedStatusIdStr; private Tweet quotedStatus; private int retweetCount; private boolean retweeted; private Tweet retweetedStatus; private String source; private String text; private List<Integer> displayTextRange = Collections EMPTY_LIST; private boolean truncated; private User user; private boolean withheldCopyright; private List<String> withheldInCountries = Collections EMPTY_LIST; private String withheldScope; private Card card; public TweetBuilder setCoordinates(Coordinates coordinates) { this coordinates = coordinates; return this; } public TweetBuilder setCreatedAt(String createdAt) { this createdAt = createdAt; return this; } public TweetBuilder setCurrentUserRetweet(Object currentUserRetweet) { this currentUserRetweet = currentUserRetweet; return this; } public TweetBuilder setEntities(TweetEntities entities) { this entities = entities; return this; } public TweetBuilder setExtendedEntities(TweetEntities extendedEtities) { this extendedEtities = extendedEtities; return this; } public TweetBuilder setFavoriteCount(Integer favoriteCount) { this favoriteCount = favoriteCount; return this; } public TweetBuilder setFavorited(boolean favorited) { this favorited = favorited; return this; } public TweetBuilder setFilterLevel(String filterLevel) { this filterLevel = filterLevel; return this; } public TweetBuilder setId(long id) { this id = id; return this; } public TweetBuilder setIdStr(String idStr) { this idStr = idStr; return this; } public TweetBuilder setInReplyToScreenName(String inReplyToScreenName) { this inReplyToScreenName = inReplyToScreenName; return this; } public TweetBuilder setInReplyToStatusId(long inReplyToStatusId) { this inReplyToStatusId = inReplyToStatusId; return this; } public TweetBuilder setInReplyToStatusIdStr(String inReplyToStatusIdStr) { this inReplyToStatusIdStr = inReplyToStatusIdStr; return this; } public TweetBuilder setInReplyToUserId(long inReplyToUserId) { this inReplyToUserId = inReplyToUserId; return this; } public TweetBuilder setInReplyToUserIdStr(String inReplyToUserIdStr) { this inReplyToUserIdStr = inReplyToUserIdStr; return this; } public TweetBuilder setLang(String lang) { this lang = lang; return this; } public TweetBuilder setPlace(Place place) { this place = place; return this; } public TweetBuilder setPossiblySensitive(boolean possiblySensitive) { this possiblySensitive = possiblySensitive; return this; } public TweetBuilder setScopes(Object scopes) { this scopes = scopes; return this; } public TweetBuilder setQuotedStatusId(long quotedStatusId) { this quotedStatusId = quotedStatusId; return this; } public TweetBuilder setQuotedStatusIdStr(String quotedStatusIdStr) { this quotedStatusIdStr = quotedStatusIdStr; return this; } public TweetBuilder setQuotedStatus(Tweet quotedStatus) { this quotedStatus = quotedStatus; return this; } public TweetBuilder setRetweetCount(int retweetCount) { this retweetCount = retweetCount; return this; } public TweetBuilder setRetweeted(boolean retweeted) { this retweeted = retweeted; return this; } public TweetBuilder setRetweetedStatus(Tweet retweetedStatus) { this retweetedStatus = retweetedStatus; return this; } public TweetBuilder setSource(String source) { this source = source; return this; } public TweetBuilder setText(String text) { this text = text; return this; } public TweetBuilder setDisplayTextRange(List<Integer> displayTextRange) { this displayTextRange = displayTextRange; return this; } public TweetBuilder setTruncated(boolean truncated) { this truncated = truncated; return this; } public TweetBuilder setUser(User user) { this user = user; return this; } public TweetBuilder setWithheldCopyright(boolean withheldCopyright) { this withheldCopyright = withheldCopyright; return this; } public TweetBuilder setWithheldInCountries(List<String> withheldInCountries) { this withheldInCountries = withheldInCountries; return this; } public TweetBuilder setWithheldScope(String withheldScope) { this withheldScope = withheldScope; return this; } public TweetBuilder setCard(Card card) { this card = card; return this; } public TweetBuilder copy(Tweet tweet) { this coordinates = tweet coordinates; this createdAt = tweet createdAt; this currentUserRetweet = tweet currentUserRetweet; this entities = tweet entities; this extendedEtities = tweet extendedEtities; this favoriteCount = tweet favoriteCount; this favorited = tweet favorited; this filterLevel = tweet filterLevel; this id = tweet id; this idStr = tweet idStr; this inReplyToScreenName = tweet inReplyToScreenName; this inReplyToStatusId = tweet inReplyToStatusId; this inReplyToStatusIdStr = tweet inReplyToStatusIdStr; this inReplyToUserId = tweet inReplyToUserId; this inReplyToUserIdStr = tweet inReplyToStatusIdStr; this lang = tweet lang; this place = tweet place; this possiblySensitive = tweet possiblySensitive; this scopes = tweet scopes; this quotedStatusId = tweet quotedStatusId; this quotedStatusIdStr = tweet quotedStatusIdStr; this quotedStatus = tweet quotedStatus; this retweetCount = tweet retweetCount; this retweeted = tweet retweeted; this retweetedStatus = tweet retweetedStatus; this source = tweet source; this text = tweet text; this displayTextRange = tweet displayTextRange; this truncated = tweet truncated; this user = tweet user; this withheldCopyright = tweet withheldCopyright; this withheldInCountries = tweet withheldInCountries; this withheldScope = tweet withheldScope; this card = tweet card; return this; } public Tweet build() { return new Tweet(coordinates, createdAt, currentUserRetweet, entities, extendedEtities, favoriteCount, favorited, filterLevel, id, idStr, inReplyToScreenName, inReplyToStatusId, inReplyToStatusIdStr, inReplyToUserId, inReplyToUserIdStr, lang, place, possiblySensitive, scopes, quotedStatusId, quotedStatusIdStr, quotedStatus, retweetCount, retweeted, retweetedStatus, source, text, displayTextRange, truncated, user, withheldCopyright, withheldInCountries, withheldScope, card); }}package com twitter sdk android tweetcomposer;import android content Context;import android content Intent;import android content pm PackageManager;import android content pm ResolveInfo;import android net Uri;import android text TextUtils;import com twitter sdk android core GuestSessionProvider;import com twitter sdk android core Session;import com twitter sdk android core SessionManager;import com twitter sdk android core TwitterCore;import com twitter sdk android core TwitterSession;import com twitter sdk android core internal scribe DefaultScribeClient;import io fabric sdk android Fabric;import io fabric sdk android Kit;import io fabric sdk android services concurrency DependsOn;import io fabric sdk android services network UrlUtils;import java net URL;import java util List;import java util concurrent ConcurrentHashMap;@DependsOn(TwitterCore class)public class TweetComposer extends Kit<Void> { private static final String MIME_TYPE_PLAIN_TEXT = "text/plain"; private static final String MIME_TYPE_JPEG = "image/jpeg"; private static final String TWITTER_PACKAGE_NAME = "com twitter android"; private static final String WEB_INTENT = "https://twitter com/intent/tweet?text=%s&url=%s"; private static final String KIT_SCRIBE_NAME = "TweetComposer"; private final ConcurrentHashMap<Session, ComposerApiClient> apiClients; String advertisingId; SessionManager<TwitterSession> sessionManager; GuestSessionProvider guestSessionProvider; private ScribeClient scribeClient; public TweetComposer() { this apiClients = new ConcurrentHashMap<>(); scribeClient = new ScribeClientImpl(null); } @Override public String getVersion() { return BuildConfig VERSION_NAME + " " + BuildConfig BUILD_NUMBER; } protected boolean onPreExecute() { sessionManager = TwitterCore getInstance() getSessionManager(); guestSessionProvider = TwitterCore getInstance() getGuestSessionProvider(); return super onPreExecute(); } @Override protected Void doInBackground() { advertisingId = getIdManager() getAdvertisingId(); scribeClient = new ScribeClientImpl(new DefaultScribeClient(this, KIT_SCRIBE_NAME, sessionManager, guestSessionProvider, getIdManager())); return null; } @Override public String getIdentifier() { return BuildConfig GROUP + ":" + BuildConfig ARTIFACT_ID; } public ComposerApiClient getApiClient(TwitterSession session) { checkInitialized(); if (!apiClients containsKey(session)) { apiClients putIfAbsent(session, new ComposerApiClient(session)); } return apiClients get(session); } public static TweetComposer getInstance() { checkInitialized(); return Fabric getKit(TweetComposer class); } protected ScribeClient getScribeClient() { return scribeClient; } private static void checkInitialized() { if (Fabric getKit(TweetComposer class) == null) { throw new IllegalStateException("Must start Twitter Kit with Fabric with() first"); } } String getAdvertisingId() {  return advertisingId; }  public static class Builder { private final Context context; private String text; private URL url; private Uri imageUri;  public Builder(Context context) { if (context == null) { throw new IllegalArgumentException("Context must not be null "); } this context = context; }  public Builder text(String text) { if (text == null) { throw new IllegalArgumentException("text must not be null "); } if (this text != null) { throw new IllegalStateException("text already set "); } this text = text; return this; }  public Builder url(URL url) { if (url == null) { throw new IllegalArgumentException("url must not be null "); } if (this url != null) { throw new IllegalStateException("url already set "); } this url = url; return this; }  public Builder image(Uri imageUri) { if (imageUri == null) { throw new IllegalArgumentException("imageUri must not be null "); } if (this imageUri != null) { throw new IllegalStateException("imageUri already set "); } this imageUri = imageUri; return this; }  public Intent createIntent() { Intent intent = createTwitterIntent(); if (intent == null) { intent = createWebIntent(); } return intent; } Intent createTwitterIntent() { final Intent intent = new Intent(Intent ACTION_SEND); final StringBuilder builder = new StringBuilder(); if (!TextUtils isEmpty(text)) { builder append(text); } if (url != null) { if (builder length() > 0) { builder append(' '); } builder append(url toString()); } intent putExtra(Intent EXTRA_TEXT, builder toString()); intent setType(MIME_TYPE_PLAIN_TEXT); if (imageUri != null) { intent putExtra(Intent EXTRA_STREAM, imageUri); intent setType(MIME_TYPE_JPEG); } final PackageManager packManager = context getPackageManager(); final List<ResolveInfo> resolvedInfoList = packManager queryIntentActivities(intent, PackageManager MATCH_DEFAULT_ONLY); for (ResolveInfo resolveInfo: resolvedInfoList){ if (resolveInfo activityInfo packageName startsWith(TWITTER_PACKAGE_NAME)){ intent setClassName(resolveInfo activityInfo packageName, resolveInfo activityInfo name); return intent; } } return null; } Intent createWebIntent() { final String url = (this url == null ? "" : this url toString()); final String tweetUrl = String format(WEB_INTENT, UrlUtils urlEncode(text), UrlUtils urlEncode(url)); return new Intent(Intent ACTION_VIEW, Uri parse(tweetUrl)); }  public void show() { final Intent intent = createIntent(); context startActivity(intent); } }}package com twitter sdk android tweetui;import android content res Resources;import android text format DateUtils;import java text ParseException;import java text SimpleDateFormat;import java util Calendar;import java util Date;import java util Locale;// Cribbed from twitter-android-internal, renamed and formatted to our standards// methods here should only be accessed on the main threadfinal class TweetDateUtils { // Sat Mar 14 02:34:20 +0000 2009 static final SimpleDateFormat DATE_TIME_RFC822 = new SimpleDateFormat("EEE MMM dd HH:mm:ss Z yyyy", Locale ENGLISH); static final SimpleDateFormat RELATIVE_DATE_FORMAT = new SimpleDateFormat("MM/dd/yy", Locale ENGLISH); static final long INVALID_DATE = -1; private TweetDateUtils() {} static long apiTimeToLong(String apiTime) { if (apiTime == null) return INVALID_DATE; try { return DATE_TIME_RFC822 parse(apiTime) getTime(); } catch (ParseException e) { return INVALID_DATE; } } static boolean isValidTimestamp(String timestamp) { return TweetDateUtils apiTimeToLong(timestamp) != TweetDateUtils INVALID_DATE; }  public static String dotPrefix(String timestamp) { if (timestamp charAt(0) == ' ') { return timestamp; } return " " + timestamp; }  static String getRelativeTimeString(Resources res, long currentTimeMillis, long timestamp) { final long diff = currentTimeMillis - timestamp; if (diff >= 0) { if (diff < DateUtils MINUTE_IN_MILLIS) { // Less than a minute ago final int secs = (int) (diff / 1000); return res getQuantityString(R plurals tw__time_secs, secs, secs); } else if (diff < DateUtils HOUR_IN_MILLIS) { // Less than an hour ago final int mins = (int) (diff / DateUtils MINUTE_IN_MILLIS); return res getQuantityString(R plurals tw__time_mins, mins, mins); } else if (diff < DateUtils DAY_IN_MILLIS) { // Less than a day ago final int hours = (int) (diff / DateUtils HOUR_IN_MILLIS); return res getQuantityString(R plurals tw__time_hours, hours, hours); } else { final Calendar now = Calendar getInstance(); now setTimeInMillis(currentTimeMillis); final Calendar c = Calendar getInstance(); c setTimeInMillis(timestamp); final Date d = new Date(timestamp); if (now get(Calendar YEAR) == c get(Calendar YEAR)) { // Same year RELATIVE_DATE_FORMAT applyPattern( res getString(R string tw__relative_date_format_short)); } else { // Outside of our year RELATIVE_DATE_FORMAT applyPattern( res getString(R string tw__relative_date_format_long)); } return RELATIVE_DATE_FORMAT format(d); } } RELATIVE_DATE_FORMAT applyPattern(res getString( R string tw__relative_date_format_long)); return RELATIVE_DATE_FORMAT format(new Date(timestamp)); }}package com twitter sdk android core models;import com google gson annotations SerializedName;import java util Collections;import java util List;public class TweetEntities {  @SerializedName("urls") public final List<UrlEntity> urls;  @SerializedName("user_mentions") public final List<MentionEntity> userMentions;  @SerializedName("media") public final List<MediaEntity> media;  @SerializedName("hashtags") public final List<HashtagEntity> hashtags; public TweetEntities(List<UrlEntity> urls, List<MentionEntity> userMentions, List<MediaEntity> media, List<HashtagEntity> hashtags) { this urls = getSafeList(urls); this userMentions = getSafeList(userMentions); this media = getSafeList(media); this hashtags = getSafeList(hashtags); } private <T> List<T> getSafeList(List<T> entities) { // Entities may be null if Gson does not find object to parse  When that happens, make sure // to return an empty list  if (entities == null) { return Collections EMPTY_LIST; } else { return Collections unmodifiableList(entities); } }}package com twitter sdk android tweetui;import com twitter sdk android core models Tweet;public interface TweetLinkClickListener {  void onLinkClick(Tweet tweet, String url);}package com twitter sdk android tweetui;import com twitter sdk android core models MediaEntity;import com twitter sdk android core models Tweet;public interface TweetMediaClickListener {  void onMediaEntityClick(Tweet tweet, MediaEntity entity);}package com twitter sdk android tweetui internal;import android os Build;import com twitter sdk android core models MediaEntity;import com twitter sdk android core models Tweet;import com twitter sdk android core models VideoInfo;import java util ArrayList;import java util List;final public class TweetMediaUtils { public static final String PHOTO_TYPE = "photo"; public static final String VIDEO_TYPE = "video"; public static final String GIF_TYPE = "animated_gif"; private static final String CONTENT_TYPE_MP4 = "video/mp4"; private static final String CONTENT_TYPE_HLS = "application/x-mpegURL"; private TweetMediaUtils() { }  static public MediaEntity getPhotoEntity(Tweet tweet) { final List<MediaEntity> mediaEntityList = getAllMediaEntities(tweet); for (int i = mediaEntityList size() - 1; i >= 0; i--) { final MediaEntity entity = mediaEntityList get(i); if (entity type != null && isPhotoType(entity)) { return entity; } } return null; }  static public boolean hasPhoto(Tweet tweet) { return getPhotoEntity(tweet) != null; }  static public MediaEntity getVideoEntity(Tweet tweet) { for (MediaEntity mediaEntity : getAllMediaEntities(tweet)) { if (mediaEntity type != null && isVideoType(mediaEntity)) { return mediaEntity; } } return null; }  static public boolean hasSupportedVideo(Tweet tweet) { final MediaEntity entity = getVideoEntity(tweet); return entity != null && getSupportedVariant(entity) != null; } static boolean isPhotoType(MediaEntity mediaEntity) { return PHOTO_TYPE equals(mediaEntity type); } static boolean isVideoType(MediaEntity mediaEntity) { return VIDEO_TYPE equals(mediaEntity type) || GIF_TYPE equals(mediaEntity type); } static public VideoInfo Variant getSupportedVariant(MediaEntity mediaEntity) { for (VideoInfo Variant variant : mediaEntity videoInfo variants) { if (isVariantSupported(variant)) { return variant; } } return null; } static public boolean isLooping(MediaEntity mediaEntity) { return GIF_TYPE equals(mediaEntity type); } static boolean isVariantSupported(VideoInfo Variant variant) { if (Build VERSION SDK_INT >= Build VERSION_CODES LOLLIPOP && CONTENT_TYPE_HLS equals(variant contentType)) { return true; } else if (CONTENT_TYPE_MP4 equals(variant contentType)) { return true; } return false; } static List<MediaEntity> getAllMediaEntities(Tweet tweet) { final List<MediaEntity> entities = new ArrayList<>(); if (tweet entities != null && tweet entities media != null) { entities addAll(tweet entities media); } if (tweet extendedEtities != null && tweet extendedEtities media != null) { entities addAll(tweet extendedEtities media); } return entities; }}package com twitter sdk android tweetui internal;import android content Context;import android graphics Canvas;import android graphics drawable Drawable;import android util AttributeSet;import android widget ImageView;import com twitter sdk android core internal util AspectRatioImageView;public class TweetMediaView extends AspectRatioImageView { Overlay overlay = new Overlay(null); public TweetMediaView(Context context) { super(context); } public TweetMediaView(Context context, AttributeSet attrs) { super(context, attrs); } @Override protected void onDraw(Canvas canvas) { super onDraw(canvas); overlay draw(canvas); } @Override protected void drawableStateChanged() { super drawableStateChanged(); overlay setDrawableState(getDrawableState()); } @Override protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) { super onMeasure(widthMeasureSpec, heightMeasureSpec); overlay setDrawableBounds(getMeasuredWidth(), getMeasuredHeight()); } @Override protected void onSizeChanged(int width, int height, int oldWidth, int oldHeight) { super onSizeChanged(width, height, oldWidth, oldHeight); overlay setDrawableBounds(width, height); } @Override public void invalidateDrawable(Drawable drawable) { if (drawable == overlay drawable) { invalidate(); } else { super invalidateDrawable(drawable); } }  public void setOverlayDrawable(Drawable drawable) { overlay cleanupDrawable(this); if (drawable != null) { drawable setCallback(this); } overlay = new Overlay(drawable); overlay setDrawableState(getDrawableState()); requestLayout(); }  static protected class Overlay { final Drawable drawable; Overlay(Drawable drawable) { this drawable = drawable; } protected void cleanupDrawable(ImageView imageView) { if (drawable != null) { drawable setCallback(null); imageView unscheduleDrawable(drawable); } } protected void setDrawableBounds(int width, int height) { if (drawable != null) { drawable setBounds(0, 0, width, height); } } protected void setDrawableState(int[] state) { if (drawable != null && drawable isStateful()) { drawable setState(state); } } protected void draw(Canvas canvas) { if (drawable != null) { drawable draw(canvas); } } }}package com twitter sdk android tweetui;import android os Handler;import android support v4 util LruCache;import android text TextUtils;import com twitter sdk android core Callback;import com twitter sdk android core Result;import com twitter sdk android core SessionManager;import com twitter sdk android core TwitterAuthException;import com twitter sdk android core TwitterCore;import com twitter sdk android core TwitterException;import com twitter sdk android core TwitterSession;import com twitter sdk android core models Tweet;import java util List;import io fabric sdk android Fabric;class TweetRepository { // Cache size units are in number of entries, an average Tweet is roughly 900 bytes in memory private static final int DEFAULT_CACHE_SIZE = 20; private final TwitterCore twitterCore; private final Handler mainHandler; private final SessionManager<TwitterSession> userSessionManagers; // leave this package accessible for testing final LruCache<Long, Tweet> tweetCache; final LruCache<Long, FormattedTweetText> formatCache; TweetRepository(Handler mainHandler, SessionManager<TwitterSession> userSessionManagers) { this(mainHandler, userSessionManagers, TwitterCore getInstance()); } // Testing only TweetRepository(Handler mainHandler, SessionManager<TwitterSession> userSessionManagers, TwitterCore twitterCore) { this twitterCore = twitterCore; this mainHandler = mainHandler; this userSessionManagers = userSessionManagers; tweetCache = new LruCache<>(DEFAULT_CACHE_SIZE); formatCache = new LruCache<>(DEFAULT_CACHE_SIZE); }  FormattedTweetText formatTweetText(final Tweet tweet) { if (tweet == null) return null; final FormattedTweetText cached = formatCache get(tweet id); if (cached != null) return cached; final FormattedTweetText formattedTweetText = TweetTextUtils formatTweetText(tweet); if (formattedTweetText != null && !TextUtils isEmpty(formattedTweetText text)) { formatCache put(tweet id, formattedTweetText); } return formattedTweetText; } void updateCache(final Tweet tweet) { tweetCache put(tweet id, tweet); }  private void deliverTweet(final Tweet tweet, final Callback<Tweet> cb) { if (cb == null) return; mainHandler post(new Runnable() { @Override public void run() { cb success(new Result<>(tweet, null)); } }); } void favorite(final long tweetId, final Callback<Tweet> cb) { getUserSession(new LoggingCallback<TwitterSession>(cb, Fabric getLogger()) { @Override public void success(Result<TwitterSession> result) { twitterCore getApiClient(result data) getFavoriteService() create(tweetId, false)  enqueue(cb); } }); } void unfavorite(final long tweetId, final Callback<Tweet> cb) { getUserSession(new LoggingCallback<TwitterSession>(cb, Fabric getLogger()) { @Override public void success(Result<TwitterSession> result) { twitterCore getApiClient(result data) getFavoriteService() destroy(tweetId, false)  enqueue(cb); } }); } void retweet(final long tweetId, final Callback<Tweet> cb) { getUserSession(new LoggingCallback<TwitterSession>(cb, Fabric getLogger()) { @Override public void success(Result<TwitterSession> result) { twitterCore getApiClient(result data) getStatusesService() retweet(tweetId, false)  enqueue(cb); } }); } void unretweet(final long tweetId, final Callback<Tweet> cb) { getUserSession(new LoggingCallback<TwitterSession>(cb, Fabric getLogger()) { @Override public void success(Result<TwitterSession> result) { twitterCore getApiClient(result data) getStatusesService() unretweet(tweetId, false)  enqueue(cb); } }); } void getUserSession(final Callback<TwitterSession> cb) { final TwitterSession session = userSessionManagers getActiveSession(); if (session == null) { cb failure(new TwitterAuthException("User authorization required")); } else { cb success(new Result<>(session, null)); } }  void loadTweet(final long tweetId, final Callback<Tweet> cb) { final Tweet cachedTweet = tweetCache get(tweetId); if (cachedTweet != null) { deliverTweet(cachedTweet, cb); return; } twitterCore getApiClient() getStatusesService()  show(tweetId, null, null, null) enqueue(new SingleTweetCallback(cb)); }  void loadTweets(final List<Long> tweetIds, final Callback<List<Tweet>> cb) { final String commaSepIds = TextUtils join(",", tweetIds); twitterCore getApiClient() getStatusesService() lookup(commaSepIds, null, null, null)  enqueue(new MultiTweetsCallback(tweetIds, cb)); }  class SingleTweetCallback extends Callback<Tweet> { final Callback<Tweet> cb; SingleTweetCallback(Callback<Tweet> cb) { this cb = cb; } @Override public void success(Result<Tweet> result) { final Tweet tweet = result data; updateCache(tweet); if (cb != null) { cb success(new Result<>(tweet, result response)); } } @Override public void failure(TwitterException exception) { cb failure(exception); } }  class MultiTweetsCallback extends Callback<List<Tweet>> { final Callback<List<Tweet>> cb; final List<Long> tweetIds; MultiTweetsCallback(List<Long> tweetIds, Callback<List<Tweet>> cb) { this cb = cb; this tweetIds = tweetIds; } @Override public void success(Result<List<Tweet>> result) { if (cb != null) { final List<Tweet> sorted = Utils orderTweets(tweetIds, result data); cb success(new Result<>(sorted, result response)); } } @Override public void failure(TwitterException exception) { cb failure(exception); } }}package com twitter sdk android tweetui;import com twitter sdk android core models Tweet;public interface TweetScribeClient { void impression(Tweet tweet, String viewName, boolean actionEnabled); void share(Tweet tweet); void favorite(Tweet tweet); void unfavorite(Tweet tweet); void click(Tweet tweet, String viewName);}package com twitter sdk android tweetui;import com twitter sdk android core internal scribe EventNamespace;import com twitter sdk android core internal scribe ScribeItem;import com twitter sdk android core internal scribe SyndicatedSdkImpressionEvent;import com twitter sdk android core internal scribe SyndicationClientEvent;import com twitter sdk android core models Tweet;import java util ArrayList;import java util List;class TweetScribeClientImpl implements TweetScribeClient { // tfw client event specific names static final String TFW_CLIENT_EVENT_PAGE = "android"; static final String TFW_CLIENT_EVENT_SECTION = "tweet"; static final String TFW_CLIENT_EVENT_ELEMENT = ""; // intentionally blank // syndicated sdk impression specific names static final String SYNDICATED_SDK_IMPRESSION_PAGE = "tweet"; static final String SYNDICATED_SDK_IMPRESSION_COMPONENT = ""; static final String SYNDICATED_SDK_IMPRESSION_ELEMENT = ""; // intentionally blank // general names static final String SCRIBE_CLICK_ACTION = "click"; static final String SCRIBE_IMPRESSION_ACTION = "impression"; static final String SCRIBE_FAVORITE_ACTION = "favorite"; static final String SCRIBE_UNFAVORITE_ACTION = "unfavorite"; static final String SCRIBE_SHARE_ACTION = "share"; static final String SCRIBE_ACTIONS_ELEMENT = "actions"; final TweetUi tweetUi; TweetScribeClientImpl(TweetUi tweetUi) { this tweetUi = tweetUi; } @Override public void impression(Tweet tweet, String viewName, boolean actionEnabled) { final List<ScribeItem> items = new ArrayList<>(); items add(ScribeItem fromTweet(tweet)); tweetUi scribe(getTfwImpressionNamespace(viewName, actionEnabled), items); tweetUi scribe(getSyndicatedImpressionNamespace(viewName), items); } @Override public void share(Tweet tweet) { final List<ScribeItem> items = new ArrayList<>(); items add(ScribeItem fromTweet(tweet)); tweetUi scribe(getTfwShareNamespace(), items); } @Override public void favorite(Tweet tweet) { final List<ScribeItem> items = new ArrayList<>(); items add(ScribeItem fromTweet(tweet)); tweetUi scribe(getTfwFavoriteNamespace(), items); } @Override public void unfavorite(Tweet tweet) { final List<ScribeItem> items = new ArrayList<>(); items add(ScribeItem fromTweet(tweet)); tweetUi scribe(getTfwUnfavoriteNamespace(), items); } @Override public void click(Tweet tweet, String viewName) { final List<ScribeItem> items = new ArrayList<>(); items add(ScribeItem fromTweet(tweet)); tweetUi scribe(getTfwClickNamespace(viewName), items); } static EventNamespace getTfwImpressionNamespace(String viewName, boolean actionEnabled) { return new EventNamespace Builder()  setClient(SyndicationClientEvent CLIENT_NAME)  setPage(TFW_CLIENT_EVENT_PAGE)  setSection(TFW_CLIENT_EVENT_SECTION)  setComponent(viewName)  setElement(actionEnabled ? SCRIBE_ACTIONS_ELEMENT : TFW_CLIENT_EVENT_ELEMENT)  setAction(SCRIBE_IMPRESSION_ACTION)  builder(); } static EventNamespace getTfwUnfavoriteNamespace() { return new EventNamespace Builder()  setClient(SyndicationClientEvent CLIENT_NAME)  setPage(TFW_CLIENT_EVENT_PAGE)  setSection(TFW_CLIENT_EVENT_SECTION)  setElement(SCRIBE_ACTIONS_ELEMENT)  setAction(SCRIBE_UNFAVORITE_ACTION)  builder(); } static EventNamespace getTfwFavoriteNamespace() { return new EventNamespace Builder()  setClient(SyndicationClientEvent CLIENT_NAME)  setPage(TFW_CLIENT_EVENT_PAGE)  setSection(TFW_CLIENT_EVENT_SECTION)  setElement(SCRIBE_ACTIONS_ELEMENT)  setAction(SCRIBE_FAVORITE_ACTION)  builder(); } static EventNamespace getTfwShareNamespace() { return new EventNamespace Builder()  setClient(SyndicationClientEvent CLIENT_NAME)  setPage(TFW_CLIENT_EVENT_PAGE)  setSection(TFW_CLIENT_EVENT_SECTION)  setElement(SCRIBE_ACTIONS_ELEMENT)  setAction(SCRIBE_SHARE_ACTION)  builder(); } static EventNamespace getTfwClickNamespace(String viewName) { return new EventNamespace Builder()  setClient(SyndicationClientEvent CLIENT_NAME)  setPage(TFW_CLIENT_EVENT_PAGE)  setSection(TFW_CLIENT_EVENT_SECTION)  setComponent(viewName)  setElement(TFW_CLIENT_EVENT_ELEMENT)  setAction(SCRIBE_CLICK_ACTION)  builder(); } static EventNamespace getSyndicatedImpressionNamespace(String viewName) { return new EventNamespace Builder()  setClient(SyndicatedSdkImpressionEvent CLIENT_NAME)  setPage(SYNDICATED_SDK_IMPRESSION_PAGE)  setSection(viewName)  setComponent(SYNDICATED_SDK_IMPRESSION_COMPONENT)  setElement(SYNDICATED_SDK_IMPRESSION_ELEMENT)  setAction(SCRIBE_IMPRESSION_ACTION)  builder(); }}package com twitter sdk android tweetui;import android text SpannableStringBuilder;import android text Spanned;import android text TextUtils;import android text style CharacterStyle;import android view View;import com twitter sdk android tweetui internal ClickableLinkSpan;import java util ArrayList;import java util Collections;import java util Comparator;import java util List;final class TweetTextLinkifier { private static final String PHOTO_TYPE = "photo"; private TweetTextLinkifier() {}  static CharSequence linkifyUrls(FormattedTweetText tweetText, final LinkClickListener listener, boolean stripLastPhotoEntity, final int linkColor, final int linkHighlightColor) { if (tweetText == null) return null; if (TextUtils isEmpty(tweetText text)) { return tweetText text; } final SpannableStringBuilder spannable = new SpannableStringBuilder(tweetText text); final List<FormattedUrlEntity> urls = tweetText urlEntities; final List<FormattedMediaEntity> media = tweetText mediaEntities; final FormattedMediaEntity lastPhoto; if (stripLastPhotoEntity) { lastPhoto = getLastPhotoEntity(tweetText); } else { lastPhoto = null; }  final List<FormattedUrlEntity> combined = mergeAndSortEntities(urls, media); addUrlEntities(spannable, combined, lastPhoto, listener, linkColor, linkHighlightColor); return spannable; }  static List<FormattedUrlEntity> mergeAndSortEntities(final List<FormattedUrlEntity> urls, final List<FormattedMediaEntity> media) { if (media == null) return urls; final ArrayList<FormattedUrlEntity> combined = new ArrayList<>(urls); combined addAll(media); Collections sort(combined, new Comparator<FormattedUrlEntity>() { @Override public int compare(FormattedUrlEntity lhs, FormattedUrlEntity rhs) { if (lhs == null && rhs != null) return -1; if (lhs != null && rhs == null) return 1; if (lhs == null && rhs == null) return 0; if (lhs start < rhs start) return -1; if (lhs start > rhs start) return 1; return 0; } }); return combined; }  private static void addUrlEntities(final SpannableStringBuilder spannable, final List<FormattedUrlEntity> entities, final FormattedMediaEntity lastPhoto, final LinkClickListener listener, final int linkColor, final int linkHighlightColor) { if (entities == null || entities isEmpty()) return; int offset = 0; int len; int start; int end; for (final FormattedUrlEntity url : entities) { start = url start - offset; end = url end - offset; if (start >= 0 && end <= spannable length()) { // replace the last photo url with empty string, we can use the start indices as // as simple check, since none of this will work anyways if we have overlapping // entities if (lastPhoto != null && lastPhoto start == url start) { spannable replace(start, end, ""); len = end - start; end -= len; offset += len; } else if (!TextUtils isEmpty(url displayUrl)) { spannable replace(start, end, url displayUrl); len = end - (start + url displayUrl length()); end -= len; offset += len; final CharacterStyle span = new ClickableLinkSpan(linkHighlightColor, linkColor, false) { @Override public void onClick(View widget) { if (listener == null) return; listener onUrlClicked(url url); } }; spannable setSpan(span, start, end, Spanned SPAN_EXCLUSIVE_EXCLUSIVE); } } } } private static FormattedMediaEntity getLastPhotoEntity( final FormattedTweetText formattedTweetText) { if (formattedTweetText == null) return null; final List<FormattedMediaEntity> mediaEntityList = formattedTweetText mediaEntities; if (mediaEntityList isEmpty()) return null; FormattedMediaEntity entity; for (int i = mediaEntityList size() - 1; i >= 0; i--) { entity = mediaEntityList get(i); if (PHOTO_TYPE equals(entity type)) { return entity; } } return null; }}package com twitter sdk android tweetui;import android text TextUtils;import com twitter sdk android core models MediaEntity;import com twitter sdk android core models Tweet;import com twitter sdk android core models UrlEntity;import com twitter sdk android tweetui internal util HtmlEntities;import java util ArrayList;import java util List;final class TweetTextUtils { private TweetTextUtils() {}  static FormattedTweetText formatTweetText(Tweet tweet) { if (tweet == null) return null; final FormattedTweetText adjustedTweet = new FormattedTweetText(); convertEntities(adjustedTweet, tweet); format(adjustedTweet, tweet); return adjustedTweet; }  static void convertEntities(FormattedTweetText formattedTweetText, Tweet tweet) { if (tweet entities == null) return; final List<UrlEntity> coreUrls = tweet entities urls; if (coreUrls != null) { for (UrlEntity entity : coreUrls) { final FormattedUrlEntity formattedUrlEntity = new FormattedUrlEntity(entity); formattedTweetText urlEntities add(formattedUrlEntity); } } final List<MediaEntity> coreMedia = tweet entities media; if (coreMedia != null) { for (MediaEntity entity : coreMedia) { final FormattedMediaEntity formattedMediaEntity = new FormattedMediaEntity(entity); formattedTweetText mediaEntities add(formattedMediaEntity); } } }  static void format(FormattedTweetText formattedTweetText, Tweet tweet) { if (TextUtils isEmpty(tweet text)) return; final HtmlEntities Unescaped u = HtmlEntities HTML40 unescape(tweet text); final StringBuilder result = new StringBuilder(u unescaped); adjustIndicesForEscapedChars(formattedTweetText urlEntities, u indices); adjustIndicesForEscapedChars(formattedTweetText mediaEntities, u indices); adjustIndicesForSupplementaryChars(result, formattedTweetText); formattedTweetText text = result toString(); }  static void adjustIndicesForEscapedChars( List<? extends FormattedUrlEntity> entities, List<int[]> indices) { if (entities == null || indices == null || indices isEmpty()) { return; } final int size = indices size(); int m = 0; // marker int diff = 0; // accumulated difference int inDiff; // end difference for escapes in range int len; // escaped length int start; // escaped start int end; // escaped end int i; // reusable index int[] index; // For each of the entities, update the start and end indices // Note: tweet entities are sorted  for (FormattedUrlEntity entity : entities) { inDiff = 0; // Go through the escaped entities' indices for (i = m; i < size; i++) { index = indices get(i); start = index[0]; end = index[1]; // len is actually (end - start + 1) - 1 len = end - start; if (end < entity start) { // bump position of the next marker diff += len; m++; } else if (end < entity end) { inDiff += len; } } // Once we've accumulated diffs, calc the offset entity start = entity start - diff; entity end = entity end - (diff + inDiff); } }  static void adjustIndicesForSupplementaryChars(StringBuilder content, FormattedTweetText formattedTweetText) { final List<Integer> highSurrogateIndices = new ArrayList<>(); final int len = content length() - 1; for (int i = 0; i < len; ++i) { if (Character isHighSurrogate(content charAt(i)) && Character isLowSurrogate(content charAt(i + 1))) { highSurrogateIndices add(i); } } adjustEntitiesWithOffsets(formattedTweetText urlEntities, highSurrogateIndices); adjustEntitiesWithOffsets(formattedTweetText mediaEntities, highSurrogateIndices); }  static void adjustEntitiesWithOffsets(List<? extends FormattedUrlEntity> entities, List<Integer> indices) { if (entities == null || indices == null) return; for (FormattedUrlEntity entity : entities) { // find all indices <= start and update offsets by that much final int start = entity start; int offset = 0; for (Integer index : indices) { if (index - offset <= start) { offset += 1; } else { break; } } entity start = entity start + offset; entity end = entity end + offset; } }}package com twitter sdk android tweetui;import android content Context;import android view View;import android view ViewGroup;import com twitter sdk android core Callback;import com twitter sdk android core Result;import com twitter sdk android core TwitterException;import com twitter sdk android core models Tweet;import com twitter sdk android tweetui internal TimelineDelegate;public class TweetTimelineListAdapter extends TimelineListAdapter<Tweet> { protected Callback<Tweet> actionCallback; final protected int styleResId;  public TweetTimelineListAdapter(Context context, Timeline<Tweet> timeline) { this(context, timeline, R style tw__TweetLightStyle, null); } TweetTimelineListAdapter(Context context, Timeline<Tweet> timeline, int styleResId, Callback<Tweet> cb) { this(context, new TimelineDelegate<>(timeline), styleResId, cb); } TweetTimelineListAdapter(Context context, TimelineDelegate<Tweet> delegate, int styleResId, Callback<Tweet> cb) { super(context, delegate); this styleResId = styleResId; this actionCallback = new ReplaceTweetCallback(delegate, cb); }  @Override public View getView(int position, View convertView, ViewGroup parent) { View rowView = convertView; final Tweet tweet = getItem(position); if (rowView == null) { final BaseTweetView tv = new CompactTweetView(context, tweet, styleResId); tv setOnActionCallback(actionCallback); rowView = tv; } else { ((BaseTweetView) rowView) setTweet(tweet); } return rowView; }  static class ReplaceTweetCallback extends Callback<Tweet> { TimelineDelegate<Tweet> delegate; Callback<Tweet> cb; ReplaceTweetCallback(TimelineDelegate<Tweet> delegate, Callback<Tweet> cb) { this delegate = delegate; this cb = cb; } @Override public void success(Result<Tweet> result) { delegate setItemById(result data); if (cb != null) { cb success(result); } } @Override public void failure(TwitterException exception) { if (cb != null) { cb failure(exception); } } }  public static class Builder { private Context context; private Timeline<Tweet> timeline; private Callback<Tweet> actionCallback; private int styleResId = R style tw__TweetLightStyle;  public Builder(Context context) { this context = context; }  public Builder setTimeline(Timeline<Tweet> timeline) { this timeline = timeline; return this; }  public Builder setViewStyle(int styleResId) { this styleResId = styleResId; return this; }  public Builder setOnActionCallback(Callback<Tweet> actionCallback) { this actionCallback = actionCallback; return this; }  public TweetTimelineListAdapter build() { return new TweetTimelineListAdapter(context, timeline, styleResId, actionCallback); } }}package com twitter sdk android tweetui;import io fabric sdk android Fabric;import io fabric sdk android Kit;import io fabric sdk android services concurrency DependsOn;import com squareup picasso Picasso;import com twitter sdk android core GuestSessionProvider;import com twitter sdk android core SessionManager;import com twitter sdk android core TwitterCore;import com twitter sdk android core TwitterSession;import com twitter sdk android core internal scribe DefaultScribeClient;import com twitter sdk android core internal scribe EventNamespace;import com twitter sdk android core internal scribe ScribeItem;import java util List;@DependsOn(TwitterCore class)public class TweetUi extends Kit<Boolean> { static final String LOGTAG = "TweetUi"; static final String NOT_STARTED_ERROR = "Must start TweetUi Kit in Fabric with() "; private static final String KIT_SCRIBE_NAME = "TweetUi"; SessionManager<TwitterSession> sessionManager; GuestSessionProvider guestSessionProvider; DefaultScribeClient scribeClient; private TweetRepository tweetRepository; private Picasso imageLoader;  public static TweetUi getInstance() { checkInitialized(); return Fabric getKit(TweetUi class); } @Override public String getIdentifier() { return BuildConfig GROUP + ":" + BuildConfig ARTIFACT_ID; } @Override public String getVersion() { return BuildConfig VERSION_NAME + " " + BuildConfig BUILD_NUMBER; } @Override protected boolean onPreExecute() { super onPreExecute(); final TwitterCore twitterCore = TwitterCore getInstance(); sessionManager = twitterCore getSessionManager(); guestSessionProvider = twitterCore getGuestSessionProvider(); tweetRepository = new TweetRepository(getFabric() getMainHandler(), twitterCore getSessionManager()); return true; } @Override protected Boolean doInBackground() {  imageLoader = Picasso with(getContext()); setUpScribeClient(); return true; }  private static void checkInitialized() { if (Fabric getKit(TweetUi class) == null) { throw new IllegalStateException(NOT_STARTED_ERROR); } } private void setUpScribeClient() { scribeClient = new DefaultScribeClient(this, KIT_SCRIBE_NAME, sessionManager, guestSessionProvider, getIdManager()); } void scribe(EventNamespace    namespaces) { if (scribeClient == null) return; for (EventNamespace ns : namespaces) { scribeClient scribe(ns); } } void scribe(EventNamespace ns, List<ScribeItem> items) { if (scribeClient == null) return; scribeClient scribe(ns, items); } TweetRepository getTweetRepository() { return tweetRepository; } // Testing purposes only void setTweetRepository(TweetRepository tweetRepository) { this tweetRepository = tweetRepository; } Picasso getImageLoader() { return imageLoader; } // Testing purposes only void setImageLoader(Picasso imageLoader) { this imageLoader = imageLoader; }}package com twitter sdk android tweetcomposer;import android app IntentService;import android content Intent;import android net Uri;import com twitter sdk android core Callback;import com twitter sdk android core Result;import com twitter sdk android core TwitterAuthToken;import com twitter sdk android core TwitterException;import com twitter sdk android core TwitterSession;import com twitter sdk android core models Media;import com twitter sdk android core models Tweet;import com twitter sdk android tweetcomposer internal CardCreate;import com twitter sdk android tweetcomposer internal CardData;import java io File;import io fabric sdk android Fabric;import okhttp3 MediaType;import okhttp3 RequestBody;public class TweetUploadService extends IntentService { public static final String UPLOAD_SUCCESS = "com twitter sdk android tweetcomposer UPLOAD_SUCCESS"; public static final String UPLOAD_FAILURE = "com twitter sdk android tweetcomposer UPLOAD_FAILURE"; public static final String EXTRA_TWEET_ID = "EXTRA_TWEET_ID"; public static final String EXTRA_RETRY_INTENT = "EXTRA_RETRY_INTENT"; static final String TAG = "TweetUploadService"; static final String EXTRA_USER_TOKEN = "EXTRA_USER_TOKEN"; static final String EXTRA_TWEET_TEXT = "EXTRA_TWEET_TEXT"; static final String EXTRA_TWEET_CARD = "EXTRA_TWEET_CARD"; private static final int PLACEHOLDER_ID = -1; private static final String PLACEHOLDER_SCREEN_NAME = ""; DependencyProvider dependencyProvider; TwitterSession twitterSession; String tweetText; Card tweetCard; Intent intent; public TweetUploadService() { this(new DependencyProvider()); } // testing purposes TweetUploadService(DependencyProvider dependencyProvider) { super("TweetUploadService"); this dependencyProvider = dependencyProvider; } @Override protected void onHandleIntent(Intent intent) { final TwitterAuthToken token = intent getParcelableExtra(EXTRA_USER_TOKEN); this intent = intent; twitterSession = new TwitterSession(token, PLACEHOLDER_ID, PLACEHOLDER_SCREEN_NAME); tweetText = intent getStringExtra(EXTRA_TWEET_TEXT); tweetCard = (Card) intent getSerializableExtra(EXTRA_TWEET_CARD); if (Card isAppCard(tweetCard)) { uploadAppCardTweet(twitterSession, tweetText, tweetCard); } else { uploadTweet(twitterSession, tweetText); } } void uploadTweet(TwitterSession session, final String text) { final ComposerApiClient client = dependencyProvider getComposerApiClient(session); client getComposerStatusesService() update(text, null) enqueue(new Callback<Tweet>() { @Override public void success(Result<Tweet> result) { sendSuccessBroadcast(result data getId()); stopSelf(); } @Override public void failure(TwitterException exception) { fail(exception); } }); } void uploadAppCardTweet(TwitterSession session, final String text, final Card card) { final ComposerApiClient client = dependencyProvider getComposerApiClient(session); final Uri uri = Uri parse(card imageUri); final String path = FileUtils getPath(TweetUploadService this, uri); if (path == null) { fail(new TwitterException("Uri file path resolved to null")); return; } final File file = new File(path); final String mimeType = FileUtils getMimeType(file); final RequestBody media = RequestBody create(MediaType parse(mimeType), file); client getMediaService() upload(media, null, null) enqueue(new Callback<Media>() { @Override public void success(Result<Media> result) { final CardData cardData = CardDataFactory createAppCardData(card, result data mediaId, dependencyProvider getAdvertisingId()); client getCardService() create(cardData) enqueue(new Callback<CardCreate>() { @Override public void success(Result<CardCreate> result) { final String cardUri = result data cardUri; client getComposerStatusesService() update(text, cardUri) enqueue( new Callback<Tweet>() { @Override public void success(Result<Tweet> result) { sendSuccessBroadcast(result data getId()); stopSelf(); } @Override public void failure(TwitterException exception) { fail(exception); } }); } @Override public void failure(TwitterException exception) { fail(exception); } }); } @Override public void failure(TwitterException exception) { fail(exception); } }); } void fail(TwitterException e) { sendFailureBroadcast(intent); Fabric getLogger() e(TAG, "Post Tweet failed", e); stopSelf(); } void sendSuccessBroadcast(long tweetId) { final Intent intent = new Intent(UPLOAD_SUCCESS); intent putExtra(EXTRA_TWEET_ID, tweetId); sendBroadcast(intent); } void sendFailureBroadcast(Intent original) { final Intent intent = new Intent(UPLOAD_FAILURE); intent putExtra(EXTRA_RETRY_INTENT, original); sendBroadcast(intent); }  static class DependencyProvider { ComposerApiClient getComposerApiClient(TwitterSession session) { return TweetComposer getInstance() getApiClient(session); } String getAdvertisingId() { return TweetComposer getInstance() getAdvertisingId(); } }}package com twitter sdk android tweetui;import android net Uri;import android text TextUtils;import com twitter sdk android core Callback;import com twitter sdk android core Result;import com twitter sdk android core models Tweet;import java util List;import java util Locale;import io fabric sdk android Fabric;public final class TweetUtils { private static final String PERMALINK_FORMAT = "https://twitter com/%s/status/%d"; private static final String UNKNOWN_SCREEN_NAME = "twitter_unknown"; static final String LOAD_TWEET_DEBUG = "loadTweet failure for Tweet Id %d "; private TweetUtils() {}  public static void loadTweet(final long tweetId, final Callback<Tweet> cb) { TweetUi getInstance() getTweetRepository() loadTweet(tweetId, new com twitter sdk android tweetui LoggingCallback<Tweet>(cb, Fabric getLogger()) { @Override public void success(Result<Tweet> result) { if (cb != null) { cb success(result); } } }); }  public static void loadTweets(final List<Long> tweetIds, final Callback<List<Tweet>> cb) { TweetUi getInstance() getTweetRepository() loadTweets(tweetIds, new com twitter sdk android tweetui LoggingCallback<List<Tweet>>(cb, Fabric getLogger()) { @Override public void success(Result<List<Tweet>> result) { if (cb != null) { cb success(result); } } }); }  static boolean isTweetResolvable(Tweet tweet) { return tweet != null && tweet id > 0 && tweet user != null && !TextUtils isEmpty(tweet user screenName); }  static Tweet getDisplayTweet(Tweet tweet) { if (tweet == null || tweet retweetedStatus == null) { return tweet; } else { return tweet retweetedStatus; } }  static Uri getPermalink(String screenName, long tweetId) { if (tweetId <= 0) { return null; } String permalink; if (TextUtils isEmpty(screenName)) { permalink = String format(Locale US, PERMALINK_FORMAT, UNKNOWN_SCREEN_NAME, tweetId); } else { permalink = String format(Locale US, PERMALINK_FORMAT, screenName, tweetId); } return Uri parse(permalink); }}package com twitter sdk android tweetui;import android content Context;import android util AttributeSet;import android widget ImageView;import com twitter sdk android core models Tweet;public class TweetView extends BaseTweetView { private static final String VIEW_TYPE_NAME = "default"; public TweetView(Context context, Tweet tweet) { super(context, tweet); } public TweetView(Context context, Tweet tweet, int styleResId) { super(context, tweet, styleResId); } TweetView(Context context, Tweet tweet, int styleResId, DependencyProvider dependencyProvider) { super(context, tweet, styleResId, dependencyProvider); } public TweetView(Context context, AttributeSet attrs) { super(context, attrs); } public TweetView(Context context, AttributeSet attrs, int defStyle) { super(context, attrs, defStyle); } @Override protected int getLayout() { return R layout tw__tweet; }  @Override void render() { super render(); setVerifiedCheck(tweet); }  private void setVerifiedCheck(Tweet tweet) { if (tweet != null && tweet user != null && tweet user verified) { verifiedCheckView setVisibility(ImageView VISIBLE); } else { verifiedCheckView setVisibility(ImageView GONE); } } @Override String getViewTypeName() { return VIEW_TYPE_NAME; }}package com twitter sdk android;import android app Activity;import com twitter sdk android core Callback;import com twitter sdk android core SessionManager;import com twitter sdk android core TwitterApiClient;import com twitter sdk android core TwitterSession;import com twitter sdk android tweetcomposer TweetComposer;import io fabric sdk android Fabric;import io fabric sdk android Kit;import com twitter sdk android core TwitterCore;import com twitter sdk android core TwitterAuthConfig;import com twitter sdk android tweetui TweetUi;import io fabric sdk android KitGroup;import java util Arrays;import java util Collection;import java util Collections;public class Twitter extends Kit implements KitGroup { public final TwitterCore core; public final TweetUi tweetUi; public final TweetComposer tweetComposer; public final Collection<? extends Kit> kits; public static Twitter getInstance() { return Fabric getKit(Twitter class); } private static void checkInitialized() { if (getInstance() == null) { throw new IllegalStateException("Must start Twitter Kit with Fabric with() first"); } } public Twitter(TwitterAuthConfig config) { core = new TwitterCore(config); tweetUi = new TweetUi(); tweetComposer = new TweetComposer(); kits = Collections unmodifiableCollection(Arrays asList(core, tweetUi, tweetComposer)); } @Override public String getVersion() { return BuildConfig VERSION_NAME + " " + BuildConfig BUILD_NUMBER; } @Override public String getIdentifier() { return BuildConfig GROUP + ":" + BuildConfig ARTIFACT_ID; } @Override public Collection<? extends Kit> getKits() { return kits; } @Override protected Object doInBackground() { //Nothing to do return null; }  public static void logIn(Activity activity, Callback<TwitterSession> callback) { checkInitialized(); getInstance() core logIn(activity, callback); }  public static void logOut() { checkInitialized(); getInstance() core logOut(); }  public static SessionManager<TwitterSession> getSessionManager() { checkInitialized(); return getInstance() core getSessionManager(); }  public static TwitterApiClient getApiClient() { checkInitialized(); return getInstance() core getApiClient(); }  public static TwitterApiClient getApiClient(TwitterSession session) { checkInitialized(); return getInstance() core getApiClient(session); }}package com twitter sdk android core internal;import android net Uri;import android os Build;public class TwitterApi { public static final String BASE_HOST = "api twitter com"; public static final String BASE_HOST_URL = "https://" + BASE_HOST; private final String baseHostUrl; public TwitterApi() { this(BASE_HOST_URL); } public TwitterApi(String baseHostUrl) { this baseHostUrl = baseHostUrl; } public String getBaseHostUrl() { return baseHostUrl; }  public Uri Builder buildUponBaseHostUrl(String    paths) { final Uri Builder builder = Uri parse(getBaseHostUrl()) buildUpon(); if (paths != null) { for (String p : paths) { builder appendPath(p); } } return builder; }  public static String buildUserAgent(String clientName, String version) { final StringBuilder ua = new StringBuilder(clientName)  append('/') append(version) // NOTE: We currently do not provide client_version_code information   append(' ')  append(Build MODEL) append('/') append(Build VERSION RELEASE)  append(" (")  append(Build MANUFACTURER) append(';')  append(Build MODEL) append(';')  append(Build BRAND) append(';')  append(Build PRODUCT) // NOTE: We do not add client_source, preload, or wifi information   append(')'); return ua toString(); }}package com twitter sdk android core;import com twitter sdk android core internal TwitterApi;import com twitter sdk android core internal network OkHttpClientHelper;import com twitter sdk android core models BindingValues;import com twitter sdk android core models BindingValuesAdapter;import com twitter sdk android core models SafeListAdapter;import com twitter sdk android core models SafeMapAdapter;import com twitter sdk android core services AccountService;import com twitter sdk android core services CollectionService;import com twitter sdk android core services ConfigurationService;import com twitter sdk android core services FavoriteService;import com twitter sdk android core services ListService;import com twitter sdk android core services MediaService;import com twitter sdk android core services SearchService;import com twitter sdk android core services StatusesService;import com google gson Gson;import com google gson GsonBuilder;import java util concurrent ConcurrentHashMap;import okhttp3 OkHttpClient;import retrofit2 Retrofit;import retrofit2 converter gson GsonConverterFactory;public class TwitterApiClient { final ConcurrentHashMap<Class, Object> services; final Retrofit retrofit; TwitterApiClient(OkHttpClient client, TwitterApi twitterApi) { this services = new ConcurrentHashMap<>(); final Gson gson = new GsonBuilder()  registerTypeAdapterFactory(new SafeListAdapter())  registerTypeAdapterFactory(new SafeMapAdapter())  registerTypeAdapter(BindingValues class, new BindingValuesAdapter())  create(); retrofit = new Retrofit Builder()  client(client)  baseUrl(twitterApi getBaseHostUrl())  addConverterFactory(GsonConverterFactory create(gson))  build(); } public TwitterApiClient(TwitterSession session) { this(OkHttpClientHelper getOkHttpClient(session, TwitterCore getInstance() getAuthConfig(), TwitterCore getInstance() getSSLSocketFactory()), new TwitterApi()); } public TwitterApiClient() { this(OkHttpClientHelper getOkHttpClient(TwitterCore getInstance() getGuestSessionProvider(), TwitterCore getInstance() getSSLSocketFactory()), new TwitterApi()); }  public AccountService getAccountService() { return getService(AccountService class); }  public FavoriteService getFavoriteService() { return getService(FavoriteService class); }  public StatusesService getStatusesService() { return getService(StatusesService class); }  public SearchService getSearchService() { return getService(SearchService class); }  public ListService getListService() { return getService(ListService class); }  public CollectionService getCollectionService() { return getService(CollectionService class); }  public ConfigurationService getConfigurationService() { return getService(ConfigurationService class); }  public MediaService getMediaService() { return getService(MediaService class); }  @SuppressWarnings("unchecked") protected <T> T getService(Class<T> cls) { if (!services contains(cls)) { services putIfAbsent(cls, retrofit create(cls)); } return (T) services get(cls); }}package com twitter sdk android core;import io fabric sdk android FabricAndroidTestCase;import io fabric sdk android FabricTestUtils;import okhttp3 OkHttpClient;import com twitter sdk android core internal TwitterApi;import com twitter sdk android core services FavoriteService;import com twitter sdk android core services StatusesService;import static org mockito Mockito mock;public class TwitterApiClientTest extends FabricAndroidTestCase { public void testGetService_sdkNotStarted() { try { FabricTestUtils resetFabric(); new TwitterApiClient(mock(TwitterSession class)); fail(); } catch (IllegalStateException ise) { assertEquals("Must Initialize Fabric before using singleton()", ise getMessage()); } } public void testConstructor_noSession() throws Exception { try { final TwitterCore twitterCore = TwitterCoreTestUtils createTwitterCore( new TwitterAuthConfig("", ""), null, null); FabricTestUtils with(getContext(), twitterCore); new TwitterApiClient(null); fail(); } catch (IllegalArgumentException ie) { assertEquals("Session must not be null ", ie getMessage()); } finally { FabricTestUtils resetFabric(); } } public void testGetService_cachedService() throws Exception { final TwitterApiClient client = newTwitterApiClient(); final StatusesService service = client getService(StatusesService class); assertSame(service, client getService(StatusesService class)); } public void testGetService_differentServices() throws Exception { final TwitterApiClient client = newTwitterApiClient(); final FavoriteService service = client getService(FavoriteService class); assertNotSame(service, client getService(StatusesService class)); } private TwitterApiClient newTwitterApiClient() { return new TwitterApiClient(mock(OkHttpClient class), new TwitterApi()); }}package com twitter sdk android core internal;public class TwitterApiConstants { public static final int MAX_TWEET_CHARS = 140; public static class Base { public static final String PARAM_ID = "id"; public static final String FIELD_ID = "id"; } public static class Errors extends Base { public static final String ERRORS = "errors"; // error when app auth token not recognized (such as when expired) public static final int APP_AUTH_ERROR_CODE = 89; // error when a tweet has already been favorited public static final int ALREADY_FAVORITED = 139; // error when a tweet has already been unfavorited public static final int ALREADY_UNFAVORITED = 144; // error when guest auth token not recognized (such as when expired) public static final int GUEST_AUTH_ERROR_CODE = 239; // legacy errors are errors that are returned by the api in a different format, where there // is no array of errors  public static final int LEGACY_ERROR = 0; }}package com twitter sdk android core;public class TwitterApiErrorConstants { //phone normalization errors public static final int DEVICE_REGISTRATION_INVALID_INPUT = 44; public static final int REGISTRATION_INVALID_INPUT = 300; public static final int REGISTRATION_PHONE_NORMALIZATION_FAILED = 303; //device already registered by other user public static final int DEVICE_ALREADY_REGISTERED = 285; //rate limit for sms exceeded public static final int RATE_LIMIT_EXCEEDED = 88; //registration general error public static final int REGISTRATION_GENERAL_ERROR = 284; public static final int REGISTRATION_OPERATION_FAILED = 302; //spammer phone number public static final int SPAMMER = 240; public static final int COULD_NOT_AUTHENTICATE = 32; public static final int CLIENT_NOT_PRIVILEGED = 87; public static final int UNKNOWN_ERROR = -1; //Unrecoverable errors public static final int OPERATOR_UNSUPPORTED = 286; public static final int USER_IS_NOT_SDK_USER = 269; public static final int EXPIRED_LOGIN_VERIFICATION_REQUEST = 235; public static final int MISSING_LOGIN_VERIFICATION_REQUEST = 237; public static final int DEVICE_REGISTRATION_RATE_EXCEEDED = 299; public static final int PAGE_NOT_EXIST = 34; public static final int EMAIL_ALREADY_REGISTERED = 120;}package com twitter sdk android core;import android text TextUtils;import com google gson Gson;import com google gson JsonSyntaxException;import com twitter sdk android core models ApiError;import com twitter sdk android core models ApiErrors;import io fabric sdk android Fabric;import retrofit2 Response;public class TwitterApiException extends TwitterException { public static final int DEFAULT_ERROR_CODE = 0; private final ApiError apiError; private final TwitterRateLimit twitterRateLimit; private final int code; private final Response response; public TwitterApiException(Response response) { this(response, readApiError(response), readApiRateLimit(response), response code()); } TwitterApiException(Response response, ApiError apiError, TwitterRateLimit twitterRateLimit, int code) { super(createExceptionMessage(code)); this apiError = apiError; this twitterRateLimit = twitterRateLimit; this code = code; this response = response; } public int getStatusCode() { return code; }  public int getErrorCode() { return apiError == null ? DEFAULT_ERROR_CODE : apiError code; }  public String getErrorMessage() { return apiError == null ? null : apiError message; } public TwitterRateLimit getTwitterRateLimit() { return twitterRateLimit; } public Response getResponse() { return response; } public static TwitterRateLimit readApiRateLimit(Response response) { return new TwitterRateLimit(response headers()); } public static ApiError readApiError(Response response) { try { // The response buffer can only be read once, so we clone the underlying buffer so the // response can be consumed down stream if necessary  final String body = response errorBody() source() buffer() clone() readUtf8(); if (!TextUtils isEmpty(body)) { return parseApiError(body); } } catch (Exception e) { Fabric getLogger() e(TwitterCore TAG, "Unexpected response", e); } return null; } static ApiError parseApiError(String body) { final Gson gson = new Gson(); try { final ApiErrors apiErrors = gson fromJson(body, ApiErrors class); if (!apiErrors errors isEmpty()) { return apiErrors errors get(0); } } catch (JsonSyntaxException e) { Fabric getLogger() e(TwitterCore TAG, "Invalid json: " + body, e); } return null; } static String createExceptionMessage(int code) { return "HTTP request failed, Status: " + code; }}package com twitter sdk android core identity;import android app Activity;import android content Context;import android content Intent;import io fabric sdk android Fabric;import com twitter sdk android core Callback;import com twitter sdk android core Result;import com twitter sdk android core SessionManager;import com twitter sdk android core TwitterAuthException;import com twitter sdk android core TwitterCore;import com twitter sdk android core TwitterAuthConfig;import com twitter sdk android core TwitterException;import com twitter sdk android core TwitterSession;import com twitter sdk android core internal scribe DefaultScribeClient;import com twitter sdk android core internal scribe EventNamespace;import com twitter sdk android core internal scribe TwitterCoreScribeClientHolder;public class TwitterAuthClient { private static class AuthStateLazyHolder { private static final AuthState INSTANCE = new AuthState(); } private static final String SCRIBE_CLIENT = "android"; private static final String SCRIBE_LOGIN_PAGE = "login"; private static final String SCRIBE_SHARE_EMAIL_PAGE = "shareemail"; private static final String SCRIBE_SECTION = ""; // intentionally blank private static final String SCRIBE_COMPONENT = ""; // intentionally blank private static final String SCRIBE_ELEMENT = ""; // intentionally blank private static final String SCRIBE_ACTION = "impression"; final AuthState authState; final SessionManager<TwitterSession> sessionManager; private final Context context; private final TwitterAuthConfig authConfig; public int getRequestCode() { return authConfig getRequestCode(); }  public TwitterAuthClient() { this(TwitterCore getInstance() getContext(), TwitterCore getInstance() getAuthConfig(), TwitterCore getInstance() getSessionManager(), AuthStateLazyHolder INSTANCE); } TwitterAuthClient(Context context, TwitterAuthConfig authConfig, SessionManager<TwitterSession> sessionManager, AuthState authState) { this authState = authState; this context = context; this authConfig = authConfig; this sessionManager = sessionManager; }  public void authorize(Activity activity, Callback<TwitterSession> callback) { if (activity == null) { throw new IllegalArgumentException("Activity must not be null "); } if (callback == null) { throw new IllegalArgumentException("Callback must not be null "); } if (activity isFinishing()) { Fabric getLogger() e(TwitterCore TAG, "Cannot authorize, activity is finishing ", null); } else { handleAuthorize(activity, callback); } } private void handleAuthorize(Activity activity, Callback<TwitterSession> callback) { scribeAuthorizeImpression(); final CallbackWrapper callbackWrapper = new CallbackWrapper(sessionManager, callback); if (!authorizeUsingSSO(activity, callbackWrapper) && !authorizeUsingOAuth(activity, callbackWrapper)) { callbackWrapper failure(new TwitterAuthException("Authorize failed ")); } } private boolean authorizeUsingSSO(Activity activity, CallbackWrapper callbackWrapper) { if (SSOAuthHandler isAvailable(activity)) { Fabric getLogger() d(TwitterCore TAG, "Using SSO"); return authState beginAuthorize(activity, new SSOAuthHandler(authConfig, callbackWrapper, authConfig getRequestCode())); } else { return false; } } private boolean authorizeUsingOAuth(Activity activity, CallbackWrapper callbackWrapper) { Fabric getLogger() d(TwitterCore TAG, "Using OAuth"); return authState beginAuthorize(activity, new OAuthHandler(authConfig, callbackWrapper, authConfig getRequestCode())); } private void scribeAuthorizeImpression() { final DefaultScribeClient scribeClient = getScribeClient(); if (scribeClient == null) return; final EventNamespace ns = new EventNamespace Builder()  setClient(SCRIBE_CLIENT)  setPage(SCRIBE_LOGIN_PAGE)  setSection(SCRIBE_SECTION)  setComponent(SCRIBE_COMPONENT)  setElement(SCRIBE_ELEMENT)  setAction(SCRIBE_ACTION)  builder(); scribeClient scribe(ns); }  public void onActivityResult(int requestCode, int resultCode, Intent data) { Fabric getLogger() d(TwitterCore TAG, "onActivityResult called with " + requestCode + " " + resultCode); if (!authState isAuthorizeInProgress()) { Fabric getLogger() e(TwitterCore TAG, "Authorize not in progress", null); } else { final AuthHandler authHandler = authState getAuthHandler(); if (authHandler != null && authHandler handleOnActivityResult(requestCode, resultCode, data)) { authState endAuthorize(); } } }  public void requestEmail(TwitterSession session, Callback<String> callback) { if (session == null) { throw new IllegalArgumentException("Session must not be null "); } if (callback == null) { throw new IllegalArgumentException("Callback must not be null "); } scribeRequestEmail(); context startActivity(newShareEmailIntent(session, callback)); } protected DefaultScribeClient getScribeClient() { return TwitterCoreScribeClientHolder getScribeClient(); } private void scribeRequestEmail() { final DefaultScribeClient scribeClient = getScribeClient(); if (scribeClient == null) return; final EventNamespace ns = new EventNamespace Builder()  setClient(SCRIBE_CLIENT)  setPage(SCRIBE_SHARE_EMAIL_PAGE)  setSection(SCRIBE_SECTION)  setComponent(SCRIBE_COMPONENT)  setElement(SCRIBE_ELEMENT)  setAction(SCRIBE_ACTION)  builder(); scribeClient scribe(ns); } Intent newShareEmailIntent(TwitterSession session, Callback<String> callback) { return new Intent(context, ShareEmailActivity class)  setFlags(Intent FLAG_ACTIVITY_NEW_TASK)  putExtra(ShareEmailActivity EXTRA_SESSION_ID, session getId())  putExtra(ShareEmailActivity EXTRA_RESULT_RECEIVER, new ShareEmailResultReceiver(callback)); } static class CallbackWrapper extends Callback<TwitterSession> { private final SessionManager<TwitterSession> sessionManager; private final Callback<TwitterSession> callback; public CallbackWrapper(SessionManager<TwitterSession> sessionManager, Callback<TwitterSession> callback) { this sessionManager = sessionManager; this callback = callback; } @Override public void success(Result<TwitterSession> result) { Fabric getLogger() d(TwitterCore TAG, "Authorization completed successfully"); sessionManager setActiveSession(result data); callback success(result); } @Override public void failure(TwitterException exception) { Fabric getLogger() e(TwitterCore TAG, "Authorization completed with an error", exception); callback failure(exception); } }}package com twitter sdk android core identity;import android app Activity;import android content ComponentName;import android content Context;import android content Intent;import android content pm PackageManager;import io fabric sdk android FabricAndroidTestCase;import io fabric sdk android FabricTestUtils;import io fabric sdk android KitStub;import com twitter sdk android core Callback;import com twitter sdk android core Result;import com twitter sdk android core SessionManager;import com twitter sdk android core TestFixtures;import com twitter sdk android core TwitterAuthConfig;import com twitter sdk android core TwitterAuthException;import com twitter sdk android core TwitterSession;import com twitter sdk android core internal scribe DefaultScribeClient;import com twitter sdk android core internal scribe EventNamespace;import org mockito ArgumentCaptor;import static org mockito Mockito *;public class TwitterAuthClientTest extends FabricAndroidTestCase { private static final int TEST_REQUEST_CODE = 100; private Context mockContext; private TwitterAuthConfig mockAuthConfig; private SessionManager<TwitterSession> mockSessionManager; private AuthState mockAuthState; private Callback<TwitterSession> mockCallback; private DefaultScribeClient mockScribeClient; private TwitterAuthClient authClient; @Override protected void setUp() throws Exception { super setUp(); mockContext = mock(Context class); when(mockContext getPackageName()) thenReturn(getClass() getPackage() toString()); mockAuthConfig = mock(TwitterAuthConfig class); when(mockAuthConfig getRequestCode()) thenReturn(TEST_REQUEST_CODE); mockSessionManager = mock(SessionManager class); mockAuthState = mock(TestAuthState class); mockCallback = mock(Callback class); mockScribeClient = mock(DefaultScribeClient class); authClient = new TwitterAuthClient(mockContext, mockAuthConfig, mockSessionManager, mockAuthState); } public void testConstructor_noParameters() throws Exception { FabricTestUtils with(getContext(), new KitStub()); try { new TwitterAuthClient(); fail("Expected IllegalStateException to be thrown"); } catch (IllegalStateException e) { assertEquals("Must start Twitter Kit with Fabric with() first", e getMessage()); } finally { FabricTestUtils resetFabric(); } } public void testGetRequestCode() { assertEquals(TEST_REQUEST_CODE, authClient getRequestCode()); } public void testAuthorize_activityNull() { try { authClient authorize(null, mock(Callback class)); fail("Expected IllegalArgumentException to be thrown"); } catch (IllegalArgumentException e) { assertEquals("Activity must not be null ", e getMessage()); } } public void testAuthorize_activityIsFinishing() { final Activity mockActivity = mock(Activity class); when(mockActivity isFinishing()) thenReturn(true); // Verify that when activity is finishing, no further work is done  authClient authorize(mockActivity, mockCallback); verifyZeroInteractions(mockAuthState); } public void testAuthorize_callbackNull() { try { authClient authorize(mock(Activity class), null); fail("Expected IllegalArgumentException to be thrown"); } catch (IllegalArgumentException e) { assertEquals("Callback must not be null ", e getMessage()); } } public void testAuthorize_authorizeInProgress() throws PackageManager NameNotFoundException { final Activity mockActivity = mock(Activity class); TestUtils setupNoSSOAppInstalled(mockActivity); when(mockAuthState isAuthorizeInProgress()) thenReturn(true); // Verify that when authorize is in progress, callback is notified of error  authClient authorize(mockActivity, mockCallback); verify(mockCallback) failure(any(TwitterAuthException class)); } public void testAuthorize_ssoAvailable() throws PackageManager NameNotFoundException { final Activity mockActivity = mock(Activity class); TestUtils setupTwitterInstalled(mockActivity); when(mockAuthState beginAuthorize(any(Activity class), any(AuthHandler class)))  thenReturn(true); // Verify that when SSO is available, SSOAuthHandler is used to complete the authorization // flow  authClient authorize(mockActivity, mockCallback); verify(mockAuthState) beginAuthorize(eq(mockActivity), any(SSOAuthHandler class)); } public void testAuthorize_ssoAvailableViaTwitterDogfood() throws PackageManager NameNotFoundException { final Activity mockActivity = mock(Activity class); TestUtils setupTwitterInstalled(mockActivity); when(mockAuthState beginAuthorize(any(Activity class), any(AuthHandler class)))  thenReturn(true); // Verify that when SSO is available, SSOAuthHandler is used to complete the authorization // flow  authClient authorize(mockActivity, mockCallback); verify(mockAuthState) beginAuthorize(eq(mockActivity), any(SSOAuthHandler class)); } public void testAuthorize_ssoNotAvailable() throws PackageManager NameNotFoundException { final Activity mockActivity = mock(Activity class); TestUtils setupNoSSOAppInstalled(mockActivity); when(mockAuthState beginAuthorize(any(Activity class), any(AuthHandler class)))  thenReturn(true); // Verify that when SSO is not available, OAuthHandler is used to complete the // authorization flow  authClient authorize(mockActivity, mockCallback); verify(mockAuthState) beginAuthorize(eq(mockActivity), any(OAuthHandler class)); } public void testAuthorize_bothSsoAndOAuthFail() throws PackageManager NameNotFoundException { final Activity mockActivity = mock(Activity class); TestUtils setupTwitterInstalled(mockActivity); when(mockAuthState beginAuthorize(any(Activity class), any(AuthHandler class)))  thenReturn(false); authClient authorize(mockActivity, mockCallback); verify(mockAuthState, times(2)) beginAuthorize(eq(mockActivity), any(AuthHandler class)); final ArgumentCaptor<TwitterAuthException> argCaptor = ArgumentCaptor forClass(TwitterAuthException class); verify(mockCallback) failure(argCaptor capture()); assertEquals("Authorize failed ", argCaptor getValue() getMessage()); } public void testAuthorize_scribesImpression() throws PackageManager NameNotFoundException { final Activity mockActivity = mock(Activity class); TestUtils setupNoSSOAppInstalled(mockActivity); authClient = new TwitterAuthClient(mockContext, mockAuthConfig, mockSessionManager, mockAuthState) { @Override protected DefaultScribeClient getScribeClient() { return mockScribeClient; } }; authClient authorize(mockActivity, mockCallback); verify(mockScribeClient) scribe(any(EventNamespace class)); } public void testAuthorize_scribeHandlesNullClient() throws PackageManager NameNotFoundException { final Activity mockActivity = mock(Activity class); TestUtils setupNoSSOAppInstalled(mockActivity); authClient = new TwitterAuthClient(mockContext, mockAuthConfig, mockSessionManager, mockAuthState) { @Override protected DefaultScribeClient getScribeClient() { return null; } }; try { authClient authorize(mockActivity, mockCallback); } catch (NullPointerException e) { fail("should not crash with null scribe client"); } } public void testOnActivityResult_noAuthorizeInProgress() { when(mockAuthState isAuthorizeInProgress()) thenReturn(false); // Verify that if authorize is in progress, onActivityResult returns early  authClient onActivityResult(TEST_REQUEST_CODE, Activity RESULT_OK, mock(Intent class)); verify(mockAuthState) isAuthorizeInProgress(); verifyNoMoreInteractions(mockAuthState); } public void testOnActivityResult_handleOnActivityResultTrue() { setUpAuthStateOnActivityResult(true); // Verify that when the activity result is handled, auth state is updated to end  authClient onActivityResult(TEST_REQUEST_CODE, Activity RESULT_OK, mock(Intent class)); verify(mockAuthState) isAuthorizeInProgress(); verify(mockAuthState) getAuthHandler(); verify(mockAuthState) endAuthorize(); } public void testOnActivityResult_handleOnActivityResultFalse() { setUpAuthStateOnActivityResult(false); // Verify that when the activity result is not handled, auth state is not updated to end  authClient onActivityResult(TEST_REQUEST_CODE, Activity RESULT_OK, mock(Intent class)); verify(mockAuthState) isAuthorizeInProgress(); verify(mockAuthState) getAuthHandler(); verifyNoMoreInteractions(mockAuthState); } private void setUpAuthStateOnActivityResult(boolean handled) { final AuthHandler mockAuthHandler = mock(AuthHandler class); when(mockAuthHandler handleOnActivityResult(anyInt(), anyInt(), any(Intent class)))  thenReturn(handled); when(mockAuthState isAuthorizeInProgress()) thenReturn(true); when(mockAuthState getAuthHandler()) thenReturn(mockAuthHandler); } public void testRequestEmail_nullSession() { try { authClient requestEmail(null, mock(Callback class)); fail("Expected IllegalArgumentException to be thrown"); } catch (IllegalArgumentException e) { assertEquals("Session must not be null ", e getMessage()); } } public void testRequestEmail() { final TwitterSession mockSession = mock(TwitterSession class); when(mockSession getId()) thenReturn(TestFixtures USER_ID); authClient requestEmail(mockSession, mock(Callback class)); final ArgumentCaptor<Intent> argCaptor = ArgumentCaptor forClass(Intent class); verify(mockContext) startActivity(argCaptor capture()); assertShareEmailIntent(argCaptor getValue()); } public void testRequestEmail_nullCallback() { try { authClient requestEmail(mock(TwitterSession class), null); fail("Expected IllegalArgumentException to be thrown"); } catch (IllegalArgumentException e) { assertEquals("Callback must not be null ", e getMessage()); } } public void testRequestEmail_scribesImpression() { final TwitterSession mockSession = mock(TwitterSession class); when(mockSession getId()) thenReturn(TestFixtures USER_ID); authClient = new TwitterAuthClient(mockContext, mockAuthConfig, mockSessionManager, mockAuthState) { @Override protected DefaultScribeClient getScribeClient() { return mockScribeClient; } }; authClient requestEmail(mockSession, mock(Callback class)); verify(mockScribeClient) scribe(any(EventNamespace class)); } public void testReqestEmail_scribeHandlesNullClient() { final TwitterSession mockSession = mock(TwitterSession class); when(mockSession getId()) thenReturn(TestFixtures USER_ID); authClient = new TwitterAuthClient(mockContext, mockAuthConfig, mockSessionManager, mockAuthState) { @Override protected DefaultScribeClient getScribeClient() { return null; } }; try { authClient requestEmail(mockSession, mock(Callback class)); } catch (NullPointerException e) { fail("should handle null scribe client"); } } public void testNewShareEmailIntent() { final TwitterSession mockSession = mock(TwitterSession class); when(mockSession getId()) thenReturn(TestFixtures USER_ID); final Intent intent = authClient newShareEmailIntent(mockSession, mock(Callback class)); assertShareEmailIntent(intent); } private void assertShareEmailIntent(Intent intent) { final ComponentName component = new ComponentName(mockContext, ShareEmailActivity class getName()); assertEquals(component, intent getComponent()); assertEquals(Intent FLAG_ACTIVITY_NEW_TASK, intent getFlags()); assertEquals(TestFixtures USER_ID, intent getLongExtra(ShareEmailActivity EXTRA_SESSION_ID, TwitterSession UNKNOWN_USER_ID)); assertNotNull(intent getParcelableExtra(ShareEmailActivity EXTRA_RESULT_RECEIVER)); } public void testCallbackWrapper_success() { final TwitterAuthClient CallbackWrapper callbackWrapper = new TwitterAuthClient CallbackWrapper(mockSessionManager, mockCallback); final TwitterSession mockSession = mock(TwitterSession class); final Result<TwitterSession> mockResult = new Result<>(mockSession, null); callbackWrapper success(mockResult); verify(mockSessionManager) setActiveSession(eq(mockSession)); verify(mockCallback) success(eq(mockResult)); } public void testCallbackWrapper_failure() { final TwitterAuthClient CallbackWrapper callbackWrapper = new TwitterAuthClient CallbackWrapper(mockSessionManager, mockCallback); final TwitterAuthException mockException = mock(TwitterAuthException class); callbackWrapper failure(mockException); verifyZeroInteractions(mockSessionManager); verify(mockCallback) failure(eq(mockException)); }}package com twitter sdk android core;import android os Parcel;import android os Parcelable;public class TwitterAuthConfig implements Parcelable {  public static final int DEFAULT_AUTH_REQUEST_CODE = 140; public static final Parcelable Creator<TwitterAuthConfig> CREATOR = new Parcelable Creator<TwitterAuthConfig>() { public TwitterAuthConfig createFromParcel(Parcel in) { return new TwitterAuthConfig(in); } public TwitterAuthConfig[] newArray(int size) { return new TwitterAuthConfig[size]; } }; private final String consumerKey; private final String consumerSecret;  public TwitterAuthConfig(String consumerKey, String consumerSecret) { if (consumerKey == null || consumerSecret == null) { throw new IllegalArgumentException( "TwitterAuthConfig must not be created with null consumer key or secret "); } this consumerKey = sanitizeAttribute(consumerKey); this consumerSecret = sanitizeAttribute(consumerSecret); } private TwitterAuthConfig(Parcel in) { consumerKey = in readString(); consumerSecret = in readString(); }  public String getConsumerKey() { return consumerKey; }  public String getConsumerSecret() { return consumerSecret; }  public int getRequestCode() { return DEFAULT_AUTH_REQUEST_CODE; } static String sanitizeAttribute(String input) { if (input != null) { return input trim(); } else { return null; } } @Override public int describeContents() { return 0; } @Override public void writeToParcel(Parcel out, int flags) { out writeString(consumerKey); out writeString(consumerSecret); }}package com twitter sdk android core;import android os Parcel;import io fabric sdk android FabricAndroidTestCase;public class TwitterAuthConfigTest extends FabricAndroidTestCase { private static final String NO_PARAM_ERROR_MSG = "TwitterAuthConfig must not be created with null consumer key or secret "; private TwitterAuthConfig authConfig; @Override protected void setUp() throws Exception { super setUp(); authConfig = new TwitterAuthConfig(TestFixtures KEY, TestFixtures SECRET); } public void testParcelable() { final Parcel parcel = Parcel obtain(); authConfig writeToParcel(parcel, 0); parcel setDataPosition(0); final TwitterAuthConfig parceledAuthConfig = TwitterAuthConfig CREATOR createFromParcel(parcel); assertEquals(TestFixtures KEY, parceledAuthConfig getConsumerKey()); assertEquals(TestFixtures SECRET, parceledAuthConfig getConsumerSecret()); } public void testGetRequestCode() { assertEquals(TwitterAuthConfig DEFAULT_AUTH_REQUEST_CODE, authConfig getRequestCode()); } public void testSanitizeAttribute_nullAttribute() { assertNull(TwitterAuthConfig sanitizeAttribute(null)); } public void testSanitizeAttribute_sanitizedString() { final String test = "test"; assertEquals(test, TwitterAuthConfig sanitizeAttribute(test)); } public void testSanitizeAttribute_trailingWhitespace() { final String test = "test "; assertEquals("test", TwitterAuthConfig sanitizeAttribute(test)); } public void testConstructor_nullKey() { try { new TwitterAuthConfig(null, "secret"); fail(); } catch (IllegalArgumentException ie) { assertEquals(NO_PARAM_ERROR_MSG, ie getMessage()); } } public void testConstructor_nullSecret() { try { new TwitterAuthConfig("key", null); fail(); } catch (IllegalArgumentException ie) { assertEquals(NO_PARAM_ERROR_MSG, ie getMessage()); } } public void testConstructor_nullArguments() { try { new TwitterAuthConfig(null, null); fail(); } catch (IllegalArgumentException ie) { assertEquals(NO_PARAM_ERROR_MSG, ie getMessage()); } }}package com twitter sdk android core;public class TwitterAuthException extends TwitterException { private static final long serialVersionUID = 577033016879783994L; public TwitterAuthException(String detailMessage) { super(detailMessage); } public TwitterAuthException(String detailMessage, Throwable throwable) { super(detailMessage, throwable); }}package com twitter sdk android core;import android os Parcel;import android os Parcelable;import com google gson annotations SerializedName;public class TwitterAuthToken extends AuthToken implements Parcelable { public static final Parcelable Creator<TwitterAuthToken> CREATOR = new Parcelable Creator<TwitterAuthToken>() { public TwitterAuthToken createFromParcel(Parcel in) { return new TwitterAuthToken(in); } public TwitterAuthToken[] newArray(int size) { return new TwitterAuthToken[size]; } }; @SerializedName("token") public final String token; @SerializedName("secret") public final String secret; public TwitterAuthToken(String token, String secret) { super(); this token = token; this secret = secret; } // for testing purposes TwitterAuthToken(String token, String secret, long createdAt) { super(createdAt); this token = token; this secret = secret; } private TwitterAuthToken(Parcel in) { super(); this token = in readString(); this secret = in readString(); } @Override public boolean isExpired() { // Twitter does not expire OAuth1a tokens return false; } @Override public String toString() { final StringBuilder sb = new StringBuilder()  append("token=") append(this token)  append(",secret=") append(this secret); return sb toString(); } @Override public int describeContents() { return 0; } @Override public void writeToParcel(Parcel out, int flags) { out writeString(token); out writeString(secret); } @Override public boolean equals(Object o) { if (this == o) return true; if (!(o instanceof TwitterAuthToken)) return false; final TwitterAuthToken that = (TwitterAuthToken) o; if (secret != null ? !secret equals(that secret) : that secret != null) return false; if (token != null ? !token equals(that token) : that token != null) return false; return true; } @Override public int hashCode() { int result = token != null ? token hashCode() : 0; result = 31 * result + (secret != null ? secret hashCode() : 0); return result; }}package com twitter sdk android core internal;import com google gson annotations SerializedName;import com twitter sdk android core models Tweet;import com twitter sdk android core models User;import java util List;import java util Map;public class TwitterCollection { public TwitterCollection(Content contents, Metadata metadata) { this contents = contents; this metadata = metadata; } @SerializedName("objects") public final Content contents; @SerializedName("response") public final Metadata metadata;  public static final class Content {  @SerializedName("tweets") public final Map<Long, Tweet> tweetMap;  @SerializedName("users") public final Map<Long, User> userMap; public Content(Map<Long, Tweet> tweetMap, Map<Long, User> userMap) { this tweetMap = tweetMap; this userMap = userMap; } }  public static final class Metadata { public Metadata(String timelineId, Position position, List<TimelineItem> timelines) { this timelineId = timelineId; this position = position; this timelineItems = timelines; }  @SerializedName("timeline_id") public final String timelineId; @SerializedName("position") public final Position position;  @SerializedName("timeline") public final List<TimelineItem> timelineItems;  public static final class Position {  @SerializedName("min_position") public final Long minPosition;  @SerializedName("max_position") public final Long maxPosition; public Position(Long maxPosition, Long minPosition) { this maxPosition = maxPosition; this minPosition = minPosition; } } }  public static class TimelineItem { public TimelineItem(TweetItem tweetItem) { this tweetItem = tweetItem; }  @SerializedName("tweet") public final TweetItem tweetItem; public static final class TweetItem { public TweetItem(Long id) { this id = id; }  @SerializedName("id") public final Long id; } }}package com twitter sdk android core;import android app Activity;import io fabric sdk android Fabric;import io fabric sdk android Kit;import io fabric sdk android services network NetworkUtils;import io fabric sdk android services persistence PreferenceStoreImpl;import com twitter sdk android core identity TwitterAuthClient;import com twitter sdk android core internal MigrationHelper;import com twitter sdk android core internal SessionMonitor;import com twitter sdk android core internal TwitterApi;import com twitter sdk android core internal TwitterSessionVerifier;import com twitter sdk android core internal oauth OAuth2Service;import com twitter sdk android core internal scribe TwitterCoreScribeClientHolder;import java util concurrent ConcurrentHashMap;import javax net ssl SSLSocketFactory;public class TwitterCore extends Kit<Boolean> { public static final String TAG = "Twitter"; static final String PREF_KEY_ACTIVE_TWITTER_SESSION = "active_twittersession"; static final String PREF_KEY_TWITTER_SESSION = "twittersession"; static final String PREF_KEY_ACTIVE_GUEST_SESSION = "active_guestsession"; static final String PREF_KEY_GUEST_SESSION = "guestsession"; static final String SESSION_PREF_FILE_NAME = "session_store"; SessionManager<TwitterSession> twitterSessionManager; SessionManager<GuestSession> guestSessionManager; SessionMonitor<TwitterSession> sessionMonitor; private final TwitterAuthConfig authConfig; private final ConcurrentHashMap<Session, TwitterApiClient> apiClients; private volatile TwitterApiClient guestClient; private volatile GuestSessionProvider guestSessionProvider; private volatile SSLSocketFactory sslSocketFactory; public TwitterCore(TwitterAuthConfig authConfig) { this(authConfig, new ConcurrentHashMap<Session, TwitterApiClient>(), null); } // Testing only TwitterCore(TwitterAuthConfig authConfig, ConcurrentHashMap<Session, TwitterApiClient> apiClients, TwitterApiClient guestClient) { this authConfig = authConfig; this apiClients = apiClients; this guestClient = guestClient; } public static TwitterCore getInstance() { checkInitialized(); return Fabric getKit(TwitterCore class); } @Override public String getVersion() { return BuildConfig VERSION_NAME + " " + BuildConfig BUILD_NUMBER; } public TwitterAuthConfig getAuthConfig() { return authConfig; }  public SSLSocketFactory getSSLSocketFactory() { checkInitialized(); if (sslSocketFactory == null) { createSSLSocketFactory(); } return sslSocketFactory; } private synchronized void createSSLSocketFactory() { if (sslSocketFactory == null) { try { sslSocketFactory = NetworkUtils getSSLSocketFactory( new TwitterPinningInfoProvider(getContext())); Fabric getLogger() d(TAG, "Custom SSL pinning enabled"); } catch (Exception e) { Fabric getLogger() e(TAG, "Exception setting up custom SSL pinning", e); } } } @Override protected boolean onPreExecute() { final MigrationHelper migrationHelper = new MigrationHelper(); migrationHelper migrateSessionStore(getContext(), getIdentifier(), getIdentifier() + ":" + SESSION_PREF_FILE_NAME + " xml"); twitterSessionManager = new PersistedSessionManager<>( new PreferenceStoreImpl(getContext(), SESSION_PREF_FILE_NAME), new TwitterSession Serializer(), PREF_KEY_ACTIVE_TWITTER_SESSION, PREF_KEY_TWITTER_SESSION); guestSessionManager = new PersistedSessionManager<>( new PreferenceStoreImpl(getContext(), SESSION_PREF_FILE_NAME), new GuestSession Serializer(), PREF_KEY_ACTIVE_GUEST_SESSION, PREF_KEY_GUEST_SESSION); sessionMonitor = new SessionMonitor<>(twitterSessionManager, getFabric() getExecutorService(), new TwitterSessionVerifier()); return true; } @Override protected Boolean doInBackground() { // Trigger restoration of session twitterSessionManager getActiveSession(); guestSessionManager getActiveSession(); getSSLSocketFactory(); getGuestSessionProvider(); initializeScribeClient(); // Monitor activity lifecycle after sessions have been restored  Otherwise we would not // have any sessions to monitor anyways  sessionMonitor monitorActivityLifecycle(getFabric() getActivityLifecycleManager()); return true; } @Override public String getIdentifier() { return BuildConfig GROUP + ":" + BuildConfig ARTIFACT_ID; } private static void checkInitialized() { if (Fabric getKit(TwitterCore class) == null) { throw new IllegalStateException("Must start Twitter Kit with Fabric with() first"); } } private void initializeScribeClient() { TwitterCoreScribeClientHolder initialize(this, getSessionManager(), getGuestSessionProvider(), getIdManager()); }   public void logIn(Activity activity, Callback<TwitterSession> callback) { checkInitialized(); new TwitterAuthClient() authorize(activity, callback); }  public void logOut() { checkInitialized(); final SessionManager<TwitterSession> sessionManager = getSessionManager(); if (sessionManager != null) { sessionManager clearActiveSession(); } }  public SessionManager<TwitterSession> getSessionManager() { checkInitialized(); return twitterSessionManager; } public GuestSessionProvider getGuestSessionProvider() { checkInitialized(); if (guestSessionProvider == null) { createGuestSessionProvider(); } return guestSessionProvider; } private synchronized void createGuestSessionProvider() { if (guestSessionProvider == null) { final OAuth2Service service = new OAuth2Service(this, getSSLSocketFactory(), new TwitterApi()); guestSessionProvider = new GuestSessionProvider(service, guestSessionManager); } }  public TwitterApiClient getApiClient() { checkInitialized(); final TwitterSession session = twitterSessionManager getActiveSession(); if (session == null) { return getGuestApiClient(); } return getApiClient(session); }  public TwitterApiClient getApiClient(TwitterSession session) { checkInitialized(); if (!apiClients containsKey(session)) { apiClients putIfAbsent(session, new TwitterApiClient(session)); } return apiClients get(session); }  public TwitterApiClient getGuestApiClient() { checkInitialized(); if (guestClient == null) { createGuestClient(); } return guestClient; } private synchronized void createGuestClient() { if (guestClient == null) { guestClient = new TwitterApiClient(); } }}package com twitter sdk android core internal scribe;import com twitter sdk android core GuestSessionProvider;import com twitter sdk android core Session;import com twitter sdk android core SessionManager;import com twitter sdk android core TwitterAuthToken;import com twitter sdk android core TwitterCore;import io fabric sdk android services common IdManager;public class TwitterCoreScribeClientHolder { private static final String KIT_NAME = "TwitterCore"; private static DefaultScribeClient instance;  public static DefaultScribeClient getScribeClient() { return instance; }  public static void initialize(TwitterCore kit, SessionManager<? extends Session<TwitterAuthToken>> sessionManagers, GuestSessionProvider guestSessionProvider, IdManager idManager) { instance = new DefaultScribeClient(kit, KIT_NAME, sessionManagers, guestSessionProvider, idManager); }}package com twitter sdk android core;import android app Activity;import io fabric sdk android Fabric;import io fabric sdk android FabricAndroidTestCase;import io fabric sdk android FabricTestUtils;import io fabric sdk android KitStub;import java util Arrays;import java util List;import java util concurrent Callable;import java util concurrent ExecutorService;import java util concurrent Executors;import java util concurrent Future;import javax net ssl SSLSocketFactory;import static org mockito Mockito mock;import static org mockito Mockito when;public class TwitterCoreTest extends FabricAndroidTestCase { private static final String TWITTER_NOT_INIT_ERROR_MSG = "Must start Twitter Kit with Fabric with() first"; private static final String FABRIC_NOT_INIT_ERROR_MSG = "Must Initialize Fabric before using singleton()"; private TwitterCore twitterCore; @Override protected void setUp() throws Exception { super setUp(); twitterCore = new TwitterCore(new TwitterAuthConfig("", "")); } @Override protected void tearDown() throws Exception { super tearDown(); FabricTestUtils resetFabric(); } public void testLogOut_noSdkStart() { try { TwitterCore getInstance() logOut(); fail("Should fail if Fabric is not instantiated "); } catch (IllegalStateException ex) { assertEquals(FABRIC_NOT_INIT_ERROR_MSG, ex getMessage()); } } public void testLogOut_sdkStartNoTwitterKit() throws Exception { FabricTestUtils with(getContext(), new KitStub<Result>()); try { TwitterCore getInstance() logOut(); fail("Should fail if Twitter is not instantiated with Fabric "); } catch (IllegalStateException ie) { assertEquals(TWITTER_NOT_INIT_ERROR_MSG, ie getMessage()); } } public void testLogIn_noSdkStart() { final Callback<TwitterSession> mockCallback = mock(Callback class); try { TwitterCore getInstance() logIn(mock(Activity class), mockCallback); fail("Should fail if Fabric is not instantiated "); } catch (IllegalStateException ie) { assertEquals(FABRIC_NOT_INIT_ERROR_MSG, ie getMessage()); } } public void testLogIn_sdkStartNoTwitterKit() throws Exception { FabricTestUtils with(getContext(), new KitStub<Result>()); final Callback<TwitterSession> mockCallback = mock(Callback class); try { TwitterCore getInstance() logIn(mock(Activity class), mockCallback); fail("Should fail if Twitter is not instantiated with Fabric "); } catch (IllegalStateException ie) { assertEquals(TWITTER_NOT_INIT_ERROR_MSG, ie getMessage()); } } public void testGuestSessionManager_noSdkStart() { try { TwitterCore getInstance() getGuestSessionProvider(); fail("Should fail if Fabric is not instantiated "); } catch (IllegalStateException ie) { assertEquals(FABRIC_NOT_INIT_ERROR_MSG, ie getMessage()); } } public void testGuestSessionManager_sdkStartNoTwitterKit() throws Exception { FabricTestUtils with(getContext(), new KitStub<Result>()); try { TwitterCore getInstance() getGuestSessionProvider(); fail("Should fail if Twitter is not instantiated with Fabric "); } catch (IllegalStateException ie) { assertEquals(TWITTER_NOT_INIT_ERROR_MSG, ie getMessage()); } } public void testGetIdentifier() { final String identifier = BuildConfig GROUP + ":" + BuildConfig ARTIFACT_ID; assertEquals(identifier, twitterCore getIdentifier()); } public void testGetSSLSocketFactory_noSdkStart() { try { twitterCore getSSLSocketFactory(); fail("Should fail if Fabric is not instantiated "); } catch (IllegalStateException ex) { assertEquals(FABRIC_NOT_INIT_ERROR_MSG, ex getMessage()); } } public void testGetSSLSocketFactory_sdkStartNoTwitterKit() throws Exception { FabricTestUtils with(getContext(), new KitStub<Result>()); try { twitterCore getSSLSocketFactory(); fail("Should fail if Twitter is not instantiated with Fabric "); } catch (IllegalStateException ex) { assertEquals(TWITTER_NOT_INIT_ERROR_MSG, ex getMessage()); } } public void testGetSessionManager() throws Exception { FabricTestUtils with(getContext(), twitterCore); assertNotNull(twitterCore getSessionManager()); } public void testGetSessionManager_twitterNotInitialized() throws Exception { FabricTestUtils with(getContext(), new KitStub()); try { twitterCore getSessionManager(); fail("Should fail if Twitter is not instantiated with Fabric "); } catch (IllegalStateException ex) { assertEquals(TWITTER_NOT_INIT_ERROR_MSG, ex getMessage()); } } public void testGetAppSessionManager() throws Exception { FabricTestUtils with(getContext(), twitterCore); assertNotNull(twitterCore getGuestSessionProvider()); } public void testGetAppSessionManager_twitterNotInitialized() throws Exception { FabricTestUtils with(getContext(), new KitStub()); try { twitterCore getGuestSessionProvider(); fail("Should fail if Twitter is not instantiated with Fabric "); } catch (IllegalStateException ex) { assertEquals(TWITTER_NOT_INIT_ERROR_MSG, ex getMessage()); } } public void testGetApiClient_activeSessionExists() throws Exception { FabricTestUtils with(getContext(), twitterCore); twitterCore twitterSessionManager = setUpSessionManager(mock(TwitterSession class)); assertNotNull(twitterCore getApiClient()); } public void testGetApiClient_twitterNotInitialized() throws Exception { FabricTestUtils with(getContext(), new KitStub<Result>()); try { twitterCore getApiClient(); fail("Should fail if Twitter is not instantiated with Fabric "); } catch (IllegalStateException ex) { assertEquals(TWITTER_NOT_INIT_ERROR_MSG, ex getMessage()); } } public void testGetApiClient_withSession() throws Exception { FabricTestUtils with(getContext(), twitterCore); assertNotNull(twitterCore getApiClient(mock(TwitterSession class))); } public void testGetApiClient_withSessionTwitterNotInitialized() throws Exception { FabricTestUtils with(getContext(), new KitStub<Result>()); try { twitterCore getApiClient(mock(TwitterSession class)); fail("Should fail if Twitter is not instantiated with Fabric "); } catch (IllegalStateException ex) { assertEquals(TWITTER_NOT_INIT_ERROR_MSG, ex getMessage()); } } public void testGetGuestApiClient_twitterNotInitialized() throws Exception { FabricTestUtils with(getContext(), new KitStub<Result>()); try { twitterCore getGuestApiClient(); fail("Should fail if Twitter is not instantiated with Fabric "); } catch (IllegalStateException ex) { assertEquals(TWITTER_NOT_INIT_ERROR_MSG, ex getMessage()); } } private <T extends Session> SessionManager<T> setUpSessionManager(T session) { final SessionManager<T> sessionManager = mock(SessionManager class); when(sessionManager getActiveSession()) thenReturn(session); return sessionManager; } public void testGetSSLSocketFactory_contention() throws Exception { // We don't want to use FabricTestUtils here because we want to test // this when onBackground is also running Fabric with(getContext(), twitterCore); final List<SSLSocketFactoryCallable> callables = Arrays asList( new SSLSocketFactoryCallable(twitterCore), new SSLSocketFactoryCallable(twitterCore)); final ExecutorService executorService = Executors newFixedThreadPool(callables size()); final List<Future<SSLSocketFactory>> socketFactories = executorService invokeAll(callables); assertNotNull(socketFactories get(0) get()); assertNotNull(socketFactories get(1) get()); assertSame(socketFactories get(0) get(), socketFactories get(1) get()); } private static class SSLSocketFactoryCallable implements Callable<SSLSocketFactory> { private TwitterCore twitter; protected SSLSocketFactoryCallable(TwitterCore twitter) { this twitter = twitter; } @Override public SSLSocketFactory call() { return twitter getSSLSocketFactory(); } }}package com twitter sdk android core;import java util concurrent ConcurrentHashMap;public final class TwitterCoreTestUtils { private TwitterCoreTestUtils() {} public static TwitterCore createTwitterCore(TwitterAuthConfig authConfig, ConcurrentHashMap<Session, TwitterApiClient> clients, TwitterApiClient guestClient) { return new TwitterCore(authConfig, clients, guestClient); }}package com twitter sdk android core;public class TwitterException extends RuntimeException { public TwitterException(String detailMessage) { super(detailMessage); } public TwitterException(String detailMessage, Throwable throwable) { super(detailMessage, throwable); }}package com twitter sdk android unity;import android app Activity;import android content Intent;import android net Uri;import com google gson Gson;import com twitter sdk android core TwitterCore;import com twitter sdk android core TwitterSession;import com twitter sdk android core TwitterSessionHelper;import com twitter sdk android tweetcomposer Card;import com twitter sdk android tweetcomposer ComposerActivity;import com unity3d player UnityPlayer;public class TwitterKit { public static final String GAME_OBJECT_NAME = "TwitterGameObject"; public static final String EXTRA_TWITTER_SESSION = "EXTRA_TWITTER_SESSION";  public static void login() { final Activity currentActivity = UnityPlayer currentActivity; final Intent intent = new Intent(currentActivity, LoginActivity class); currentActivity startActivity(intent); }  public static void requestEmail(String session) { final Activity currentActivity = UnityPlayer currentActivity; final Intent intent = new Intent(currentActivity, RequestEmailActivity class); intent putExtra(EXTRA_TWITTER_SESSION, session); currentActivity startActivity(intent); }  public static void logout() { TwitterCore getInstance() logOut(); }  public static String session() { final TwitterSession session = TwitterCore getInstance() getSessionManager()  getActiveSession(); return TwitterSessionHelper serialize(session); }  public static void compose(String session, String config, String[] hashtags) { final Activity currentActivity = UnityPlayer currentActivity; final CardConfig cardConfig = new Gson() fromJson(config, CardConfig class); final Card card = new Card AppCardBuilder(currentActivity)  imageUri(Uri parse(cardConfig imageUri))  googlePlayId(cardConfig appGooglePlayId)  iPadId(cardConfig appIPadId)  iPhoneId(cardConfig appIPhoneId)  build(); final Intent intent = new ComposerActivity Builder(currentActivity)  session(TwitterSessionHelper deserialize(session))  card(card)  hashtags(hashtags)  createIntent(); currentActivity startActivity(intent); } static class CardConfig { final public String appIPhoneId; final public String appIPadId; final public String appGooglePlayId; final public String imageUri; CardConfig(String imageUri, String appGooglePlayId, String appIPadId, String appIPhoneId) { this imageUri = imageUri; this appGooglePlayId = appGooglePlayId; this appIPadId = appIPadId; this appIPhoneId = appIPhoneId; } }}package com twitter sdk android tweetui;import com twitter sdk android core Callback;import com twitter sdk android core TwitterCore;import com twitter sdk android core models Tweet;import java util List;import retrofit2 Call;public class TwitterListTimeline extends BaseTimeline implements Timeline<Tweet> { private static final String SCRIBE_SECTION = "list"; final Long listId; final String slug; final String ownerScreenName; final Long ownerId; final Integer maxItemsPerRequest; final Boolean includeRetweets; TwitterListTimeline(TweetUi tweetUi, Long listId, String slug, Long ownerId, String ownerScreenName, Integer maxItemsPerRequest, Boolean includeRetweets) { super(tweetUi); this listId = listId; this slug = slug; this ownerId = ownerId; this ownerScreenName = ownerScreenName; this maxItemsPerRequest = maxItemsPerRequest; this includeRetweets = includeRetweets; }  @Override public void next(Long sinceId, Callback<TimelineResult<Tweet>> cb) { createListTimelineRequest(sinceId, null) enqueue(new TweetsCallback(cb)); }  @Override public void previous(Long maxId, Callback<TimelineResult<Tweet>> cb) { // lists/statuses api provides results which are inclusive of the maxId, decrement the // maxId to get exclusive results createListTimelineRequest(null, decrementMaxId(maxId)) enqueue(new TweetsCallback(cb)); } Call<List<Tweet>> createListTimelineRequest(final Long sinceId, final Long maxId) { return TwitterCore getInstance() getApiClient() getListService() statuses(listId, slug, ownerScreenName, ownerId, sinceId, maxId, maxItemsPerRequest, true, includeRetweets); } @Override String getTimelineType() { return SCRIBE_SECTION; }  public static class Builder { private final TweetUi tweetUi; private Long listId; private String slug; private Long ownerId; private String ownerScreenName; private Integer maxItemsPerRequest = 30; private Boolean includeRetweets;  public Builder() { this(TweetUi getInstance()); }  public Builder(TweetUi tweetUi) { if (tweetUi == null) { throw new IllegalArgumentException("TweetUi instance must not be null"); } this tweetUi = tweetUi; }  public Builder id(Long id) { this listId = id; return this; }  public Builder slugWithOwnerId(String slug, Long ownerId) { this slug = slug; this ownerId = ownerId; return this; }  public Builder slugWithOwnerScreenName(String slug, String ownerScreenName) { this slug = slug; this ownerScreenName = ownerScreenName; return this; }  public Builder maxItemsPerRequest(Integer maxItemsPerRequest) { this maxItemsPerRequest = maxItemsPerRequest; return this; }  public Builder includeRetweets(Boolean includeRetweets) { this includeRetweets = includeRetweets; return this; }  public TwitterListTimeline build() { // user must provide either an id or slug, not both if (!(listId == null ^ slug == null)) { throw new IllegalStateException("must specify either a list id or slug/owner pair"); } // user provides a slug, but ownerId and ownerScreenName are null if (slug != null && ownerId == null && ownerScreenName == null) { throw new IllegalStateException( "slug/owner pair must set owner via ownerId or ownerScreenName"); } return new TwitterListTimeline(tweetUi, listId, slug, ownerId, ownerScreenName, maxItemsPerRequest, includeRetweets); } }}package com twitter sdk android core identity;import android app Activity;import android annotation TargetApi;import android content Context;import android content Intent;import android content res Resources;import android graphics Typeface;import android os Build;import android util AttributeSet;import android util TypedValue;import android view View;import android widget Button;import com twitter sdk android core Callback;import com twitter sdk android core R;import com twitter sdk android core TwitterCore;import com twitter sdk android core TwitterSession;import io fabric sdk android Fabric;import java lang ref WeakReference;import io fabric sdk android services common CommonUtils;public class TwitterLoginButton extends Button { final static String TAG = TwitterCore TAG; static final String ERROR_MSG_NO_ACTIVITY = "TwitterLoginButton requires an activity " + " Override getActivity to provide the activity for this button "; final WeakReference<Activity> activityRef; volatile TwitterAuthClient authClient; OnClickListener onClickListener; Callback<TwitterSession> callback; public TwitterLoginButton(Context context) { this(context, null); } public TwitterLoginButton(Context context, AttributeSet attrs) { this(context, attrs, android R attr buttonStyle); } public TwitterLoginButton(Context context, AttributeSet attrs, int defStyle) { this(context, attrs, defStyle, null); } TwitterLoginButton(Context context, AttributeSet attrs, int defStyle, TwitterAuthClient authClient) { super(context, attrs, defStyle); this activityRef = new WeakReference<>(getActivity()); this authClient = authClient; setupButton(); checkTwitterCoreAndEnable(); } @TargetApi(Build VERSION_CODES LOLLIPOP) private void setupButton() { final Resources res = getResources(); super setCompoundDrawablesWithIntrinsicBounds( res getDrawable(R drawable tw__ic_logo_default), null, null, null); super setCompoundDrawablePadding( res getDimensionPixelSize(R dimen tw__login_btn_drawable_padding)); super setText(R string tw__login_btn_txt); super setTextColor(res getColor(R color tw__solid_white)); super setTextSize(TypedValue COMPLEX_UNIT_PX, res getDimensionPixelSize(R dimen tw__login_btn_text_size)); super setTypeface(Typeface DEFAULT_BOLD); super setPadding(res getDimensionPixelSize(R dimen tw__login_btn_left_padding), 0, res getDimensionPixelSize(R dimen tw__login_btn_right_padding), 0); super setBackgroundResource(R drawable tw__login_btn); super setOnClickListener(new LoginClickListener()); if (Build VERSION SDK_INT >= Build VERSION_CODES LOLLIPOP) { super setAllCaps(false); } }  public void setCallback(Callback<TwitterSession> callback) { if (callback == null) { throw new IllegalArgumentException("Callback cannot be null"); } this callback = callback; }  public Callback<TwitterSession> getCallback() { return callback; }  public void onActivityResult(int requestCode, int resultCode, Intent data) { if (requestCode == getTwitterAuthClient() getRequestCode()) { getTwitterAuthClient() onActivityResult(requestCode, resultCode, data); } }  protected Activity getActivity() { if (getContext() instanceof Activity) { return (Activity) getContext(); } else if (isInEditMode()) { return null; } else { throw new IllegalStateException(ERROR_MSG_NO_ACTIVITY); } } @Override public void setOnClickListener(OnClickListener onClickListener) { this onClickListener = onClickListener; } private class LoginClickListener implements OnClickListener { @Override public void onClick(View view) { checkCallback(callback); checkActivity(activityRef get()); getTwitterAuthClient() authorize(activityRef get(), callback); if (onClickListener != null) { onClickListener onClick(view); } } private void checkCallback(Callback callback) { if (callback == null) { CommonUtils logOrThrowIllegalStateException(TwitterCore TAG, "Callback must not be null, did you call setCallback?"); } } private void checkActivity(Activity activity) { if (activity == null || activity isFinishing()) { CommonUtils logOrThrowIllegalStateException(TwitterCore TAG, ERROR_MSG_NO_ACTIVITY); } } } TwitterAuthClient getTwitterAuthClient() { if (authClient == null) { synchronized (TwitterLoginButton class) { if (authClient == null) { authClient = new TwitterAuthClient(); } } } return authClient; } private void checkTwitterCoreAndEnable() { //Default (Enabled) in edit mode if (isInEditMode()) return; try { TwitterCore getInstance(); } catch (IllegalStateException ex) { //Disable if TwitterCore hasn't started Fabric getLogger() e(TAG, ex getMessage()); setEnabled(false); } }}package com twitter sdk android core identity;import android app Activity;import android content Intent;import android util Log;import android view View;import io fabric sdk android Fabric;import io fabric sdk android FabricAndroidTestCase;import io fabric sdk android FabricTestUtils;import io fabric sdk android KitStub;import io fabric sdk android Logger;import com twitter sdk android core Callback;import com twitter sdk android core TwitterAuthConfig;import com twitter sdk android core TwitterCore;import com twitter sdk android core TwitterSession;import org mockito ArgumentCaptor;import static org mockito Mockito *;public class TwitterLoginButtonTest extends FabricAndroidTestCase { private static final int TEST_REQUEST_CODE = 100; private Activity mockActivity; private TwitterAuthClient mockAuthClient; private Callback<TwitterSession> mockCallback; private View OnClickListener mockViewClickListener; private TwitterLoginButton loginButton; @Override protected void setUp() throws Exception { super setUp(); mockActivity = mock(Activity class); mockAuthClient = mock(TwitterAuthClient class); when(mockAuthClient getRequestCode()) thenReturn(TEST_REQUEST_CODE); doNothing() when(mockAuthClient) authorize(any(Activity class), any(Callback class)); doNothing() when(mockAuthClient) onActivityResult(anyInt(), anyInt(), any(Intent class)); mockCallback = mock(Callback class); mockViewClickListener = mock(View OnClickListener class); loginButton = new TwitterLoginButton(getContext(), null, 0, mockAuthClient) { // This is to allow us to test TwitterLoginButton without having to set up a real // activity  @Override protected Activity getActivity() { return mockActivity; } }; } public void testConstructor_contextNotActivity() { try { loginButton = new TwitterLoginButton(getContext(), null, 0, mockAuthClient); fail("Constructor should throw an exception when provided context is not an activity"); } catch (IllegalStateException e) { assertEquals(TwitterLoginButton ERROR_MSG_NO_ACTIVITY, e getMessage()); } } public void testConstructor_contextNotActivityEditModeTrue() { loginButton = new TwitterLoginButton(getContext(), null, 0, mockAuthClient) { @Override public boolean isInEditMode() { return true; } }; assertNull(loginButton getActivity()); } public void testConstructor_nullTwitterAuthClient() { final TwitterLoginButton button = new TwitterLoginButton(getContext()) { @Override protected Activity getActivity() { return mock(Activity class); } }; assertNull(button authClient); } public void testConstructor_editMode() throws Exception { final TwitterLoginButton button = new TwitterLoginButton(getContext()) { @Override protected Activity getActivity() { return mock(Activity class); } @Override public boolean isInEditMode() { return true; } }; assertTrue(button isEnabled()); } public void testConstructor_twitterNotStarted() throws Exception { try { final Fabric fabric = new Fabric Builder(getContext())  debuggable(true)  logger(mock(Logger class))  kits(new KitStub())  build(); FabricTestUtils with(fabric); final TwitterLoginButton button = new TwitterLoginButton(getContext()) { @Override protected Activity getActivity() { return mock(Activity class); } }; final Logger logger = Fabric getLogger(); verify(logger) e(eq(TwitterLoginButton TAG), eq("Must start Twitter Kit with Fabric with() first")); assertFalse(button isEnabled()); } finally { FabricTestUtils resetFabric(); } } public void testConstructor_twitterStarted() throws Exception { try { final Fabric fabric = new Fabric Builder(getContext())  debuggable(true)  kits(new TwitterCore(new TwitterAuthConfig("", "")))  logger(mock(Logger class))  build(); FabricTestUtils with(fabric); final TwitterLoginButton button = new TwitterLoginButton(getContext()) { @Override protected Activity getActivity() { return mock(Activity class); } }; final Logger logger = Fabric getLogger(); verify(logger, never()) e(eq(TwitterLoginButton TAG), eq("Must start Twitter Kit with Fabric with() first")); assertTrue(button isEnabled()); } finally { FabricTestUtils resetFabric(); } } public void testSetCallback_callbackNull() { try { loginButton setCallback(null); fail("setCallback should throw an exception when called with null callback"); } catch (IllegalArgumentException e) { assertEquals("Callback cannot be null", e getMessage()); } } public void testGetCallback() { final Callback<TwitterSession> mockCallback = mock(Callback class); loginButton setCallback(mockCallback); assertSame(mockCallback, loginButton getCallback()); } public void testOnClick() { loginButton setCallback(mockCallback); loginButton performClick(); verify(mockAuthClient) authorize(eq(mockActivity), eq(mockCallback)); } public void testOnClick_withOnClickListener() { loginButton setCallback(mockCallback); loginButton setOnClickListener(mockViewClickListener); loginButton performClick(); verify(mockAuthClient) authorize(eq(mockActivity), eq(mockCallback)); verify(mockViewClickListener) onClick(eq(loginButton)); } public void testOnClick_callbackNullDebuggableTrue() throws Exception { final Fabric fabric = new Fabric Builder(getContext())  kits(new KitStub())  debuggable(true)  build(); FabricTestUtils with(fabric); try { loginButton performClick(); fail("onClick should throw an exception when called and there is no callback"); } catch (IllegalStateException e) { assertEquals("Callback must not be null, did you call setCallback?", e getMessage()); } finally { FabricTestUtils resetFabric(); } } public void testOnClick_callbackNullDebuggableFalse() throws Exception { final Fabric fabric = setUpLogTest(); FabricTestUtils with(fabric); try { loginButton performClick(); assertLogMessage("Callback must not be null, did you call setCallback?"); } finally { FabricTestUtils resetFabric(); } } public void testOnClick_activityNullDebuggableTrue() throws Exception { final Fabric fabric = new Fabric Builder(getContext())  kits(new KitStub())  debuggable(true)  build(); FabricTestUtils with(fabric); loginButton = new TwitterLoginButton(getContext(), null, 0, mockAuthClient) { // This is to allow us to test TwitterLoginButton without having to set up a real // activity  @Override protected Activity getActivity() { return null; } }; loginButton setCallback(mockCallback); try { loginButton performClick(); fail("onClick should throw an exception when called and there is no activity"); } catch (IllegalStateException e) { assertEquals(TwitterLoginButton ERROR_MSG_NO_ACTIVITY, e getMessage()); } finally { FabricTestUtils resetFabric(); } } public void testOnClick_activityNullDebuggableFalse() throws Exception { final Fabric fabric = setUpLogTest(); FabricTestUtils with(fabric); loginButton = new TwitterLoginButton(getContext(), null, 0, mockAuthClient) { // This is to allow us to test TwitterLoginButton without having to set up a real // activity  @Override protected Activity getActivity() { return null; } }; loginButton setCallback(mockCallback); try { loginButton performClick(); assertLogMessage(TwitterLoginButton ERROR_MSG_NO_ACTIVITY); } finally { FabricTestUtils resetFabric(); } } public void testOnClick_activityFinishingDebuggableFalse() throws Exception { final Fabric fabric = setUpLogTest(); FabricTestUtils with(fabric); loginButton = new TwitterLoginButton(getContext(), null, 0, mockAuthClient) { // This is to allow us to test TwitterLoginButton without having to set up a real // activity  @Override protected Activity getActivity() { final Activity mockActivity = mock(Activity class); when(mockActivity isFinishing()) thenReturn(true); return mockActivity; } }; loginButton setCallback(mockCallback); try { loginButton performClick(); assertLogMessage(TwitterLoginButton ERROR_MSG_NO_ACTIVITY); } finally { FabricTestUtils resetFabric(); } } private Fabric setUpLogTest() { final Logger mockLogger = mock(Logger class); when(mockLogger isLoggable(TwitterCore TAG, Log WARN)) thenReturn(true); final Fabric fabric = new Fabric Builder(getContext())  kits(new KitStub())  debuggable(false)  logger(mockLogger)  build(); return fabric; } private void assertLogMessage(String expectedMessage) { final ArgumentCaptor<String> argumentCaptor = ArgumentCaptor forClass(String class); verify(Fabric getLogger()) w(eq(TwitterCore TAG), argumentCaptor capture()); assertEquals(expectedMessage, argumentCaptor getValue()); } public void testOnActivityResult_requestCodeMatches() { final int requestCode = TEST_REQUEST_CODE; final int resultCode = Activity RESULT_OK; final Intent mockData = mock(Intent class); loginButton onActivityResult(requestCode, resultCode, mockData); verify(mockAuthClient) getRequestCode(); verify(mockAuthClient) onActivityResult(requestCode, resultCode, mockData); } public void testOnActivityResult_requestCodeDoesNotMatch() { final int requestCode = -1; final int resultCode = Activity RESULT_OK; final Intent mockData = mock(Intent class); loginButton onActivityResult(requestCode, resultCode, mockData); verify(mockAuthClient) getRequestCode(); verifyNoMoreInteractions(mockAuthClient); } public void testGetTwitterAuthClient() throws Exception { try { final Fabric fabric = new Fabric Builder(getContext())  kits(new TwitterCore(new TwitterAuthConfig("", "")))  build(); FabricTestUtils with(fabric); final TwitterLoginButton button = new TwitterLoginButton(getContext()) { @Override protected Activity getActivity() { return mock(Activity class); } }; final TwitterAuthClient client = button getTwitterAuthClient(); assertNotNull(client); } finally { FabricTestUtils resetFabric(); } } public void testGetTwitterAuthClient_duplicateCalls() throws Exception { try { final Fabric fabric = new Fabric Builder(getContext())  kits(new TwitterCore(new TwitterAuthConfig("", "")))  build(); FabricTestUtils with(fabric); final TwitterLoginButton button = new TwitterLoginButton(getContext()) { @Override protected Activity getActivity() { return mock(Activity class); } }; final TwitterAuthClient client = button getTwitterAuthClient(); final TwitterAuthClient client2 = button getTwitterAuthClient(); assertSame(client, client2); } finally { FabricTestUtils resetFabric(); } }}package com twitter sdk android mopub;import android app Activity;import android support annotation NonNull;import android support annotation Nullable;import android text TextUtils;import android widget Adapter;import com mopub nativeads MoPubAdAdapter;import com mopub nativeads MoPubNativeAdPositioning;import com mopub nativeads RequestParameters;public class TwitterMoPubAdAdapter extends MoPubAdAdapter{ private final static String TWITTERKIT_KEYWORD = "src:twitterkit";  public TwitterMoPubAdAdapter(Activity activity, Adapter originalAdapter) { super(activity, originalAdapter); }  public TwitterMoPubAdAdapter(Activity activity, Adapter originalAdapter, MoPubNativeAdPositioning MoPubServerPositioning adPositioning) { super(activity, originalAdapter, adPositioning); }  public TwitterMoPubAdAdapter(Activity activity, Adapter originalAdapter, MoPubNativeAdPositioning MoPubClientPositioning adPositioning) { super(activity, originalAdapter, adPositioning); } @Override public void loadAds(@NonNull final String adUnitId) { loadAds(adUnitId, null); } @Override public void loadAds(@NonNull final String adUnitId, @Nullable final RequestParameters requestParams) { final RequestParameters Builder builder = new RequestParameters Builder(); if (requestParams != null) { final String keywords = TextUtils isEmpty(requestParams getKeywords()) ? TWITTERKIT_KEYWORD : requestParams getKeywords() + "," + TWITTERKIT_KEYWORD; builder keywords(keywords); builder location(requestParams getLocation()); } else { builder keywords(TWITTERKIT_KEYWORD); } super loadAds(adUnitId, builder build()); }}package com twitter sdk android core;import android content Context;import io fabric sdk android services network PinningInfoProvider;import java io InputStream;import java util Collection;import java util HashMap;class TwitterPinningInfoProvider implements PinningInfoProvider { private static final String[] PINS; static { final HashMap<String, String> pinMap = new HashMap<>(); pinMap put("VERISIGN_CLASS1", "2343d148a255899b947d461a797ec04cfed170b7"); pinMap put("VERISIGN_CLASS1_G3", "5519b278acb281d7eda7abc18399c3bb690424b5"); pinMap put("VERISIGN_CLASS2_G2", "1237ba4517eead2926fdc1cdfebeedf2ded9145c"); pinMap put("VERISIGN_CLASS2_G3", "5abec575dcaef3b08e271943fc7f250c3df661e3"); pinMap put("VERISIGN_CLASS3_G2", "1a21b4952b6293ce18b365ec9c0e934cb381e6d4"); pinMap put("VERISIGN_CLASS3_G3", "22f19e2ec6eaccfc5d2346f4c2e8f6c554dd5e07"); pinMap put("VERISIGN_CLASS3_G4", "ed663135d31bd4eca614c429e319069f94c12650"); pinMap put("VERISIGN_CLASS3_G5", "b181081a19a4c0941ffae89528c124c99b34acc7"); pinMap put("VERISIGN_CLASS4_G3", "3c03436868951cf3692ab8b426daba8fe922e5bd"); pinMap put("VERISIGN_UNIVERSAL", "bbc23e290bb328771dad3ea24dbdf423bd06b03d"); pinMap put("GEOTRUST_GLOBAL", "c07a98688d89fbab05640c117daa7d65b8cacc4e"); pinMap put("GEOTRUST_GLOBAL2", "713836f2023153472b6eba6546a9101558200509"); pinMap put("GEOTRUST_PRIMARY", "b01989e7effb4aafcb148f58463976224150e1ba"); pinMap put("GEOTRUST_PRIMARY_G2", "bdbea71bab7157f9e475d954d2b727801a822682"); pinMap put("GEOTRUST_PRIMARY_G3", "9ca98d00af740ddd8180d21345a58b8f2e9438d6"); pinMap put("GEOTRUST_UNIVERAL", "87e85b6353c623a3128cb0ffbbf551fe59800e22"); pinMap put("GEOTRUST_UNIVERSAL2", "5e4f538685dd4f9eca5fdc0d456f7d51b1dc9b7b"); pinMap put("DIGICERT_GLOBAL_ROOT", "d52e13c1abe349dae8b49594ef7c3843606466bd"); pinMap put("DIGICERT_EV_ROOT", "83317e62854253d6d7783190ec919056e991b9e3"); pinMap put("DIGICERT_ASSUREDID_ROOT", "68330e61358521592983a3c8d2d2e1406e7ab3c1"); pinMap put("TWITTER1", "56fef3c2147d4ed38837fdbd3052387201e5778d"); final Collection<String> values = pinMap values(); PINS = values toArray(new String[values size()]); } private final Context appContext; public TwitterPinningInfoProvider(Context context) { appContext = context getApplicationContext(); } @Override public InputStream getKeyStoreStream() { return appContext getResources() openRawResource(R raw tw__cacerts); } @Override public String getKeyStorePassword() { // keystore required to have a password, but these certificates are public return "changeit"; } @Override public String[] getPins() { return PINS; } @Override public long getPinCreationTimeInMillis() { return BuildConfig BUILD_TIME; }}package com twitter sdk android core;import okhttp3 Headers;public class TwitterRateLimit { private final static String LIMIT_KEY = "x-rate-limit-limit"; private final static String REMAINING_KEY = "x-rate-limit-remaining"; private final static String RESET_KEY = "x-rate-limit-reset"; private int requestLimit; private int remainingRequest; private long resetSeconds; TwitterRateLimit(final Headers headers) { if (headers == null) { throw new IllegalArgumentException("headers must not be null"); } for (int i = 0; i < headers size(); i++) { if (LIMIT_KEY equals(headers name(i))) { requestLimit = Integer valueOf(headers value(i)); } else if (REMAINING_KEY equals(headers name(i))) { remainingRequest = Integer valueOf(headers value(i)); } else if (RESET_KEY equals(headers name(i))) { resetSeconds = Long valueOf(headers value(i)); } } }  public int getLimit() { return requestLimit; }  public int getRemaining() { return remainingRequest; }  public long getReset() { return resetSeconds; }}package com twitter sdk android core;import android text TextUtils;import io fabric sdk android Fabric;import io fabric sdk android services persistence SerializationStrategy;import com google gson annotations SerializedName;import com google gson Gson;public class TwitterSession extends Session<TwitterAuthToken> { public static final long UNKNOWN_USER_ID = -1L; public static final String UNKNOWN_USER_NAME = ""; @SerializedName("user_name") private final String userName;  public TwitterSession(TwitterAuthToken authToken, long userId, String userName) { super(authToken, userId); this userName = userName; } public long getUserId() { return getId(); } public String getUserName() { return userName; } @Override public boolean equals(Object o) { if (this == o) return true; if (o == null || getClass() != o getClass()) return false; if (!super equals(o)) return false; final TwitterSession that = (TwitterSession) o; return userName != null ? userName equals(that userName) : that userName == null; } @Override public int hashCode() { int result = super hashCode(); result = 31 * result + (userName != null ? userName hashCode() : 0); return result; } static class Serializer implements SerializationStrategy<TwitterSession> { private final Gson gson; public Serializer() { this gson = new Gson(); } @Override public String serialize(TwitterSession session) { if (session != null && session getAuthToken() != null) { try { return gson toJson(session); } catch (Exception e) { Fabric getLogger() d(TwitterCore TAG, e getMessage()); } } return ""; } @Override public TwitterSession deserialize(String serializedSession) { if (!TextUtils isEmpty(serializedSession)) { try { return gson fromJson(serializedSession, TwitterSession class); } catch (Exception e) { Fabric getLogger() d(TwitterCore TAG, e getMessage()); } } return null; } }}package com twitter sdk android core;public class TwitterSessionHelper { public static String serialize(TwitterSession session) { final TwitterSession Serializer serializer = new TwitterSession Serializer(); return serializer serialize(session); } public static TwitterSession deserialize(String session) { final TwitterSession Serializer serializer = new TwitterSession Serializer(); return serializer deserialize(session); }}package com twitter sdk android core internal;import com twitter sdk android core TwitterApiClient;import com twitter sdk android core TwitterSession;import com twitter sdk android core internal scribe DefaultScribeClient;import com twitter sdk android core internal scribe EventNamespace;import com twitter sdk android core internal scribe TwitterCoreScribeClientHolder;import com twitter sdk android core services AccountService;import java io IOException;public class TwitterSessionVerifier implements SessionVerifier<TwitterSession> { static final String SCRIBE_CLIENT = "android"; static final String SCRIBE_PAGE = "credentials"; static final String SCRIBE_SECTION = ""; // intentionally blank static final String SCRIBE_COMPONENT = ""; // intentionally blank static final String SCRIBE_ELEMENT = ""; // intentionally blank static final String SCRIBE_ACTION = "impression"; private final AccountServiceProvider accountServiceProvider; private final DefaultScribeClient scribeClient; public TwitterSessionVerifier() { this accountServiceProvider = new AccountServiceProvider(); this scribeClient = TwitterCoreScribeClientHolder getScribeClient(); } TwitterSessionVerifier(AccountServiceProvider accountServiceProvider, DefaultScribeClient scribeClient) { this accountServiceProvider = accountServiceProvider; this scribeClient = scribeClient; }  public void verifySession(final TwitterSession session) { final AccountService accountService = accountServiceProvider getAccountService(session); try { scribeVerifySession(); accountService verifyCredentials(true, false) execute(); } catch (IOException | RuntimeException e) { // We ignore failures since we will attempt the verification again the next time // the verification period comes up  This has the potential to lose events, but we // are not aiming towards 100% capture rate  } } private void scribeVerifySession() { if (scribeClient == null) return; final EventNamespace ns = new EventNamespace Builder()  setClient(SCRIBE_CLIENT)  setPage(SCRIBE_PAGE)  setSection(SCRIBE_SECTION)  setComponent(SCRIBE_COMPONENT)  setElement(SCRIBE_ELEMENT)  setAction(SCRIBE_ACTION)  builder(); scribeClient scribe(ns); }  protected static class AccountServiceProvider { public AccountService getAccountService(TwitterSession session) { return new TwitterApiClient(session) getAccountService(); } }}package com twitter sdk android mopub;import android content Context;import android content res TypedArray;import android graphics drawable Drawable;import android graphics drawable GradientDrawable;import android graphics drawable LayerDrawable;import android graphics drawable ShapeDrawable;import android graphics drawable StateListDrawable;import android graphics drawable shapes RectShape;import android os Build;import android util AttributeSet;import android view LayoutInflater;import android widget FrameLayout;import android widget ImageView;import android widget LinearLayout;import android widget RelativeLayout;import android widget TextView;import com twitter sdk android mopub internal RoundedImageView;public class TwitterStaticNativeAd extends FrameLayout { LinearLayout containerLayout; RoundedImageView mainImageView; RelativeLayout cardLayout; ImageView adIconView; TextView adTitleView; TextView adTextView; TextView callToActionView; ImageView privacyInfoView; // style colors int containerBackgroundColor; int cardBackgroundColor; int primaryTextColor; int ctaBackgroundColor; int cardBorderColor; private static final int DEFAULT_AD_STYLE = R style tw__ad_LightStyle; public TwitterStaticNativeAd(Context context) { this(context, null); } public TwitterStaticNativeAd(Context context, AttributeSet attrs) { this(context, attrs, DEFAULT_AD_STYLE); } public TwitterStaticNativeAd(Context context, AttributeSet attrs, int styleResId) { super(context, attrs); findSubviews(); initAttributes(styleResId); setStyleAttributes(); } private void findSubviews() { LayoutInflater from(getContext()) inflate(R layout tw__native_ad, this, true); containerLayout = (LinearLayout) findViewById(R id tw__ad_mopub_layout); mainImageView = (RoundedImageView) findViewById(R id native_ad_main_image); cardLayout = (RelativeLayout) findViewById(R id native_ad_card); adIconView = (ImageView) findViewById(R id native_ad_icon_image); adTitleView = (TextView) findViewById(R id native_ad_title); adTextView = (TextView) findViewById(R id native_ad_text); callToActionView = (TextView) findViewById(R id native_ad_cta); privacyInfoView = (ImageView) findViewById(R id native_ad_privacy_info_icon_image); } private void initAttributes(int styleResId) { final TypedArray a = getContext() getTheme() obtainStyledAttributes(styleResId, R styleable tw__native_ad); try { readStyleAttributes(a); } finally { a recycle(); } } private void readStyleAttributes(TypedArray typedArray) { containerBackgroundColor = typedArray getColor( R styleable tw__native_ad_tw__ad_container_bg_color, getResources() getColor(R color tw__ad_light_container_bg_color)); cardBackgroundColor = typedArray getColor(R styleable tw__native_ad_tw__ad_card_bg_color, getResources() getColor(R color tw__ad_light_card_bg_color)); primaryTextColor = typedArray getColor( R styleable tw__native_ad_tw__ad_text_primary_color, getResources() getColor(R color tw__ad_light_text_primary_color)); ctaBackgroundColor = typedArray getColor( R styleable tw__native_ad_tw__ad_cta_button_color, getResources() getColor(R color tw__ad_cta_default)); } private void setStyleAttributes() { containerLayout setBackgroundColor(containerBackgroundColor); adTitleView setTextColor(primaryTextColor); adTextView setTextColor(primaryTextColor); final int adViewRadius = (int) getResources() getDimension(R dimen tw__ad_view_radius); mainImageView setCornerRadii(adViewRadius, adViewRadius, 0, 0); final TextView privacyTextView = (TextView) findViewById(R id native_ad_privacy_text); privacyTextView setTextColor( ColorUtils calculateContrastingColor(containerBackgroundColor)); setCardStyling(); setCallToActionStyling(); } private void setCardStyling() { final boolean isLightBg = ColorUtils isLightColor(containerBackgroundColor); if (isLightBg) { cardBorderColor = getResources() getColor(R color tw__ad_light_card_border_color); } else { cardBorderColor = getResources() getColor(R color tw__ad_dark_card_border_color); } final ShapeDrawable bgDrawable = new ShapeDrawable(new RectShape()); bgDrawable getPaint() setColor(cardBackgroundColor); final ShapeDrawable borderDrawable = new ShapeDrawable(new RectShape()); borderDrawable getPaint() setColor(cardBorderColor); final Drawable[] layers = new Drawable[2]; layers[0] = borderDrawable; layers[1] = bgDrawable; final LayerDrawable layerDrawable = new LayerDrawable(layers); layerDrawable setLayerInset(0, 0, 0, 0, 0); layerDrawable setLayerInset(1, 1, 0, 1, 0); if (Build VERSION SDK_INT >= Build VERSION_CODES JELLY_BEAN) { cardLayout setBackground(layerDrawable); } else { cardLayout setBackgroundDrawable(layerDrawable); } } private void setCallToActionStyling() { final int calculatedCTATextColor = ColorUtils calculateCtaTextColor(ctaBackgroundColor); callToActionView setTextColor(calculatedCTATextColor); // Setup StateListDrawable obj with two gradient drawables: // First is the selected item with lighter/darker bg color of original // Second is unselected item with the call to action background color // Also set the default ad view radius for bottomLeft and bottomRight corners final StateListDrawable stateListDrawable = new StateListDrawable(); final int adViewRadius = (int) getResources() getDimension(R dimen tw__ad_view_radius); final float[] ctaViewRadii = new float[]{ 0, 0, 0, 0, adViewRadius, adViewRadius, adViewRadius, adViewRadius}; final GradientDrawable selectedItem = new GradientDrawable(); selectedItem setCornerRadii(ctaViewRadii); final int ctaPressedBgColor = ColorUtils calculateCtaOnTapColor(ctaBackgroundColor); selectedItem setColor(ctaPressedBgColor); stateListDrawable addState(new int[]{android R attr state_pressed}, selectedItem); final GradientDrawable unselectedItem = new GradientDrawable(); unselectedItem setCornerRadii(ctaViewRadii); unselectedItem setColor(ctaBackgroundColor); stateListDrawable addState(new int[]{}, unselectedItem); if (Build VERSION SDK_INT >= Build VERSION_CODES JELLY_BEAN) { callToActionView setBackground(stateListDrawable); } else { callToActionView setBackgroundDrawable(stateListDrawable); } }}package com twitter sdk android mopub;import android app Activity;import android view View;import android view ViewGroup;import com mopub nativeads BaseNativeAd;import com mopub nativeads MoPubAdRenderer;import com mopub nativeads NativeImageHelper;import com mopub nativeads NativeRendererHelper;import com mopub nativeads StaticNativeAd;public class TwitterStaticNativeAdRenderer implements MoPubAdRenderer<StaticNativeAd> { private static final int DEFAULT_STYLE = R style tw__ad_LightStyle; private final int styleResId; public TwitterStaticNativeAdRenderer() { this styleResId = DEFAULT_STYLE; } public TwitterStaticNativeAdRenderer(int styleResId) { this styleResId = styleResId; } @Override public View createAdView(final Activity activity, final ViewGroup parent) { return new TwitterStaticNativeAd(activity, null, styleResId); } @Override public void renderAdView(final View view, final StaticNativeAd staticNativeAd) { update((TwitterStaticNativeAd) view, staticNativeAd); } @Override public boolean supports(final BaseNativeAd nativeAd) { return nativeAd instanceof StaticNativeAd; } private void update(final TwitterStaticNativeAd staticNativeView, final StaticNativeAd staticNativeAd) { NativeRendererHelper addTextView(staticNativeView adTitleView, staticNativeAd getTitle()); NativeRendererHelper addTextView(staticNativeView adTextView, staticNativeAd getText()); NativeRendererHelper addTextView(staticNativeView callToActionView, staticNativeAd getCallToAction()); NativeImageHelper loadImageView(staticNativeAd getMainImageUrl(), staticNativeView mainImageView); NativeImageHelper loadImageView(staticNativeAd getIconImageUrl(), staticNativeView adIconView); NativeRendererHelper addPrivacyInformationIcon( staticNativeView privacyInfoView, staticNativeAd getPrivacyInformationIconImageUrl(), staticNativeAd getPrivacyInformationIconClickThroughUrl()); }}package com twitter sdk android mopub;import android graphics Bitmap;import android graphics drawable Drawable;import android view View;import android view ViewGroup;import android widget ImageView;import android widget TextView;import com mopub nativeads BaseNativeAd;import com mopub nativeads MoPubCustomEventVideoNative;import com mopub nativeads StaticNativeAd;import com mopub network MaxWidthImageLoader;import com mopub network Networking;import com mopub volley toolbox ImageLoader;import com twitter sdk android mopub internal RoundedImageView;import org junit Before;import org junit Rule;import org junit Test;import org junit rules ExpectedException;import org junit runner RunWith;import org mockito Mock;import org mockito MockitoAnnotations;import org mockito invocation InvocationOnMock;import org mockito stubbing Answer;import org robolectric RobolectricGradleTestRunner;import org robolectric RuntimeEnvironment;import org robolectric annotation Config;import static org junit Assert assertFalse;import static org junit Assert assertTrue;import static org mockito Matchers any;import static org mockito Matchers anyString;import static org mockito Mockito doAnswer;import static org mockito Mockito doReturn;import static org mockito Mockito mock;import static org mockito Mockito verify;@RunWith(RobolectricGradleTestRunner class)@Config(constants = BuildConfig class, sdk = 21)public class TwitterStaticNativeAdRendererTest { private static final String TEST_TITLE = "title"; private static final String TEST_TEXT = "text"; private static final String TEST_CTA = "cta"; private static final String TEST_URL = "https://twitter com"; private TwitterStaticNativeAdRenderer twitterStaticNativeAdRenderer; private StaticNativeAd staticNativeAd; private TwitterStaticNativeAd twitterStaticNativeAd; @Mock private ViewGroup viewGroup; @Mock private MaxWidthImageLoader mockImageLoader; @Mock private ImageLoader ImageContainer mockImageContainer; @Mock private Bitmap mockBitmap; @Rule public ExpectedException thrown = ExpectedException none(); @Before public void setUp() throws Exception { MockitoAnnotations initMocks(this); Networking setImageLoaderForTesting(mockImageLoader); doReturn(mockBitmap) when(mockImageContainer) getBitmap(); doAnswer(new Answer<Void>() { @Override public Void answer(InvocationOnMock invocation) throws Throwable { final Object[] args = invocation getArguments(); ((ImageLoader ImageListener) args[1]) onResponse(mockImageContainer, true); return null; } }) when(mockImageLoader) get(anyString(), any(ImageLoader ImageListener class)); twitterStaticNativeAdRenderer = new TwitterStaticNativeAdRenderer(); twitterStaticNativeAd = new TwitterStaticNativeAd(RuntimeEnvironment application); twitterStaticNativeAd adTextView = mock(TextView class); twitterStaticNativeAd adTitleView = mock(TextView class); twitterStaticNativeAd callToActionView = mock(TextView class); twitterStaticNativeAd mainImageView = mock(RoundedImageView class); twitterStaticNativeAd adIconView = mock(ImageView class); twitterStaticNativeAd privacyInfoView = mock(ImageView class); staticNativeAd = new StaticNativeAd() { }; staticNativeAd setTitle(TEST_TITLE); staticNativeAd setText(TEST_TEXT); staticNativeAd setCallToAction(TEST_CTA); staticNativeAd setClickDestinationUrl(TEST_URL); staticNativeAd setMainImageUrl(TEST_URL); staticNativeAd setIconImageUrl(TEST_URL); } @Test(expected = NullPointerException class) public void testCreateAdView_withNullContext_shouldThrowNPE() { twitterStaticNativeAdRenderer createAdView(null, viewGroup); } @Test(expected = NullPointerException class) public void testRenderAdView_withNullView_shouldThrowNPE() { twitterStaticNativeAdRenderer renderAdView(null, staticNativeAd); } @Test(expected = NullPointerException class) public void testRenderAdView_withNullNativeAd_shouldThrowNPE() { twitterStaticNativeAdRenderer renderAdView(twitterStaticNativeAd, null); } @Test public void testRenderAdView_shouldReturnPopulatedView() { twitterStaticNativeAdRenderer renderAdView(twitterStaticNativeAd, staticNativeAd); verify(twitterStaticNativeAd adTitleView) setText(TEST_TITLE); verify(twitterStaticNativeAd adTextView) setText(TEST_TEXT); verify(twitterStaticNativeAd callToActionView) setText(TEST_CTA); verify(twitterStaticNativeAd mainImageView) setImageBitmap(mockBitmap); verify(twitterStaticNativeAd adIconView) setImageBitmap(mockBitmap); verify(twitterStaticNativeAd privacyInfoView)  setImageDrawable(any(Drawable class)); verify(twitterStaticNativeAd privacyInfoView)  setOnClickListener(any(View OnClickListener class)); } @Test public void testSupports_withCorrectInstanceOfBaseNativeAd_shouldReturnTrue() throws Exception { assertTrue(twitterStaticNativeAdRenderer supports(new StaticNativeAd() {})); assertFalse(twitterStaticNativeAdRenderer supports(mock(BaseNativeAd class))); assertFalse(twitterStaticNativeAdRenderer  supports(mock(MoPubCustomEventVideoNative MoPubVideoNativeAd class))); }}package com twitter sdk android mopub;import android test AndroidTestCase;import org junit Test;import org junit runner RunWith;import org robolectric RobolectricGradleTestRunner;import org robolectric RuntimeEnvironment;import org robolectric annotation Config;@RunWith(RobolectricGradleTestRunner class)@Config(constants = BuildConfig class, sdk = 21)public class TwitterStaticNativeAdTest extends AndroidTestCase { @Test public void testStyleAttrsForDefaultTheme() { final TwitterStaticNativeAd nativeAd = new TwitterStaticNativeAd(RuntimeEnvironment application); final int expectedContainerBgColor = nativeAd getResources() getColor(R color tw__ad_light_container_bg_color); final int expectedCardBgColor = nativeAd getResources() getColor(R color tw__ad_light_card_bg_color); final int expectedPrimaryTextColor = nativeAd getResources() getColor(R color tw__ad_light_text_primary_color); final int ctaBackgroundColor = nativeAd getResources() getColor(R color tw__ad_cta_default); final int cardBorderColor = nativeAd getResources() getColor(R color tw__ad_light_card_border_color); assertEquals(expectedContainerBgColor, nativeAd containerBackgroundColor); assertEquals(expectedCardBgColor, nativeAd cardBackgroundColor); assertEquals(expectedPrimaryTextColor, nativeAd primaryTextColor); assertEquals(ctaBackgroundColor, nativeAd ctaBackgroundColor); assertEquals(cardBorderColor, nativeAd cardBorderColor); } @Test public void testStyleAttrsForDarkTheme() { final TwitterStaticNativeAd nativeAd = new TwitterStaticNativeAd(RuntimeEnvironment application, null, R style tw__ad_DarkStyle); final int expectedContainerBgColor = nativeAd getResources() getColor(R color tw__ad_dark_container_bg_color); final int expectedCardBgColor = nativeAd getResources() getColor(R color tw__ad_dark_card_bg_color); final int expectedPrimaryTextColor = nativeAd getResources() getColor(R color tw__ad_dark_text_primary_color); final int ctaBackgroundColor = nativeAd getResources() getColor(R color tw__ad_cta_default); final int cardBorderColor = nativeAd getResources() getColor(R color tw__ad_dark_card_border_color); assertEquals(expectedContainerBgColor, nativeAd containerBackgroundColor); assertEquals(expectedCardBgColor, nativeAd cardBackgroundColor); assertEquals(expectedPrimaryTextColor, nativeAd primaryTextColor); assertEquals(ctaBackgroundColor, nativeAd ctaBackgroundColor); assertEquals(cardBorderColor, nativeAd cardBorderColor); }}package com twitter sdk android unity;import com unity3d player UnityPlayer;class UnityMessage { final String data; final String method; UnityMessage(String method, String data) { this method = method; this data = data; } public static class Builder { String data = ""; String method; public Builder setData(String data) { this data = data; return this; } public Builder setMethod(String method) { this method = method; return this; } public UnityMessage build() { return new UnityMessage(method, data); } } public void send() { UnityPlayer UnitySendMessage(TwitterKit GAME_OBJECT_NAME, method, data); }}package com twitter sdk android core models;import com google gson annotations SerializedName;public class UrlEntity extends Entity {  @SerializedName("url") public final String url;  @SerializedName("expanded_url") public final String expandedUrl;  @SerializedName("display_url") public final String displayUrl; public UrlEntity(String url, String expandedUrl, String displayUrl, int start, int end) { super(start, end); this url = url; this expandedUrl = expandedUrl; this displayUrl = displayUrl; }}package com twitter sdk android core models;import com google gson annotations SerializedName;import java io Serializable;import java util List;public class User implements Serializable, Identifiable { private static final long serialVersionUID = 4663450696842173958L; public static final long INVALID_ID = -1L;  @SerializedName("contributors_enabled") public final boolean contributorsEnabled;  @SerializedName("created_at") public final String createdAt;  @SerializedName("default_profile") public final boolean defaultProfile;  @SerializedName("default_profile_image") public final boolean defaultProfileImage;  @SerializedName("description") public final String description;  @SerializedName("email") public final String email;  @SerializedName("entities") public final UserEntities entities;  @SerializedName("favourites_count") public final int favouritesCount;  @SerializedName("follow_request_sent") public final boolean followRequestSent;  @SerializedName("followers_count") public final int followersCount;  @SerializedName("friends_count") public final int friendsCount;  @SerializedName("geo_enabled") public final boolean geoEnabled;  @SerializedName("id") public final long id;  @SerializedName("id_str") public final String idStr;  @SerializedName("is_translator") public final boolean isTranslator;  @SerializedName("lang") public final String lang;  @SerializedName("listed_count") public final int listedCount;  @SerializedName("location") public final String location;  @SerializedName("name") public final String name;  @SerializedName("profile_background_color") public final String profileBackgroundColor;  @SerializedName("profile_background_image_url") public final String profileBackgroundImageUrl;  @SerializedName("profile_background_image_url_https") public final String profileBackgroundImageUrlHttps;  @SerializedName("profile_background_tile") public final boolean profileBackgroundTile;  @SerializedName("profile_banner_url") public final String profileBannerUrl;  @SerializedName("profile_image_url") public final String profileImageUrl;  @SerializedName("profile_image_url_https") public final String profileImageUrlHttps;  @SerializedName("profile_link_color") public final String profileLinkColor;  @SerializedName("profile_sidebar_border_color") public final String profileSidebarBorderColor;  @SerializedName("profile_sidebar_fill_color") public final String profileSidebarFillColor;  @SerializedName("profile_text_color") public final String profileTextColor;  @SerializedName("profile_use_background_image") public final boolean profileUseBackgroundImage;  @SerializedName("protected") public final boolean protectedUser;  @SerializedName("screen_name") public final String screenName;  @SerializedName("show_all_inline_media") public final boolean showAllInlineMedia;  @SerializedName("status") public final Tweet status;  @SerializedName("statuses_count") public final int statusesCount;  @SerializedName("time_zone") public final String timeZone;  @SerializedName("url") public final String url;  @SerializedName("utc_offset") public final int utcOffset;  @SerializedName("verified") public final boolean verified;  @SerializedName("withheld_in_countries") public final List<String> withheldInCountries;  @SerializedName("withheld_scope") public final String withheldScope; public User(boolean contributorsEnabled, String createdAt, boolean defaultProfile, boolean defaultProfileImage, String description, String emailAddress, UserEntities entities, int favouritesCount, boolean followRequestSent, int followersCount, int friendsCount, boolean geoEnabled, long id, String idStr, boolean isTranslator, String lang, int listedCount, String location, String name, String profileBackgroundColor, String profileBackgroundImageUrl, String profileBackgroundImageUrlHttps, boolean profileBackgroundTile, String profileBannerUrl, String profileImageUrl, String profileImageUrlHttps, String profileLinkColor, String profileSidebarBorderColor, String profileSidebarFillColor, String profileTextColor, boolean profileUseBackgroundImage, boolean protectedUser, String screenName, boolean showAllInlineMedia, Tweet status, int statusesCount, String timeZone, String url, int utcOffset, boolean verified, List<String> withheldInCountries, String withheldScope) { this contributorsEnabled = contributorsEnabled; this createdAt = createdAt; this defaultProfile = defaultProfile; this defaultProfileImage = defaultProfileImage; this description = description; this email = emailAddress; this entities = entities; this favouritesCount = favouritesCount; this followRequestSent = followRequestSent; this followersCount = followersCount; this friendsCount = friendsCount; this geoEnabled = geoEnabled; this id = id; this idStr = idStr; this isTranslator = isTranslator; this lang = lang; this listedCount = listedCount; this location = location; this name = name; this profileBackgroundColor = profileBackgroundColor; this profileBackgroundImageUrl = profileBackgroundImageUrl; this profileBackgroundImageUrlHttps = profileBackgroundImageUrlHttps; this profileBackgroundTile = profileBackgroundTile; this profileBannerUrl = profileBannerUrl; this profileImageUrl = profileImageUrl; this profileImageUrlHttps = profileImageUrlHttps; this profileLinkColor = profileLinkColor; this profileSidebarBorderColor = profileSidebarBorderColor; this profileSidebarFillColor = profileSidebarFillColor; this profileTextColor = profileTextColor; this profileUseBackgroundImage = profileUseBackgroundImage; this protectedUser = protectedUser; this screenName = screenName; this showAllInlineMedia = showAllInlineMedia; this status = status; this statusesCount = statusesCount; this timeZone = timeZone; this url = url; this utcOffset = utcOffset; this verified = verified; this withheldInCountries = withheldInCountries; this withheldScope = withheldScope; } @Override public long getId() { return this id; }}package com twitter sdk android core models;import java util List;public class UserBuilder { private boolean contributorsEnabled; private String createdAt; private boolean defaultProfile; private boolean defaultProfileImage; private String description; private String email; private UserEntities entities; private int favouritesCount; private boolean followRequestSent; private int followersCount; private int friendsCount; private boolean geoEnabled; private long id = User INVALID_ID; private String idStr; private boolean isTranslator; private String lang; private int listedCount; private String location; private String name; private String profileBackgroundColor; private String profileBackgroundImageUrl; private String profileBackgroundImageUrlHttps; private boolean profileBackgroundTile; private String profileBannerUrl; private String profileImageUrl; private String profileImageUrlHttps; private String profileLinkColor; private String profileSidebarBorderColor; private String profileSidebarFillColor; private String profileTextColor; private boolean profileUseBackgroundImage; private boolean protectedUser; private String screenName; private boolean showAllInlineMedia; private Tweet status; private int statusesCount; private String timeZone; private String url; private int utcOffset; private boolean verified; private List<String> withheldInCountries; private String withheldScope; public UserBuilder setContributorsEnabled(boolean contributorsEnabled) { this contributorsEnabled = contributorsEnabled; return this; } public UserBuilder setCreatedAt(String createdAt) { this createdAt = createdAt; return this; } public UserBuilder setDefaultProfile(boolean defaultProfile) { this defaultProfile = defaultProfile; return this; } public UserBuilder setDefaultProfileImage(boolean defaultProfileImage) { this defaultProfileImage = defaultProfileImage; return this; } public UserBuilder setDescription(String description) { this description = description; return this; } public UserBuilder setEmail(String email) { this email = email; return this; } public UserBuilder setEntities(UserEntities entities) { this entities = entities; return this; } public UserBuilder setFavouritesCount(int favouritesCount) { this favouritesCount = favouritesCount; return this; } public UserBuilder setFollowRequestSent(boolean followRequestSent) { this followRequestSent = followRequestSent; return this; } public UserBuilder setFollowersCount(int followersCount) { this followersCount = followersCount; return this; } public UserBuilder setFriendsCount(int friendsCount) { this friendsCount = friendsCount; return this; } public UserBuilder setGeoEnabled(boolean geoEnabled) { this geoEnabled = geoEnabled; return this; } public UserBuilder setId(long id) { this id = id; return this; } public UserBuilder setIdStr(String idStr) { this idStr = idStr; return this; } public UserBuilder setIsTranslator(boolean isTranslator) { this isTranslator = isTranslator; return this; } public UserBuilder setLang(String lang) { this lang = lang; return this; } public UserBuilder setListedCount(int listedCount) { this listedCount = listedCount; return this; } public UserBuilder setLocation(String location) { this location = location; return this; } public UserBuilder setName(String name) { this name = name; return this; } public UserBuilder setProfileBackgroundColor(String profileBackgroundColor) { this profileBackgroundColor = profileBackgroundColor; return this; } public UserBuilder setProfileBackgroundImageUrl(String profileBackgroundImageUrl) { this profileBackgroundImageUrl = profileBackgroundImageUrl; return this; } public UserBuilder setProfileBackgroundImageUrlHttps(String profileBackgroundImageUrlHttps) { this profileBackgroundImageUrlHttps = profileBackgroundImageUrlHttps; return this; } public UserBuilder setProfileBackgroundTile(boolean profileBackgroundTile) { this profileBackgroundTile = profileBackgroundTile; return this; } public UserBuilder setProfileBannerUrl(String profileBannerUrl) { this profileBannerUrl = profileBannerUrl; return this; } public UserBuilder setProfileImageUrl(String profileImageUrl) { this profileImageUrl = profileImageUrl; return this; } public UserBuilder setProfileImageUrlHttps(String profileImageUrlHttps) { this profileImageUrlHttps = profileImageUrlHttps; return this; } public UserBuilder setProfileLinkColor(String profileLinkColor) { this profileLinkColor = profileLinkColor; return this; } public UserBuilder setProfileSidebarBorderColor(String profileSidebarBorderColor) { this profileSidebarBorderColor = profileSidebarBorderColor; return this; } public UserBuilder setProfileSidebarFillColor(String profileSidebarFillColor) { this profileSidebarFillColor = profileSidebarFillColor; return this; } public UserBuilder setProfileTextColor(String profileTextColor) { this profileTextColor = profileTextColor; return this; } public UserBuilder setProfileUseBackgroundImage(boolean profileUseBackgroundImage) { this profileUseBackgroundImage = profileUseBackgroundImage; return this; } public UserBuilder setProtectedUser(boolean protectedUser) { this protectedUser = protectedUser; return this; } public UserBuilder setScreenName(String screenName) { this screenName = screenName; return this; } public UserBuilder setShowAllInlineMedia(boolean showAllInlineMedia) { this showAllInlineMedia = showAllInlineMedia; return this; } public UserBuilder setStatus(Tweet status) { this status = status; return this; } public UserBuilder setStatusesCount(int statusesCount) { this statusesCount = statusesCount; return this; } public UserBuilder setTimeZone(String timeZone) { this timeZone = timeZone; return this; } public UserBuilder setUrl(String url) { this url = url; return this; } public UserBuilder setUtcOffset(int utcOffset) { this utcOffset = utcOffset; return this; } public UserBuilder setVerified(boolean verified) { this verified = verified; return this; } public UserBuilder setWithheldInCountries(List<String> withheldInCountries) { this withheldInCountries = withheldInCountries; return this; } public UserBuilder setWithheldScope(String withheldScope) { this withheldScope = withheldScope; return this; } public User build() { return new User(contributorsEnabled, createdAt, defaultProfile, defaultProfileImage, description, email, entities, favouritesCount, followRequestSent, followersCount, friendsCount, geoEnabled, id, idStr, isTranslator, lang, listedCount, location, name, profileBackgroundColor, profileBackgroundImageUrl, profileBackgroundImageUrlHttps, profileBackgroundTile, profileBannerUrl, profileImageUrl, profileImageUrlHttps, profileLinkColor, profileSidebarBorderColor, profileSidebarFillColor, profileTextColor, profileUseBackgroundImage, protectedUser, screenName, showAllInlineMedia, status, statusesCount, timeZone, url, utcOffset, verified, withheldInCountries, withheldScope); }}package com twitter sdk android core models;import com google gson annotations SerializedName;import java util Collections;import java util List;public class UserEntities { @SerializedName("url") public final UrlEntities url; @SerializedName("description") public final UrlEntities description; public UserEntities(UrlEntities url, UrlEntities description) { this url = url; this description = description; } public static class UrlEntities { @SerializedName("urls") public final List<UrlEntity> urls; public UrlEntities(List<UrlEntity> urls) { this urls = getSafeList(urls); } private <T> List<T> getSafeList(List<T> entities) { // Entities may be null if Gson does not find object to parse  When that happens, make // sure to return an empty list  if (entities == null) { return Collections EMPTY_LIST; } else { return Collections unmodifiableList(entities); } } }}package com twitter sdk android tweetui;import com twitter sdk android core Callback;import com twitter sdk android core TwitterCore;import com twitter sdk android core models Tweet;import java util List;import retrofit2 Call;public class UserTimeline extends BaseTimeline implements Timeline<Tweet> { private static final String SCRIBE_SECTION = "user"; final Long userId; final String screenName; final Integer maxItemsPerRequest; final Boolean includeReplies; final Boolean includeRetweets; UserTimeline(TweetUi tweetUi, Long userId, String screenName, Integer maxItemsPerRequest, Boolean includeReplies, Boolean includeRetweets) { super(tweetUi); this userId = userId; this screenName = screenName; this maxItemsPerRequest = maxItemsPerRequest; // null includeReplies should default to false this includeReplies = includeReplies == null ? false : includeReplies; this includeRetweets = includeRetweets; }  @Override public void next(Long sinceId, Callback<TimelineResult<Tweet>> cb) { createUserTimelineRequest(sinceId, null) enqueue(new TweetsCallback(cb)); }  @Override public void previous(Long maxId, Callback<TimelineResult<Tweet>> cb) { // user timeline api provides results which are inclusive, decrement the maxId to get // exclusive results createUserTimelineRequest(null, decrementMaxId(maxId)) enqueue(new TweetsCallback(cb)); } @Override String getTimelineType() { return SCRIBE_SECTION; } Call<List<Tweet>> createUserTimelineRequest(final Long sinceId, final Long maxId) { return TwitterCore getInstance() getApiClient() getStatusesService() userTimeline(userId, screenName, maxItemsPerRequest, sinceId, maxId, false, !includeReplies, null, includeRetweets); }  public static class Builder { private final TweetUi tweetUi; private Long userId; private String screenName; private Integer maxItemsPerRequest = 30; private Boolean includeReplies; private Boolean includeRetweets;  public Builder() { this(TweetUi getInstance()); }  public Builder(TweetUi tweetUi) { if (tweetUi == null) { throw new IllegalArgumentException("TweetUi instance must not be null"); } this tweetUi = tweetUi; }  public Builder userId(Long userId) { this userId = userId; return this; }  public Builder screenName(String screenName) { this screenName = screenName; return this; }  public Builder maxItemsPerRequest(Integer maxItemsPerRequest) { this maxItemsPerRequest = maxItemsPerRequest; return this; }  public Builder includeReplies(Boolean includeReplies) { this includeReplies = includeReplies; return this; }  public Builder includeRetweets(Boolean includeRetweets) { this includeRetweets = includeRetweets; return this; }  public UserTimeline build() { return new UserTimeline(tweetUi, userId, screenName, maxItemsPerRequest, includeReplies, includeRetweets); } }}package com twitter sdk android core internal;import android text TextUtils;import com twitter sdk android core models User;public final class UserUtils { private UserUtils() {} // see https://dev twitter com/overview/general/user-profile-images-and-banners // see also: https://confluence twitter biz/display/PLATFORM/Image+Types+and+Sizes public enum AvatarSize { NORMAL("_normal"), BIGGER("_bigger"), MINI("_mini"), ORIGINAL("_original"), REASONABLY_SMALL("_reasonably_small"); private final String suffix; AvatarSize(String suffix) { this suffix = suffix; } String getSuffix() { return suffix; } } public static String getProfileImageUrlHttps(User user, AvatarSize size) { if (user != null && user profileImageUrlHttps != null) { final String url = user profileImageUrlHttps; if (size == null || url == null) { return url; } switch (size) { case NORMAL: case BIGGER: case MINI: case ORIGINAL: case REASONABLY_SMALL: return url  replace(AvatarSize NORMAL getSuffix(), size getSuffix()); default: return url; } } else { return null; } }  public static CharSequence formatScreenName(CharSequence screenName) { if (TextUtils isEmpty(screenName)) { return ""; } if (screenName charAt(0) == '@') { return screenName; } return "@" + screenName; }}package com twitter sdk android core models;import com google gson annotations SerializedName;public class UserValue { @SerializedName("id_str") public final String idStr; public UserValue(String idStr) { this idStr = idStr; }}package com twitter sdk android tweetui;import com twitter sdk android core models Tweet;import java util ArrayList;import java util HashMap;import java util List;final class Utils { private Utils() {} static Long numberOrDefault(String candidate, long defaultLong) { try { return Long parseLong(candidate); } catch (NumberFormatException e) { return defaultLong; } } static String stringOrEmpty(String candidate) { return stringOrDefault(candidate, ""); } static String stringOrDefault(String candidate, String defaultString) { return (candidate != null) ? candidate : defaultString; } static CharSequence charSeqOrEmpty(CharSequence candidate) { return charSeqOrDefault(candidate, ""); } static CharSequence charSeqOrDefault(CharSequence candidate, CharSequence defaultSequence) { return (candidate != null) ? candidate : defaultSequence; }  static List<Tweet> orderTweets(List<Long> tweetIds, List<Tweet> tweets) { final HashMap<Long, Tweet> idToTweet = new HashMap<>(); final ArrayList<Tweet> ordered = new ArrayList<>(); for (Tweet tweet: tweets) { idToTweet put(tweet id, tweet); } for (Long id: tweetIds) { if (idToTweet containsKey(id)) { ordered add(idToTweet get(id)); } } return ordered; }}package com twitter sdk android tweetui internal;import android annotation SuppressLint;import android content Context;import android os Handler;import android os Message;import android util AttributeSet;import android view LayoutInflater;import android view View;import android widget FrameLayout;import android widget ImageButton;import android widget SeekBar;import android widget TextView;import com twitter sdk android tweetui R;public class VideoControlView extends FrameLayout { static final long PROGRESS_BAR_TICKS = 1000L; static final int FADE_DURATION_MS = 150; private static final int SHOW_PROGRESS_MSG = 1001; MediaPlayerControl player; ImageButton stateControl; TextView currentTime; TextView duration; SeekBar seekBar; public VideoControlView(Context context) { super(context); } public VideoControlView(Context context, AttributeSet attrs) { super(context, attrs); } public VideoControlView(Context context, AttributeSet attrs, int defStyleAttr) { super(context, attrs, defStyleAttr); } @SuppressLint("HandlerLeak") private final Handler handler = new Handler() { @Override public void handleMessage(Message msg) { if (msg what == SHOW_PROGRESS_MSG) { if (player == null) { return; } updateProgress(); updateStateControl(); if (isShowing() && player isPlaying()) { msg = obtainMessage(SHOW_PROGRESS_MSG); sendMessageDelayed(msg, 500); } } } }; public void setMediaPlayer(MediaPlayerControl player) { this player = player; } @Override protected void onFinishInflate() { super onFinishInflate(); initSubviews(); } void initSubviews() { final LayoutInflater inflater = (LayoutInflater) getContext()  getSystemService(Context LAYOUT_INFLATER_SERVICE); inflater inflate(R layout tw__video_control, this); stateControl = (ImageButton) findViewById(R id tw__state_control); currentTime = (TextView) findViewById(R id tw__current_time); duration = (TextView) findViewById(R id tw__duration); seekBar = (SeekBar) findViewById(R id tw__progress); seekBar setMax((int) PROGRESS_BAR_TICKS); seekBar setOnSeekBarChangeListener(createProgressChangeListener()); stateControl setOnClickListener(createStateControlClickListener()); setDuration(0); setCurrentTime(0); setProgress(0, 0, 0); } OnClickListener createStateControlClickListener() { return new OnClickListener() { @Override public void onClick(View view) { if (player isPlaying()) { player pause(); } else { player start(); } show(); } }; } SeekBar OnSeekBarChangeListener createProgressChangeListener() { return new SeekBar OnSeekBarChangeListener() { @Override public void onProgressChanged(SeekBar seekBar, int progress, boolean fromUser) { if (!fromUser) { return; } final int duration = player getDuration(); final long position = (duration * progress) / PROGRESS_BAR_TICKS; player seekTo((int) position); setCurrentTime((int) position); } @Override public void onStartTrackingTouch(SeekBar seekBar) { handler removeMessages(SHOW_PROGRESS_MSG); } @Override public void onStopTrackingTouch(SeekBar seekBar) { handler sendEmptyMessage(SHOW_PROGRESS_MSG); } }; } void updateProgress() { final int duration = player getDuration(); final int currentTime = player getCurrentPosition(); final int bufferPercentage = player getBufferPercentage(); setDuration(duration); setCurrentTime(currentTime); setProgress(currentTime, duration, bufferPercentage); } void setDuration(int durationMillis) { duration setText(MediaTimeUtils getPlaybackTime(durationMillis)); } void setCurrentTime(int currentTimeMillis) { currentTime setText(MediaTimeUtils getPlaybackTime(currentTimeMillis)); } void setProgress(int currentTimeMillis, int durationMillis, int bufferPercentage) { final long pos = durationMillis > 0 ? PROGRESS_BAR_TICKS * currentTimeMillis / durationMillis : 0; seekBar setProgress((int) pos); seekBar setSecondaryProgress(bufferPercentage * 10); } void updateStateControl() { if (player isPlaying()) { setPauseDrawable(); } else if (player getCurrentPosition() > Math max(player getDuration() - 500, 0)) { setReplayDrawable(); } else { setPlayDrawable(); } } void setPlayDrawable() { stateControl setImageResource(R drawable tw__video_play_btn); stateControl setContentDescription(getContext() getString(R string tw__play)); } void setPauseDrawable() { stateControl setImageResource(R drawable tw__video_pause_btn); stateControl setContentDescription(getContext() getString(R string tw__pause)); } void setReplayDrawable() { stateControl setImageResource(R drawable tw__video_replay_btn); stateControl setContentDescription(getContext() getString(R string tw__replay)); } void hide() { handler removeMessages(SHOW_PROGRESS_MSG); AnimationUtils fadeOut(this, FADE_DURATION_MS); } void show() { handler sendEmptyMessage(SHOW_PROGRESS_MSG); AnimationUtils fadeIn(this, FADE_DURATION_MS); } public boolean isShowing() { return getVisibility() == View VISIBLE; } public void update() { handler sendEmptyMessage(SHOW_PROGRESS_MSG); } public interface MediaPlayerControl { void start(); void pause(); int getDuration(); int getCurrentPosition(); void seekTo(int position); boolean isPlaying(); int getBufferPercentage(); }}package com twitter sdk android core models;import com google gson annotations SerializedName;import java io Serializable;import java util List;public class VideoInfo implements Serializable {  @SerializedName("aspect_ratio") public final List<Integer> aspectRatio;  @SerializedName("duration_millis") public final long durationMillis;  @SerializedName("variants") public final List<Variant> variants; public VideoInfo(List<Integer> aspectRatio, long durationMillis, List<Variant> variants) { this aspectRatio = aspectRatio; this durationMillis = durationMillis; this variants = variants; } public static class Variant implements Serializable { @SerializedName("bitrate") public final long bitrate; @SerializedName("content_type") public final String contentType; @SerializedName("url") public final String url; public Variant(long bitrate, String contentType, String url) { this bitrate = bitrate; this contentType = contentType; this url = url; } }}package com twitter sdk android tweetui;import com twitter sdk android core internal scribe ScribeItem;public interface VideoScribeClient { void impression(ScribeItem card); void play(ScribeItem card);}package com twitter sdk android tweetui;import com twitter sdk android core internal scribe EventNamespace;import com twitter sdk android core internal scribe ScribeItem;import com twitter sdk android core internal scribe SyndicationClientEvent;import java util ArrayList;import java util List;class VideoScribeClientImpl implements VideoScribeClient { static final String TFW_CLIENT_EVENT_PAGE = "android"; static final String TFW_CLIENT_EVENT_SECTION = "video"; static final String SCRIBE_IMPRESSION_ACTION = "impression"; static final String SCRIBE_PLAY_ACTION = "play"; final TweetUi tweetUi; VideoScribeClientImpl(TweetUi tweetUi) { this tweetUi = tweetUi; } @Override public void impression(ScribeItem scribeItem) { final List<ScribeItem> items = new ArrayList<>(); items add(scribeItem); tweetUi scribe(getTfwImpressionNamespace(), items); } @Override public void play(ScribeItem scribeItem) { final List<ScribeItem> items = new ArrayList<>(); items add(scribeItem); tweetUi scribe(getTfwPlayNamespace(), items); } static EventNamespace getTfwImpressionNamespace() { return new EventNamespace Builder()  setClient(SyndicationClientEvent CLIENT_NAME)  setPage(TFW_CLIENT_EVENT_PAGE)  setSection(TFW_CLIENT_EVENT_SECTION)  setAction(SCRIBE_IMPRESSION_ACTION)  builder(); } static EventNamespace getTfwPlayNamespace() { return new EventNamespace Builder()  setClient(SyndicationClientEvent CLIENT_NAME)  setPage(TFW_CLIENT_EVENT_PAGE)  setSection(TFW_CLIENT_EVENT_SECTION)  setAction(SCRIBE_PLAY_ACTION)  builder(); }}package com twitter sdk android tweetui internal;import android content Context;import android media AudioManager;import android media MediaPlayer;import android media MediaPlayer OnCompletionListener;import android media MediaPlayer OnErrorListener;import android media MediaPlayer OnInfoListener;import android net Uri;import android util AttributeSet;import android util Log;import android view KeyEvent;import android view MotionEvent;import android view SurfaceHolder;import android view SurfaceView;public class VideoView extends SurfaceView implements VideoControlView MediaPlayerControl { private String TAG = "VideoView"; // settable by the client private Uri mUri; // all possible internal states private static final int STATE_ERROR = -1; private static final int STATE_IDLE = 0; private static final int STATE_PREPARING = 1; private static final int STATE_PREPARED = 2; private static final int STATE_PLAYING = 3; private static final int STATE_PAUSED = 4; private static final int STATE_PLAYBACK_COMPLETED = 5; // mCurrentState is a VideoView object's current state  // mTargetState is the state that a method caller intends to reach  // For instance, regardless the VideoView object's current state, // calling pause() intends to bring the object to a target state // of STATE_PAUSED  private int mCurrentState = STATE_IDLE; private int mTargetState = STATE_IDLE; // All the stuff we need for playing and showing a video private SurfaceHolder mSurfaceHolder = null; private MediaPlayer mMediaPlayer = null; private int mAudioSession; private int mVideoWidth; private int mVideoHeight; private int mSurfaceWidth; private int mSurfaceHeight; private VideoControlView mMediaController; private OnCompletionListener mOnCompletionListener; private MediaPlayer OnPreparedListener mOnPreparedListener; private int mCurrentBufferPercentage; private OnErrorListener mOnErrorListener; private OnInfoListener mOnInfoListener; private int mSeekWhenPrepared; // recording the seek position while preparing private boolean mLooping; public VideoView(Context context) { super(context); initVideoView(); } public VideoView(Context context, AttributeSet attrs) { this(context, attrs, 0); } public VideoView(Context context, AttributeSet attrs, int defStyleAttr) { super(context, attrs, defStyleAttr); initVideoView(); } @Override protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) { //Log i("@@@@", "onMeasure(" + MeasureSpec toString(widthMeasureSpec) + ", " // + MeasureSpec toString(heightMeasureSpec) + ")"); int width = getDefaultSize(mVideoWidth, widthMeasureSpec); int height = getDefaultSize(mVideoHeight, heightMeasureSpec); if (mVideoWidth > 0 && mVideoHeight > 0) { int widthSpecMode = MeasureSpec getMode(widthMeasureSpec); int widthSpecSize = MeasureSpec getSize(widthMeasureSpec); int heightSpecMode = MeasureSpec getMode(heightMeasureSpec); int heightSpecSize = MeasureSpec getSize(heightMeasureSpec); if (widthSpecMode == MeasureSpec EXACTLY && heightSpecMode == MeasureSpec EXACTLY) { // the size is fixed width = widthSpecSize; height = heightSpecSize; // for compatibility, we adjust size based on aspect ratio if (mVideoWidth * height < width * mVideoHeight) { //Log i("@@@", "image too wide, correcting"); width = height * mVideoWidth / mVideoHeight; } else if (mVideoWidth * height > width * mVideoHeight) { //Log i("@@@", "image too tall, correcting"); height = width * mVideoHeight / mVideoWidth; } } else if (widthSpecMode == MeasureSpec EXACTLY) { // only the width is fixed, adjust the height to match aspect ratio if possible width = widthSpecSize; height = width * mVideoHeight / mVideoWidth; if (heightSpecMode == MeasureSpec AT_MOST && height > heightSpecSize) { // couldn't match aspect ratio within the constraints height = heightSpecSize; } } else if (heightSpecMode == MeasureSpec EXACTLY) { // only the height is fixed, adjust the width to match aspect ratio if possible height = heightSpecSize; width = height * mVideoWidth / mVideoHeight; if (widthSpecMode == MeasureSpec AT_MOST && width > widthSpecSize) { // couldn't match aspect ratio within the constraints width = widthSpecSize; } } else { // neither the width nor the height are fixed, try to use actual video size width = mVideoWidth; height = mVideoHeight; if (heightSpecMode == MeasureSpec AT_MOST && height > heightSpecSize) { // too tall, decrease both width and height height = heightSpecSize; width = height * mVideoWidth / mVideoHeight; } if (widthSpecMode == MeasureSpec AT_MOST && width > widthSpecSize) { // too wide, decrease both width and height width = widthSpecSize; height = width * mVideoHeight / mVideoWidth; } } } setMeasuredDimension(width, height); } private void initVideoView() { mVideoWidth = 0; mVideoHeight = 0; getHolder() addCallback(mSHCallback); getHolder() setType(SurfaceHolder SURFACE_TYPE_PUSH_BUFFERS); setFocusable(true); setFocusableInTouchMode(true); requestFocus(); mCurrentState = STATE_IDLE; mTargetState = STATE_IDLE; }  public void setVideoURI(Uri uri, boolean looping) { mUri = uri; mLooping = looping; mSeekWhenPrepared = 0; openVideo(); requestLayout(); invalidate(); } public void stopPlayback() { if (mMediaPlayer != null) { mMediaPlayer stop(); mMediaPlayer release(); mMediaPlayer = null; mCurrentState = STATE_IDLE; mTargetState = STATE_IDLE; } } private void openVideo() { if (mUri == null || mSurfaceHolder == null) { // not ready for playback just yet, will try again later return; } // we shouldn't clear the target state, because somebody might have // called start() previously release(false); try { mMediaPlayer = new MediaPlayer(); if (mAudioSession != 0) { mMediaPlayer setAudioSessionId(mAudioSession); } else { mAudioSession = mMediaPlayer getAudioSessionId(); } mMediaPlayer setOnPreparedListener(mPreparedListener); mMediaPlayer setOnVideoSizeChangedListener(mSizeChangedListener); mMediaPlayer setOnCompletionListener(mCompletionListener); mMediaPlayer setOnErrorListener(mErrorListener); mMediaPlayer setOnInfoListener(mInfoListener); mMediaPlayer setOnBufferingUpdateListener(mBufferingUpdateListener); mCurrentBufferPercentage = 0; mMediaPlayer setLooping(mLooping); mMediaPlayer setDataSource(getContext(), mUri); mMediaPlayer setDisplay(mSurfaceHolder); mMediaPlayer setAudioStreamType(AudioManager STREAM_MUSIC); mMediaPlayer setScreenOnWhilePlaying(true); mMediaPlayer prepareAsync(); // we don't set the target state here either, but preserve the // target state that was there before  mCurrentState = STATE_PREPARING; attachMediaController(); } catch (Exception ex) { Log w(TAG, "Unable to open content: " + mUri, ex); mCurrentState = STATE_ERROR; mTargetState = STATE_ERROR; mErrorListener onError(mMediaPlayer, MediaPlayer MEDIA_ERROR_UNKNOWN, 0); } } public void setMediaController(VideoControlView controller) { if (mMediaController != null) { mMediaController hide(); } mMediaController = controller; attachMediaController(); } private void attachMediaController() { if (mMediaPlayer != null && mMediaController != null) { mMediaController setMediaPlayer(this); mMediaController setEnabled(isInPlaybackState()); } } MediaPlayer OnVideoSizeChangedListener mSizeChangedListener = new MediaPlayer OnVideoSizeChangedListener() { public void onVideoSizeChanged(MediaPlayer mp, int width, int height) { mVideoWidth = mp getVideoWidth(); mVideoHeight = mp getVideoHeight(); if (mVideoWidth != 0 && mVideoHeight != 0) { getHolder() setFixedSize(mVideoWidth, mVideoHeight); requestLayout(); } } }; MediaPlayer OnPreparedListener mPreparedListener = new MediaPlayer OnPreparedListener() { public void onPrepared(MediaPlayer mp) { mCurrentState = STATE_PREPARED; if (mOnPreparedListener != null) { mOnPreparedListener onPrepared(mMediaPlayer); } if (mMediaController != null) { mMediaController setEnabled(true); } mVideoWidth = mp getVideoWidth(); mVideoHeight = mp getVideoHeight(); int seekToPosition = mSeekWhenPrepared; // mSeekWhenPrepared may be changed after // seekTo() call if (seekToPosition != 0) { seekTo(seekToPosition); } if (mVideoWidth != 0 && mVideoHeight != 0) { //Log i("@@@@", "video size: " + mVideoWidth +"/"+ mVideoHeight); getHolder() setFixedSize(mVideoWidth, mVideoHeight); if (mSurfaceWidth == mVideoWidth && mSurfaceHeight == mVideoHeight) { // We didn't actually change the size (it was already at the size // we need), so we won't get a "surface changed" callback, so // start the video here instead of in the callback  if (mTargetState == STATE_PLAYING) { start(); if (mMediaController != null) { mMediaController show(); } } else if (!isPlaying() && (seekToPosition != 0 || getCurrentPosition() > 0)) { if (mMediaController != null) { // Show the media controls when we're paused into a video and make // 'em stick  mMediaController show(); } } } } else { // We don't know the video size yet, but should start anyway  // The video size might be reported to us later  if (mTargetState == STATE_PLAYING) { start(); } } } }; private MediaPlayer OnCompletionListener mCompletionListener = new MediaPlayer OnCompletionListener() { public void onCompletion(MediaPlayer mp) { mCurrentState = STATE_PLAYBACK_COMPLETED; mTargetState = STATE_PLAYBACK_COMPLETED; if (mOnCompletionListener != null) { mOnCompletionListener onCompletion(mMediaPlayer); } } }; private MediaPlayer OnInfoListener mInfoListener = new MediaPlayer OnInfoListener() { public boolean onInfo(MediaPlayer mp, int arg1, int arg2) { if (mOnInfoListener != null) { mOnInfoListener onInfo(mp, arg1, arg2); } return true; } }; private MediaPlayer OnErrorListener mErrorListener = new MediaPlayer OnErrorListener() { public boolean onError(MediaPlayer mp, int framework_err, int impl_err) { Log d(TAG, "Error: " + framework_err + "," + impl_err); mCurrentState = STATE_ERROR; mTargetState = STATE_ERROR; if (mMediaController != null) { mMediaController hide(); }  if (mOnErrorListener != null) { if (mOnErrorListener onError(mMediaPlayer, framework_err, impl_err)) { return true; } } return true; } }; private MediaPlayer OnBufferingUpdateListener mBufferingUpdateListener = new MediaPlayer OnBufferingUpdateListener() { public void onBufferingUpdate(MediaPlayer mp, int percent) { mCurrentBufferPercentage = percent; } };  public void setOnPreparedListener(MediaPlayer OnPreparedListener l) { mOnPreparedListener = l; }  public void setOnCompletionListener(OnCompletionListener l) { mOnCompletionListener = l; }  public void setOnErrorListener(OnErrorListener l) { mOnErrorListener = l; }  public void setOnInfoListener(OnInfoListener l) { mOnInfoListener = l; } SurfaceHolder Callback mSHCallback = new SurfaceHolder Callback() { public void surfaceChanged(SurfaceHolder holder, int format, int w, int h) { mSurfaceWidth = w; mSurfaceHeight = h; boolean isValidState = (mTargetState == STATE_PLAYING); boolean hasValidSize = (mVideoWidth == w && mVideoHeight == h); if (mMediaPlayer != null && isValidState && hasValidSize) { if (mSeekWhenPrepared != 0) { seekTo(mSeekWhenPrepared); } start(); if (mMediaController != null) { mMediaController show(); } } } public void surfaceCreated(SurfaceHolder holder) { mSurfaceHolder = holder; openVideo(); } public void surfaceDestroyed(SurfaceHolder holder) { // after we return from this we can't use the surface any more mSurfaceHolder = null; if (mMediaController != null) mMediaController hide(); release(true); } };  private void release(boolean cleartargetstate) { if (mMediaPlayer != null) { mMediaPlayer reset(); mMediaPlayer release(); mMediaPlayer = null; mCurrentState = STATE_IDLE; if (cleartargetstate) { mTargetState = STATE_IDLE; } } } @Override public boolean onTouchEvent(MotionEvent ev) { if (isInPlaybackState() && mMediaController != null) { toggleMediaControlsVisiblity(); } return super onTouchEvent(ev); } @Override public boolean onTrackballEvent(MotionEvent ev) { if (isInPlaybackState() && mMediaController != null) { toggleMediaControlsVisiblity(); } return super onTrackballEvent(ev); } @Override public boolean onKeyDown(int keyCode, KeyEvent event) { boolean isKeyCodeSupported = keyCode != KeyEvent KEYCODE_BACK && keyCode != KeyEvent KEYCODE_VOLUME_UP && keyCode != KeyEvent KEYCODE_VOLUME_DOWN && keyCode != KeyEvent KEYCODE_MENU && keyCode != KeyEvent KEYCODE_CALL && keyCode != KeyEvent KEYCODE_ENDCALL; if (isInPlaybackState() && isKeyCodeSupported && mMediaController != null) { if (keyCode == KeyEvent KEYCODE_HEADSETHOOK || keyCode == KeyEvent KEYCODE_MEDIA_PLAY_PAUSE) { if (mMediaPlayer isPlaying()) { pause(); mMediaController show(); } else { start(); mMediaController hide(); } return true; } else if (keyCode == KeyEvent KEYCODE_MEDIA_PLAY) { if (!mMediaPlayer isPlaying()) { start(); mMediaController hide(); } return true; } else if (keyCode == KeyEvent KEYCODE_MEDIA_STOP || keyCode == KeyEvent KEYCODE_MEDIA_PAUSE) { if (mMediaPlayer isPlaying()) { pause(); mMediaController show(); } return true; } else { toggleMediaControlsVisiblity(); } } return super onKeyDown(keyCode, event); } private void toggleMediaControlsVisiblity() { if (mMediaController isShowing()) { mMediaController hide(); } else { mMediaController show(); } } @Override public void start() { if (isInPlaybackState()) { mMediaPlayer start(); mCurrentState = STATE_PLAYING; } mTargetState = STATE_PLAYING; } @Override public void pause() { if (isInPlaybackState()) { if (mMediaPlayer isPlaying()) { mMediaPlayer pause(); mCurrentState = STATE_PAUSED; } } mTargetState = STATE_PAUSED; } @Override public int getDuration() { if (isInPlaybackState()) { return mMediaPlayer getDuration(); } return -1; } @Override public int getCurrentPosition() { if (isInPlaybackState()) { return mMediaPlayer getCurrentPosition(); } return 0; } @Override public void seekTo(int msec) { if (isInPlaybackState()) { mMediaPlayer seekTo(msec); mSeekWhenPrepared = 0; } else { mSeekWhenPrepared = msec; } } @Override public boolean isPlaying() { return isInPlaybackState() && mMediaPlayer isPlaying(); } @Override public int getBufferPercentage() { if (mMediaPlayer != null) { return mCurrentBufferPercentage; } return 0; } private boolean isInPlaybackState() { return (mMediaPlayer != null && mCurrentState != STATE_ERROR && mCurrentState != STATE_IDLE && mCurrentState != STATE_PREPARING); }}package com twitter sdk android core internal;import com twitter sdk android core models Card;import com twitter sdk android core models ImageValue;import com twitter sdk android core models UserValue;public class VineCardUtils { public static final String PLAYER_CARD = "player"; public static final String VINE_CARD = "vine"; public static final long VINE_USER_ID = 586671909; private VineCardUtils() {} public static boolean isVine(Card card) { return (PLAYER_CARD equals(card name) || VINE_CARD equals(card name)) && isVineUser(card); } private static boolean isVineUser(Card card) { final UserValue user = card bindingValues get("site"); try { if (user != null && Long parseLong(user idStr) == VINE_USER_ID) { return true; } } catch (NumberFormatException ex) { return false; } return false; } public static String getPublisherId(Card card) { final UserValue user_value = card bindingValues get("site"); return user_value idStr; } public static String getStreamUrl(Card card) { return card bindingValues get("player_stream_url"); } public static String getCallToActionUrl(Card card) { return card bindingValues get("card_url"); } public static ImageValue getImageValue(Card card) { return card bindingValues get("player_image"); }}package com twitter sdk android core identity;class WebViewException extends Exception { private static final long serialVersionUID = -7397331487240298819L; private final int errorCode; private final String failingUrl; public WebViewException(int errorCode, String description, String failingUrl) { super(description); this errorCode = errorCode; this failingUrl = failingUrl; } public int getErrorCode() { return errorCode; } public String getDescription() { return getMessage(); } public String getFailingUrl() { return failingUrl; }}